









            (function() {
                var jasmineEnv = jasmine.getEnv();
                jasmineEnv.updateInterval = 1000;

                var htmlReporter = new jasmine.HtmlReporter();

                jasmineEnv.addReporter(htmlReporter);

                jasmineEnv.specFilter = function(spec) {
                    return htmlReporter.specFilter(spec);
                };

                var currentWindowOnload = window.onload;

                window.onload = function() {
                    if (currentWindowOnload) {
                        currentWindowOnload();
                    }
                    execJasmine();
                };

                function execJasmine() {
                    jasmineEnv.execute();
                }
            })();
        
















// Generated by CoffeeScript 1.3.3
(function() {

  describe('Application', function() {
    describe('Global Constants', function() {
      it('has env.api_server', function() {
        return expect(env.api_server).toEqual("https://apidocci.com/");
      });
      it('has env.campaign_click_url', function() {
        return expect(env.campaign_click_url).toEqual("https://apidocci.com/api/v1/gateway/click");
      });
      it('has env.campaign_convert_url', function() {
        return expect(env.campaign_convert_url).toEqual("https://apidocci.com/api/v1/");
      });
      it('has env.lazy_script_path', function() {
        return expect(env.lazy_script_path).toEqual("/lazy_loaded.js");
      });
      it('has env.device_status', function() {
        return expect(env.device_status).toEqual(2);
      });
      it('has env.docci_mail_url', function() {
        return expect(env.docci_mail_url).toEqual("http://bit.ly/PWLN0g");
      });
      it('has env.docci_twtr_url', function() {
        return expect(env.docci_twtr_url).toEqual("http://bit.ly/PWLN0g");
      });
      it('has env.docci_fb_url', function() {
        return expect(env.docci_fb_url).toEqual("http://bit.ly/PWLN0g");
      });
      it('has env.docci_url', function() {
        return expect(env.docci_url).toEqual("http://bit.ly/PWLN0g");
      });
      it('has env.fb_api_id', function() {
        return expect(env.fb_api_id).toEqual("278534195593472");
      });
      return it('has env.app_version', function() {
        return expect(env.app_version).toEqual("1.5.0");
      });
    });
    describe('create_poll_submit', function() {
      return it('hogehoge', function() {
        return create_poll_submit();
      });
    });
    describe('Facebook', function() {
      return it('creates an object', function() {
        var fb;
        return fb = new Facebook;
      });
    });
    it('bind init function to DeviceReady', function() {});
    it('bind init function to DeviceReady', function() {});
    return describe('DocciDb', function() {
      return it('creates an object', function() {
        var docci_db;
        return docci_db = new DocciDb;
      });
    });
  });

}).call(this);


/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
describe('app', function() {
    describe('initialize', function() {
        it('should bind deviceready', function() {
            runs(function() {
                spyOn(app, 'onDeviceReady');
                app.initialize();
                helper.trigger(window.document, 'deviceready');
            });

            waitsFor(function() {
                return (app.onDeviceReady.calls.length > 0);
            }, 'onDeviceReady should be called once', 500);

            runs(function() {
                expect(app.onDeviceReady).toHaveBeenCalled();
            });
        });
    });

    describe('onDeviceReady', function() {
        it('should report that it fired', function() {
            spyOn(app, 'receivedEvent');
            app.onDeviceReady();
            expect(app.receivedEvent).toHaveBeenCalledWith('deviceready');
        });
    });

    describe('receivedEvent', function() {
        beforeEach(function() {
            var el = document.getElementById('stage');
            el.innerHTML = ['<div id="deviceready">',
                            '    <p class="event listening">Listening</p>',
                            '    <p class="event received">Received</p>',
                            '</div>'].join('\n');
        });

        it('should hide the listening element', function() {
            app.receivedEvent('deviceready');
            var displayStyle = helper.getComputedStyle('#deviceready .listening', 'display');
            expect(displayStyle).toEqual('none');
        });

        it('should show the received element', function() {
            app.receivedEvent('deviceready');
            var displayStyle = helper.getComputedStyle('#deviceready .received', 'display');
            expect(displayStyle).toEqual('block');
        });
    });
});


describe('application.android.js', function() {
  describe('this.env', function() {
    it("should return 2 for device_status when android", function(){

      spyOn(app_env, 'this.env');
      expect(app_env).toEqual(2);
      expect(this.env.device_status).toEqual(2);
    });
  });

  describe('initialize', function() {
    it('should bind deviceready', function() {
      runs(function() {
        spyOn(app, 'onDeviceReady');
        app.initialize();
        helper.trigger(window.document, 'deviceready');
      });

      waitsFor(function() {
        return (app.onDeviceReady.calls.length > 0);
      }, 'onDeviceReady should be called once', 500);

      runs(function() {
        expect(app.onDeviceReady).toHaveBeenCalled();
      });
    });
  });

  describe('onDeviceReady', function() {
    it('should report that it fired', function() {
      spyOn(app, 'receivedEvent');
      app.onDeviceReady();
      expect(app.receivedEvent).toHaveBeenCalledWith('deviceready');
    });
  });

  describe('receivedEvent', function() {
    beforeEach(function() {
      var el = document.getElementById('stage');
      el.innerHTML = ['<div id="deviceready">',
        '    <p class="event listening">Listening</p>',
        '    <p class="event received">Received</p>',
        '</div>'].join('\n');
    });

    it('should hide the listening element', function() {
      app.receivedEvent('deviceready');
      var displayStyle = helper.getComputedStyle('#deviceready .listening', 'display');
      expect(displayStyle).toEqual('none');
    });

    it('should show the received element', function() {
      app.receivedEvent('deviceready');
      var displayStyle = helper.getComputedStyle('#deviceready .received', 'display');
      expect(displayStyle).toEqual('block');
    });
  });
});


// Generated by CoffeeScript 1.3.3
(function() {

  this.DocciNativePlugin = {
    canOpenUrl: function(success, fail, app_ids) {
      console.log("DocciNativePlugin canOpenUrl called, url => " + app_ids);
      return cordova.exec(success, fail, "DocciNativePlugin", "canOpenUrl", app_ids);
    }
  };

  this.canOpenUrl = function(app_ids, callback) {
    return DocciNativePlugin.canOpenUrl(function(results) {
      console.log("success, res => " + results);
      if (callback != null) {
        return callback(app_ids, results);
      }
    }, function(results) {
      console.log("fail, res => " + results);
      if (callback != null) {
        return callback(app_ids, results);
      }
    }, app_ids);
  };

  this.openActivity = function(url) {
    console.log("openActivity:url => " + url);
    return webintent.startActivity({
      action: "android.intent.action.VIEW",
      url: url
    }, function() {
      return console.log('success');
    }, function() {
      return console.log('failed');
    });
  };

}).call(this);


// Generated by CoffeeScript 1.3.3
(function() {

  this.buildUrl = function(url, params) {
    var k, q, queries, v, _ref;
    for (k in params) {
      v = params[k];
      queries = "" + k + "=" + (encodeURIComponent(v));
    }
    q = (_ref = queries.length > 0) != null ? _ref : {
      '?': ''
    };
    return [url, q, queries.join('&')].join('');
  };

}).call(this);


// Generated by CoffeeScript 1.3.3
(function() {

  $(document).bind("mobileinit", function() {
    $.support.cors = true;
    $.mobile.ajaxEnabled = false;
    $.mobile.allowCrossDomainPages = true;
    $.mobile.defaultPageTransition = "none";
    return $.mobile.pushStateEnabled = false;
  });

  $("body").ajaxStart(function() {
    return $.mobile.showPageLoadingMsg('a', '読込中...', true);
  });

  $("body").ajaxStop(function() {
    return $.mobile.hidePageLoadingMsg();
  });

}).call(this);


// Generated by CoffeeScript 1.3.3
(function() {
  var AjaxCallback, AndroidButtonControl, CampaignBrowser, DocciDb, Facebook, Twitter, account_settings, ajaxCall, answered_poll_list_view, auto_login, buildCouponForm, campaign_view_answered_show, create_poll_confirm_submit, create_poll_submit, detailed_result_show, exchange_form_builder, exchange_menu_detail_html_builder, exchange_point_view, getUrlVars, get_current_point, get_questions, handle_convert_action, header_menu, hide_tabbar, html_builder_for_candidates, html_builder_for_detailed_results, html_builder_for_polls, html_builder_for_single_poll, init_global_variables, load_javascript, onDeviceReady, point_balance_show_api, poll_list_view, poll_view, pollsfix, post_poll, show_detailed_result, sqls, update_password;

  init_global_variables = function() {
    window.eventFunction = function(evt, event_name, func) {
      logger(evt);
      logger(event_name);
      return func();
    };
    window.logger = function(msg) {
      return console.log(msg);
    };
    return window.env = {
      api_server: 'https://apidocci.com/',
      campaign_click_url: 'https://apidocci.com/api/v1/gateway/click',
      campaign_convert_url: 'https://apidocci.com/api/v1/',
      lazy_script_path: '/lazy_loaded.js',
      device_status: 2,
      device_name: 'Android',
      docci_mail_url: 'http://bit.ly/PWLN0g',
      docci_twtr_url: 'http://bit.ly/PWLN0g',
      docci_fb_url: 'http://bit.ly/PWLN0g',
      docci_url: 'http://bit.ly/PWLN0g',
      fb_api_id: '278534195593472',
      app_version: '1.5.2'
    };
  };

  $(document).bind("pageshow", function(event, data) {
    var hash;
    data.prevPage.find(".dyn_element").text('');
    try {
      hash = location.hash;
      if (hash) {

      } else {

      }
    } catch (e) {
      return false;
    }
  });

  header_menu = '\
<div class="header_menu">\
  <div class="selected">\
    <img class="poll_list_view_header_button" src="./img/header_menu_1_2.png" />\
  </div>\
  <div>\
    <img class="answered_poll_list_view_header_button" src="./img/header_menu_2_1.png" />\
  </div>\
  <div>\
    <img class="mypage_header_button" src="./img/header_menu_3_1.png" />\
  </div>\
  <div>\
    <img class="settings_header_button" src="./img/header_menu_4_1.png" />\
  </div>\
</div>';

  $('.android_header_menu').html(header_menu);

  hide_tabbar = function() {
    return false;
  };

  sqls = {
    poll: {
      all: 'SELECT * FROM polls',
      find: 'SELECT * FROM polls WHERE poll_id = ?',
      "delete": 'DELETE FROM polls WHERE poll_id = ?',
      by_status: 'SELECT * FROM polls WHERE status = ?',
      update_status: "UPDATE polls SET status = ? WHERE poll_id = ?"
    },
    candidate: {
      all: 'SELECT * FROM candidates',
      find: 'SELECT * FROM candidates WHERE candidate_id = ?',
      by_poll: 'SELECT * FROM candidates WHERE poll_id = ?'
    },
    campaign: {
      all: 'SELECT * FROM campaigns',
      find: 'SELECT * FROM campaigns WHERE campaign_id = ?'
    }
  };

  this.pex_menu = {
    amazon_1000: {
      exchange_email: {
        id: 'pex_application_email',
        placeholder: 'メールアドレス',
        name: 'user[exchange_email]',
        type: 'email',
        label: 'お届け先メールアドレス'
      }
    },
    amazon_3000: {
      exchange_email: {
        id: 'pex_application_email',
        placeholder: 'メールアドレス',
        name: 'user[exchange_email]',
        type: 'email',
        label: 'お届け先メールアドレス'
      }
    },
    netprice: {
      exchange_email: {
        id: 'pex_application_email',
        placeholder: 'メールアドレス',
        name: 'user[exchange_email]',
        type: 'email',
        label: 'お届け先メールアドレス'
      }
    },
    pex_500: {
      exchange_email: {
        id: 'pex_application_email',
        placeholder: 'メールアドレス',
        name: 'user[exchange_email]',
        type: 'email',
        label: 'お届け先メールアドレス'
      }
    },
    pex_1000: {
      exchange_email: {
        id: 'pex_application_email',
        placeholder: 'メールアドレス',
        name: 'user[exchange_email]',
        type: 'email',
        label: 'お届け先メールアドレス'
      }
    },
    kankin3000: {
      bank_name: {
        id: 'pex_application_bank_name',
        placeholder: '銀行名',
        name: 'bank_account[bank_name]',
        type: 'text',
        label: '銀行名'
      },
      branch_name: {
        id: 'pex_application_branch_name',
        placeholder: '支店名',
        name: 'bank_account[branch_name]',
        type: 'text',
        label: '支店名'
      },
      account_type: {
        name: 'bank_account[account_type]',
        label: '口座種類',
        html: "<div data-role='fieldcontain'><fieldset data-role='controlgroup' data-type='vertical'><legend></legend><input name='bank_account[account_type]' id='account_type_1' value='0' type='radio'><label for='account_type_1'>普通預金 </label><input name='bank_account[account_type]' id='account_type_2' value='1' type='radio'><label for='account_type_2'>当座預金</label></fieldset></div>"
      },
      account_number: {
        id: 'pex_application_account_number',
        placeholder: '口座番号',
        name: 'bank_account[account_number]',
        type: 'number',
        label: 'お客様の口座番号'
      },
      account_holder: {
        id: 'pex_application_account_holder',
        placeholder: '口座名義人(カナ)',
        name: 'bank_account[account_holder]',
        type: 'text',
        label: '口座名義人(カナ)'
      }
    },
    kankin1000: {
      bank_name: {
        id: 'pex_application_bank_name',
        placeholder: '銀行名',
        name: 'bank_account[bank_name]',
        type: 'text',
        label: '銀行名'
      },
      branch_name: {
        id: 'pex_application_branch_name',
        placeholder: '支店名',
        name: 'bank_account[branch_name]',
        type: 'text',
        label: '支店名'
      },
      account_type: {
        name: 'bank_account[account_type]',
        label: '口座種類',
        html: "<div data-role='fieldcontain'><fieldset data-role='controlgroup' data-type='vertical'><legend></legend><input name='bank_account[account_type]' id='account_type_1' value='0' type='radio'><label for='account_type_1'>普通預金 </label><input name='bank_account[account_type]' id='account_type_2' value='1' type='radio'><label for='account_type_2'>当座預金</label></fieldset></div>"
      },
      account_number: {
        id: 'pex_application_account_number',
        placeholder: '口座番号',
        name: 'bank_account[account_number]',
        type: 'number',
        label: 'お客様の口座番号'
      },
      account_holder: {
        id: 'pex_application_account_holder',
        placeholder: '口座名義人',
        name: 'bank_account[account_holder]',
        type: 'text',
        label: '口座名義人(カナ)'
      }
    },
    sbi_kankin1000: {
      bank_name: {
        name: 'bank_account[bank_name]',
        label: '銀行名',
        html: "<p class='font-size:16px; font-weight: bold;'>住信SBIネット銀行限定</p><input name='bank_account[bank_name]' type='hidden' value='住信SBIネット銀行' class='exchange_application_params' />"
      },
      branch_name: {
        id: 'pex_application_branch_name',
        placeholder: '支店名',
        name: 'bank_account[branch_name]',
        type: 'text',
        label: '支店名'
      },
      account_type: {
        name: 'bank_account[account_type]',
        label: '口座種類',
        html: "<div data-role='fieldcontain'><fieldset data-role='controlgroup' data-type='vertical'><legend></legend><input name='bank_account[account_type]' id='account_type_1' value='0' type='radio'><label for='account_type_1'>普通預金 </label><input name='bank_account[account_type]' id='account_type_2' value='1' type='radio'><label for='account_type_2'>当座預金</label></fieldset></div>"
      },
      account_number: {
        id: 'pex_application_account_number',
        placeholder: '口座番号',
        name: 'bank_account[account_number]',
        type: 'number',
        label: 'お客様の口座番号'
      },
      account_holder: {
        id: 'pex_application_account_holder',
        placeholder: '口座名義人(カナ)',
        name: 'bank_account[account_holder]',
        type: 'text',
        label: '口座名義人(カナ)'
      }
    }
  };

  onDeviceReady = function() {
    var app_init, current_time, fb, tw;
    console.log("onDeviceReady called ...");
    init_global_variables();
    load_javascript([env.api_server, env.lazy_script_path].join(''));
    initPushwoosh();
    $(document).bind("menubutton", AndroidButtonControl.return_false_for_menubutton);
    $(document).bind("searchbutton", AndroidButtonControl.return_false_for_searchbutton);
    document.addEventListener('backbutton', AndroidButtonControl.return_for_backbutton, false);
    tw = new Twitter;
    $("#twtr_refer_friend").bind('vclick', function() {
      logger('Twitter: twitter clicked');
      return tw.shareUrl(window.env.docci_twtr_url, "iOS / Androidアプリ\"docci（ドッチ）\"で２択でお小遣いＧＥＴ！お友達のニックネームを紹介者の欄にいれると、お互いに５０pt獲得できるよ＾＾招待者：[ " + (window.localStorage.getItem('nickname')) + " ]ダウンロードはこちら→", 'docci');
    });
    $("#share_detailed_results_twitter").bind('vclick', function(e, ui) {
      e.preventDefault();
      return tw.shareUrl(env.api_server + ("polls/" + ($(this).data('pollId'))), "" + ($(this).data('question')) + "のみんなの２択の結果はこちら！！", 'docci');
    });
    fb = new Facebook;
    $("#fb_refer_friend").bind('vclick', function() {
      return fb.shareUrl(env.docci_fb_url, 'docciでお小遣いをGET!!', '★★【docci（ドッチ）】は空いた時間に２択で楽しく・簡単にお小遣いゲットできちゃう！そんな画期的なアプリ★★', "iOS / Androidアプリ\"docci（ドッチ）\"で２択で空いた時間にお小遣いＧＥＴ！        空いた時間にポイントを貯めて換金したり、Amazonギフト券等のギフト券と交換できます！        ダウンロードはこちらから→" + window.env.docci_fb_url);
    });
    $("#share_detailed_results_fb").bind('vclick', function(e, ui) {
      e.preventDefault();
      return fb.shareUrl(env.api_server + ("polls/" + ($(this).data('pollId'))), '★★【docci（ドッチ）】は空いた時間に２択で楽しく・簡単にお小遣いゲットできちゃう！そんな画期的なアプリ★★', $(this).data('question'), "" + ($(this).data('question')) + "のみんなの２択の結果はこちら！！");
    });
    $('#create_poll_submit').bind('vclick', function(e, ui) {
      return eventFunction(e, 'launch create_poll_submit', create_poll_submit);
    });
    $('#create_poll_confirm_submit').bind('vclick', function(e, ui) {
      e.preventDefault();
      eventFunction(e, 'launch create_poll_confirm_submit', create_poll_confirm_submit);
      return false;
    });
    $('.to_detailed_results').bind('vclick', function(e, ui) {
      logger('detailed_result launch');
      return detailed_result_show(this);
    });
    $('.terms_of_use_open').bind('vclick', function(e, ui) {
      var br;
      br = new CampaignBrowser("https://apidocci.com/terms_of_service.html");
      return br.show();
    });
    $('.privacy_policy_open').bind('vclick', function(e, ui) {
      var br;
      br = new CampaignBrowser("https://apidocci.com/privacy_policy.html");
      return br.show();
    });
    $('.sctl_open').bind('click', function(e, ui) {
      var br;
      br = new CampaignBrowser("https://apidocci.com/sctl.html");
      return br.show();
    });
    $('.get_more_question_button').bind('vclick', function(e, ui) {
      return eventFunction(e, 'getting questions', get_questions);
    });
    $('.get_more_polls').bind('vclick', function(e, ui) {
      return eventFunction(e, 'getting more polls', get_questions);
    });
    $('.poll_list_view_header_button').bind('vclick', function(e) {
      $.mobile.changePage("#poll_list_view");
      focusHeader('poll_list_view');
      return e.preventDefault();
    });
    $('.answered_poll_list_view_header_button').bind('vclick', function(e) {
      $.mobile.changePage("#answered_poll_list_view");
      focusHeader('answered_poll_list_view');
      return e.preventDefault();
    });
    $('.mypage_header_button').bind('vclick', function(e) {
      $.mobile.changePage("#mypage");
      focusHeader('mypage');
      return e.preventDefault();
    });
    $('.settings_header_button').bind('vclick', function(e) {
      $.mobile.changePage("#settings");
      return focusHeader('settings');
    });
    $('#sbi_banner').bind('tap', function(e) {
      var _url;
      _url = "https://contents.netbk.co.jp/pc/campaign/lp_kouza_netbk.html";
      if (env.device_status === 1) {
        return location.href = _url;
      } else if (env.device_status === 2) {
        return window.openActivity(_url);
      }
    });
    $(this).on('vclick', '#show_detailed_result', function(e, ui) {
      return show_detailed_result($(this));
    });
    $(this).on('vclick', '#ans_show_detailed_result', function(e, ui) {
      return show_detailed_result($(this));
    });
    $('#welcome').bind('pageshow', function(e, ui) {
      var db;
      window.localStorage.clear();
      hide_tabbar();
      db = new DocciDb;
      db.drop_tables();
      db.create_table;
      return logger('recreated table');
    });
    $('#point_balance').bind('pageshow', function(e, ui) {
      return eventFunction(e, 'showing point_balance', point_balance_show_api);
    });
    $('#poll_list_view').bind('pageshow', function(e, ui) {
      focusHeader('poll_list_view');
      return eventFunction(e, 'poll_list_view has shown', poll_list_view);
    });
    $('#refer_friends').bind('pageshow', function(e, ui) {
      return $('#refer_friends_nickname_display').val(window.localStorage.getItem('nickname'));
    });
    $('#answered_poll_list_view').bind('pageshow', function(e, ui) {
      eventFunction(e, 'answered_poll_list_view has shown', answered_poll_list_view);
      return focusHeader('answered_poll_list_view');
    });
    $('#poll_view').bind('pageshow', function(e, ui) {
      eventFunction(e, 'show single poll', poll_view);
      return hide_tabbar();
    });
    $('#account_settings_nickname_settings').bind('pageshow', function(e, ui) {
      $('#account_settings_nickname_submit').unbind();
      return $('#account_settings_nickname_submit').bind('vclick', function(e, ui) {
        var confirmSubmit;
        confirmSubmit = function(pushed_button) {
          var callback, params, url;
          url = env.api_server + 'api/v1/users/update?auth_token=' + localStorage.getItem('auth_token');
          params = {
            type: 'PUT',
            data: {
              users: {
                nickname: $("#account_settings_user_nickname").val()
              }
            }
          };
          callback = 'return_false';
          if (pushed_button === 2) {
            return ajaxCall(url, callback, params).done(function(data) {
              var cb;
              if (data.data.user.hasOwnProperty('email')) {
                window.localStorage.setItem('email', data.data.user.email);
              }
              if (data.data.user.hasOwnProperty('nickname')) {
                window.localStorage.setItem('nickname', data.data.user.nickname);
              }
              cb = function() {
                $("#account_settings_user_nickname").val('');
                return $.mobile.changePage("#poll_list_view");
              };
              return navigator.notification.alert('アカウント設定を変更しました。', cb, 'docci', 'TOPに戻る');
            });
          } else {
            return false;
          }
        };
        return navigator.notification.confirm('このニックネームでよろしいですか？', confirmSubmit, 'docci', 'いいえ,はい');
      });
    });
    $('#account_settings').bind('pageshow', function(e, ui) {
      return account_settings();
    });
    $('#mypage').bind('pageshow', function(e, ui) {
      logger('quit_app: mypage called');
      window.localStorage.setItem('current_point', '読込中');
      get_current_point();
      $("#current_point").html(window.localStorage.getItem('current_point'));
      return focusHeader('mypage');
    });
    $('#settings').bind('pageshow', function(e, ui) {
      return focusHeader('settings');
    });
    $('#campaign_view').bind('pageshow', function(e, ui) {});
    $('#exchange_confirm').bind('pageshow', function(e, ui) {
      return hide_tabbar();
    });
    $('#login_form').bind('pageshow', function(e, ui) {
      return hide_tabbar();
    });
    $('#password_reminder').bind('pageshow', function(e, ui) {
      return hide_tabbar();
    });
    $('#exchange_point').bind('pageshow', function(e, ui) {
      return eventFunction(e, 'show exchange point page', exchange_point_view);
    });
    $('#inquiry_launch').attr('href', "mailto:support@doc.ci?subject=【docci】お問い合わせ&body=ご登録Eメール: " + (window.localStorage.getItem('email')) + "%0D%0A----------%0D%0Aお問い合せ内容をここにご記入ください。%0D%0A");
    $('#refer_friends').bind('pageshow', function(e, ui) {
      var mail_href;
      mail_href = 'mailto:?subject=【docciへご招待!！】&' + ("body=iOS / Androidアプリ\"docci（ドッチ）\"で２択で空いた時間にお小遣いＧＥＴ！空いた時間にポイントを貯めて換金したり、Amazonギフト券等のギフト券と交換できます！お友達のニックネームを紹介者の欄にいれると、お互いに５０pt獲得できるよ＾＾招待者：[ " + (window.localStorage.getItem('nickname')) + " ]　ダウンロードはこちらから→" + env.docci_mail_url);
      return $("#send_offer_email_to_friends").attr('href', mail_href);
    });
    $('#register_form_page').bind('pageshow', function(e, ui) {
      return hide_tabbar();
    });
    $('#register_form_submit').bind('vclick', function(e, ui) {
      var register_ajax;
      e.preventDefault;
      register_ajax = function(pushed_button) {
        var params, url;
        if (pushed_button === 2) {
          url = env.api_server + 'users';
          params = {
            type: 'POST',
            data: {
              user: {
                email: $("#regist_user_email").val(),
                registered_uuid: device.uuid,
                password: $("#regist_user_password").val(),
                password_confirmation: $("#regist_user_password_confirmation").val()
              }
            }
          };
          ajaxCall(url, 'register_success', params);
          return false;
        } else {
          return false;
        }
      };
      return navigator.notification.confirm("docciのプライバシーポリシーと会員規約に同意する", register_ajax, 'docci', '同意しない,同意');
    });
    $("#regist_referral").bind('pageshow', function(e, ui) {
      return hide_tabbar();
    });
    $("#register_referral_submit").bind('vclick', function(e, ui) {
      var callback, params, url;
      e.preventDefault();
      $(this).prop('disabled', true);
      url = env.api_server + 'api/v1/users/add_referrer' + ("?auth_token=" + (window.localStorage.getItem('auth_token')));
      params = {
        type: 'PUT',
        data: {
          nickname: $("#regist_user_nickname").val(),
          referrer_nickname: $("#regist_referrer_nickname").val()
        }
      };
      callback = 'after_register_referral_submit';
      return ajaxCall(url, callback, params);
    });
    $(".regist_sex_button").bind('vclick', function(e, ui) {
      var callback, params, url;
      e.preventDefault();
      $(this).prop('disabled', true);
      url = env.api_server + 'api/v1/users/update?auth_token=' + window.localStorage.getItem('auth_token');
      logger("url => " + url);
      params = {
        type: 'PUT',
        data: {
          users: {
            sex: $(this).data('sex')
          }
        }
      };
      callback = 'return_false';
      return ajaxCall(url, callback, params).done(function() {
        return $.mobile.changePage("#regist_other_attrs");
      });
    });
    $("#regist_user_attrs_submit").bind('vclick', function(e, ui) {
      var callback, params, url;
      e.preventDefault();
      $(this).prop('disabled', true);
      if (!($("#reg_marital_status_single").is(':checked') || $("#reg_marital_status_married").is(':checked'))) {
        navigator.notification.alert('未婚・既婚をお選び下さい', function() {
          return false;
        }, 'docci', '確認');
        return false;
      }
      if ($("#regist_user_job").val() === '') {
        navigator.notification.alert('ご職業をお選び下さい', function() {
          return false;
        }, 'docci', '確認');
        return false;
      }
      if ($("#regist_user_byear").val() === '' || $("#regist_user_bmonth").val() === '' || $("#regist_user_bday").val() === '') {
        navigator.notification.alert('生年月日をご入力下さい', function() {
          return false;
        }, 'docci', '確認');
        return false;
      }
      if ($("#regist_user_prefecture").val() === '') {
        navigator.notification.alert('居住地をお選び下さい', function() {
          return false;
        }, 'docci', '確認');
        return false;
      }
      url = env.api_server + "/api/v1/users/" + window.localStorage.getItem('id') + '?auth_token=' + window.localStorage.getItem('auth_token');
      params = {
        type: "PUT",
        data: {
          users: {
            marital_status: $("input:radio:checked").val(),
            prefecture: $("#regist_user_prefecture").val(),
            job: $("#regist_user_job").val(),
            year: $("#regist_user_byear").val(),
            month: $("#regist_user_bmonth").val(),
            date: $("#regist_user_bday").val()
          }
        }
      };
      callback = 'return_false';
      return ajaxCall(url, callback, params).done(function() {
        window.localStorage.setItem('current_point', 0);
        return get_questions();
      });
    });
    $('#regist_launcher').bind('vclick', function(e, ui) {
      return show_registration_page();
    });
    $('#get_questions').bind('pageshow', function(e, ui) {
      return get_questions();
    });
    $('#password_reminder_submit').bind('vclick', function(e, ui) {
      var callback, params, url;
      e.preventDefault();
      url = env.api_server + 'api/v1/users/password_reminder';
      params = {
        type: 'POST',
        data: {
          users: {
            email: $("#pass_reminder_email_field").val()
          }
        }
      };
      callback = 'return_false';
      return ajaxCall(url, callback, params).done(function(data) {
        var return_false;
        return_false = function() {
          return false;
        };
        if (data.status === 1) {
          return navigator.notification.alert('ご登録頂いているメールアドレスに新しいパスワードをお送りいたしました。', return_false, 'docci', '確認');
        } else if (data.status === 0) {
          return navigator.notification.alert('このメールアドレスはdocciに登録されていません。', return_false, 'docci', '確認');
        }
      });
    });
    $('#login_form').bind('submit', function(e, ui) {
      var callback, params, url;
      e.preventDefault();
      url = env.api_server + '/users/sign_in.json';
      params = {
        type: 'POST',
        data: {
          user: {
            email: $("#login_user_email").val(),
            password: $("#login_user_password").val()
          }
        }
      };
      callback = 'login_success_callback';
      return ajaxCall(url, callback, params).error(function(data) {
        var return_false;
        return_false = function() {
          return false;
        };
        return navigator.notification.alert('ご入力された内容に誤りがあります。', return_false, 'docci', 'OK');
      });
    });
    $('#update_password_submit').bind('vclick', function() {
      return update_password();
    });
    /*   Right After App has started
    */

    current_time = new Date().getTime();
    window.localStorage.setItem('last_launched_at', current_time);
    app_init = function() {
      var db;
      logger("new flow...");
      db = new DocciDb;
      db.drop_tables();
      db.create_table();
      get_questions();
      return logger('done!!!');
    };
    logger("ここまでSplashScreenを表示");
    navigator.splashscreen.hide();
    logger("ここまでSplashScreenを表示");
    app_init();
    $("#version_number").text(window.env.app_version);
    return $("#device_name").text(window.env.device_name);
  };

  $('#make_action').bind('vclick', function(e, ui) {
    e.preventDefault();
    return handle_convert_action(this);
  });

  handle_convert_action = function(action_button) {
    var app_id, app_uri, callback, params, url,
      _this = this;
    logger("camp_type is " + ($(action_button).data('camp_type')));
    switch ($(action_button).data('camp_type')) {
      case '0':
        logger('CPI action calling');
        app_id = $(action_button).data('app_id');
        app_uri = $(action_button).data('url');
        return canOpenUrl([app_id], function(_app_ids, _results) {
          var url;
          if (_results[0]) {
            console.log("" + _app_ids[0] + " is installed");
            return ajaxCall("" + window.env.campaign_convert_url + "gateway/installed", 'cpi_success', {
              type: 'GET',
              data: {
                user_id: window.localStorage.getItem('user_id'),
                campaign_id: $(action_button).data('campaign_id'),
                point: $(action_button).data('point'),
                sale: $(action_button).data('sale')
              }
            }).done(data)(function() {
              return console.log('finish sending convertion report');
            });
          } else {
            console.log("" + _app_ids[0] + " isn't installed, jump to app page");
            logger("direct_flag => " + ($(action_button).data('direct_flag')));
            if (env.device_status === 2) {
              if ($(action_button).data('direct_flag') === 'true') {
                url = "market://details?id=" + app_id;
                logger("direct campaign, open " + url);
                return window.openActivity(url);
              } else {
                logger("agent campaign, open " + ($(action_button).data('url')));
                return window.openActivity($(action_button).data('url'));
              }
            } else if (env.device_status === 1) {
              return location.href = $(action_button).data('url');
            }
          }
        });
      case '1':
        logger('CPA action calling');
        url = window.buildUrl(env.campaign_click_url, {
          url: $(action_button).data('url'),
          user_id: window.localStorage.getItem('user_id'),
          campaign_id: $(action_button).data('campaign_id'),
          point: $(action_button).data('point'),
          sale: $(action_button).data('sale'),
          direct: $(action_button).data('direct_flag'),
          campaign_type: $(action_button).data('camp_type'),
          system_name: $(action_button).data('system_name')
        });
        logger("url => " + url);
        if ($(action_button).data('direct_flag') === false && $(action_button).data('system_name') === 'metaps' && env.device_status === 2) {
          logger('for metaps');
          url = this.env.api_server + '/api/v1/gateway/click/metaps';
          params = {
            type: 'GET',
            data: {
              user_id: window.localStorage.getItem('user_id'),
              campaign_id: $(action_button).data('campaign_id'),
              point: $(action_button).data('point'),
              sale: $(action_button).data('sale')
            }
          };
          callback = 'return_false';
          return ajaxCall(url, callback, params).done(function(data) {
            var _failCB, _sucCB;
            logger('=======================================');
            logger("uuid => " + data.data.uuid);
            logger('=======================================');
            _sucCB = function() {
              logger('metaps success');
              return false;
            };
            _failCB = function() {
              logger('metaps fail');
              return false;
            };
            return SdkPlugin.callSdk(_sucCB, _failCB, 'metaps', [$(action_button).data('url'), data.data.uuid]);
          });
        } else {
          if (env.device_status === 2) {
            return window.openActivity(url);
          } else if (env.device_status === 1) {
            return location.href = url;
          }
        }
        break;
      case '2':
        logger('CPC action calling');
        url = window.buildUrl(env.campaign_click_url, {
          url: $(action_button).data('url'),
          user_id: window.localStorage.getItem('user_id'),
          campaign_id: $(action_button).data('campaign_id'),
          point: $(action_button).data('point'),
          sale: $(action_button).data('sale'),
          direct: $(action_button).data('direct_flag'),
          campaign_type: $(action_button).data('camp_type'),
          system_name: $(action_button).data('system_name')
        });
        if (env.device_status === 2) {
          return window.openActivity(url);
        } else if (env.device_status === 1) {
          return location.href = url;
        }
        break;
      default:
        return logger('no campaing_type assigned');
    }
  };

  /* ========================================================================
  Make Ajax Call to docci_api   
      You need to provide:   * url                   
                             * callback function     
                             * params                
                                - type               
                                - data               
  ========================================================================
  */


  ajaxCall = function(url, callback, params) {
    var cb;
    cb = new AjaxCallback;
    logger("ajax start to: " + url);
    return $.ajax(url, {
      type: params.type,
      data: params.data,
      timeOut: 8000,
      beforeSend: function(xhr) {
        xhr.setRequestHeader('device_status', window.env.device_status.toString());
        xhr.setRequestHeader('callback', callback);
        xhr.setRequestHeader('app_version', window.env.app_version);
        return logger("set callback to " + callback + "(cannot be null or undefined)");
      },
      success: function(data, status, xhr) {
        logger("data => " + (JSON.stringify(data)));
        logger("data.params => " + (JSON.stringify(data.params)));
        logger("callback => " + data.callback);
        logger("status => " + status);
        switch (data.callback) {
          case 'auto_login_success':
            return cb.auto_login_success(data);
          case 'get_questions_success':
            return cb.get_questions_success(data);
          case 'after_answering_to_poll':
            return cb.after_answering_to_poll(data);
          case 'candidate_record_not_unique':
            return cb.candidate_record_not_unique(data);
          case 'initial_login_success':
            return cb.initial_login_success(data);
          case 'login_success_callback':
            return cb.login_success_callback(data);
          case 'render_detailed_results':
            return cb.render_detailed_results(data);
          case 'show_exchange_point_list':
            return cb.show_exchange_point_list(data);
          case 'create_poll_confirmation_cb':
            return cb.create_poll_confirmation_cb(data);
          case 'build_exchange_form':
            return cb.build_exchange_form(data);
          case 'register_success':
            return cb.register_success(data);
          case 'after_friend_referral':
            return cb.after_friend_referral(data);
          case 'after_sex_regist':
            return cb.after_sex_regist(data);
          case 'after_etc_regist':
            return cb.after_etc_regist(data);
          case 'after_register_referral_submit':
            return cb.after_register_referral_submit(data);
          case 'cpi_success':
            return cb.cpi_success(data);
          case 'answered_poll_list':
            return false;
          case 'point_balance_show':
            return cb.point_balance_show(data);
          case 'return_false':
            return false;
          case '':
            return false;
          case null:
            return false;
          default:
            return callback(data, status, xhr);
        }
      },
      error: function(xhr, status, error) {
        logger('AJAX error');
        if (callback === 'auto_login_success') {
          return $.mobile.changePage('#login_form');
        } else if (callback === 'login_success_callback') {
          return false;
        } else {
          return cb.error(xhr, status, error);
        }
      }
    });
  };

  update_password = function() {
    var callback, params, url, _return_false;
    if ($("#new_password").val() === '') {
      _return_false = function() {
        return false;
      };
      navigator.notification.alert('パスワードの値が不正です', _return_false, 'docci', '確認');
      return false;
    }
    url = env.api_server + 'api/v1/users/update_password' + ("?auth_token=" + (window.localStorage.getItem('auth_token')));
    params = {
      type: 'PUT',
      data: {
        user: {
          current_password: $("#current_password").val(),
          password: $("#new_password").val(),
          password_confirmation: $("#new_password_confirmation").val()
        }
      }
    };
    callback = 'return_false';
    return ajaxCall(url, callback, params).done(function(data) {
      var message, _callback;
      if (data.status === 1) {
        _callback = function() {
          window.localStorage.setItem('password', data.user.new_password);
          return $.mobile.changePage('#poll_list_view');
        };
        return navigator.notification.alert('パスワードを変更しました。', _callback, 'docci', '確認');
      } else {
        _callback = function() {
          return false;
        };
        message = data.message.join("\r");
        return navigator.notification.alert(message, _callback, '情報に不備がありました', '確認');
      }
    });
  };

  account_settings = function() {
    var callback, params, pushNotification, url, user_changes;
    url = env.api_server + 'api/v1/users/self' + ("?auth_token=" + (window.localStorage.getItem('auth_token')));
    params = {
      type: 'GET'
    };
    callback = 'return_false';
    ajaxCall(url, callback, params).done(function(data) {
      var user;
      user = data.user;
      $('#account_settings_user_email').val(user.email);
      $("#account_settings_byear option=[value=]").prop('selected', true);
      $("#account_settings_byear option=[value=" + user.year + "]").prop('selected', true);
      $("#account_settings_byear").selectmenu('refresh');
      $("#account_settings_bmonth option=[value=]").prop('selected', true);
      $("#account_settings_bmonth option=[value=" + user.month + "]").prop('selected', true);
      $("#account_settings_bmonth").selectmenu('refresh');
      $("#account_settings_bdate option=[value=]").prop('selected', true);
      $("#account_settings_bdate option=[value=" + user.date + "]").prop('selected', true);
      $("#account_settings_bdate").selectmenu('refresh');
      $("#account_settings_job option=[value=]").prop('selected', true);
      $("#account_settings_job option=[value=" + user.job + "]").prop('selected', true);
      $("#account_settings_job").selectmenu('refresh');
      $("#account_settings_prefecture option=[value=" + user.prefecture + "]").prop('selected', true);
      $("#account_settings_prefecture").selectmenu('refresh');
      $("input[name='users[sex]'].user_settings_attr").prop('checked', false);
      $("input[name='users[sex]'].user_settings_attr[value=" + user.sex + "]").prop('checked', true);
      $("input[name='users[sex]'].user_settings_attr[value=" + user.sex + "]").checkboxradio('refresh', true);
      $("input[name='users[sex]'].user_settings_attr").prop('checked', false);
      if (user.newsletter_opt) {
        $("#account_settings_newsletter_opt_t").prop('checked', true);
        $("#account_settings_newsletter_opt_t").checkboxradio('refresh', true);
      } else {
        $("#account_settings_newsletter_opt_f").prop('checked', true);
        $("#account_settings_newsletter_opt_f").checkboxradio('refresh', true);
      }
      $("input[name='users[marital_status]'].user_settings_attr").prop('checked', false);
      $("input[name='users[marital_status]'].user_settings_attr[value=" + user.marital_status + "]").prop('checked', true);
      return $("input[name='users[marital_status]'].user_settings_attr[value=" + user.marital_status + "]").checkboxradio('refresh', true);
    });
    user_changes = {};
    $(".user_settings_attr").bind('change', function() {
      return user_changes[$(this).attr('name')] = $(this).val();
    });
    if (window.localStorage.getItem('push_opt') === 'true') {
      $("#account_settings_push_opt_t").prop('checked', true);
      $("#account_settings_push_opt_t").checkboxradio('refresh', true);
    } else {
      $("#account_settings_push_opt_f").prop('checked', true);
      $("#account_settings_push_opt_f").checkboxradio('refresh', true);
    }
    pushNotification = window.plugins.pushNotification;
    $("#account_settings_push_opt_t").unbind();
    $("#account_settings_push_opt_t").bind('change', function(e) {
      return pushNotification.registerDevice({
        projectid: "546523799108",
        appid: "9E738-67297"
      }, function(status) {
        var pushToken;
        pushToken = status;
        logger("push token:" + pushToken);
        return window.localStorage.setItem('push_opt', 'true');
      }, function(status) {
        return logger(JSON.stringify(['failed to register ', status]));
      });
    });
    $("#account_settings_push_opt_f").unbind();
    $("#account_settings_push_opt_f").bind('change', function(e) {
      return pushNotification.unregisterDevice(function() {
        return window.localStorage.setItem('push_opt', 'false');
      }, function() {
        return logger('push Unregister Error');
      });
    });
    $("#account_settings_user_destroy").unbind();
    $("#account_settings_user_destroy").bind('click', function(e) {
      var confirmDestroy;
      confirmDestroy = function(pushed_button) {
        if (pushed_button === 2) {
          url = env.api_server + 'api/v1/users?auth_token=' + window.localStorage.getItem('auth_token');
          callback = 'return_false';
          params = {
            type: 'DELETE'
          };
          return ajaxCall(url, callback, params).done(function(data) {
            var _callback;
            if (data.status === 1) {
              return $.ajax(env.api_server + '/users/sign_out', {
                type: 'DELETE',
                success: function(data) {
                  var _callback;
                  $.mobile.changePage("#welcome");
                  _callback = function() {
                    window.localStorage.clear();
                    return $.mobile.changePage("#welcome");
                  };
                  return navigator.notification.alert('アカウントを正常に削除いたしました。', _callback, 'docci', '完了');
                }
              });
            } else {
              _callback = function() {
                return false;
              };
              return navigator.notification.alert('お時間をおいて再度お試しください', _callback, 'エラー発生', 'OK');
            }
          });
        } else {
          return false;
        }
      };
      return navigator.notification.confirm("退会するとせっかく取得した" + (window.localStorage.getItem('current_point')) + "ポイントが全て無効となります。本当に削除しますか？", confirmDestroy, 'docci', 'いいえ,はい');
    });
    $("#account_settings_user_attrs_settings_submit").unbind();
    return $("#account_settings_user_attrs_settings_submit").bind('vclick', function() {
      var confirmSubmit, k, v;
      for (k in user_changes) {
        v = user_changes[k];
        logger("[params] " + k + "=" + v);
      }
      confirmSubmit = function(pushed_button) {
        url = env.api_server + 'api/v1/users/update?auth_token=' + window.localStorage.getItem('auth_token');
        params = {
          type: 'PUT',
          data: user_changes
        };
        callback = 'return_false';
        if (pushed_button === 2) {
          return ajaxCall(url, callback, params).done(function(data) {
            var cb;
            if (data.params.hasOwnProperty('email')) {
              window.localStorage.setItem('email', data.params.email);
            }
            cb = function() {
              return $.mobile.changePage("#poll_list_view");
            };
            return navigator.notification.alert('アカウント設定を変更しました。', cb, 'docci', 'TOPに戻る');
          });
        } else {
          return false;
        }
      };
      return navigator.notification.confirm('本当に変更しますか？', confirmSubmit, 'docci', 'いいえ,はい');
    });
  };

  detailed_result_show = function(clicked_element) {
    var callback, params, poll_id, url;
    poll_id = $(clicked_element).data('poll_id');
    url = env.api_server + ("/api/v1/polls/current_result/" + poll_id + "?auth_token=" + (window.localStorage.getItem('auth_token')));
    callback = 'render_detailed_results';
    params = {
      type: 'GET'
    };
    return ajaxCall(url, callback, params);
  };

  auto_login = function() {
    var callback, params, url;
    console.log('auto_login has been called');
    url = env.api_server + '/users/sign_in';
    callback = 'auto_login_success';
    if (window.localStorage.getItem('email') !== null) {
      params = {
        type: 'POST',
        dataType: 'json',
        data: {
          user: {
            email: window.localStorage.getItem('email'),
            password: window.localStorage.getItem('password')
          }
        }
      };
    }
    return ajaxCall(url, callback, params);
  };

  get_questions = function() {
    var callback, params, url;
    url = env.api_server + ("api/v1/polls?auth_token=" + (window.localStorage.getItem('auth_token')));
    callback = 'get_questions_success';
    params = {
      type: 'GET',
      data: {
        device_status: window.env.device_status
      }
    };
    return ajaxCall(url, callback, params).then(function() {
      return false;
    });
  };

  get_current_point = function() {
    var callback, params, url;
    logger("get_current_point called");
    url = env.api_server + '/api/v1/users/current_point?auth_token=' + window.localStorage.getItem('auth_token');
    callback = 'return_false';
    params = {
      type: 'GET'
    };
    return ajaxCall(url, callback, params).done(function(data) {
      window.localStorage.setItem('current_point', data.user_current_point);
      $("#current_point").html(window.localStorage.getItem('current_point'));
      return logger("Your current point is " + (window.localStorage.getItem('current_point')));
    });
  };

  poll_list_view = function() {
    var db;
    if (localStorage.getItem('nickname') === '') {
      logger('no nickname');
      return $.mobile.changePage("#account_settings_nickname_settings");
    } else {
      db = new DocciDb;
      return db.retrieve(sqls.poll.by_status, [0], html_builder_for_polls);
    }
  };

  exchange_point_view = function() {
    var callback, params, url;
    url = env.api_server + ("/api/v1/point_exchanges?auth_token=" + (window.localStorage.getItem('auth_token')));
    callback = 'show_exchange_point_list';
    params = {
      type: 'GET'
    };
    return ajaxCall(url, callback, params);
  };

  exchange_form_builder = function(params) {
    var html;
    html = "<form accept-charset='UTF-8' class='new_user' id='login_form' method='post' data-ajax='false'>";
    $.each(params, function(key, val) {
      html = "<input id='login_user_nickname' name='user[nickname]' autocapitalize='off' autocorrect='off' size='30' type='text' value='' placeholder='Your Nickname' />";
      return html = "<input id='login_user_password' name='user[password]' placeholder='Your Password' size='30' type='password' />";
    });
    html += "<input name='commit' type='submit' value='Sign in' />";
    html += "</form>";
    return logger(html);
  };

  $("#more_answer_poll_button").bind('vclick', function(e, ui) {
    answered_poll_list_view($(this).data('offset'));
    logger("target_offset => " + ($(this).data('offset')));
    return e.preventDefault();
  });

  answered_poll_list_view = function(offset) {
    var params, url;
    if (offset == null) {
      offset = 0;
    }
    url = env.api_server + ("/api/v1/polls/answered?offset=" + offset + "&auth_token=") + window.localStorage.getItem('auth_token');
    params = {
      type: 'GET',
      data: {
        device_status: window.env.device_status
      }
    };
    return ajaxCall(url, 'return_false', params).done(function(data) {
      var expired_tap_cb, html, img_height, img_width, _callback;
      html = '';
      img_width = 80;
      img_height = 80;
      if (data.data.polls.length > 0) {
        $("#answered_poll_list_view .no_new_contents").hide();
        $.each(data.data.polls, function(ind, poll) {
          if (poll.campaign_complete) {
            html += "<li class='finish'>";
          } else {
            html += "<li>";
          }
          html += "              <a href='javascript:void(0)' class='campaign_view_button' data-poll_id='" + poll.id + "' data-campaign_id='" + poll.campaign_id + "'>";
          html += "                  <div class='answerd_title'>" + poll.question + "</div>                  <div>                    <img src='" + poll.image_url + "' class='answerd_img'/>                    <div class='answerd_action'>                      <img src='./img/action.png' class='answered_action_icon' />                      <h3>" + poll.action_label + "</h3>";
          if (!((poll.max_count - poll.current_count) > 0)) {
            html += "   <p class='finished_campaign_answered'>上限数に達しました</p><br />";
          } else {
            html += "                      <div class='question_count'>あと" + (poll.max_count - poll.current_count) + "人！</div>                      <div class='question_point'><img src='./img/p.png' class='question_point_img' />" + poll.campaign_point + "</div>";
          }
          if (poll.expire_flag) {
            html += "   アクション期間終了";
          } else {
            html += "   " + poll.ending_time + "まで";
          }
          return html += "                    </div>                  </div>                </a>              </li>";
        });
        $('#answered_poll_list').append(html).listview("refresh");
        $('.campaign_view_button').unbind('vclick');
        $('.campaign_view_button').bind('vclick', function() {
          return campaign_view_answered_show(this);
        });
        expired_tap_cb = function() {
          return false;
        };
        $("#more_answer_poll_button").data('offset', offset + data.data.polls.length);
        return logger("new offset => " + ($("#more_answer_poll_button").data('offset')));
      } else {
        _callback = function() {
          return false;
        };
        return navigator.notification.alert('表示可能な回答履歴がありません！', _callback, 'docci', 'OK');
      }
    });
  };

  campaign_view_answered_show = function(clicked_elem) {
    var callback, campaign_id, params, poll_id, url;
    campaign_id = $(clicked_elem).data('campaign_id');
    poll_id = $(clicked_elem).data('poll_id');
    url = env.api_server + ("/api/v1/campaigns/" + campaign_id + "/" + poll_id + "/get_single_campaign") + "?auth_token=" + window.localStorage.getItem('auth_token');
    callback = 'return_false';
    params = {
      type: 'GET'
    };
    return ajaxCall(url, callback, params).done(function(data) {
      var img_height, img_width, k, v, _ref;
      if (data.data.expire_flag) {
        logger("期限切れ");
      } else {
        logger("期限OK");
      }
      $.mobile.changePage('#campaign_view_answered');
      if (data.data.campaign_complete) {
        $("#ans_make_action").hide();
      } else {
        $("#ans_make_action").show();
        $("#ans_make_action").data({
          camp_type: data.data.camp_type.toString(),
          campaign_id: data.data.id,
          url: data.data.url,
          app_id: data.data.app_id,
          user_id: window.localStorage.getItem('user_id'),
          sale: data.data.sale,
          point: data.data.point,
          direct_flag: data.data.direct_flag,
          system_name: data.data.system_name
        });
        logger('=====ANSWER MAKE ACTION==========================');
        logger($("#ans_make_action").data());
        _ref = $("#ans_make_action").data();
        for (k in _ref) {
          v = _ref[k];
          logger("[params] " + k + "=" + v);
        }
        logger('=================================================');
        $('#ans_make_action').unbind('vclick');
        $('#ans_make_action').bind('vclick', function(e, ui) {
          var confirmExpire, _clicked_element;
          e.preventDefault();
          _clicked_element = this;
          if (data.data.expire_flag) {
            confirmExpire = function(pushed_button) {
              if (pushed_button === 2) {
                return handle_convert_action(_clicked_element);
              } else {
                return false;
              }
            };
            return navigator.notification.confirm("このキャンペーンは有効期限が過ぎておりますのでポイントはGETできません！", confirmExpire, 'docci', '戻る,OK');
          } else {
            return handle_convert_action(_clicked_element);
          }
        });
      }
      $('#ans_action_button_name').html(data.data.action_button);
      $('#ans_displayed_poll').html(data.data.poll_question);
      $('#ans_answered_value').html(data.data.answered_candidate);
      $('#ans_action_button_name').html(data.data.action_button);
      $('#ans_campaign_description').html(data.data.description);
      $('#ans_campaign_condition').html(data.data.condition);
      $('#ans_campaign_point').html(data.data.point);
      $('#ans_campaign_by').html(data.data.advertiser_name);
      $('#ans_campaign_current_attendee').html(data.data.current_count);
      $('#ans_campaign_max_attendee').html(data.data.max_count);
      if (data.data.camp_type === 0 && data.data.campaign_complete === false) {
        $('#ans_action_button_name').text("インストール確認");
      }
      img_width = 300;
      img_height = 150;
      $("#ans_campaign_view_img_wrapper").html("      <img src='" + data.data.image_url + "'        class='nitaku_img'        alt='campaign_img'         style='width:" + img_width + "px; height:" + img_height + "px;' width='" + img_width + "' height='" + img_height + "' />");
      $("#ans_show_detailed_result").data('campaign_id', data.data.campaign_id);
      $("#ans_show_detailed_result").data('poll_id', data.data.poll_id);
      $('#ans_make_action').button();
      return $('#ans_make_action').button('refresh');
    });
  };

  show_detailed_result = function(clicked_elem) {
    var campaign_id, poll_id;
    poll_id = clicked_elem.data('poll_id');
    html_builder_for_detailed_results();
    campaign_id = clicked_elem.data('campaign_id');
    return $.mobile.changePage("#detailed_results?poll_id=" + poll_id + "&campaign_id=" + campaign_id);
  };

  html_builder_for_detailed_results = function() {
    var params;
    return params = getUrlVars(location.href);
  };

  buildCouponForm = function(coupon_menu, params) {
    var html;
    if (params == null) {
      params = '';
    }
    html = '<form>';
    $.each(coupon_config[coupon_menu], function(key, val) {
      if (!(key in test_obj)) {
        html += "<p>" + key + "</p>";
        return html += "<input type='text' value='' name='" + val + "' />";
      }
    });
    return html += '</form>';
  };

  html_builder_for_polls = function(results) {
    var html, img_height, img_width, item, len, num, _i, _ref;
    len = results.rows.length;
    if (len > 0) {
      html = '';
      $("#poll_list_view .no_new_contents").hide();
      for (num = _i = 0, _ref = len - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; num = 0 <= _ref ? ++_i : --_i) {
        item = results.rows.item(num);
        img_width = 80;
        img_height = 80;
        html += "  <li>    <a href='#poll_view?poll_id=" + item.poll_id + "'>      <div class='question_padding'>        <h2 class='question_title'>" + item.question + "</h2>        <img src='" + item.image_url + "' class='question_img' style='width:" + img_width + "px;height:" + img_height + "px;' width='" + img_width + "' height='" + img_height + "' />        <div class='question_data'>          <div class='question_answer'>            <img src='./img/kaitou.png' class='question_answer_icon' />            <h3>回答</h3> ";
        if ((item.max_count - item.current_count) > 0) {
          html += "            <div class='question_count'>              <img src='./img/hito.png' class='question_point_img' />              あと" + (item.max_count - item.current_count) + "人！            </div>            <div class='question_point'>              <img src='./img/p.png' class='question_point_img' />              " + item.point + "            </div>";
        } else {
          html += "            <div class='question_count'>              先着ポイント終了            </div>            <div class='question_point'><img src='./img/p.png' class='question_point_img' />              0pt            </div>";
        }
        html += "          </div>          <br clear='both' />          <div class='question_action'>            <img src='./img/action.png' class='question_action_icon'/>            <h3>" + item.action_label + "</h3>";
        if (item.campaign_remain_count > 0) {
          html += "            <div class='question_count'><img src='./img/hito.png' class='question_point_img' />あと" + item.campaign_remain_count + "人！</div>            <div class='question_point'><img src='./img/p.png' class='question_point_img' />" + item.campaign_point + "</div>";
        } else {
          html += "            <p class='finished_campaign'>上限数に達しました</p>";
        }
        html += "          </div>        </div>      </div>    </a>  </li>";
      }
      return $('#question_list').html(html).listview("refresh");
    } else {
      $("#poll_list_view .no_new_contents").show();
      return false;
    }
  };

  poll_view = function() {
    var db, params;
    params = getUrlVars(location.href);
    db = new DocciDb;
    logger("----------------------------------------------------------------------");
    logger("sqls.candidate.by_poll");
    logger(sqls.candidate.by_poll);
    logger(params);
    logger("poll_id => " + (parseInt(params['poll_id'], 10)));
    logger("poll_id => " + params['poll_id']);
    logger("----------------------------------------------------------------------");
    db.retrieve(sqls.candidate.by_poll, [parseInt(params['poll_id'], 10)], html_builder_for_candidates);
    return db.retrieve(sqls.poll.find, [parseInt(params['poll_id'], 10)], html_builder_for_single_poll);
  };

  html_builder_for_single_poll = function(results) {
    return $('#single_question_wrapper').html(results.rows.item(0).question);
  };

  html_builder_for_candidates = function(results) {
    var c1, c1_html, c2, c2_html, img_height, img_width;
    img_width = 300;
    img_height = 150;
    c1 = results.rows.item(0);
    c2 = results.rows.item(1);
    c1_html = "    <div class='candidate' id='candidate_1_wrapper'>    <a href='javascript: void(0)'      data-poll_id='" + c1.poll_id + "'      data-candidate_id='" + c1.candidate_id + "'      data-campaign_id='" + c1.campaign_id + "'      data-point='" + c1.point + "'      data-sale='" + c1.sale + "'      data-value='" + c1.value + "'      class='poll_answer_trigger'>";
    if (c1.image_url !== '/images/original/missing.png') {
      c1_html += "      <div class='candidate_i'>        <div class='imgr'>          <img src='" + c1.image_url + "' class='candidate_1_img' />        </div>      </div>      <div class='candidate_t candidate_1'>" + c1.value + "</div>";
    } else {
      c1_html += "      <div class='candidate_only'><div class='candidate_only_inner'>" + c1.value + "</div></div>    ";
    }
    c1_html += "</a></div>";
    c2_html = "    <div class='candidate'  id='candidate_2_wrapper'>    <a href='javascript: void(0)'      data-poll_id='" + c2.poll_id + "'      data-candidate_id='" + c2.candidate_id + "'      data-campaign_id='" + c2.campaign_id + "'      data-point='" + c2.point + "'      data-sale='" + c2.sale + "'      data-value='" + c2.value + "'      class='poll_answer_trigger'>";
    if (c2.image_url !== '/images/original/missing.png') {
      c2_html += "      <div class='candidate_i'>        <div class='candidate_t candidate_2'>" + c2.value + "</div>        <div class='imgr'>          <img src='" + c2.image_url + "' class='candidate_2_img' />        </div>      </div>";
    } else {
      c2_html += "      <div class='candidate_only'><div class='candidate_only_inner'>" + c2.value + "</div></div>    ";
    }
    c2_html += "</a></div>";
    $('#candidate_1_outer_wrapper').html(c1_html);
    $('#candidate_2_outer_wrapper').html(c2_html);
    pollsfix();
    $('.poll_answer_trigger').unbind('vclick');
    return $('.poll_answer_trigger').bind('vclick', function(e, ui) {
      post_poll($(this));
      return $("#answered_value").html($(this).data('value'));
    });
  };

  pollsfix = function() {
    var c, ci, imh, imw, onlymh, wH, wW;
    logger('pollsfix called');
    wH = window.innerHeight - 32;
    wW = window.innerWidth;
    c = (wH - 20) / 2;
    ci = c - 20;
    imw = (wW - 260) / 2;
    imh = (ci - 130) / 2;
    onlymh = (c - 50) / 2;
    $('.polls').css('height', wH + 'px');
    $('.candidate').css('width', wW + 'px');
    $('.candidate').css('height', c + 'px');
    $('.candidate_i').css('width', wW + 'px');
    $('.candidate_i').css('height', ci + 'px');
    $('.imgr').css('top', imh + 'px');
    $('.imgr').css('margin-left', imw + 'px');
    $('.imgr').css('margin-right', imw + 'px');
    $('.candidate_only').css('height', c + 'px');
    $('.candidate_only_inner').css('top', onlymh + 'px');
    return logger('pollsfix done');
  };

  post_poll = function(clicked_element) {
    var callback, params, url;
    url = env.api_server + ("/api/v1/candidate_reports/answer?auth_token=" + (window.localStorage.getItem('auth_token')));
    callback = 'after_answering_to_poll';
    params = {
      type: 'POST',
      data: {
        candidate_report: {
          candidate_id: clicked_element.data('candidate_id'),
          poll_id: clicked_element.data('poll_id'),
          campaign_id: clicked_element.data('campaign_id'),
          sale: clicked_element.data('sale'),
          point: clicked_element.data('point')
        }
      }
    };
    return ajaxCall(url, callback, params);
  };

  load_javascript = function(src) {
    var ele;
    ele = document.createElement(['sc', 'ript'].join(''));
    ele.type = "text/javascript";
    ele.src = src;
    return document.body.appendChild(ele);
  };

  point_balance_show_api = function(ref_type) {
    var callback, params, url;
    if (ref_type == null) {
      ref_type = 'action';
    }
    url = env.api_server + ("/api/v1/users/0/" + ref_type + "/point_balance?auth_token=") + window.localStorage.getItem('auth_token');
    params = {
      type: 'GET'
    };
    callback = 'point_balance_show';
    return ajaxCall(url, callback, params);
  };

  getUrlVars = function(loc) {
    var hash, hashes, vars, x, _i, _ref;
    vars = [];
    hashes = loc.slice(loc.indexOf('?') + 1).split('&');
    for (x = _i = 0, _ref = hashes.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      hash = hashes[x].split('=');
      vars.push(hash[0]);
      vars[hash[0]] = hash[1];
    }
    return vars;
  };

  AjaxCallback = (function() {

    function AjaxCallback() {}

    AjaxCallback.prototype.auto_login_success = function(data) {
      var callback, params, url, valid_till;
      logger("---------------------------------------------");
      logger('auto_login_success called');
      logger("set user_id => " + data.user.id);
      logger("---------------------------------------------");
      if (data.authentication_token !== null) {
        valid_till = new Date().getTime() + 86400000;
        window.localStorage.setItem('auth_token', data.user.authentication_token);
        window.localStorage.setItem('email', data.user.email);
        window.localStorage.setItem('user_id', data.user.id);
        window.localStorage.setItem('nickname', data.user.nickname);
        window.localStorage.setItem('current_point', data.user.current_point);
        window.localStorage.setItem('valid_till', valid_till);
        logger('reset localstorage with new values');
      } else {
        $.mobile.changePage("#register_form_page");
      }
      if ((data.user.registered_uuid != null) && data.user.registered_uuid === '') {
        logger("no registered_uuid found");
        logger("sending the uuid: " + device.uuid);
        url = env.api_server + 'api/v1/users/update?auth_token=' + localStorage.getItem('auth_token');
        params = {
          type: 'PUT',
          data: {
            users: {
              registered_uuid: device.uuid
            }
          }
        };
        callback = 'return_false';
        ajaxCall(url, callback, params).done(function(data) {
          return logger("sending uuid done");
        });
      }
      return logger('uuid part done');
    };

    AjaxCallback.prototype.after_register_referral_submit = function(data) {
      var callback, _suc;
      switch (data.status) {
        case 0:
          callback = function() {
            return false;
          };
          return navigator.notification.alert(data.message, callback, '情報に不備が有りました', 'OK');
        case 1:
          window.localStorage.setItem('nickname', data.data.nickname);
          window.localStorage.setItem('current_point', data.data.current_point);
          _suc = function() {
            return false;
          };
          SdkPlugin.callSdk(_suc, _suc, 'ca-reward', [2]);
          logger('sdkplugin called');
          return get_questions();
      }
    };

    AjaxCallback.prototype.after_answering_to_poll = function(data) {
      var campaign, db, k, v, _ref;
      logger('hogehoge');
      campaign = data.data.campaign_data;
      $("#answered_value").html(campaign.answered_candidate);
      $("#campaign_title").html(campaign.poll_question);
      $("#campaign_description").html(campaign.description);
      $("#campaign_point").html(campaign.point);
      $("#campaign_condition").html(campaign.condition);
      $("#campaign_by").html(campaign.advertiser_name);
      $("#campaign_current_attendee").html(campaign.current_count);
      $("#campaign_max_attendee").html(campaign.max_count);
      $("#action_button_name").html(campaign.action_button);
      logger('hogehoge1');
      $("#make_action").data({
        camp_type: campaign.camp_type.toString(),
        campaign_id: campaign.id,
        url: campaign.url,
        app_id: campaign.app_id,
        user_id: window.localStorage.getItem('user_id'),
        sale: campaign.sale,
        point: campaign.point,
        direct_flag: campaign.direct_flag,
        system_name: campaign.system_name
      });
      $("#campaign_view_img_wrapper").html("      <img src='" + campaign.image_url + "'        class='nitaku_img'        alt='campaign_img'        style='width:300px; height:150px;' width='300' height='150' />      ");
      logger('=====ANSWER MAKE ACTION==========================');
      logger($("#make_action").data());
      _ref = $("#make_action").data();
      for (k in _ref) {
        v = _ref[k];
        logger("[params] " + k + "=" + v);
      }
      logger('=================================================');
      $("#show_detailed_result").data('campaign_id', campaign.campaign_id);
      $("#show_detailed_result").data('poll_id', campaign.poll_id);
      db = new DocciDb;
      return db.poll_delete(data.data.poll_id, function() {
        return $.mobile.changePage("#campaign_view?poll_id=" + data.data.poll_id + "&campaign_id=" + data.data.campaign_id);
      });
    };

    AjaxCallback.prototype.build_exchange_form = function(data) {
      var attrs, confirm_attrs, form_fields, html, key, message, returning_data, val, _i, _len, _ref;
      if (data.status === 2) {
        confirm_attrs = pex_menu[data.desired_menu];
        returning_data = [];
        html = '';
        for (key in confirm_attrs) {
          attrs = confirm_attrs[key];
          if (key === 'account_type') {
            html += "<li>" + attrs.label + ":";
            if (attrs.label === 1) {
              html += "当座口座</li>";
            } else {
              html += "普通口座</li>";
            }
          } else {
            html += "<li>" + attrs.label + ": " + data.params[key] + "</li>";
          }
          returning_data[attrs['name']] = data.params[key];
        }
        logger(' ===Returning Data============= ');
        for (key in returning_data) {
          val = returning_data[key];
          logger("" + key + " => " + val);
        }
        logger(' ============================== ');
        logger("html => " + html);
        $("#exchange_confirm_list").html(html);
        $("#exchange_confirm_refill_button").unbind('vclick');
        $("#exchange_confirm_refill_button").bind('vclick', function(e, ui) {
          return $.mobile.changePage('#point_exchange_application');
        });
        $("#exchange_confirm_submit").unbind('vclick');
        $("#exchange_confirm_submit").bind('vclick', function(e, ui) {
          var callback, params, url;
          url = env.api_server + ("/api/v1/point_exchanges/" + ($(this).data('api_name')) + "/get_required_info?auth_token=" + (window.localStorage.getItem('auth_token')));
          returning_data = {};
          $.each(confirm_attrs, function(key, val) {
            return returning_data[val['name']] = data.params[key];
          });
          url = env.api_server + ("/api/v1/point_exchanges/" + data.desired_menu + "/submit/") + ("?auth_token=" + (window.localStorage.getItem('auth_token')));
          params = {
            type: 'POST',
            data: {
              user: returning_data
            }
          };
          callback = 'return_false';
          return ajaxCall(url, callback, params).done(function(data) {
            var cb;
            if (data.status === 1) {
              cb = function() {
                $('#point_exchange_application_form').text('');
                return $.mobile.changePage("#poll_list_view");
              };
              return navigator.notification.alert('お申込みが完了しました', cb, 'docci', 'TOPに戻る');
            } else if (data.status === 0) {
              cb = function() {
                return $.mobile.changePage("#poll_list_view");
              };
              return navigator.notification.alert(data.message, cb, 'docci', 'TOPに戻る');
            }
          });
        });
        $.mobile.changePage("#exchange_confirm");
        return $("#exchange_confirm_list").listview().listview('refresh');
      } else if (data.status === 1) {
        form_fields = pex_menu[data.desired_menu];
        message = '';
        _ref = data.message;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          message += "「" + form_fields[key]['label'] + "」";
        }
        navigator.notification.alert(message, function() {
          return false;
        }, '入力項目に不備があります', '確認');
        return false;
      } else {
        form_fields = pex_menu[data.desired_menu];
        html = '';
        $.each(form_fields, function(key, attrs) {
          if (attrs.hasOwnProperty('html')) {
            return html += attrs.html;
          } else {
            html += '<div data-role="fieldcontain"><fieldset data-role="controlgroup">';
            html += "<label for='" + attrs.id + "'>" + attrs.label + "</label>";
            return html += "<input id='" + attrs.id + "' name='" + attrs.name + "' placeholder='" + attrs.placeholder + "' value='" + data.params[key] + "' type='" + attrs.type + "' class='exchange_application_params'></fieldset></div>";
          }
        });
        html += "<div class='exchange_application_button_wrapper'><button id='exchange_application_submit_button' class='exchange_application_submit' type='button' data-api_name='" + data.desired_menu + "'>送信</button></div>";
        $("#point_exchange_application_form").html(html).trigger('create');
        $.mobile.changePage('#point_exchange_application');
        $("#exchange_application_submit_button").unbind('vclick');
        return $("#exchange_application_submit_button").bind('vclick', function(e, ui) {
          var callback, params, post_obj, url;
          e.preventDefault();
          post_obj = {
            status: data.status
          };
          $(".exchange_application_params").each(function(ind, html_obj) {
            return post_obj[$(html_obj).attr('name')] = $(html_obj).val();
          });
          if ($("input:radio[name='bank_account[account_type]']").length > 0) {
            post_obj['bank_account[account_type]'] = $('input:radio[name=bank_account[account_type]]:checked').val();
          }
          logger(post_obj);
          url = env.api_server + ("/api/v1/point_exchanges/" + ($(this).data('api_name')) + "/get_required_info?auth_token=" + (window.localStorage.getItem('auth_token')));
          params = {
            type: 'POST',
            data: post_obj
          };
          callback = 'build_exchange_form';
          return ajaxCall(url, callback, params);
        });
      }
    };

    AjaxCallback.prototype.create_poll_confirmation_cb = function(data) {
      var hidden_html, poll;
      poll = data.data.poll;
      hidden_html = '';
      $.each(poll, function(key, val) {
        return hidden_html += "<input id='cp_conf_" + key + "' type='hidden' name='" + key + "' value='" + val + "' />";
      });
      $("#confirm_question").html(poll.question);
      $("#confirm_cand_att_0").html(poll.candidates_attributes_0_value);
      $("#confirm_cand_att_1").html(poll.candidates_attributes_0_value);
      $("#confirm_max_count").html(poll.max_count);
      $("#confirm_starting_time").html(poll.starting_time);
      $("#confirm_ending_time").html(poll.ending_time);
      $("#confirm_locked_point").html(poll.locked_point);
      $("#confirm_hidden_form_field").html(hidden_html);
      return $.mobile.changePage("#create_poll_confirm");
    };

    AjaxCallback.prototype.candidate_record_not_unique = function(data) {
      return navigator.notification.alert('すでに回答済みです', function() {
        logger("poll_id => " + data.data.poll_id);
        logger("campaign_id => " + data.data.campaign_id);
        return $.mobile.changePage("#campaign_view?poll_id=" + data.data.poll_id + "&campaign_id=" + data.data.campaign_id);
      }, 'docci', '確認');
    };

    AjaxCallback.prototype.error = function(xhr, status, error) {
      logger("Ajax: something went wrong");
      logger("status: " + status + " ");
      logger("error:  " + error + " ");
      if (error === 'Unauthorized') {
        if (window.localStorage.getItem('email') !== null && window.localStorage.getItem('password') !== null) {
          return auto_login();
        } else {
          return $.mobile.changePage('#welcome');
        }
      }
    };

    AjaxCallback.prototype.point_balance_show = function(data) {
      var action, html, record_type, type;
      window.localStorage.setItem('current_point', data.user_current_point);
      $("#point_balance_current_point").text(data.user_current_point);
      record_type = data.params.type;
      logger("record_type => " + record_type);
      $("#point_balance .pb_buttons").removeClass('ui-btn-down-c');
      html = '';
      if (data.data.length === 0) {
        $("#point_balance .no_new_contents").show();
      } else {
        $("#point_balance .no_new_contents").hide();
      }
      switch (record_type) {
        case 'action':
          type = 'アクションで';
          action = '獲得';
          $("#pb_action_button").addClass('ui-btn-down-c');
          break;
        case 'answer':
          type = '回答で';
          action = '獲得';
          $("#pb_answer_button").addClass('ui-btn-down-c');
          break;
        case 'referral':
          type = '友達紹介で';
          action = '獲得';
          $("#pb_referral_button").addClass('ui-btn-down-c');
          break;
        case 'exchange':
          type = 'ポイント交換で';
          action = '使用';
          $("#pb_exchange_button").addClass('ui-btn-down-c');
      }
      $.each(data.data, function(ind, record) {
        return html += "  <li>    <span class='point_balance_1'>" + type + "<span class='point_balance_color'>" + record.point + "pt</span>" + action + "！</span>    <div class='point_balance_2'>" + record.created_at + "</div>  </li>      ";
      });
      return $("#point_balance_list").html(html).listview("refresh");
    };

    AjaxCallback.prototype.show_exchange_point_list = function(data) {
      var html_cont;
      $("#point_exchange_current_point").text(window.localStorage.getItem('current_point'));
      html_cont = '';
      $.each(data.data.point_exchanges, function(index, pex) {
        return html_cont += "        <div class='mypage_3'>          <div class='mypage_3_1'>            <img src='" + pex.image_url + "' class='exchange_point_img' />            <div class='exchange_1_1'>              <h4>" + pex.name + "</h4>              <p>使用ポイント：" + pex.point + "pt</p>            </div>            <br clear='all' />            <div class='exchange_point_text'></div>            <a href='javascript:void(0)' id='list_" + pex.api_name + "' data-image_url='" + pex.image_url + "' data-api_name='" + pex.api_name + "' data-name='" + pex.name + "' data-description='" + pex.description + "' data-point='" + pex.point + "' data-role='button'  data-mini='true'  data-inline=“true” class='exchange_1_1a submit_button point_exchange_menu_button'>交換</a>            <br clear='all'>          </div>        </div>      ";
      });
      logger("exchange_list => " + html_cont);
      $("#point_exchange_list").html(html_cont).trigger('create');
      $(".point_exchange_menu_button").unbind('click');
      return $(".point_exchange_menu_button").bind('click', function(e, ui) {
        return exchange_menu_detail_html_builder(this);
      });
    };

    AjaxCallback.prototype.login_success_callback = function(data, status, xhr) {
      var db, valid_till;
      if (data.auth_token !== null) {
        db = new DocciDb;
        db.drop_tables();
        db.create_table();
        valid_till = new Date().getTime() + 86400;
        window.localStorage.setItem('email', $('#login_user_email').val());
        window.localStorage.setItem('password', $('#login_user_password').val());
        window.localStorage.setItem('auth_token', data.auth_token);
        window.localStorage.setItem('current_point', data.user.current_point);
        window.localStorage.setItem('user_id', data.user.id);
        window.localStorage.setItem('nickname', data.user.nickname);
        window.localStorage.setItem('valid_till', valid_till);
        return get_current_point().done(function() {
          get_questions();
          return logger('success');
        });
      } else {
        logger('login_unsuccess');
        return window.localStorage.clear();
      }
    };

    AjaxCallback.prototype.get_questions_success = function(data) {
      var app_ids, db, filtered_polls,
        _this = this;
      logger('get_questions_success: called');
      logger("get_questions_success: data => " + data);
      $.mobile.changePage('#poll_list_view');
      if (data.hasOwnProperty('user') && data.user.hasOwnProperty('nickname')) {
        localStorage.setItem('nickname', data.user.nickname);
      }
      filtered_polls = [];
      db = new DocciDb;
      app_ids = $.map(data.data.polls, function(poll, i) {
        return poll.app_ids;
      });
      canOpenUrl(app_ids, function(_app_ids, _results) {
        var i, poll, _callback, _i, _len, _ref;
        console.log(JSON.stringify(_app_ids));
        console.log(JSON.stringify(_results));
        filtered_polls = [];
        _ref = data.data.polls;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          poll = _ref[i];
          if (!_results[i * 2] && !_results[i * 2 + 1]) {
            filtered_polls.push(poll);
          }
        }
        logger('========================');
        logger("filtered_polls.length => " + filtered_polls.length);
        logger('========================');
        if (filtered_polls.length === 0) {
          _callback = function() {
            return false;
          };
          navigator.notification.alert('現在表示可能な２択がありません。', _callback, 'docci', 'OK');
        }
        return db.insert_polls(filtered_polls, function() {
          logger('polls done');
          logger("poll_list_view will be called");
          return poll_list_view();
        });
      });
      console.log("insert_candidates will be called");
      return db.insert_candidates(data.data.candidates, function() {
        return logger('candidate done');
      });
    };

    AjaxCallback.prototype.register_success = function(data) {
      var callback, valid_till;
      if (data.status === 1) {
        logger('register_success');
        valid_till = new Date().getTime() + 86400;
        window.localStorage.setItem('auth_token', data.user.authentication_token);
        window.localStorage.setItem('user_id', data.user.id);
        window.localStorage.setItem('valid_till', valid_till);
        window.localStorage.setItem('current_point', 0);
        window.localStorage.setItem('email', $('#regist_user_email').val());
        window.localStorage.setItem('password', $('#regist_user_password').val());
        return $.mobile.changePage('#regist_referral');
      } else if (data.status === 0) {
        callback = function() {
          return false;
        };
        return navigator.notification.alert(data.message, callback, '情報に不備が有りました', 'OK');
      }
    };

    AjaxCallback.prototype.render_detailed_results = function(data) {
      var data_arr, hoge, poll, report;
      report = [];
      if (data.data.report[0]['count'] > data.data.report[1]['count']) {
        report = data.data.report;
      } else {
        report[0] = data.data.report[1];
        report[1] = data.data.report[0];
      }
      poll = data.data.poll;
      $('#goto_campaign_button').attr('src', '');
      $('h2.detailed_results_title').html("「" + poll['question'] + "」");
      $('span.detailed_results_title_add').html("に対するみんなの回答");
      $('span.detailed_results_a_label').text("" + report[0]['value'] + ": ");
      $('span.detailed_results_a_count').text("" + report[0]['count']);
      $('span.detailed_results_b_label').text("" + report[1]['value'] + ": ");
      $('span.detailed_results_b_count').text("" + report[1]['count']);
      $('#share_detailed_results_fb').data({
        question: poll['question'],
        pollId: poll['id']
      });
      $('#share_detailed_results_twitter').data({
        question: poll['question'],
        pollId: poll['id']
      });
      data_arr = new Array;
      $.each(report, function(key, obj) {
        return data_arr.push([[obj['rate'], 1]]);
      });
      $.mobile.changePage('#detailed_results');
      $("#bar_chart").html('');
      return hoge = $.jqplot('bar_chart', data_arr, {
        stackSeries: true,
        seriesColors: ["#056105", "#ACCCAC"],
        seriesDefaults: {
          fill: true,
          shadow: false,
          renderer: $.jqplot.BarRenderer,
          rendererOptions: {
            barDirection: 'horizontal',
            barWidth: 150,
            showDataLabels: false,
            shadowOffset: 2,
            shadowDepth: 5,
            shadowAlpha: 0.08
          }
        },
        legend: {
          show: false
        },
        axesDefaults: {
          showGridline: false,
          show: false,
          showTicks: false
        },
        axes: {
          xaxis: {
            min: 0,
            max: 100
          },
          yaxis: {
            tickOptions: {
              showGridline: false
            }
          }
        },
        grid: {
          background: 'transparent',
          gridLineWidth: 0,
          drawGridLines: false,
          drawBorder: false,
          borderWidth: 0,
          shadow: false
        }
      });
    };

    AjaxCallback.prototype.cpi_success = function(data) {
      switch (data.status) {
        case 'ok':
          return navigator.notification.alert('アプリのインストールが確認できました', function() {
            return false;
          }, 'docci', 'OK');
        case 'error':
          return navigator.notification.alert('既に成果が発生済みです', function() {
            return false;
          }, 'docci', 'OK');
      }
    };

    return AjaxCallback;

  })();

  create_poll_submit = function() {
    var callback, params, url;
    url = env.api_server + ("/api/v1/polls/confirm_poll_creation?auth_token=" + (window.localStorage.getItem('auth_token')));
    params = {
      type: "POST",
      data: {
        poll: {
          question: $("#poll_question").val(),
          candidates_attributes_0_value: $("#poll_candidates_0_val").val(),
          candidates_attributes_1_value: $("#poll_candidates_1_val").val(),
          point: $("#point_per_answer").val(),
          max_count: $("#poll_max_count").val(),
          starting_time: $("#poll_starting_time").val(),
          ending_time: $("#poll_ending_time").val()
        }
      }
    };
    callback = 'return_false';
    return ajaxCall(url, callback, params).done(function(data) {
      var hidden_html, poll;
      if (data.status === 1) {
        poll = data.data.poll;
        hidden_html = '';
        $.each(poll, function(key, val) {
          return hidden_html += "<input data-poll='" + key + "' id='cp_conf_" + key + "' type='hidden' name='" + key + "' value='" + val + "' class='cp_conf_attrs' />";
        });
        logger('==================================================');
        logger(hidden_html);
        logger('==================================================');
        $("#confirm_hidden_form_field").html(hidden_html);
        $("#confirm_question").html(poll.question);
        $("#confirm_cand_att_0").html(poll.candidates_attributes_0_value);
        $("#confirm_cand_att_1").html(poll.candidates_attributes_1_value);
        $("#confirm_max_count").html(poll.max_count);
        $("#confirm_starting_time").html(poll.starting_time);
        $("#confirm_ending_time").html(poll.ending_time);
        $("#confirm_locked_point").html(poll.locked_point);
        return $.mobile.changePage("#create_poll_confirm");
      } else if (data.status === 0) {
        return alert(data.message);
      }
    });
  };

  create_poll_confirm_submit = function() {
    var params, url;
    url = env.api_server + '/api/v1/polls?' + ("auth_token=" + (window.localStorage.getItem('auth_token')));
    logger("url => " + url);
    params = {
      type: 'POST',
      data: {
        poll: {
          question: $("#cp_conf_question").val(),
          candidates_attributes: {
            0: {
              value: $("#cp_conf_candidates_attributes_0_value").val(),
              campaign_id: 0
            },
            1: {
              value: $("#cp_conf_candidates_attributes_1_value").val(),
              campaign_id: 0
            }
          },
          point: $("#cp_conf_point").val(),
          max_count: $("#cp_conf_max_count").val(),
          starting_time: $("#cp_conf_starting_time").val(),
          ending_time: $("#cp_conf_ending_time").val(),
          sale: $("#cp_conf_sale").val(),
          device_status: window.env.device_status
        },
        locked_point: $('#cp_conf_locked_point').val()
      }
    };
    return ajaxCall(url, 'return_false', params.done(function(data) {
      if (data.status === 1) {

      } else {

      }
    }));
  };

  exchange_menu_detail_html_builder = function(clicked_element) {
    $.mobile.changePage("#exchange_menu_detail");
    $("#exchange_menu_description").html($(clicked_element).data('description'));
    $("#exchange_menu_name").html($(clicked_element).data('name'));
    $("#detailed_exchange_menu_img").attr('src', $(clicked_element).data('image_url'));
    $("#exchange_menu_point").html($(clicked_element).data('point'));
    $("#point_exchange_apply_button").data("api_name", $(clicked_element).data('api_name'));
    $("#point_exchange_apply_button").unbind('vclick');
    return $("#point_exchange_apply_button").bind('vclick', function(e, ui) {
      var callback, params, url;
      url = env.api_server + ("/api/v1/point_exchanges/" + ($(this).data('api_name')) + "/get_required_info?auth_token=" + (window.localStorage.getItem('auth_token')));
      params = {
        type: 'POST'
      };
      callback = 'build_exchange_form';
      return ajaxCall(url, callback, params);
    });
  };

  this.focusHeader = function(id) {
    $('img.poll_list_view_header_button').attr('src', './img/header_menu_1_1.png');
    $('img.answered_poll_list_view_header_button').attr('src', './img/header_menu_2_1.png');
    $('img.mypage_header_button').attr('src', './img/header_menu_3_1.png');
    $('img.settings_header_button').attr('src', './img/header_menu_4_1.png');
    $('div.header_menu div').removeClass('selected');
    switch (id) {
      case 'poll_list_view':
        $('img.poll_list_view_header_button').attr('src', './img/header_menu_1_2.png');
        return $('img.poll_list_view_header_button').parent().addClass('selected');
      case 'answered_poll_list_view':
        $('img.answered_poll_list_view_header_button').attr('src', './img/header_menu_2_2.png');
        return $('img.answered_poll_list_view_header_button').parent().addClass('selected');
      case 'mypage':
        $('img.mypage_header_button').attr('src', './img/header_menu_3_2.png');
        return $('img.mypage_header_button').parent().addClass('selected');
      case 'settings':
        $('img.settings_header_button').attr('src', './img/header_menu_4_2.png');
        return $('img.settings_header_button').parent().addClass('selected');
    }
  };

  DocciDb = (function() {

    function DocciDb() {
      this.db = window.openDatabase('com.crec.docci.db', '1.0', 'docci_db', 5242880);
      this.create_table();
    }

    DocciDb.prototype.insert_success_cb = function() {};

    DocciDb.prototype.insert_error_cb = function(e) {};

    DocciDb.prototype.drop_tables = function(tx) {
      return this.db.transaction(function(tx) {
        tx.executeSql('DROP TABLE IF EXISTS polls');
        tx.executeSql('DROP TABLE IF EXISTS candidates');
        return tx.executeSql('DROP TABLE IF EXISTS campaigns');
      });
    };

    DocciDb.prototype.create_table = function(tx) {
      return this.db.transaction(function(tx) {
        tx.executeSql('CREATE TABLE IF NOT EXISTS polls (\
        poll_id unique,\
        max_count INTEGER,\
        current_count INTEGER,\
        point INTEGER,\
        campaign_point INTEGER,\
        action_label,\
        campaign_remain_count INTEGER,\
        sale INTEGER,\
        question,\
        user_nickname,\
        starting_time,\
        ending_time,\
        device_specific,\
        image_url,\
        candidate_1_id INTEGER,\
        candidate_2_id INTEGER,\
        status\
        )');
        tx.executeSql('CREATE TABLE IF NOT EXISTS candidates (\
        candidate_id unique,\
        poll_id INTEGER,\
        value,\
        image_url,\
        campaign_id,\
        point INTEGER,\
        sale\
        )');
        return tx.executeSql('CREATE TABLE IF NOT EXISTS campaigns (\
        campaign_id INTEGER unique,\
        title,\
        description,\
        max_count INTEGER,\
        current_count INTEGER,\
        user,\
        point INTEGER,\
        sale INTEGER,\
        url,\
        app_id,\
        advertiser_name,\
        action_label,\
        image_url,\
        action_button,\
        camp_type,\
        direct_flag,\
        system_name,\
        condition,\
        status INTEGER default 0\
        )');
      });
    };

    DocciDb.prototype.insert_polls = function(polls, callback) {
      return this.db.transaction(function(tx) {
        logger("cleanup polls ...");
        tx.executeSql("DELETE FROM polls");
        logger("insert updated polls ...");
        return $.each(polls, function(index, poll) {
          var sql;
          sql = "INSERT OR REPLACE INTO polls (            poll_id,            max_count,            current_count,            point,            action_label,            campaign_remain_count,            campaign_point,            sale,            question,            user_nickname,            starting_time,            ending_time,            device_specific,            image_url,            candidate_1_id,            candidate_2_id,            status          ) VALUES          ( " + poll.id + ", " + poll.max_count + ", " + poll.current_count + ", " + poll.point + ", '" + poll.action_label + "', " + poll.campaign_remain_count + ", " + poll.campaign_point + ", " + poll.sale + ",          '" + poll.question + "','" + poll.user_nickname + "', '" + poll.starting_time + "', '" + poll.ending_time + "',          " + poll.device_specific + ", '" + poll.image_url + "', " + poll.candidate_1_id + ", " + poll.candidate_2_id + ",          coalesce((SELECT status FROM polls WHERE poll_id = " + poll.id + "), 0 ) )";
          return tx.executeSql(sql);
        });
      }, function(err) {
        return console.log("Error(" + err.code + "): " + err.message);
      }, callback);
    };

    DocciDb.prototype.poll_delete = function(poll_id, callback) {
      return this.db.transaction(function(tx) {
        var sql;
        sql = sqls.poll["delete"];
        logger(sql);
        return tx.executeSql(sql, [parseInt(poll_id, 10)]);
      }, function(err) {
        return console.log("Error(" + err.code + "): " + err.message);
      }, callback);
    };

    DocciDb.prototype.insert_candidates = function(candidates, callback) {
      console.log("insert_candidates called");
      return this.db.transaction(function(tx) {
        return $.each(candidates, function(index, candidate) {
          var sql;
          sql = "INSERT OR REPLACE INTO candidates (candidate_id, poll_id, value, image_url, campaign_id, point, sale) VALUES          ( " + candidate.id + ", " + candidate.poll_id + ", '" + candidate.value + "', '" + candidate.image_url + "', " + candidate.campaign_id + ", " + candidate.point + ", " + candidate.sale + ")";
          return tx.executeSql(sql);
        });
      }, function(err) {
        return console.log("Error(" + err.code + "): " + err.message);
      }, callback);
    };

    DocciDb.prototype.insert_campaigns = function(campaigns, callback) {
      console.log("insert_campaigns called");
      return this.db.transaction(function(tx) {
        return $.each(campaigns, function(index, campaign) {
          var sql;
          sql = "INSERT OR REPLACE INTO campaigns (            campaign_id,            title,            description,            max_count,            current_count,            user,            point,            sale,            url,            app_id,            advertiser_name,            action_label,            image_url,            action_button,            camp_type,            direct_flag,            system_name,            condition,            status          ) VALUES          (            " + campaign.id + ",            '" + campaign.title + "',            '" + campaign.description + "',            " + campaign.max_count + ",            " + campaign.current_count + ",            " + campaign.point + ",            " + campaign.sale + ",            '" + campaign.url + "',            '" + campaign.app_id + "',            '" + campaign.advertiser_name + "',            '" + campaign.action_label + "',            '" + campaign.image_url + "',            '" + campaign.action_button + "',            '" + campaign.camp_type + "',            '" + campaign.direct_flag + "',            '" + campaign.system_name + "',            '" + campaign.condition + "',            coalesce( (SELECT status FROM campaigns WHERE campaign_id = " + campaign.id + "), 'hogehoge' )          )";
          return tx.executeSql(sql);
        });
      }, function(err) {
        return console.log("Error(" + err.code + "): " + err.message);
      }, callback);
    };

    /* Wrapper for retrieving data from WebDB
    */


    /*     * sql => sql(string)
    */


    /*     * dynamic_params => parameters(Array)
    */


    /*     * callback  => callback (Function)
    */


    DocciDb.prototype.retrieve = function(sql, dynamic_params, callback) {
      console.log("sql: " + sql);
      console.log("dynamic_params: " + dynamic_params);
      return this.db.transaction(function(tx) {
        return tx.executeSql(sql, dynamic_params, function(tx, results) {
          console.log('retrieve complete');
          return callback(results);
        }, function(err) {
          return console.log("Error(" + err.code + "): " + err.message);
        });
      });
    };

    return DocciDb;

  })();

  CampaignBrowser = (function() {

    function CampaignBrowser(init_url) {
      this.init_url = init_url != null ? init_url : nil;
      return true;
    }

    CampaignBrowser.prototype.show = function() {
      var browser;
      logger('campaignbrowser show');
      browser = window.open(this.init_url, '_blank', 'location=no');
      return browser.addEventListener('loadstart', function(event) {
        var location;
        console.log('start: ' + event.url);
        console.log('type: ' + event.type);
        location = event.url;
        logger("childbrowser: href => " + location);
        if (location.match(/^https?:\/\/(stg\.)?apidocci\.com\/api\/v1\/users\/facebook\?post_id=.+/)) {
          logger('child browser should close');
          this.close();
          navigator.notification.alert('投稿が完了しました。', function() {
            return false;
          }, 'docci', '確認');
          return false;
        } else {
          logger('child browser should not close');
        }
        if (location.match(/^https:\/\/twitter.com\/intent\/tweet\/complete/)) {
          logger('child browser should close');
          this.close();
          navigator.notification.alert('投稿が完了しました。', function() {
            return false;
          }, 'docci', '確認');
          return false;
        } else {
          return logger('WebBrowser should not close');
        }
      });
    };

    return CampaignBrowser;

  })();

  AndroidButtonControl = (function() {
    var quit_app, return_false_for_back, to_poll_list_view;

    function AndroidButtonControl() {}

    AndroidButtonControl.return_false_for_menubutton = function(e) {
      e.preventDefault();
      logger('clicked on menu button');
      return false;
    };

    AndroidButtonControl.return_false_for_searchbutton = function(e) {
      e.preventDefault();
      logger('clicked on search button');
      return false;
    };

    AndroidButtonControl.return_for_backbutton = function(e) {
      var disable_pages, quit_app_pages, to_poll_list;
      logger('clicked on backbutton');
      logger("current page is: " + $.mobile.activePage[0].id);
      quit_app_pages = ["welcome", "poll_list_view", "mypage", "settings", "answered_poll_list_view"];
      disable_pages = ["poll_view", "exchange_confirm", "register_form_page", "regist_referral"];
      to_poll_list = ["campaign_view"];
      if (quit_app_pages.indexOf($.mobile.activePage[0].id) > -1) {
        logger('backbutton: quit_app()');
        return quit_app();
      } else if (disable_pages.indexOf($.mobile.activePage[0].id) > -1) {
        logger('backbutton: return_false_for_back()');
        return return_false_for_back();
      } else if (to_poll_list.indexOf($.mobile.activePage[0].id) > -1) {
        logger('backbutton: to_poll_list_view()');
        return to_poll_list_view();
      } else {
        logger('backbutton: default');
        return navigator.app.backHistory();
      }
    };

    AndroidButtonControl.quit_app_for_back = function() {
      logger('quit_app_for_back: called');
      if (window.env.device_status === 2) {
        logger('quit_app_for_back: this is Android');
        document.addEventListener('backbutton', quit_app, false);
        $(document).one('pagebeforechange', function(e) {
          logger('quit_app_for_back: back to normal backbutton<<<');
          document.removeEventListener('backbutton', quit_app, false);
          return logger('quit_app_for_back: back to normal backbutton>>>');
        });
      } else if (window.env.device_status === 1) {
        return false;
      }
      return false;
    };

    AndroidButtonControl.disable_backbutton = function() {
      if (window.env.device_status === 2) {
        document.addEventListener('backbutton', return_false_for_back, false);
        return $(document).one('pagebeforechange', function() {
          return document.removeEventListener('backbutton', return_false_for_back, false);
        });
      } else if (window.env.device_status === 1) {
        return false;
      }
    };

    return_false_for_back = function(e) {
      logger('clicked on backbutton');
      return false;
    };

    to_poll_list_view = function(e) {
      logger('clicked on backbutton');
      return $.mobile.changePage('#poll_list_view');
    };

    quit_app = function() {
      var confirmSubmit;
      logger('quit_app: clicked on backbutton');
      confirmSubmit = function(pushed_button) {
        if (pushed_button === 2) {
          logger('quit_app: should quit');
          return navigator.app.exitApp();
        } else {
          logger('quit_app: should not quit');
          return false;
        }
      };
      navigator.notification.confirm('docciを終了しますか？', confirmSubmit, 'docci', 'いいえ,はい');
      return false;
    };

    return AndroidButtonControl;

  })();

  document.addEventListener('deviceready', onDeviceReady, true);

  $('#pb_action_button').bind('vclick', function(e, ui) {
    e.preventDefault();
    return point_balance_show_api('action');
  });

  $('#pb_answer_button').bind('vclick', function(e, ui) {
    e.preventDefault();
    return point_balance_show_api('answer');
  });

  $('#pb_referral_button').bind('vclick', function(e, ui) {
    e.preventDefault();
    return point_balance_show_api('referral');
  });

  $('#pb_exchange_button').bind('vclick', function(e, ui) {
    e.preventDefault();
    return point_balance_show_api('exchange');
  });

  Facebook = (function() {

    function Facebook() {
      this.base_url = "https://m.facebook.com/dialog/feed" + ("?app_id=" + env.fb_api_id) + "&picture=https://lh3.ggpht.com/3zOkT7KHYx-ZdI6Twxwpf_b8l7YLWrQhc6CC0R1cu4-gHKr8Sb72RTAXRQVYA_LuZv8=w124" + ("&redirect_uri=" + env.api_server + "api/v1/users/facebook") + "&name=docci";
    }

    Facebook.prototype.shareUrl = function(url, title, caption, description) {
      var cb, encoded_caption, encoded_description, encoded_title, encoded_url, target_url;
      encoded_url = encodeURIComponent(url);
      encoded_title = encodeURIComponent(title);
      encoded_caption = encodeURIComponent(caption);
      encoded_description = encodeURIComponent(description);
      target_url = this.base_url + ("&link=" + encoded_url) + ("&title=" + encoded_title) + ("&caption=" + encoded_caption) + ("&description=" + encoded_description);
      logger("Facebook: url => " + target_url);
      cb = new CampaignBrowser(target_url);
      return cb.show();
    };

    Facebook.prototype.testUrl = function() {
      var cb, target_url;
      target_url = 'https://m.facebook.com/dialog/feed?app_id=123050457758183&link=https://developers.facebook.com/docs/reference/dialogs/&picture=http://fbrell.com/f8.jpg&name=Facebook%20Dialogs&caption=Reference%20Documentation&%20description=Using%20Dialogs%20to%20interact%20with%20users&redirect_uri=http://www.example.com/response';
      cb = new CampaignBrowser(target_url);
      return cb.show();
    };

    return Facebook;

  })();

  Twitter = (function() {

    function Twitter() {
      this.base_url = "https://twitter.com/share?lang=ja";
    }

    Twitter.prototype.shareUrl = function(url, text, hash) {
      var cb, encoded_hash, encoded_text, encoded_url, target_url;
      encoded_url = encodeURIComponent(url);
      encoded_text = encodeURIComponent(text);
      encoded_hash = encodeURIComponent(hash);
      target_url = this.base_url + ("&url=" + encoded_url) + ("&text=" + encoded_text) + ("&hashtags=" + encoded_hash);
      logger("Twitter: url => " + target_url);
      cb = new CampaignBrowser(target_url);
      return cb.show();
    };

    return Twitter;

  })();

}).call(this);


var start = function(){new Suggest.Local("bank_name", "suggest", list);};
window.addEventListener ?
window.addEventListener('load', start, false) :
window.attachEvent('onload', start);

var list = [
'みずほ銀行',
'三菱東京UFJ銀行',
'三井住友銀行',
'りそな銀行',
'みずほコーポレート銀行',
'埼玉りそな銀行',
'セブン銀行',
'北海道銀行',
'青森銀行',
'みちのく銀行',
'秋田銀行',
'北都銀行',
'荘内銀行',
'山形銀行',
'岩手銀行',
'東北銀行',
'七十七銀行',
'東邦銀行',
'群馬銀行',
'足利銀行',
'常陽銀行',
'筑波銀行',
'武蔵野銀行',
'千葉銀行',
'千葉興業銀行',
'東京都民銀行',
'横浜銀行',
'第四銀行',
'北越銀行',
'山梨中央銀行',
'八十二銀行',
'北陸銀行',
'富山銀行',
'北國銀行',
'福井銀行',
'静岡銀行',
'スルガ銀行',
'清水銀行',
'大垣共立銀行',
'十六銀行',
'三重銀行',
'百五銀行',
'滋賀銀行',
'京都銀行',
'近畿大阪銀行',
'池田泉州銀行',
'南都銀行',
'紀陽銀行',
'但馬銀行',
'鳥取銀行',
'山陰合同銀行',
'中国銀行',
'広島銀行',
'山口銀行',
'阿波銀行',
'百十四銀行',
'伊予銀行',
'四国銀行',
'福岡銀行',
'筑邦銀行',
'佐賀銀行',
'十八銀行',
'親和銀行',
'肥後銀行',
'大分銀行',
'宮崎銀行',
'鹿児島銀行',
'琉球銀行',
'沖縄銀行',
'西日本シティ銀行',
'北九州銀行',
'三菱ＵＦＪ信託銀行',
'みずほ信託銀行',
'三井住友信託銀行',
'野村信託銀行',
'新生銀行',
'あおぞら銀行',
'シティバンク銀行',
'北洋銀行',
'きらやか銀行',
'北日本銀行',
'仙台銀行',
'福島銀行',
'大東銀行',
'東和銀行',
'栃木銀行',
'京葉銀行',
'東日本銀行',
'東京スター銀行',
'神奈川銀行',
'大光銀行',
'長野銀行',
'富山第一銀行',
'福邦銀行',
'静岡中央銀行',
'岐阜銀行',
'愛知銀行',
'名古屋銀行',
'中京銀行',
'第三銀行',
'関西アーバン銀行',
'大正銀行',
'みなと銀行',
'島根銀行',
'トマト銀行',
'もみじ銀行',
'西京銀行',
'徳島銀行',
'香川銀行',
'愛媛銀行',
'高知銀行',
'福岡中央銀行',
'佐賀共栄銀行',
'長崎銀行',
'熊本ファミリー銀行',
'豊和銀行',
'宮崎太陽銀行',
'南日本銀行',
'沖縄海邦銀行',
'八千代銀行',
'農林中央金庫',
'ジャパンネット銀行',
'ソニー銀行',
'楽天銀行',
'住信ＳＢＩネット銀行',
'じぶん銀行',
'イオン銀行',
'大和ネクスト銀行',
'オリックス銀行',
'しんきん信託銀行',
'あおぞら信託銀行',
'農中信託銀行'
];

// Generated by CoffeeScript 1.3.3
(function() {

  this.SdkPlugin = {
    callSdk: function(success, fail, sdk_type, params) {
      console.log("Sdk calling for type: " + sdk_type);
      console.log("params including: " + params);
      return cordova.exec(success, fail, "Sdk", sdk_type, params);
    },
    test: function() {
      console.log("SdkPlugin: test");
      return false;
    }
  };

}).call(this);

