






            (function() {
                var jasmineEnv = jasmine.getEnv();
                jasmineEnv.updateInterval = 1000;

                var htmlReporter = new jasmine.HtmlReporter();

                jasmineEnv.addReporter(htmlReporter);

                jasmineEnv.specFilter = function(spec) {
                    return htmlReporter.specFilter(spec);
                };

                var currentWindowOnload = window.onload;

                window.onload = function() {
                    if (currentWindowOnload) {
                        currentWindowOnload();
                    }
                    execJasmine();
                };

                function execJasmine() {
                    jasmineEnv.execute();
                }
            })();
        













        	function childbrowser(){
        		window.plugins.childBrowser.showWebPage("http://www.google.com", { showLocationBar: true });
        	}
        	function encode(){
        	    window.plugins.barcodeScanner.encode(BarcodeScanner.Encode.TEXT_TYPE, "http://www.nytimes.com", function(success) {
        	        alert("encode success: " + success);
        	      }, function(fail) {
        	        alert("encoding failed: " + fail);
        	      }
        	    );
        	}
        	function scan(){
        		window.plugins.barcodeScanner.scan( 
        			function(result) {
        	        	alert("We got a barcode\n" +
        	                  "Result: " + result.text + "\n" +
        	                  "Format: " + result.format + "\n" +
        	                  "Cancelled: " + result.cancelled);
        	    	}, function(error) {
        	        	alert("Scanning failed: " + error);
        	    	}
        		);
        	}
        	function pickDate(){
                var myNewDate = new Date();
				var pickedDate;
                
                // Same handling for iPhone and Android
                window.plugins.datePicker.show({
                    date : myNewDate,
                    mode : 'date', // date or time or blank for both
                    allowOldDates : true
                }, function(returnDate) {
                    var newDate = new Date(returnDate);
                    pickedDate = newDate.toString("dd/MMM/yyyy");
					console.log(pickedDate);
                });
        	}
        	function pickTime(){
                var myNewTime = new Date();
				var pickedTime;
                myNewTime.setHours(3);
                myNewTime.setMinutes(15);
                // Same handling for iPhone and Android
                plugins.datePicker.show({
                    date : myNewTime,
                    mode : 'time', // date or time or blank for both
                    allowOldDates : true
                }, function(returnDate) {
                  // returnDate is generated by .toLocaleString() in Java so it will be relative to the current time zone
                    var newDate = new Date(returnDate);
                    pickedTime = newDate.toString("HH:mm");
                    console.log(pickedTime);
                });
        	}
        	function statusBar(){
        		window.plugins.statusBarNotification.notify("Title Here", "Message Here");
        	}
        	var preferences = cordova.require("cordova/plugin/applicationpreferences");
        	function setPref(name, value){
        		preferences.set(
        			name, 
        			value, 
        			function() {
        	        	console.log("Successfully saved!");
        	    	}, function(error) {
        	        	console.log("Error! " + JSON.stringify(error));
	        		}
        	    );
        	}
        	function getPref(name){
        		preferences.get(
        			name, 
        			function(value) {
        	        	console.log(name + ":" + value);
        	    	}, function(error) {
        	        	console.log("Error! " + JSON.stringify(error));
	        		}
        	    );
        	}
        	var my_media;
        	function playAudio(src){
                my_media = new Media(
                				src, 
                				function(){console.log('Success Playing');}, 
                				function(error){console.log('Error Playing: ' + error);},
                				function(status){
                					switch(status){
                						case 0:	console.log('No Media');
                								break;
                						case 1: console.log('Media Loading');
                								break;
                						case 2: console.log('Media Playing');
                								break;
                						case 3: console.log('Media Paused');
                								break;
                						case 4: console.log('Media Stopped');
                								break;
                					}                					
                				}	
                			);
                my_media.play();
        	}
        	function pauseAudio(){
        		if(my_media){
        			my_media.pause();
        		}
        	}
        	
        	function playStream(){
        		window.plugins.audioStreamer.play(
        				"http://hannibal.ucs.indiana.edu:8080/wiuxultra", 
        				null,
        				function(){
        					console.log("Playing Succeeded");
        				}, 
        				function(error){
        					console.log("Playing Failed")
        				});
        	}

        	function pauseStream(){
        		window.plugins.audioStreamer.pause(
        				function(){
        					console.log("Pause Succeeded");
        				},
        				function(error){
        					console.log("Pause Failed");
        				});
        	}
        	
        

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
describe('app', function() {
    describe('initialize', function() {
        it('should bind deviceready', function() {
            runs(function() {
                spyOn(app, 'onDeviceReady');
                app.initialize();
                helper.trigger(window.document, 'deviceready');
            });

            waitsFor(function() {
                return (app.onDeviceReady.calls.length > 0);
            }, 'onDeviceReady should be called once', 500);

            runs(function() {
                expect(app.onDeviceReady).toHaveBeenCalled();
            });
        });
    });

    describe('onDeviceReady', function() {
        it('should report that it fired', function() {
            spyOn(app, 'receivedEvent');
            app.onDeviceReady();
            expect(app.receivedEvent).toHaveBeenCalledWith('deviceready');
        });
    });

    describe('receivedEvent', function() {
        beforeEach(function() {
            var el = document.getElementById('stage');
            el.innerHTML = ['<div id="deviceready">',
                            '    <p class="event listening">Listening</p>',
                            '    <p class="event received">Received</p>',
                            '</div>'].join('\n');
        });

        it('should hide the listening element', function() {
            app.receivedEvent('deviceready');
            var displayStyle = helper.getComputedStyle('#deviceready .listening', 'display');
            expect(displayStyle).toEqual('none');
        });

        it('should show the received element', function() {
            app.receivedEvent('deviceready');
            var displayStyle = helper.getComputedStyle('#deviceready .received', 'display');
            expect(displayStyle).toEqual('block');
        });
    });
});




/**
 * Constructor
 */
function AudioStreamer() {
};

/**
 * Play a stream at a given URL, with options. 
 */
AudioStreamer.prototype.play = function(url, options, success, fail) {
    options = options || {
        autoplay: true,
        type: "mp3"
    };
    cordova.exec(success,fail, "AudioStreamer", "play", [url, options]);
};

/**
 * Pause the current playing stream. Effectively stops and destroys the service. 
 */
AudioStreamer.prototype.pause = function(success, fail) {
	cordova.exec(success, fail, "AudioStreamer", "pause", []);
};

AudioStreamer.prototype.stop = function(success, fail) {
	cordova.exec(success, fail, "AudioStreamer", "pause", []);
};


/**
 * Maintain API consistency with iOS
 */
AudioStreamer.prototype.install = function(){
};

/**
 * Load ChildBrowser
 */

if(!window.plugins) {
    window.plugins = {};
}
if (!window.plugins.audioStreamer) {
    window.plugins.audioStreamer = new AudioStreamer();
}


/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicity call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        app.receivedEvent('deviceready');
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
    }
};


cordova.define("cordova/plugin/applicationpreferences", function(require, exports, module) {
	var exec = require("cordova/exec");
	var AppPreferences = function () {};
	
	var AppPreferencesError = function(code, message) {
	    this.code = code || null;
	    this.message = message || '';
	};
	
	AppPreferencesError.NO_PROPERTY = 0;
	AppPreferencesError.NO_PREFERENCE_ACTIVITY = 1;
	
	AppPreferences.prototype.get = function(key,success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","get",[key]);
	};
	
	AppPreferences.prototype.set = function(key,value,success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","set",[key, value]);
	};
	
	AppPreferences.prototype.load = function(success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","load",[]);    
	};
	
	AppPreferences.prototype.show = function(activity,success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","show",[activity]);    
	};
	
	AppPreferences.prototype.clear = function(success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","clear", []);    
	};
	
	AppPreferences.prototype.remove = function(keyToRemove, success,fail) {
	    cordova.exec(success,fail,"applicationPreferences","remove", [keyToRemove]);    
	};

	var appPreferences = new AppPreferences();
	module.exports = appPreferences;
});
