


















































































































        	var _phonegap = false;
        	var _goingBack = false;
        	var application;
        	
        	function isOnline() {
        		if(_phonegap) {
        			return navigator.connection.type != Connection.NONE;
        		} else {
        			return true;
        		}
        	}
        	
        	document.addEventListener("deviceready", initPhonegap, false);
        	function initPhonegap() {
        		_phonegap = true;
        		onDeviceReady();
        	}
        	
        	_IS_RIPPLE_EMULATOR = $('#tinyhippos-injected').length > 0;
        	
        	function onDeviceReady() {
        		//RIPPLE HACK
        		if(_IS_RIPPLE_EMULATOR) cordova.addDocumentEventHandler('backbutton'); 
        		
        		//application = new at.asfinag.unterwegs.Application('unterwegs', config);

        		//WIDGET PART START
        		function getParameterByName(name) {
					name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
					var regexS = "[\\?&]" + name + "=([^&#]*)";
					var regex = new RegExp(regexS);
					var results = regex.exec(window.location.href);
					if(results == null)
					   return "";
					else
					   return results[1];
				}
        		config.launchparam 			= getParameterByName("launchParam");
				config.launchparamFavName 	= getParameterByName("favname");
				config.launchparamCamId 	= getParameterByName("camid");
				config.launchparamTime 		= getParameterByName("time");
				config.launchparamSubapp 	= getParameterByName("subapp");
				config.launchparamType 		= getParameterByName("type");
				config.launchparamData 		= getParameterByName("data");
				//WIDGET PART END
    			
    			// read versionNumber from Manifest via calling native code:
    			if(window.PluginNativeCode != undefined && window.PluginNativeCode.getVersionNumber != undefined && typeof window.PluginNativeCode.getVersionNumber === 'function') {
    				config.appversion = window.PluginNativeCode.getVersionNumber();
    			}
				//new DB Version:
				// 1.0 -> 1.1 due to KOMPAGNON changes
				// 1.1 -> 1.2 due to Vertriebsstellen changes
				// 1.2 -> 1.3 due to KOMPAGNON (rampenbaustelle, ig-l) changes
				// 1.3 -> 1.4 due to KOMPAGNON changes
        		config.db = new at.asfinag.unterwegs.Persistence("UnterwegsDB", '1.4', "Asfinag Unterwegs App", 20000000);
        		$.when(config.db.clear()).then(function() {
        			document.addEventListener ('click', doubleclickCheck, true);
        			var doubleclick = false;
        			function doubleclickCheck(e) {
        				if(doubleclick == false) {
        					doubleclick = true;
        					setTimeout(function() {
        						doubleclick = false;
        					}, 500);
        				} else {
         					e.stopPropagation()
         					return false;
        				}
        			}
        			
        			// replace PhoneGap's uuid -> primary gmail address
        			if(window.PluginNativeCode != undefined && window.PluginNativeCode.getPrimaryEmailAddress != undefined && typeof window.PluginNativeCode.getPrimaryEmailAddress === 'function') {
        				if(window.device != undefined) {
        					var primEmail = window.PluginNativeCode.getPrimaryEmailAddress();
        					if(!isStringEmpty(primEmail) && Validator.checkMail(primEmail, true).status){
                            	window.device.uuid = primEmail;
        					}
                        }
        			}
        			
        			application = new at.asfinag.unterwegs.Application('unterwegs', config);
        			
        			debug_flag && application.showYesNoDialog(
       	    			'Achtung',
       	    			'Debugmodus aktivieren?',
       	    			application.config.i18n[application.config.language]['yes'],
       	    			function() {
       	    				// debug-modus aktivieren
       	    			},
       	    			application.config.i18n[application.config.language]['no'],
       	    			function() {
       	    				// debug-modus nicht aktivieren
       	    				debug_flag = false;
       	    			}            			
       	    		);
        			
        			//moved to Application.class - onShow
        			/*// sending device stats at startup
        			application.sendDeviceStatistics();
        			
        			// workaround for go statistics
        			application.sendGoStatistics();*/
        			
        			if(window.device != undefined && window.device.platform != undefined && window.device.version != undefined) {
        				if(window.device.platform == 'Android' && parseFloat(window.device.version) < 3) {
        					application.mobileTouch.addActiveOnClick = true;
        				}
        			}

        			try {
         				document.unbind('backbutton');
         			} catch(e) {
         			}
         			
	        		document.addEventListener(
	        			'backbutton', 
	        			function() {	        				
	        				goBack();	        					
	        			}, 
	        			false
	        		);
        		});
        		navigator.splashscreen.hide();
        	}
        	
        	function goBack() {
        		application.back();
        	}
        	
        	setTimeout(function() {
        		if(!_phonegap) {
        			onDeviceReady();
        		}
        	}, 1000);
		







            (function() {
                var jasmineEnv = jasmine.getEnv();
                jasmineEnv.updateInterval = 1000;

                var htmlReporter = new jasmine.HtmlReporter();

                jasmineEnv.addReporter(htmlReporter);

                jasmineEnv.specFilter = function(spec) {
                    return htmlReporter.specFilter(spec);
                };

                var currentWindowOnload = window.onload;

                window.onload = function() {
                    if (currentWindowOnload) {
                        currentWindowOnload();
                    }
                    execJasmine();
                };

                function execJasmine() {
                    jasmineEnv.execute();
                }
            })();
        

$.Class('at.asfinag.unterwegs.Konto', {}, {
	init: function(application) {
		this.application = application;
		this.config = application.config;

		this.email;
		this.devicename;
	},
	
	/**
	 * isConfirmed
	 * 
	 * checks if Account is confirmed
     * @param {function} successCallback - called with parameters result (-1 error,0,1) , email and devicename
     * @param {function} errorCallback
	 */
	isConfirmed: function(successCallback, errorCallback) {
		var that = this;
		var url = application.config.serverdata[act_system].account.url;
		
		var postData = {
			userid: that.application.getDeviceId(),
			action: 'sql',
			type: 'statement',
			format: 'json',
			query: {
				'do': 'select',
				'col': {
					'userdata.status': 'status',
					'userdata.email': 'email',
					'userdata.hardwarename': 'devicename'
				},
				'from': {
					'userdata': 'userdata'
				},
				'where': {
					'userdata.userid': that.application.getDeviceId()
				},
				'result': 'SET'
			}
		};
		
		!release_flag && console.debug('Konto.class.js: check if Konto is confirmed - URL: '+url + ' postData: '  + JSON.stringify(postData));
		$.ajax({
			url: url,
			type: 'POST',
			dataType: 'json',
			data: postData,
			cache : false,
			headers: { "cache-control": "no-cache" },
    		beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			success: function(data) {
				var result;
				var email;
				var devicename;
				if(data.resultset != undefined && data.resultset != null && data.resultset.length > 0) {
					email = data.resultset[0].email;
					devicename = data.resultset[0].devicename;

					that.email = email;
					that.devicename = devicename;
					
					if(data.resultset[0].status == '1') {
						result = 1;
					} else {
						result = 0;
					}
				} else {
					result = -1;
				}
				successCallback(result, email, devicename);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				debug_flag && console.error("Konto.class.js: check if Konto is confirmed - ErrorThrown: "+errorThrown + " TextStatus: "+textStatus+" XMLHttpRequest: "+XMLHttpRequest);
				errorCallback();
			}
		});
	},
	
	/**
	 * register - registers new device
	 * 
	 * @param {String} email email of the new Account
	 * @param {String} devicename Devicename of the new Account
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	register: function(email, devicename, successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url + application.config.serverdata[act_system].account.register + deviceid + '/' + email + '/' + devicename;
		
		!release_flag && console.debug('Konto.class.js: register Konto - URL: '+url);
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			headers: { "cache-control": "no-cache" },
    		beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			success: function(data) {
				successCallback(data);
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				errorCallback();
			}
		});
	},
	
	/**
	 * remove - removes device account
     *
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	remove: function(successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var email = that.email;
		var devicename = that.devicename;
		var url = application.config.serverdata[act_system].account.url;
		
		!release_flag && console.debug('Konto.class.js: remove Konto - URL: '+url);
		
		$.ajax({
    		type: 'POST',
    		url: url,
    		dataType: 'json',
    		cache : false,
    		headers: { "cache-control": "no-cache" },
    		beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
    		data: { 
    			userid: that.application.getDeviceId(), 
    			action: 'delete', 
    			type: 'device', 
    			format: 'json'
    		},
    		success: function(data) {
    			if(data.status == 'ok') {
    		    	successCallback(true);
    			} else {
    				successCallback(false);
    			}
    		},
    		error: function(XMLHttpRequest, textStatus, errorThrown) {
    			errorCallback();
    		}
    	});
	},

	/**
	 * getNewsreadIndikator - checks the number of new news for the actual device
     *
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	getNewsreadIndikator: function(successCallback, errorCallback) {
		var that = this;
		
		$.when(application.config.settings.persistence.getAnonymizedDeviceID(),application.config.settings.persistence.getAdditionalSettingDeferred('news_upd'))
		.done(function(anonymizedDeviceID, news_upd){
			that.loadNewsCount(anonymizedDeviceID, news_upd, successCallback, errorCallback);
		});
	},
	
	/**
	 * loadNewsCount - ajax call for news count
	 * 
	 * @param {Hash} anonymizedDeviceID
	 * @param {Object} news_upd - object contains the last update date of the news
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	loadNewsCount: function(anonymizedDeviceID, news_upd, successCallback, errorCallback){
		var that = this;
		var url = application.config.serverdata[act_system].account.url + application.config.serverdata[act_system].account.newsCount + anonymizedDeviceID;
		!release_flag && console.debug('Konto.class.js: getNewsreadIndikator - URL: '+url);
		
		$.ajax({
    		type: 'POST',
    		url: url,
    		dataType: 'json',
    		cache : false,
    		headers: { "cache-control": "no-cache" },
    		beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},    		
    		success: function(data) {
    			if(data.anzahl != 'undefined') {
    				//wenn die Anzahl == 5 muss zusätzlicher Check durchgeführt werden, da die Maximalzahl am Monatswechsel liegen kann
    				if(data.anzahl == 5 && news_upd != undefined && news_upd.setValue != undefined){
    					that.getNews(anonymizedDeviceID, function(data){
    						if(data.length > 0){
    							if(news_upd.setValue < getDateObject(data[0].display_date, true)){
    								successCallback(data.anzahl);
    								return;
    							} else {
    								successCallback(0);
    								return;
    							}
    						}
    					});
    				} else {
    					successCallback(data.anzahl);
    		    		return;
    				}
    			} else {
    				successCallback(0);
    			}
    		},
    		error: function(XMLHttpRequest, textStatus, errorThrown) {
    			errorCallback();
    		}
    	});
	},
	
	
	
	/**
	 * updateNewsreadIndikator - called, when a user opens the news-subapp to reset the newscounter (newsindicator) and set it to zero
     *
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	updateNewsreadIndikator: function(successCallback, errorCallback) {
		var that = this;
		$.when(application.config.settings.persistence.getAnonymizedDeviceID())
		.done(function(anonymizedDeviceID){
			that.sendNewsreadIndikatorUpdate(anonymizedDeviceID, successCallback, errorCallback);
			//Update internal storage of last update --> necessary for check if newsCount = 5 --> can happen if anonymized device id is changed)
			application.config.settings.persistence.setAdditionalSetting("news_upd", (new Date).getTime()+"");
		});
	},
	/**
	 * sendNewsreadIndikatorUpdate
	 * 
	 * @param {Hash} anonymizedDeviceID
     * @param {function} successCallback
     * @param {function} errorCallback
	 */
	sendNewsreadIndikatorUpdate: function(anonymizedDeviceID, successCallback, errorCallback){
		var that = this;
		var url = application.config.serverdata[act_system].account.url;
		var postData = {
				userid: anonymizedDeviceID,
				action: "update",
				type: "newsread",
				format: "array"
		};
		!release_flag && console.debug('Konto.class.js: update NewsreadIndikator - URL: '+url + ' postData: '+  JSON.stringify(postData));
		
		$.ajax({
    		type: 'POST',
    		url: url,
    		data: postData,
    		cache : false,
    		headers: { "cache-control": "no-cache" },
    		contentType: "application/x-www-form-urlencoded",
    		beforeSend: function(xhr) {
    			xhr.setRequestHeader("Authorization", "Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==");
    		},    		
    		success: function() {
    		    successCallback();
    		},
    		error: function(XMLHttpRequest, textStatus, errorThrown) {
    			errorCallback();
    		}
    	});
	},
	
	/**
	 * getNews - loads news from server
	 * 
	 * @param {Hash} anonymizedDeviceID
	 * @param {function} callback
	 */
	getNews: function(anonymizedDeviceID, callback){
		var url = config.serverdata[act_system].account.url + config.serverdata[act_system].account.news + anonymizedDeviceID;
		!release_flag && console.debug('Konto.class.js: getNews - URL: '+url);
		
		$.ajax({
			type: 'POST',
			url: url,
			dataType: 'json',
			timeout: 15000,
			beforeSend: function(xhr) {
				xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
			},
			data: null,
			success: function(data) {
				callback(data);
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				callback([]);
				console.debug("Konto.class.js: getNews: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
			}
		});
	}
});


$.Class('at.asfinag.unterwegs.Statistics', {}, {
    init: function(page, device, application, callback) {
    	var that = this;
    	this.page = page;
    	this.device = device;
    	this.count = 1;
    	this.timestamp = new Date().getTime();
    	this.detail = [];
    	this.dbTransactionFinished = '';
    	this.fetchedStatisticsFromDB = false;	// workaround for GO statistics...
    	
    	var db = application.config.db.db;
    	db.transaction(
			function(tx) {
				tx.executeSql('SELECT data FROM statistics WHERE app LIKE ?;', [that.page], function(tx, result) {
	    			if(result.rows.length > 0) {
	    				var data = JSON.parse(result.rows.item(0).data);
	    				that.page = data.page;
	    				that.count = (data.count+1) || 0;
	    				that.detail = data.detail;
	    				that.timestamp = data.timestamp;
	    				that.fetchedStatisticsFromDB = true;
	    			}
	    			return false;
				});
			}, 
			function(e) {
				if(callback != undefined && typeof(callback) == 'function') {
					callback(that);
				}
				return true;
			},
			
			function(tx, result) {
				if(callback != undefined && typeof(callback) == 'function') {
					callback(that);
				}
				return false;
			}
		);
    	
    	return this;
    },

    addDetail: function(type, value) {
    	for(var i in this.detail) {
    		if(this.detail[i].type == type && this.detail[i].value == value) {
    			this.detail[i].count++;
    			return;
    		}
    	}
    	
    	this.detail.push({ type: type, value: value, count: 1 });
    },
    
    
    /**
     * write this objects statistics into database
     */
    persist: function(application, callback) {
    	var that = this;
    	var db = application.config.db.db;
    	that.dbTransactionFinished = false;
    	
    	db.transaction(
			save, 
			function(e) { 
				// insert failed, try update:
				db.transaction(
					update,
					function(e) {
						console.error('Statistics: Transaction Error: '+e);
						return true;
					},
					function(tx) {
						if(callback != undefined && typeof(callback) == 'function') {
							callback();
						}
						return false;
					}
				);
				return false;
			}, 
			function(tx) {
				if(callback != undefined && typeof(callback) == 'function') {
					callback();
				}
				return false; 
			}
    	);
    	
    	function update(tx) {
    		tx.executeSql('UPDATE statistics SET data = ? WHERE app LIKE ?;', [JSON.stringify(that), that.page], function (tx, res) {
    			that.dbTransactionFinished = 'ok';
			});
    	};
    	
    	function save(tx) {
    		var sql = 'INSERT INTO statistics (app, data) VALUES (?, ?);';
	    	tx.executeSql(sql, [that.page, JSON.stringify(that)], function (tx, res) {
	    		that.dbTransactionFinished = 'ok';
			});
    	};
    }
});


$.Class('at.asfinag.unterwegs.SubApp', {}, {
    init: function(id, title, path) {
        this.id = id;
        this.title = title;
        this.path = path;
        this.modes = [];
        this.overlay = {};
        /**
         * settingvalues - definition of all special settings for a subapp
         * has to be in the following form:
         * 	array with the following entries for each object:
         * 		- info: 		(optional) text description - for developer information
         * 		- type:			type of setting (SETTINGS_TYPE_CHECKBOX, SETTINGS_TYPE_LIST) 
         * 		- text:			text that will be displayed (is only a reference to internationalized text)
         * 		- icon:			(optional) currently not used Fontastic-Icon Name
         * 		- description	(optional) description text (is only a reference to internationalized text)
         * 		- fieldlist:	list of all possible entries (for type SETTINGS_TYPE_CHECKBOX {}, for type SETTINGS_TYPE_LIST all the possible list elements
         * 							have to be defined) form: { key1: 'value1', key2: 'value2' }) (value is a reference to internationalized text)
         * 		- db_key: 		the db_key for storing in the local database (table settings_additional), the db_key is stored in settings_additional-setKey
         * 							and the value in settings_additional-setValue
         * 						maximum length = 10
         * 						2 character prefix should be used for each subapp (KO ... Kompagnon, FB ... Feedback, GO ... GO Maut, ME ... Melden,
         * 							NE ... News, RA ... Rasten, SC ... ServiceCenter, VI ... Verkehrsinfos, VS ... Vertriebsstelle, VM ... Videomaut,
         * 							WE ... Webcams)
         * 						e.g. ra_lkwinfo
         * 		- act_value: 	stores the selected value (is set during runtime)
         * 		- def_value: 	the default value stored for this element (has to be either 'X' for SETTINGS_TYPE_CHECKBOX or the key for SETTINGS_TYPE_LIST)
         * 		- testing: 		boolean - if yes, the option will only be shown in testing mode (config.js --> live_system = false)
         */
        this.settingsvalues = [];
    },
    
    hasMode: function(mode) {
    	if(this.modes.length == 0) {
    		return true;
    	}
    	
    	if($.inArray(mode, this.modes) != -1) {
    		return true;
    	} else {
    		return false;
    	}
    },

    addOverlays: function(overlayList) {
        for(var i in overlayList) {
            var overlay = overlayList[i];

            this.overlay[overlay.path] = new at.asfinag.unterwegs.mobile.TouchOverlay(
                overlay.id,
                overlay.view,
                overlay.data,
                overlay.onLoad,
                overlay.onShow,
                overlay.onDestroy
            );

            overlay.overlay = this.overlay[overlay.path];
        }
    }
});


$.Class('at.asfinag.unterwegs.Overlay',
	{},
	{
		init: function(path, view) {
			this.path = path;
			this.view = view;
			this.id = encodeURI(path).split('/').join('_');

			debug_flag && console.info('Overlay created:');
			debug_flag && console.info('==================================================');
			debug_flag && console.info('PATH: ' + this.path);
			debug_flag && console.info('ID:   ' + this.id);
			debug_flag && console.info('VIEW: ' + this.view);
			debug_flag && console.info('==================================================');
		},

		onShow: function() {
			debug_flag && console.info('onShow called');
		},

		onLoad: function() {
			debug_flag && console.info('onLoad called');
		},

		onDestroy: function() {
			debug_flag && console.info('onDestroy called');
		}
	}
);

$.Class('at.asfinag.unterwegs.User', {}, {
    init: function(application, callback) {
    	var that = this;

    	this.application = application;
    	
    	this.email = undefined;
    	this.device = undefined;
    	
    	var db = application.config.db.db;
    	db.transaction(
			function(tx) {
				tx.executeSql('SELECT email, device FROM user LIMIT 1;', [], function(tx, result) {
	    			if(result.rows.length > 0) {
	    				that.email = result.rows.item(0).email;
	    				that.device = result.rows.item(0).device;
	    				that.deviceid = result.rows.item(0).deviceid;
	    			} else {
	    				debug_flag && console.error('User.class.js: no user in database!');
	    			}
	    			return false;
				});
			}, 
			function(e) {
				callback(that);
				return true;
			},
			
			function(tx, result) {
				callback(that);
				return false;
			}
		);
    	
    	return this;
    },
    
    persist: function(success, error) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(
			function(tx) {
				tx.executeSql('INSERT INTO user (email, device, deviceid) VALUES(?, ?, ?);', [that.email, that.device, that.application.getDeviceId()]);
			}, 
			function(e) {
				error();
				return true;
			},
			
			function(tx, result) {
				success();
				return false;
			}
		);
    },
    
    removeDevice: function(callback) {
    	var that= this;
    	var db = this.application.config.db.db;
    	var url = application.config.serverdata[act_system].account.url;
    	!release_flag && console.debug('User.class.js: removeDevice - URL: '+url);
		
		$.ajax({
    		type: 'POST',
    		url: url,
    		dataType: 'json',
    		data: { userid: that.application.getDeviceId(), action: 'delete', type: 'device', format: 'json' },
    		success: function(data) {
    			if(data.status == 'ok') {
    				db.transaction(
						function(tx) {
							tx.executeSql('DELETE FROM user WHERE deviceid LIKE ?;', [that.application.getDeviceId()]);
						},
						function(e) {
							return true;
						},						
						function(tx, result) {
							return false;
						}
					);
    				that.email = undefined;
    		    	that.device = undefined;
    				callback('ok')
    			}
    		},
    		error: function(XMLHttpRequest, textStatus, errorThrown) {
    			callback('error');
    		}
    	});
    }
});


function Validator(){
}

/**
 * setReturnVal - all validation return messages should run this function to prepare return object
 * 
 * @return {Object}
 * 				- status {Boolean}
 * 				- type {minLength,maxLength,error}
 * 				- message ... in actual language
 */
Validator.setReturnVal = function(status, type, value){
	if(status == undefined){
		status = true;
	}
	if(type == undefined){
		type = "";
	}
	if(value == undefined){
		value = "";
	}
	
	return { status: status, type: type, value: value };
}

/**
 * checkMinLength - checks if input value is smaller than minimum length
 * 
 * @param {String} value
 * @param {int} minLength
 * @return {Boolean}
 */
Validator.checkMinLength = function(value, minLength){
	//check min length
	if(!isStringEmpty(minLength)){
		if(value.length < minLength){
			return false;
		}
	}
	return true;
}

/**
 * checkMaxLength - checks if input value is bigger than maximum length
 * 
 * @param {String} value
 * @param {int} maxLength
 * @return {Boolean}
 */
Validator.checkMaxLength = function(value, maxLength){
	//check max length
	if(!isStringEmpty(maxLength)){
		if(value.length > maxLength){
			return false;
		}
	}
	return true;
}


/**
 * checkMail - checks if an input string is a valid e-Mail
 * 
 * @param {String} mail that has to be checked
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 * @static
 */
Validator.checkMail = function(mail, mandatory){
	//check if empty
	if(mandatory && isStringEmpty(mail)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
    var res = mail.match("^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$");
    if(res == null || res === null){
    	return Validator.setReturnVal(false, ERROR_TYPE_WRONG_FORMAT);
    }
    
    //all checks passed
    return Validator.setReturnVal(true, null, mail);
}

/**
 * checkPaymentPIN - checks payment pin input
 * 
 * 
 * @param {String} pin
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @param {int} minLength
 * @param {int} maxLength
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.checkPaymentPIN = function(pin, mandatory, minLength, maxLength){

	if(mandatory && isStringEmpty(pin)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	//====length checks ====
	if(!Validator.checkMinLength(pin, minLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MINLENGTH);
	}
	
	if(!Validator.checkMaxLength(pin, maxLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MAXLENGTH);
	}

	return Validator.setReturnVal(true, null, pin);	
}

/**
 * checkEquality - checks if two values are equal
 * 
 *  if @val1 and @val2 are not equal a ERROR_TYPE_NOT_EQUAL is returned
 *  
 * @param {String} val1
 * @param {String} val2
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.checkEquality = function(val1, val2){
	//==== equality CHECK ====
	if(val1 != val2){
		return Validator.setReturnVal(false, ERROR_TYPE_NOT_EQUAL);
	}	
	return Validator.setReturnVal(true, null, val1);
}

/**
 * checkPIN - PIN code is used to save credit card data
 * 
 * @param {String} pin
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 * @static
 */
Validator.checkPIN = function(pin, mandatory, minLength, maxLength){
	if(mandatory && isStringEmpty(pin)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
	//check pin
    var res = pin.match("^[a-zA-Z0-9]+$");
    if(res == null || res === null){
    	return Validator.setReturnVal(false, ERROR_TYPE_WRONG_FORMAT);
    }
	
	//====length checks ====
	if(!Validator.checkMinLength(pin, minLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MINLENGTH);
	}
	
	if(!Validator.checkMaxLength(pin, maxLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MAXLENGTH);
	}
    
	return Validator.setReturnVal(true, null, pin);
}

/**
 * isPINValid - checks if the given PIN is a valid pin for the given profile
 * 
 * @param {String} pin
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.isPINValid = function(pin, mandatory){
	if(mandatory && isStringEmpty(pin)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	//TODO: not implemented
	console.error("Validator.isPINValid not Implented");
	
	return Validator.setReturnVal(true, null, pin);
}

/**
 * checkNumberPlate
 * 
 * @param {String} numberplate
 * @param {Boolean} mandatory
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 * @static
 */
Validator.checkNumberPlate = function(numberplate, mandatory){
	//TODO: not implemented
	console.error("Validator.checkNumberPlate not Implented");
	if(mandatory && isStringEmpty(numberplate)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}	
	return Validator.setReturnVal(true, null, numberplate);
}

/**
 * checkNumberPlate
 * 
 * @param {String} year
 * @param {String} month
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 * @static
 */
Validator.checkCreditCardDate = function(year, month, mandatory){
	if(mandatory && isStringEmpty(year)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}

	if(mandatory && isStringEmpty(month)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
	//year in the past
	if(year < (new Date().getFullYear())){
		return Validator.setReturnVal(false, ERROR_TYPE_WRONG_FORMAT);
	}
	
	//same year but month in the past
	if(year == (new Date().getFullYear()) && month < (new Date().getMonth() + 1)){
		return Validator.setReturnVal(false, ERROR_TYPE_WRONG_FORMAT);
	}
	
	return Validator.setReturnVal(true, null, month+"."+year);       
}

/**
 * checkTankkarte
 * 
 * @param {String} cardnumber
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @param {int} minLength
 * @param {int} maxLength
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 * 
 * @todo: implement check after exact specification is given
 */
Validator.checkTankkarte = function(cardnumber, mandatory, minLength, maxLength){
	if(mandatory && isStringEmpty(cardnumber)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
	//TODO: not implemented
	console.warn("Validator.checkTankkarte not Implented");
	
	//====length checks ====
	if(!Validator.checkMinLength(cardnumber, minLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MINLENGTH);
	}
	
	if(!Validator.checkMaxLength(cardnumber, maxLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MAXLENGTH);
	}
	
	return Validator.setReturnVal(true, null, cardnumber); 
}

/**
 * checkCreditCard - checks the credit card number
 * 
 * currently only a
 * 
 * We are supporting 
 * 		VISA 		starts With: 4, Electron: 4026, 417500, 4508, 4844, 4913, 4917 	Length: 13-16
 * 		MASTERCARD 	starts With: 51, 52, 53, 54, 55									Length: 16-19
 * 		AMEX		starts With: 34, 37												Length: 15
 * 		DINERS		starts With: 300, 301, 302, 303, 304, 305, 36, 54				Length: 14 or 16
 * 
 * 
 * @param {String} cardnumber
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @param {int} minLength
 * @param {int} maxLength
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.checkCreditCard = function(cardnumber, mandatory, minLength, maxLength){
	/**
	 * luhnCheck - LUHN checks a value
	 * 
	 * @param {String} number The number that has to be checked
	 * @return {Boolean} true if luhnCheck is ok
	 * 
	 * @IMPORTANT - not working yet
	 */
	/*function luhnCheck(number){
		//last digit is checksum
		cardnumber = number + "";
		var length = cardnumber.length;
		var checksum = cardnumber.substr((cardnumber.length -1));
		var rest = cardnumber.substr(0,(cardnumber.length -1));
		
		var sum = 0;
		rest = rest.split("").reverse().join("")
		for (var i = 0; i < rest.length; i++) {
	        // get digits in reverse order
	        var digit = rest.substr(i, 1);
	
	        // every odd number multiply with 2
	        if (i % 2 == 0) {
	            digit *= 2;
	        }
	        sum += +digit > 9 ? +digit - 9 : +digit;
	    }
		if(checksum == (sum % 10)){
			return true;
		} else {
			return false;
		}
	}*/
	
	//check if empty
	if(mandatory && isStringEmpty(cardnumber)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
	//TODO: not implemented
	console.warn("Validator.checkCreditCard not Implented");
	
	//====length checks ====
	if(!Validator.checkMinLength(cardnumber, minLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MINLENGTH);
	}
	
	if(!Validator.checkMaxLength(cardnumber, maxLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MAXLENGTH);
	}
	
	return Validator.setReturnVal(true, null, cardnumber);
}

/**
 * checkCVC - checks the credit card cvc
 * 
 * @param {String} cvc
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @param {int} minLength
 * @param {int} maxLength
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.checkCVC = function(cvc, mandatory, minLength, maxLength){
	//check if empty
	if(mandatory && isStringEmpty(cvc)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
	
	//TODO: not implemented
	console.warn("Validator.checkCVC not Implented");
	
	//====length checks ====
	if(!Validator.checkMinLength(cvc, minLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MINLENGTH);
	}
	
	if(!Validator.checkMaxLength(cvc, maxLength)){
		return Validator.setReturnVal(false, ERROR_TYPE_MAXLENGTH);
	}
	
	return Validator.setReturnVal(true, null, cvc);
}


/** 
 * validateBarcode - validates VignettenBarcode
 * 
 * therefore only the first 12 characters are used
 * 
 * @param {String} barcode
 * @param {Boolean} mandatory if true, value shouldn't be empty
 * @return {Object} return object that contains status, type, message (see @setReturnVal)
 */
Validator.validateBarcode = function(barcode, mandatory){
	/**
	 * isValidBarcodeForJK
	 */
    function isValidBarcodeForJK(barcode) {
    	return isValidType(barcode) && isUCC12(barcode.substring(0, 12));
    }

    /**
     * isValidType - checks the barcode type (first to characters)
     * 
     * @param {String} barcode
     * @return {Boolean}
     */
    function isValidType(barcode) {
    	return barcode.substring(0, 2) == TYPE_BARCODE_PKW || barcode.substring(0, 2) == TYPE_BARCODE_MOTORRAD;
    }
    
    
    /**
     * isUCC12
     * 
     * @param {String} digits
     * @return {Boolean}
     */
    function isUCC12(digits) {
    	if(digits == undefined || digits.length != 12 || parseInt(digits) != digits) {
    		return false;
    	}
    	
    	var calcEven = false;
    	var sumOdd = 0;
    	var sumEven = 0;
    	
    	for(var i = 0; i < digits.length-1; i++) {        						
    		if(calcEven) {
    			sumEven += parseInt(digits[i]);
    		} else {
    			sumOdd += parseInt(digits[i]);
    		}
    		
    		calcEven = !calcEven;
    	}
    	
    	var checksum = sumOdd * 3 + sumEven;
    	var digit = (checksum % 10 == 0) ? 0 : (10 - (checksum % 10));
    	if(digit != digits[digits.length-1]) {
    		return false;
    	}
    	
    	return true;
    }

	//check if empty
	if(mandatory && isStringEmpty(barcode)){
		return Validator.setReturnVal(false, ERROR_TYPE_MANDATORY);
	}
    if(!isValidBarcodeForJK(barcode)){
    	return Validator.setReturnVal(false, ERROR_TYPE_WRONG_FORMAT);
    }
    return Validator.setReturnVal(true, null, barcode);
}


function setupRastenViewAndReorderListItems () {
	
	// Set Essen on third position of the list of features
	$("li.rasten.services.restaurant").insertBefore($('ul.listview.rasten.services').children(':first'));
	
	// Set Gasstation (Tanken) on second position of the list of features
	$("li.rasten.services.tankstelle").insertBefore($('ul.listview.rasten.services').children(':first'));
	
	// Set Free-WLAN-Info on top of list of features
	$("li.rasten.services.wlan").insertBefore($('ul.listview.rasten.services').children(':first'));
	
}
/**
 * filterEmailChars - removes invalid chars out of E-Mail Address
 *
 * @param input value to be checked
 * @return input without invalid chars
 */
function filterEmailChars(input){
    input = input.replace(/[^-_@.Ã¤Ã¶Ã¼Ã„Ã–ÃœA-Za-z0-9]/g, ""); // replacing special characters
    input = input.replace(/[ ]/g, ""); // replace blanks
    input = input.replace(/^[.]*/g, ""); // replace dot at start
    return input;
}

/**
 * checkEMail - checks if parameter is a valid e-mail
 * 
 * @param the string that has to be validated
 */
function checkEMail(input){
    var pattern = "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$";
    var res = input.match(pattern);
    if(res == null || res === null){
        return false;
    } else {
        return true;
    }
}

/**
 * isEmailValid - checks e-mail address
 *
 * @param input - input that has to be validated
 * @return Boolean - true if address is valid, else false
 */
function isEmailValid(input){
    input.val(input.val().replace(/[^-_@.Ã¤Ã¶Ã¼Ã„Ã–ÃœA-Za-z0-9]/g, "")); // replacing special characters
      input.val(input.val().replace(/[ ]/g, "")); // replace blanks
      input.val(input.val().replace(/^[.]*/g, "")); // replace dot at start
        
      var pattern = "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$"; 
      var res = input.val().match(pattern);
      if(res == null || res === null){
               $('div.content.overlay > div > ul.listview.email.error').show();
               return false;
      } else {
               return true;
      }
}

/**
 * 
 * @param num
 * @param digits
 */
function formatNumber(num, digits) {
	return parseFloat(num.toString().replace(',','.')).toFixed(digits).replace('.',application.config.i18n[application.config.language].digit_sign);
}

/**
 * formatDateForLang - output date depending on @language
 * 
 * @param {String} datestring - DD.MM.YYYY
 * @param lang
 * @return depending on @lang it return DD.MM.YYYY or DD/MM/YYYY
 */
function formatDateForLang(datestring, lang){
	if(lang == "de-AT"){
		return datestring;
	} else {
		return replaceAll("\\.","/",datestring);
	}
}

function getTimeWithLeadingZero(value){
	return ("0"+value).slice(-2);
}

/**	
 * converts datestring into date object
 * 
 * dateString YYYY-MM-DD HH:MM:SS, YYYY-MM-DD HH:MM, YYYY-MM-DD, timestamp
 * @param bool astimestring if true, returns timestring, else Date Object
 */
function getDateObject(datestring, astimestring){
	var retval = null;
	
	if(datestring != null) {
		if(isNumber(datestring)){ //in case it is a timestamp
			retval = new Date(datestring);
		} else if(datestring.length == 10){ 			
			if(datestring.indexOf(".") >= 0){
				retval = new Date(datestring.substr(6,4) + "-" + datestring.substr(3,2) + "-" + datestring.substr(0,2)) //DD.MM.YYYY
			} else {
				retval = new Date(datestring);	//YYYY-MM-DD
			}
		} else if(datestring.length == 16) { 	//YYYY-MM-DD HH:MM
			retval = new Date(datestring.substr(0,4),datestring.substr(5,2) - 1, datestring.substr(8,2),datestring.substr(11,2),datestring.substr(14,2),"00");
		} else if(datestring.length >= 19) { 	//YYYY-MM-DD HH:MM:SS
			retval = new Date(datestring.substr(0,4),datestring.substr(5,2) - 1, datestring.substr(8,2),datestring.substr(11,2),datestring.substr(14,2),datestring.substr(17,2));
		} else {
			return null;
		}
		
		if(retval != null && astimestring){
			return retval.getTime();
		} else {
			return retval;
		}
	}
	return null;
}

/**
 * formats a Date String according to the language
 * 
 * @param {Date} date
 * @param {String} language
 * @returns
 */
function getFormattedDateString(date, language){
	if(date == null || date == "" || date == undefined || !(date instanceof Date) ){
		return "";
	}
	if(language == "de-AT"){
		return ("0" + (date.getDate())).slice(-2) + "." + ("0" + (date.getMonth() + 1)).slice(-2) + "." + date.getFullYear();
	} else if(language =="inputdate") {
		return date.getFullYear() + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + ("0" + (date.getDate())).slice(-2);
	}else {
		return ("0" + (date.getDate())).slice(-2) + "/" + ("0" + (date.getMonth() + 1)).slice(-2) + "/" + date.getFullYear();
	}
}

function convertFromInputDate(date){
	return date.substr(8,2) + "." + (date.substr(5,2)) + "." + date.substr(0,4);
}

/**
 * returns a timestring from a date object
 * 
 * @param date Date Object
 * @returns {String}
 */
function getFormattedTimeString(date){
	if(date == null || date == "" || date == undefined || !(date instanceof Date) ){
		return "";
	}
	return ("0" + (date.getHours())).slice(-2) + ":" + ("0" + (date.getMinutes())).slice(-2);
}

/**
 * checks if input is a valid number
 * 
 * @param input
 * @returns
 */
function isNumber(input){
    var reg = /^\d+$/;
    return reg.test(input);
}

/**
 * is used to replace the ? in a text with variables
 * 
 * @param input
 * @param variables
 */
function buildText(input, variables){
	var text = input;
	for(var i = 0; i < variables.length; i++){
		text = text.replace ("##?##",variables[i]);
	}
	return text;
}

/**
 * converts source variable to an output Text
 * 
 * @param source
 * @param pre_text Prefix Text 
 * @returns {String}
 */
function getTextForTrafficInfoSource(source, pre_text){
	if(source == "ATOE3") {
		return pre_text + ": "+"Ö3";
	} else if (source =="ATOEA" || source == "ÖAMTC") {
		return pre_text + ": "+"ÖAMTC";
	}
	return pre_text + ": "+source;
}


/**
 * converts date format to language specific output
 * 
 * @param dateFrom can be date in the following Format "YYYY-MM-DD HH:MM:SS", "YYYY-MM-DD HH:MM", "YYYY-MM-DD"
 * @param dateTo can be date in the following Format "YYYY-MM-DD HH:MM:SS", "YYYY-MM-DD HH:MM", "YYYY-MM-DD"
 * @param language 'de-AT' or 'en-US'
 * @param localized_text Object with the following fields (on, to, from) 
 * @param break_at_end 
 * @returns {String}
 */
function getFromToTrafficInfo(dateFrom, dateTo, language, localized_text, break_at_end) {
	var date_diff = dateTo - dateFrom;
	if(dateFrom == null || dateFrom == "" ||
			dateFrom == undefined || 
			( dateFrom.indexOf != undefined &&  ( dateFrom.indexOf("1970-01-01 01:00:00") != -1 || dateFrom.indexOf("1970-01-01") != -1 ) ) ){
		dateFrom = null;
	} else {
		dateFrom 	= getDateObject(dateFrom, false);
	}
	if(dateTo == null || dateTo == "" ||
			dateTo == undefined || 
			( dateTo.indexOf != undefined &&  ( dateTo.indexOf("1970-01-01 01:00:00") != -1 || dateTo.indexOf("1970-01-01") != -1 ) ) ){
		dateTo = null;
	} else {
		dateTo 		= getDateObject(dateTo, false);
	}
	
	var date_from 	= getFormattedDateString(dateFrom, language);
	var time_from 	= getFormattedTimeString(dateFrom);
	if(time_from == "11:11"){
		time_from = "";
	}
	var date_to 	= getFormattedDateString(dateTo, language);
	var time_to 	= getFormattedTimeString(dateTo);
	if(time_to == "11:11"){
		time_to = "";
	}	
	//if bigger than 20 hours --> no time info
	if(date_diff >= 72000000){
		time_from = "";
		time_to = "";
	}
	
	
	var out = "";
	if(date_from != null && date_from != ""){
		//out += localized_text.duration;
		if(date_to != null && date_to != ""){
			if(date_from == date_to){
				out = out + " " + localized_text.on + " " + date_from; 
				if(time_from != ""){
					out = out + " ("+time_from;
					if(time_to != "" && time_to != null && time_to != time_from){
						out = out + " " + localized_text.to + " " + time_to + ")"; 
					}
				}
			} else {
				out = out + " " + localized_text.from + " " + date_from; 
				if(time_from != ""){
					out = out + " (" + time_from + ")";
				}
				out = out + " " + localized_text.to + " " + date_to;
				if(time_to != ""){ 
					out = out + " (" + time_to + ")";
				}				
			}
		} else {
			out = out + " " + localized_text.on + " " + date_from;
			if(time_from != ""){ 
				out = out + " (" + time_from + ")";
			}
		}
	}
	if(break_at_end && out != "") {
		out = out + "<br/>";
	}
	return out;
}

/**
 * returns value of an object with the key defined in description
 * 
 * 
 * @param obj
 * @param desc String e.g. "rasten.value"
 * @returns
 */
function getPropertyValue(obj, desc) {
    var arr = desc.split(".");
    while(arr.length && (obj = obj[arr.shift()]));
    return obj;
}

/**
 * returns subapp id for a given subapp title (subapp.title)
 * 
 * @param title
 */
function getSubappIdByTitle(title){
	if(title == "GO LKW BUS"){
		title = "go";
	} else if(title == "Service Center"){
		title = "serviceCenter";
	} else {
		title = title.toLowerCase();
	}
	
	return title;
}

/**
 * returns subapp config key (to read config.i18n[lang].app.<configkey> app for a given subapp title (subapp.title)
 * 
 * @param title
 */
function getSubappConfigKeyByTitle(title){
	if(title == "GO LKW BUS"){
		title = "Go";
	} else if(title == "Service Center"){
		title = "ServiceCenter";
	}
	
	return title;
}

/**
 * toggleLanguage - returns opposite language
 * 
 * @param language actual language
 * @returns {String} opposite language
 */
function toggleLanguage(language){
	if(language == "de-AT"){
		return "en-US";
	}
	return "de-AT";
}

/**
 * getPreviewImgResolution - returns optimal resolution for image
 * 
 * returns the optimal resolution for image to be display on the preview screen of the webcams
 * 
 * @param window_width
 */
function getPreviewImgResolution(){
	var window_size = getMaxWindowSize();
	if(window_size < 820){
		return "&width=100&height=80";
	} else if (window_size > 1024){
		return "&width=200&height=160";
	} else { //between 821 and 1023
		return "&width=160&height=128";
	}
}

/**
 * getMaxWindowSize
 * 
 * returns the maximum Window Width. Returns the higher value of window width and height
 * 
 * @returns maximum window size
 */
function getMaxWindowSize(){
	var window_size = $(window).height();
	if($(window).width() > $(window).height()){
		window_size = $(window).width();
	}
	return window_size;
}

/**
 * returns value out of settingvalues (settingvalues is usually stored in each subapp)
 * 
 * @param settingvalues
 * @param key
 * @param bool if true, the value is returned as boolean (should only be used for checkboxes)
 * @returns
 */
function getSettingVal(settingvalues, key, bool){
	for(var i = 0; i< settingvalues.length; i++){
		if(settingvalues[i].db_key == key){
			if(bool){
				if(settingvalues[i].act_value == CONST_ACTIVATE){
					return true;
				} else {
					return false;
				}
			} else {
				return settingvalues[i].act_value;
			}
			
		}
	}
	return undefined;
}

/**
 * isOffline - checks if app is offline
 *
 * @return {Boolean} true if application is offline
 */
function isOffline() {
	if(navigator.connection != undefined) {
	    var networkState = navigator.connection.type;
	    if(networkState == Connection.NONE){
	    	return true;
	    }
	}
	return false;
}

/**
 * isStringEmpty
 * 
 * checks if a given string is empty. Checks against null and undefined are done. 
 * Additionally also the string "null" and "undefined" is checked because some
 * platforms return them as string value.
 * 
 * @param {String} string the string that should be checked
 * @returns {Boolean} true if string is empty otherwise false
 */
function isStringEmpty(string){
	if(string == null || string == undefined || string == "null" || string == "undefined" || string.length == 0){
		return true;
	}
	return false;
}

function isObjectEmpty(obj){
	if(Object.keys(obj).length == 0){
		return true;
	}
	return false;
}

/**
 * isNumber - checks if value is a number
 *
 * @param checkVal - value that has to be checked
 * @return {Boolean} true if value is a number, else false
 */
function isNumber(checkVal){
	return /^\d+$/.test(checkVal);
}

/**
 * toNextSeperator - jumps to next seperator and returns splitted text
 *
 * @param text
 * @param seperator - split value
 * @return {Object} return Object (success {Boolean}, textPre, textPost)
 */
function toNextSeperator(text, seperator){
	var ret = { success: false, textPre: "", textPost: ""};
	var colonIndex = text.indexOf(seperator);
	if(-1 < colonIndex){
		ret.success = true;
		ret.textPre = text.substr(0,colonIndex);
		if(colonIndex == 1){
			ret.textPre = "0"+ret.textPre;
		}
		ret.textPost = text.substr(colonIndex+1);
	} else {
		ret.success = false;
	}
	return ret;
}

/**
 * getNextTime - returns splittet hour and minute out of a time string e.g. 0:00, 08:00, 0.00, 08.00
 * 
 * @param text
 * @returns {___anonymous10594_10630}
 */
function getNextTime(text){
	var result = { success: false, hour: "", min: "", textPre: "", textPost: "" };
	
	//get first number occassion
	var i = 0;
	while(!isNumber(text.charAt(i)) && i < text.length) {
		i++;
	}
	var preText = text.substr(0,i).trim();
	var str = text.substr(i);
	if(isNumber(str.charAt(0))){
		var hour_start = 0;
		var min_start = 0;
		
		var ret = toNextSeperator(str, ":");
		if(!ret.success){
			ret = toNextSeperator(str, ".");
		}
		
		if(ret.success){
			result.hour = ret.textPre;
			result.min 	= ret.textPost.substr(0,2);
			result.textPre = preText;
			result.textPost = ret.textPost.substr(2);
			result.success = true;
		}
	}
	return result;
}

/**
 * mapDays - maps days to an object
 * 
 * @param text the days in a text format (e.g. Mo-Sa, Mo/Sa, So, So/Fei)
 * @return {Object} returns an object for each weekday (0..Sunday, 1...Monday, .., 6... Saturday, 9 ... Feiertag, 10 ... summer, 11 ... winter)
 */
function mapDays(text){
	text = text.replace(/:/g,"");
	//result contains numbers for each weekday
	var result = {0: false, 1: false, 2: false, 3: false, 4: false, 5: false, 6: false, 9: false, 10: false, 11: false};
	
	text = text.trim();
	
	if(text == ""){
		return {0: true, 1: true, 2: true, 3: true, 4: true, 5: true, 6: true, 9: true, 10: true, 11: true};
	}
	//split by /
	var split_slash = text.split("/");
	
	for(var sl = 0; sl < split_slash.length; sl++){
		var split_comma = split_slash[sl].split(",");
		
		for(var sc = 0; sc < split_comma.length; sc++){
			var splitted = split_comma[sc].split("-");
			if(splitted.length == 2){
				var start = DAYS[splitted[0].trim()];
				var end = DAYS[splitted[1].trim()];
				if(end == 0){ // Sunday
					result[0] = true;
					end = 6;
				}
				for(var i = start; i <= end; i++){
					result[i] = true;
				}
			} else {
				result[DAYS[splitted[0].trim()]] = true;
			}			
		}
	}
	return result;
}


/**
 * parseOpeningHours - parses the given opening hours and returns them as an object
 * - 0:00 - 24:00 Uhr
 * - Mo - Sa: 05.00 - 22.00 Uhr; So/Fei: 07.00 - 23.00 Uhr
 * - 0:00 - 24:00 Uhr
 * - 6:00 - 23:00 Uhr
 * - 06:00 - 23:00 Uhr
 * - (leer)
 * - Sommer 0:00 - 24:00 Uhr, Winter 6:00 - 24:00 Uhr
 * - 0:00 - 24:00 Uhr
 * - 6:00 - 24:00 Uhr (von 24:00 Uhr bis 6:00 Uhr Schlüssel an der Tankstelle)
 * - 8:00 - 20:00 Uhr (24h Check-in über Agip möglich)
 * - 8:00 - 24:00 Uhr
 * - Mo-Do, So 7:00 bis 24:00 Uhr; Fr/Sa 7:00 bis 2:00 Uhr
 * - Mo - So: 6.00-24.00 Uhr
 * - Mo-Fr 7:00 - 24:00 Uhr, Sa-So 0:00 - 24:00 Uhr
 *
 * @param text - value that has to be parsed
 * @return {Object} object with opening hours data (success {Boolean}, start_textPre, start_hour, start_min, end_textPre, end_hour, end_min)
 */
function parseOpeningHours(text){
	var retval = [];
	text = text.replace(/;/g,"");
	if(text.trim() != ""){
		var splitted = text.split(" Uhr");
		if(splitted.length > 0){
			for(var i = 0; i < splitted.length; i++){
				//reset the result
				var result = { success: false, start_textPre: "", start_hour: "", start_min: "", end_textPre: "", end_hour: "", end_min: "" };
				if(splitted[i].trim() != ""){
					var str = splitted[i].trim();
					
					var res_from 	= getNextTime(str);
					var res_to 		= getNextTime(res_from.textPost);
					if(res_from.success && res_to.success){
						result.start_textPre 	= res_from.textPre;
						result.start_hour 		= res_from.hour;
						result.start_min 		= res_from.min;
						//get the days on which this time information is valid
						result.valid_days		= mapDays(res_from.textPre);
						result.end_textPre 		= res_to.textPre;
						result.end_hour 		= res_to.hour;
						result.end_min 			= res_to.min;
						result.success			= true;
						retval.push(result);
					}
				}
			}
		}
	}
	return retval;
}

/**
 * checkStringDate - checks the actual date against the openinghours of the given item
 * 
 * the openinghours are created while database insert via @parseOpeningHours
 * 
 * @param openinghours openinghours object created by @paseOpeningHours
 * @return true ... if open now, false ... closed now, "unknown" ... no information available
 */
function checkStringDate(openinghours){
	var date = new Date();
	var day = date.getDay();
	var hour = date.getHours();
	var minute = date.getMinutes();
	
	if(openinghours != undefined && openinghours != "" && openinghours.length > 0){
		for(var i = 0; i < openinghours.length; i++){
			if(!openinghours[i].valid_days[day] && (openinghours[i].valid_days[10] || openinghours[i].valid_days[11])){ //Sommer, Winter
				return "unknown";
			}
			if(!openinghours[i].valid_days[day]){
				continue;
			}
			if((openinghours[i].start_hour < hour || (openinghours[i].start_hour == hour && openinghours[i].start_min < minute))
				&& (openinghours[i].end_hour > hour || (openinghours[i].end_hour == hour && openinghours[i].end_min > minute)) ){
				return true;
			}
		}
	} else {
		return "unknown";
	}
	return false;
}

/**
 * getIconStatus - returns the status of a special service
 * 
 * @param type type of service e.g. tankstelle, fastfood, hotel, behindertengerecht....
 * @param services object of all services for this item
 * @returns {String} "open", "closed", "" these are css classes
 */
function getIconStatus(type, services){
	var open = "unknown";
	if(isStringEmpty(services)){
		return "";
	}
	if(services[type] == undefined){
		return "";
	}
	service = services[type];
	switch(type){
		case 'tankstelle':
		case 'fastfood':
		case 'hotel':
							if(service.length >= 5){
								open = checkStringDate(service[4]);
							}
							break;
		case 'restaurant':
							if(service.length >= 5){
								open = checkStringDate(service[4]);
							} else if(service.length == 1){
								if(service[0] == "Rasthaus nicht in Betrieb"){
									open = false;
								}
							}
							break;							
	}
	if(open == true){
		return "open";
	} else if(open == false){
		return "closed";
	}
	return "";
}

/**
 * outputCardNumber - formats a card number for output
 * 14: xxxx xxxxxx 1234
 * 15: xxxx xxxxxxx x2345
 * 16: xxxx-xxxx-xxxx-1234
 * otherwise: xx...xx 1234
 * 
 * @param {String} cardnumber
 * @return {String} formatted and partly hidden cardnumber
 */
function outputCardNumber(cardnumber){
	if(cardnumber.length > 10){
		switch(cardnumber.length){
			case 14:	return 'xxxx xxxxxx '+ cardnumber.substr(-4);
						break;
			case 15:	return 'xxxx xxxxxxx x'+ cardnumber.substr(-4);
						break;
			case 16:	return 'xxxx xxxx xxxx '+ cardnumber.substr(-4);
						break;
		}
		
		var out = "";
		for(var i = 0; i < (cardnumber.length - 4); i++){
			out = out + "x";
		}
		out = out + " "+cardnumber.substr(-4);
		return out;
	}
	return "";
}

/**
 * checkTicketStatus - checks ticket status and returns the text string
 * 
 * @return {String} one of the following status informations: 'abgelaufen'=expired, 'storniert'=cancelled, 'genutzt'=used, 'gueltig'=valid
 */
function checkTicketStatus(ticket){
	if(ticket.status == 'G' && ticket.gueltigkeitEnde != null && new Date().getTime() > new Date(new Date(new Date(new Date(ticket.gueltigkeitEnde).setHours(0)).setMinutes(0)).setSeconds(0)).setMilliseconds(0)) {
		return 'abgelaufen';
	}
	if(ticket.status == 'S') {
		//TODO klären was blocked bedeutet
		return 'storniert';
	} else if(ticket.status == 'N') {
		return 'genutzt';
	}
	
	return 'gueltig';
}

/**
 * outputNumber - outputs number with or without comma
 * 
 * outputs number with .00
 * 
 * @param {} number 
 */
function outputNumber(number){
	number = number + "";
	if(number.indexOf(",") == -1){
		if(number.indexOf(".") == -1){
			number = number + ".00";
		}
	} else {
		number.replace(',', '.');
	}
	
	//add last zero if neccessary
	if(number.substr(number.indexOf('.')).length == 2) {
		number = number + '0';
	}
	
	return number;
}

function getTicketPrice(ticketType, street){
	switch(ticketType){
		case '1Fahrt':		return street.tarifEinzel;
							break;
		case '2Fahrten':	return street.tarifEinzel * 2;
							break;
		case 'Jahreskarte': return street.tarifJahreskarteInCent / 100;
							break;
		case 'JKermaessigt': return street.tarifVignettenJahreskarteInCent / 100
							break;
	}
	return '0.00';
}

function getCardDetails(cardTypes, brand){
	if(cardTypes != undefined && cardTypes.length > 0){
		for(var i = 0; i< cardTypes.length; i++){
			if(cardTypes[i].brand == brand){
				return cardTypes[i].description;
			}
		}
	}
	return null;
}

/**
 * convertExpirationDate
 * 
 * @param {String} expirationDate (Format: MM.YYYY)
 * @return {String} expiration date in the format YYMM
 */
function convertExpirationDate(expirationDate){
	var parts = expirationDate.split('.');
	if(parts.length == 2){
		return parts[1].substr(2) + parts[0];
	} else {
		return "";
	}
}

/**
 * addShortcut - calls native implementation of shortcut add functionality
 * 
 * @important only necessary for Android
 * 
 * @param subapp
 * @param type
 * @param value
 * @param displayName
 */
function addShortcut(subapp, type, value, displayName){
	//console.log("ParentController.class.js - try adding Shortcut for " + subapp + " - " + type + ' - '+ value + ' - ' + displayName);
	if(value != undefined) {
		if(value != "" && window.PluginNativeCode != undefined && window.PluginNativeCode.addShortcut != undefined 
				&& typeof window.PluginNativeCode.addShortcut === 'function') {
			window.PluginNativeCode.addShortcut(subapp, $.base64.encode(type), value, displayName);
			//console.log("ParentController.class.js - added Shortcut for " + subapp + " - " + type + ' - '+ value);
		}
	}
}

function getURLParameterByName(name) {
	name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	var regexS = "[\\?&]" + name + "=([^&#]*)";
	var regex = new RegExp(regexS);
	var results = regex.exec(window.location.href);
	if(results == null)
	   return "";
	else
	   return results[1];
}

/**
 * 
 * 
 * @param kennzeichen
 * @param virtualisiert
 * @returns
 */
function getKennzeichenText(kennzeichen, virtualisiert, virt_text)
{
	var kennzeichen = cyrillic(kennzeichen);
	if (virtualisiert == '1')
	{
		kennzeichen = virt_text + " " + kennzeichen;
	}
	return kennzeichen;
}

function cyrillic(kennzeichen){
	if (kennzeichen == null)
		return kennzeichen;

	if (!kennzeichen.match('^[a-z]')) // Sobald Kleinbuchstaaben vorkommen
	{								// dann wird gemapped
		return kennzeichen;
	}
	var sb = "";
	for (var i = 0; i < kennzeichen.length; i++)
	{
		var letter = kennzeichen.charAt(i);
		var mappedValue;
		
		switch(letter){
			case 'c': mappedValue = "\u010C"; break;
			case 's': mappedValue = "\u0160"; break;
			case 'z': mappedValue = "\u017D"; break;
			case 'v': mappedValue = "\u0411"; break;
			case 'g': mappedValue = "\u0413"; break;
			case 'd': mappedValue = "\u0414"; break;
			case 'e': mappedValue = "\u0401"; break;
			case 'x': mappedValue = "\u0416"; break;
			case 'k': mappedValue = "\u0417"; break;
			case 'n': mappedValue = "\u0418"; break;
			case 'j': mappedValue = "\u0419"; break;
			case 'l': mappedValue = "\u041B"; break;
			case 'y': mappedValue = "\u0423"; break;
			case 'p': mappedValue = "\u041F"; break;
			case 'o': mappedValue = "\u0424"; break;
			case 'u': mappedValue = "\u0426"; break;
			case 'i': mappedValue = "\u0427"; break;
			case 'w': mappedValue = "\u0428"; break;
			case 'm': mappedValue = "\u0429"; break;
			case 'b': mappedValue = "\u042A"; break;
			case 'q': mappedValue = "\u042B"; break;
			case 'h': mappedValue = "\u042C"; break;
			case 'f': mappedValue = "\u042D"; break;
			case 't': mappedValue = "\u042E"; break;
			case 'r': mappedValue = "\u042F"; break;
			case 'a': mappedValue = "\u039B"; break;
			default: mappedValue = letter;
		}
		
		sb = sb + mappedValue;
	}
	return sb;
}

function getIconByVertragsart(vart) {
	if (vart === '3' || vart === '5' || vart === '240') {
		return 'icon-document-empty';
	} else if (vart === '4' || vart === '6' || vart === '241') {
		return 'icon-filled-euro';
	}
	else
	{
		return '';
	}
	return '';
}

function getEEV(ssk, text){
	var eek = ssk;
	if(ssk == '7' || ssk == '15'){
		return text.eev;
	}
	return text.euro + ' ' + eek;
}

/**
 * replaceAll - replace all occurences of a string (@find) with @replace
 * 
 * @param find
 * @param replace
 * @param str
 * @returns
 */
function replaceAll(find, replace, str) {
	  return str.replace(new RegExp(find, 'g'), replace);
}


Date.prototype.addDays = function(days) {
    var dat = new Date(this.valueOf())
    dat.setDate(dat.getDate() + days);
    return dat;
}

function getDates(ivStartDate, ivStopDate) {
    var dateArray = new Array();
    //necessary, otherwise ivStartDate is used by reference
    var startDate = new Date(ivStartDate);
    var stopDate = new Date(ivStopDate);
    startDate.setHours("00");
    startDate.setMinutes("00");
    stopDate.setHours("23");
    stopDate.setMinutes("59");
    var currentDate = startDate;
    
    while (currentDate <= stopDate) {
        dateArray.push( new Date (currentDate) )
        currentDate = currentDate.addDays(1);
    }
    return dateArray;
}

function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

/**
 * padWithZeros - fills the string with zeros at the beginning
 * 
 * e.g. fillWithZeros(123, 5) --> returns 00123
 * @param {String} value - the value to be preceded by zeros
 * @param size - the length of the return string
 */
function padWithZeros(value, size){
	value = value + "";
	if(value.length < size){
	    var s = "000000000000000000000000000000000000" + value;
	    return s.substr(s.length-size);
	} else {
		return value;
	}
	
}

/**
* POI2String – maps usecase to output text
*
* call example:  POI2String(UC_INFORMATION_AHEAD, UC_TYPE_CONSTRUCTION_SITE,[6.8]) ->
*  Output: „Sie nähern sich einer Baustelle mit einer Länge von Sechs Komma Acht Kilometer“
*
*@param (int) usecase – defines usecase (general data, …) – constants will be available for each type (e.g. UC_GENERAL_DATA)
*@param (int) type – defines type of usecase (construction site,…) – constants will be available for each type (e.g. UC_TYPE_CONSTRUCTION_SITE)
*@param (Array) options – array of additional data – size depends on usecase
*@return {String} volume - the actual volume of the device
*/
function POI2String(usecase, type, options){
	//console.log("SPEAK TEXT", usecase, type, options);
	if(!isStringEmpty(application.config.i18n[application.config.language].poi2string[usecase])){
		if(!isStringEmpty(application.config.i18n[application.config.language].poi2string[usecase][type])){
			var text = application.config.i18n[application.config.language].poi2string[usecase][type];
			for(key in options){
				//hack for Kilometern-> bug
				//wenn der key gleich 
				if(usecase == P2S_SCENARIO_CONSTRUCTION_SITE_LONG && type == P2S_TYPE_BEFORE && options[key] == 1){
					text = text.replace('Kilometern', 'Kilometer');
					text = text.replace('kilometres', 'kilometer');
				}
				text = text.replace('##'+key+'##', number2String(options[key]));
			}
			//console.error(text);
			if(window.PluginNativeCode != undefined && window.PluginNativeCode.StringToSpeech != undefined 
					&& typeof window.PluginNativeCode.StringToSpeech === 'function' && !isStringEmpty(text)) {
		    	var volume = window.PluginNativeCode.StringToSpeech(text, application.config.language);
		    	return volume;
			}
		}
	}
}

/**
 * number2String - converts a number to a text that is usable by ftw speech engine
 *  
 * @param number the number to be converted
 * @returns converted number (e.g. 6.8 will be change to 6 Komma 8)
 */
function number2String(number){
	if(!isNaN(Number(number))){
		if(Number(number) == 1){
			if(application.config.language == "en-US"){
				return "one";
			}
			return "einem";
		}
		
		number = number +"";
		return number.replace('.', ' Komma ');
	} else {
		return number;
	}
}

/**
 * generateRandomHash - generates a random Hash
 * 
 * the hash is created by using a string + a random-value plus the actual timestamp + another random-value
 */
function generateRandomHash(){
	return Sha256.hash("STATHASH"+(Math.random()*1000000000) + new Date().getTime() + (Math.random()*1000000000));
}

/**
 * returnUpdateTimeValue - output of last update
 * 
 * Rules:
 * - <1min. -> "gerade eben"
 * - 1min < x < 60min. -> "vor x Minuten"
 * - 60min. < x -> timestamp in absoluten Werten so wie jetzt
 * 
 * @param (Date) date
 * @param (String) language - the actual language ("de-AT", "en-US")
 * @return (String) the last update output according to the rules above
 */
function returnUpdateTimeValue(date, language){
	if(date == undefined || date == 'undefined' || typeof(date.getTime) != 'function'){
		return "";
	}
	var act_date = new Date();
	var time_diff = Math.floor((act_date.getTime() - date.getTime()) / 1000);
	if(time_diff <= 60){
		return language == "en-US" ? "just now" : "gerade eben";
	} else if(time_diff < 120){
		return language == "en-US" ? Math.floor(time_diff/60) + " minute ago" : "vor " + Math.floor(time_diff/60) + " Minute";
	} else if(time_diff <= 3600){	
		return language == "en-US" ? Math.floor(time_diff/60) + " minutes ago" : "vor " + Math.floor(time_diff/60) + " Minuten";
	} else {
		return getFormattedDateString(date, language) + " " + getFormattedTimeString(date, language);
	}
}


/*  
 * @class GeoLocation
 * Creates an object that encapsulates the GeoLocation functions from the PhoneGap API.
 * 
 * Changes
 * ================================================================================
 *
 * 16-01-2013
 * ----------
 * class created
 * methods: getCurrentPosition, watchPosition, clearWatch
 * 
 * 
 * @author Thomas Hickl
 *
 * @parent index
 * @tag at.asfinag.unterwegs.app
 *
 * @constructor
 * @param {application} application The application instance
 */
$.Class('at.asfinag.unterwegs.GeoLocation',
	/* @static */
	{}, 
	/* @prototype */
	{
		/* @constructor */
		init: function(application) {
			var that = this;
			
			that.application = application;
		},
		
		/* Invokes a callback with the device's current position (Position object) as a parameter. 
		 * @param {function} successCallback The success callback that is called with the current position
		 * @param {function} errorCallback The callback that is called if there was an error.
		 * @param {Object} options The geolocation options.
		 */
		getCurrentPosition: function(successCallback, errorCallback, options) {
			if(options.timeout == undefined) {
				options.timeout = 15000;
			}
			navigator.geolocation.getCurrentPosition(successCallback, errorCallback, options);
		},
		
		/* Watches for changes to the device's current position and then invokes the successCallback. 
		 * @param {function} successCallback The success callback that is called with the current position, when the location has changed.
		 * @param {function} errorCallback The callback that is called if there was an error.
		 * @param {Object} options The geolocation options.
		 * @return {String} 
		 */
		watchPosition: function(successCallback, errorCallback, options) {
			return navigator.geolocation.watchPosition(successCallback, errorCallback, options);
		}, 
		
		/* Stop watching for changes to the device's location referenced by clearing the watchPosition() referenced by watchId. 
		 * @param {String} watchId The id of the watchPosition interval to clear. 
		 */
		clearWatch: function(watchId) {
			navigator.geolocation.clearWatch(watchId);
		}
	}
);


$.Class('at.asfinag.unterwegs.Persistence', {}, {
    init: function(db_name, version, title, size, callback) {
    	this.db;
    	var that = this;
    	
    	var updateFinished = false;
    	
    	this.tableData = {};
    	//Test --> necessary to change version
    	var versionInit = "";
    	
    	try {
    		//this.db = window.openDatabase(db_name, version, title, size);
    		this.db = window.openDatabase(db_name, versionInit, title, size);
    	} catch(e) {
    		//this.db = window.sqlitePlugin.openDatabase(db_name, version, title, size);
    		this.db = window.sqlitePlugin.openDatabase(db_name, versionInit, title, size);
    	}
    	
        if(callback && typeof(callback) == 'function') {
        	callback();
        }
        if(this.db.version == "") {
        	//first visit of the database nothing special to do
        	this.db.changeVersion("", version, 
    				function(trans) {
        				//nothing to do is handled below
        				!release_flag && console.debug("Persistence: CREATE NEW DB version: "+version);
    				}, 
    				function(e) {//error	
    					!release_flag && console.error("Persistence: change Version - DB error"+e);
    				},
    				function() {
    					//success
    				}
    			);
        } else {
        	
        	// If current db version is not same as released version, it will be updated
        	if(this.db.version != version) {
        		
            	// Callback will be used, because DB version need to be updated step by step. (24.11.2014)
	        	that.updateDBVersion("1.0", "1.1", function() {				// DB version change 1.0 -> 1.1 
	        		that.updateDBVersion("1.1", "1.2", function() {			// DB version change 1.1 -> 1.2 
	        			that.updateDBVersion("1.2", "1.3", function() {		// DB version change 1.2 -> 1.3 
	        				that.updateDBVersion("1.3", "1.4", function() {	// DB version change 1.3 -> 1.4 
	        					
	        					that.db.transaction(function(trans) {
	        						//delete Timestamps --> otherwise new data won't be loaded
	        						trans.executeSql('DELETE FROM timestamps');
	        					});
	        					
	        	        	});
	                	});
	            	});
	        	});
        	}
        }
        
        /**
         * populateDB -
         *
         */
        this.populateDB = function(d) {
        	
        	var SQL_CREATE_WEBCAMS_DE_AT = 'CREATE TABLE IF NOT EXISTS webcams_de_at(' +
        								'name varchar(30), ' +
        								'language varchar(5), ' +
        								'id integer, ' +
        								'autobahn varchar(50), ' +
        								'bundesland varchar(50), ' +
        								'lage varchar(255), ' +
        								'blickrichtung varchar(50), ' +
        								'km decimal(4), ' +
        								'richtung varchar(1),' +
        								'url varchar(255),' +
        								'thumbUrl varchar(255),' +
        								'titel varchar(255),' +
        								'info varchar(80),' +
        								'camtitel varchar(255), ' +
        								'x real, ' +
        								'y real, ' +
        								'road_id integer, ' + 						//new in DB version 1.1
        								'province_id integer, ' +                   //new in DB version 1.2
        								'primary key (name, language)' +
        								')';
        	
        	var SQL_CREATE_WEBCAMS_EN_US = 'CREATE TABLE IF NOT EXISTS webcams_en_us(' +
										'name varchar(30), ' +
										'language varchar(5), ' +
										'id integer, ' +
										'autobahn varchar(50), ' +
										'bundesland varchar(50), ' +
										'lage varchar(255), ' +
										'blickrichtung varchar(50), ' +
										'km decimal(4), ' +
										'richtung varchar(1),' +
										'url varchar(255),' +
										'thumbUrl varchar(255),' +
										'titel varchar(255),' +
										'info varchar(80),' +
										'camtitel varchar(255), ' +
										'x real, ' +
										'y real, ' +
										'road_id integer, ' +                       //new in DB version 1.1
										'province_id integer, ' +                   //new in DB version 1.2
										'primary key (name, language)' +
										')';
        
        	var SQL_CREATE_BUNDESLAENDER = 'CREATE TABLE IF NOT EXISTS bundeslaender(' +
        										'id integer, ' +
        										'language varchar(5), ' +
        										'titel varchar(50), ' +
        										'shortcode varchar(2), ' +
        										'midcode varchar(6), ' +
        										'primary key (id, language)' + 
        										')';
        	
        	var SQL_CREATE_RASTEN_DE_AT =	'CREATE TABLE IF NOT EXISTS rasten_de_at(' +
        								'id integer, ' +
        								'language varchar(5), ' +
        								'titel varchar(255), ' +
        								'info varchar(255), ' +
        								'autobahn varchar(60), ' +
        								'km decimal(4), ' +
        								'richtung varchar(50), ' +
        								'type varchar(30), ' + 
        								'name varchar(40), ' +
        								'bundesland varchar(50), ' + 
        								'bldshort varchar(6), ' + 
        								'anzPkw integer, ' + 
        								'anzLkw integer, ' + 
        								'webcamurl1 varchar(255),' +
        								'webcamurl2 varchar(255),' +
        								'webcamurl3 varchar(255),' +
        								'webcamurl4 varchar(255),' +
        								'webcamurl5 varchar(255),' +
        								'services varchar(1000), ' +
        								'images images(500), ' +
                                        'x real, ' +
                                        'y real, ' +
                                        'richtungstxt varchar(255), ' +             //new in DB version 1.1
                                        'road_id integer, ' + 						//new in DB version 1.1
                                        'province_id integer, ' +                   //new in DB version 1.2
                                        'on1_rampe_beginn real, ' +                 //new in DB version 1.3
                                        'on2_rampe_beginn real, ' +                 //new in DB version 1.3
        								'primary key(id, language, type)' +
        								')';
        	
        
        	var SQL_CREATE_RASTEN_EN_US =	'CREATE TABLE IF NOT EXISTS rasten_en_US(' +
										'id integer, ' +
										'language varchar(5), ' +
										'titel varchar(255), ' +
										'info varchar(255), ' +
										'autobahn varchar(60), ' +
										'km decimal(4), ' +
										'richtung varchar(50), ' +
										'type varchar(30), ' + 
										'name varchar(40), ' +
										'bundesland varchar(50), ' + 
										'bldshort varchar(6), ' + 
										'anzPkw integer, ' + 
        								'anzLkw integer, ' + 
        								'webcamurl1 varchar(255),' +
        								'webcamurl2 varchar(255),' +
        								'webcamurl3 varchar(255),' +
        								'webcamurl4 varchar(255),' +
        								'webcamurl5 varchar(255),' +
										'services varchar(1000), ' +
										'images images(500), ' +
							            'x real, ' +
							            'y real, ' +
							            'richtungstxt varchar(255), ' +             //new in DB version 1.1
							            'road_id integer, ' + 						//new in DB version 1.1
							            'province_id integer, ' +                   //new in DB version 1.2
                                        'on1_rampe_beginn real, ' +                 //new in DB version 1.3
                                        'on2_rampe_beginn real, ' +                 //new in DB version 1.3							            
										'primary key(id, language, type)' +
										')';
        
        	var SQL_CREATE_STELLPLAETZEINFO =	'CREATE TABLE IF NOT EXISTS stellplaetzeinfo(' +
												'id integer, ' +
												'truckstatus varchar(255), ' +
												'primary key(id, truckstatus)' +
												')';
        	
        	// VERTRIEBSSTELLEN GO
        	var SQL_CREATE_GO_DE_AT =	'CREATE TABLE IF NOT EXISTS go_de_at(' +
										'ID integer, ' +
										'NAME varchar(255), ' +
										'PICTURE_SINGLE varchar(255), ' +
										'PICTURE_GROUP varchar(255), ' +
										'ADDRESS varchar(255), ' +
										'ZIP INTEGER, ' +
										'CITY varchar(255), ' +
										'COUNTRY varchar(255), ' +
										'PHONE varchar(255), ' +
										'FAX varchar(255), ' +
										'COMPANY varchar(255), ' +
										'SHORTNAME varchar(255), ' +
										'OPENING_HOURS varchar(255), ' +
							            'X_WGS84 real, ' +
							            'Y_WGS84 real, ' +
							            'image_id varchar(255), ' +                 //new in Version 1.2
										'primary key(ID, NAME)' +
										')';
        
        	// VERTRIEBSSTELLEN GO
        	var SQL_CREATE_GO_EN_US =	'CREATE TABLE IF NOT EXISTS go_en_us(' +
										'ID integer, ' +
										'NAME varchar(255), ' +
										'PICTURE_SINGLE varchar(255), ' +
										'PICTURE_GROUP varchar(255), ' +
										'ADDRESS varchar(255), ' +
										'ZIP INTEGER, ' +
										'CITY varchar(255), ' +
										'COUNTRY varchar(255), ' +
										'PHONE varchar(255), ' +
										'FAX varchar(255), ' +
										'COMPANY varchar(255), ' +
										'SHORTNAME varchar(255), ' +
										'OPENING_HOURS varchar(255), ' +
							            'X_WGS84 real, ' +
							            'Y_WGS84 real, ' +
							            'image_id varchar(255), ' +                 //new in Version 1.2
										'primary key(ID, NAME)' +
										')';
        
        	// VERTRIEBSSTELLEN VIGNETTEN
        	var SQL_CREATE_VIGNETTEN_DE_AT =	'CREATE TABLE IF NOT EXISTS vignetten_de_at(' +
												'ID integer, ' +
												'NAME varchar(255), ' +
												'PICTURE_SINGLE varchar(255), ' +
												'PICTURE_GROUP varchar(255), ' +
												'ADDRESS varchar(255), ' +
												'ZIP INTEGER(8), ' +
												'CITY varchar(255), ' +
												'COUNTRY varchar(255), ' +
												'PHONE varchar(255), ' +
												'FAX varchar(255), ' +
												'COMPANY varchar(255), ' +
												'SHORTNAME varchar(255), ' +
												'OPENING_HOURS varchar(255), ' +
									            'X_WGS84 real, ' +
									            'Y_WGS84 real, ' +
									            'image_id varchar(255), ' +         //new in Version 1.2
												'primary key(ID, NAME)' +
												')';
        
        	// VERTRIEBSSTELLEN VIGNETTEN
        	var SQL_CREATE_VIGNETTEN_EN_US =	'CREATE TABLE IF NOT EXISTS vignetten_en_us(' +
												'ID integer, ' +
												'NAME varchar(255), ' +
												'PICTURE_SINGLE varchar(255), ' +
												'PICTURE_GROUP varchar(255), ' +
												'ADDRESS varchar(255), ' +
												'ZIP INTEGER(8), ' +
												'CITY varchar(255), ' +
												'COUNTRY varchar(255), ' +
												'PHONE varchar(255), ' +
												'FAX varchar(255), ' +
												'COMPANY varchar(255), ' +
												'SHORTNAME varchar(255), ' +
												'OPENING_HOURS varchar(255), ' +
									            'X_WGS84 real, ' +
									            'Y_WGS84 real, ' +
									            'image_id varchar(255), ' + //new in Version 1.2
												'primary key(ID, NAME)' +
												')';
        
        	var SQL_CREATE_VIDEOMAUT = 'CREATE TABLE IF NOT EXISTS videomaut(' +
        								'videomautid integer primary key not null, ' +
        								'barcode varchar(40), ' +
        								'type varchar(3), ' +
        								'kfzKennzeichen varchar(10), ' +
        								'orderingTime timestamp, ' +
        								'gueltigkeitBeginn timestamp, ' +
        								'gueltigkeitEnde timestamp, ' +
        								'status varchar(10), ' +
        								'streckenName varchar(255), ' +
        								'nationalitaet varchar(6) ' +
        								')';
        	
        	var SQL_CREATE_SETTINGS_ADDITIONAL = 'CREATE TABLE IF NOT EXISTS settings_additional(' +
												'setKey varchar(10) primary key not null, ' +
												'setValue varchar(100), ' +
												'setValue1 varchar(100), ' +
												'setValue2 varchar(100) ' +
												')';
            //store local history of watched items (e.g. last
            var SQL_CREATE_ACCESSLOG = 'CREATE TABLE IF NOT EXISTS access_log(' +
                                                'type varchar(20), ' +
                                                'id varchar(50), '+
                                                'lastaccess timestamp, '+
                                                'primary key (type, id)' +
                                                ')';
        
        	// Kompagnon
        	var SQL_CREATE_ROADPOINTS = 'CREATE TABLE IF NOT EXISTS roadpoints(' +
        								'ID integer primary key not null, ' +
        								'LAT real not null, ' +
									    'LON real not null, ' +
									    'ROAD_ID integer not null, ' +
        								'DIRECTION integer not null, ' +
        								'KM real not null' +
        								')';
        	var SQL_CREATE_TUNNEL = 'CREATE TABLE IF NOT EXISTS tunnel(' +
        								'ID integer primary key not null,' + 
        								'NAME varchar(50),' + 
        								'ROAD_ID integer not null,' +	
        								'LENGTH_RFB1 real,' + 			
        								'LENGTH_RFB2 real,' + 	
        								'KM_FROM_RFB1 real,' + 
        								'KM_TO_RFB1 real,' + 
        								'KM_FROM_RFB2 real,' + 
        								'KM_TO_RFB2 real,' + 	
        								'ONCOMING_TRAFFIC varchar(10),' + 
        								'DIRECTION integer' +
        								')';
        	var SQL_CREATE_ROADWORK_DE_AT = 'CREATE TABLE IF NOT EXISTS roadwork_de_at(' +
        								'ID integer not null,' + 
        								'ROAD_ID integer not null,' +
        								'DIRECTION integer not null, ' +
        								'BEGINMETER_RFB1 integer not null, ' +
        								'ENDMETER_RFB1 integer not null, ' +
        								'BEGINMETER_RFB2 integer not null, ' +
        								'ENDMETER_RFB2 integer not null, ' +
        								'REASON varchar(50), ' +
        								'STARTTIME timestamp, ' +
        								'ENDTIME timestamp, ' +
        								'BEGIN_TIME integer not null, ' +
        								'END_TIME integer not null, ' +
        								'SPEED_LIMIT integer, ' +
        								'RAMPENBAUSTELLE integer not null,' +	//new in Version 1.3
        								'primary key (ID, RAMPENBAUSTELLE)' +	//new in Version 1.3
        								')';
        	 var SQL_CREATE_ROADWORK_EN_US = 'CREATE TABLE IF NOT EXISTS roadwork_en_us(' +
        								'ID integer not null,' + 
        								'ROAD_ID integer not null,' +
        								'DIRECTION integer not null, ' +
        								'BEGINMETER_RFB1 integer not null, ' +
        								'ENDMETER_RFB1 integer not null, ' +
        								'BEGINMETER_RFB2 integer not null, ' +
        								'ENDMETER_RFB2 integer not null, ' +
        								'REASON varchar(50), ' +
        								'STARTTIME timestamp, ' +
        								'ENDTIME timestamp, ' +
        								'BEGIN_TIME integer not null, ' +
        								'END_TIME integer not null, ' +
        								'SPEED_LIMIT integer, ' +
        								'RAMPENBAUSTELLE integer not null,' +	//new in Version 1.3
        								'primary key (ID, RAMPENBAUSTELLE)' +	//new in Version 1.3
        								')';
        								
        	  var SQL_CREATE_JUNCTION = 'CREATE TABLE IF NOT EXISTS junction(' +
        								'ID integer primary key not null,' + 
        								'ROAD_ID integer not null,' +
								        'JUNCTION varchar(255),' + 
							         	'JUNCTION_TYPE varchar(20),' + 
							            'DIRECTION integer, ' + 
							            'JUNCTION_KM real, ' + 
   							            'NEXT_ROAD_ID integer, ' + 
 							            'NEXT_DIRECTION integer, ' +
							            'NEXT_JUNCTION_KM real, ' + 
							            'KNNR real, ' + 
							            'KM_EXIT integer, ' + 
							            'PD integer, '+							//new in Version 1.2
							            'ON1_RAMPE_BEGINN real, ' +				//new in Version 1.4
							            'ON2_RAMPE_BEGINN real' +				//new in Version 1.4
							            ')';
							            
        	var SQL_CREATE_WEATHER = 'CREATE TABLE IF NOT EXISTS weather(' +
				'ID integer primary key not null,' + 
				'ROAD_ID integer not null,' +
				'BEGINMETER integer not null,' +
				'ENDMETER integer not null,' +
	            'WARNING_TYP varchar(30) not null' + 
	            ')';
         	  
         	var SQL_CREATE_DELAY = 'CREATE TABLE IF NOT EXISTS delay(' +
				'ID integer primary key not null,' + 
				'ROAD_ID integer not null,' +
				'KM_FROM integer not null,' +
				'KM_TO integer not null,' +
				'DIRECTION integer not null,' +
				'JAM_REASON integer not null,' +
				'DELAY integer not null' +
	            ')';
        								
			var SQL_CREATE_STREETS = 'CREATE TABLE IF NOT EXISTS streets(' +
        										'id integer, ' +
        										'ROAD_ID integer, ' +
        										'ROAD_INFO varchar(255), ' +
        										'ROAD_INFO2 varchar(255), ' +
        										'ROAD_CODE_1 varchar(255), ' +
        										'ROAD_CODE_2 varchar(255), ' +
        										'ROAD_NAME varchar(255), ' +
        										'primary key (id, ROAD_ID)' + 
        										')';
        										
        	var SQL_CREATE_PROVINCES = 'CREATE TABLE IF NOT EXISTS provinces(' +
        										'id integer, ' +
        										'PROVINCE_ID integer, ' +
        										'PROVINCE_NAME varchar(255), ' +
        										'PROVINCE_MIDCODE varchar(255), ' +
        										'PROVINCE_SHORTCODE varchar(255), ' +
        										'PROVINCE_COUNTRY varchar(255), ' +
        										'primary key (id, PROVINCE_ID)' + 
        										')';
        	
        	
        	var SQL_CREATE_TOLLBOOTHS = 'CREATE TABLE IF NOT EXISTS tollbooths(' +
        										'ID integer, ' +
        										'NAME varchar(255), ' +
        										'INFO varchar(255), ' +
        										'ADDRESS varchar(255), ' +        										
												'ZIP INTEGER, ' +
												'CITY varchar(255), ' + 
												'PHONE varchar(255), ' +
												'FAX varchar(255), ' +
        										'EMAIL varchar(100), ' +
        										'TOLLBOOTH_ID, integer, ' +         										
        										'PROVINCE_ID integer, ' +
        										'ROAD_ID integer, ' +
        										'DIRECTION integer, ' +
												'ROAD_KM_FROM real, '+ 
												'ROAD_KM_TO real, '+ 
												'ROAD_KM_TOLLSTATION real, '+ 
												'LON_WGS84 real, ' + 
												'LAT_WGS84 real, ' +												
												'LAST_EXIT_JUNCTION, ' +		
												'NUMMER varchar(4), ' +		//new in Version 1.4        										
        										'primary key (id, ID)' + 
        										')';
        	
        	var SQL_CREATE_POSITIONDATA = 'CREATE TABLE IF NOT EXISTS positiondata(' +
        										'ID integer PRIMARY KEY AUTOINCREMENT, ' +
												'Latitude real, '+ 
												'Longitude real, '+ 
												'RoadId integer, '+ 
												'KM real, '+ 
												'VehicleSpeed integer, '+ 
												'Heading real, '+ 
												'Direction integer, '+ 
												'GPSAccuracy integer,'+ 
												'GPSTimestamp timestamp,'+ 
												'Appdata varchar(255)'+
        										')';
        	var SQL_CREATE_IGL = 'CREATE TABLE IF NOT EXISTS igl(' +
												'ID integer primary key not null,' +
												'ROAD_ID integer,'+
												'DIRECTION integer,'+
												'NAME varchar(255),'+
												'ACTIVE integer,'+
												'ROAD_KM_FROM real,'+
												'ROAD_KM_TO real' +
												')';
												
			/* Verkehrsmeldungen table: stores all traffic info. No language extension in the table
				is stored inside the table in the language field.
			*/
        	var SQL_CREATE_VERKEHRSMELDUNGEN = 	'CREATE TABLE IF NOT EXISTS trafficinfo(' +
        										'situationid varchar(40) not null, ' +
        										'language varchar(5), ' +
												'source varchar(10), ' +
									            'x_wgs84 real, ' +
									            'y_wgs84 real, ' +
									            'eventtext varchar(255), ' +
									            'expires integer, ' + 								// date stored as integer timestamp new Date("2013-11-29").getTime()
									            'validfrom integer, ' +								// date stored as integer timestamp new Date("2013-11-29").getTime()
									            'validto integer, ' +								// date stored as integer timestamp new Date("2013-11-29").getTime()
									            'messagetext text, ' +
									            'icon varchar(255), ' +
									            'direction integer, ' +								//direction 0... both directions, 1 ... in direction of travel, 2 ... against direction of travel
									            'direction_text varchar(255), ' + 								
									            'bundesland varchar(20), ' +
									            'bldshort varchar(1), ' +
									            'distance real, ' +
									            'km real, ' +
									            'road_info varchar(10), ' +							//e.g. S1
									            'road_code_1 varchar(10), ' +						//e.g. S 1
												'road_code_2 varchar(10), ' +						//e.g. S01
									            'road_km_from real, ' +
									            'road_km_to real, ' +
									            'road_name varchar(255), ' +
									            'PRIMARY KEY(situationId, language)' +
        								')';
        	
        	
        	/**
        	 * GO App Table
        	 */
        	var SQL_CREATE_GO_APP_FUHRPARK = 	'CREATE TABLE IF NOT EXISTS go_app_carpark(' +
														'fahrzeugId varchar(50) not null, ' +
														'land varchar(10), ' +
														'basiskategorie varchar(10), ' +
														'schadstoffklasse varchar(10), ' +
														'obuid varchar(18), ' +
														'vertragsart varchar(40), ' +
														'obutyp varchar(40), ' +
														'kennzeichen varchar(30), ' +
														'kartenname varchar(30), ' +
														'guthabenNetto varchar(50), ' +
														'guthabenVom varchar(30), ' +
														'fahrzeughalterId varchar(50), ' +
														'pan varchar(30), ' +
														'ablaufdatum varchar(30), ' +
														'lastModified varchar(30), ' +
														'virtualisiert varchar(5), ' +
														'godSaldo varchar(30), ' +
														'godSaldoLastUpdate varchar(30), ' +
														'sperren varchar(500), ' +
											            'PRIMARY KEY(fahrzeugId)' +
												')';
        	// CREATE OUR TABLES:
        	that.db.transaction(function(tx) {
//        		tx.executeSql('DROP TABLE IF EXISTS user;');
//        		tx.executeSql('DROP TABLE IF EXISTS settings_apps;');
//        		tx.executeSql('DROP TABLE IF EXISTS settings_language;');
//    			tx.executeSql('DROP TABLE IF EXISTS statistics;');
    			// tx.executeSql('DROP TABLE IF EXISTS timestamps;');
    			// tx.executeSql('DROP TABLE IF EXISTS webcams;');
    			// tx.executeSql('DROP TABLE IF EXISTS rasten;');
//    			tx.executeSql('DROP TABLE IF EXISTS videomaut;');
//    			tx.executeSql('DROP TABLE IF EXISTS bundeslaender;');
//				tx.executeSql('DROP TABLE IF EXISTS positiondata;');
        		
        		
        		
        		// Tabelle für App-Infos erstellen (App Version etc.)
        		tx.executeSql('CREATE TABLE IF NOT EXISTS appinfo (id unique, version)');
        		// writing the app version to our database:
        		var insertString = "INSERT OR IGNORE INTO appinfo (id, version) VALUES (1, '" + config.appversion + "')";
        		tx.executeSql(insertString);
        		
        		
        		
    			// Tabelle für User der App erstellen
    			tx.executeSql('CREATE TABLE IF NOT EXISTS user (email varchar(100) primary key, device varchar(255), deviceid varchar(255))');
    			
        		// Tabelle für Settings der Apps erstellen
    			tx.executeSql('CREATE TABLE IF NOT EXISTS settings_apps (app varchar(60) primary key, active integer)');
    			
    			
    			if(that.tableData['settings_apps'] != undefined && that.tableData['settings_apps'].length > 0) {
    				
    				
    				// data-migration for the app-update-mechanism: rewriting the data we collected before to the new table
    				var dataFromSettingsAppsTable = that.tableData['settings_apps'];
    				
    				for (var i = 0; i < dataFromSettingsAppsTable.length; i++) {
    					
    					var theData = dataFromSettingsAppsTable[i];
    					
    					var sqlStatementString = "INSERT INTO settings_apps "
    					
    					var sql = 'INSERT INTO settings_apps(app, active) VALUES(?, ?)';
        				tx.executeSql(sql, [theData.app, theData.active]);
    					
            	    }
    					
    			}
        		
    			// Tabelle für Sprache erstellen
    			tx.executeSql('CREATE TABLE IF NOT EXISTS settings_language (language varchar(5) primary key)', [], function(tx, result) {
    				var sql = 'SELECT language FROM settings_language LIMIT 1';
    				tx.executeSql(sql, [], function(tx, result) {
    					if(result.rows.length == 1) {
    						config.language = result.rows.item(0).language;
    					} else {
    						//set default language to system language --> only if there is no language entry in the database
    						var language = "de-AT";						
    		        		/* navigator.language returns wrong values for old Android devices --> e.g. SGS 1
    		        		 * if(navigator != null && navigator.language.indexOf("en")!==-1){
    		        			language = "en-US";
    		        		}*/
    		        		config.language = language;
    		        		tx.executeSql("INSERT INTO settings_language (language) VALUES('"+language+"')");
    				    }
    					
    					return false;
    				});
    				
    				return false;
    			});
    			
    			tx.executeSql('CREATE TABLE IF NOT EXISTS statistics (app varchar(60) primary key, data varchar(500));');
    			
    			// Tabelle mit Timestamps der Daten erstellen
    			tx.executeSql('CREATE TABLE IF NOT EXISTS timestamps (data text primary key, last_changed integer);');
    			
    			// tx.executeSql("DELETE FROM timestamps WHERE data like 'webcams';");
    			// tx.executeSql("DELETE FROM timestamps WHERE data like 'rasten';");
    			
    			// Webcam-Tabelle erstellen (deutsch)
    			tx.executeSql(SQL_CREATE_WEBCAMS_DE_AT);
    			
    			// Webcam-Tabelle erstellen (englisch)
    			tx.executeSql(SQL_CREATE_WEBCAMS_EN_US);
    			
    			// Rasten-Tabelle erstellen (deutsch)
    			tx.executeSql(SQL_CREATE_RASTEN_DE_AT);
    			
    			// Rasten-Tabelle erstellen (englisch)
    			tx.executeSql(SQL_CREATE_RASTEN_EN_US);
    			
    			// Go-Maut Vertriebsstellen-Tabelle erstellen (deutsch)   ---- existiert derzeit nur in deutsch
    			tx.executeSql(SQL_CREATE_GO_DE_AT);
    			tx.executeSql(SQL_CREATE_GO_EN_US);
    			
    			tx.executeSql(SQL_CREATE_STELLPLAETZEINFO);
    			
    			
    			// Vignette Vertriebsstellen-Tabelle erstellen (deutsch)   ---- existiert derzeit nur in deutsch
    			tx.executeSql(SQL_CREATE_VIGNETTEN_DE_AT);
    			tx.executeSql(SQL_CREATE_VIGNETTEN_EN_US);
    			
    			// Bundeslaender-Tabelle erstellen
    			tx.executeSql(SQL_CREATE_BUNDESLAENDER);

    			// Videomaut-Tabelle erstellen
    			tx.executeSql(SQL_CREATE_VIDEOMAUT);

    			//additional Settings Tabelle erstellen
    			tx.executeSql(SQL_CREATE_SETTINGS_ADDITIONAL);
    			
                //access log Tabelle erstellen
                tx.executeSql(SQL_CREATE_ACCESSLOG);
                                
    			//Kompagnon-Tabellen erstellen
    			tx.executeSql(SQL_CREATE_ROADPOINTS); //alle Straßenpunkte
    			tx.executeSql(SQL_CREATE_TUNNEL); //alle Tunnel
    			tx.executeSql(SQL_CREATE_ROADWORK_DE_AT); //alle Baustellen
    			tx.executeSql(SQL_CREATE_ROADWORK_EN_US); //alle Baustellen
    			tx.executeSql(SQL_CREATE_JUNCTION); //alle Anschlussstellen, Verkehrsknotenpunkte
    			tx.executeSql(SQL_CREATE_WEATHER); // Wetter
    			tx.executeSql(SQL_CREATE_DELAY); // Delay
    			tx.executeSql(SQL_CREATE_POSITIONDATA); 
    			tx.executeSql(SQL_CREATE_IGL); //alle IG-L Bereiche
				//Kompagnon Indices erstellen
				tx.executeSql('CREATE INDEX IF NOT EXISTS roadindex ON roadpoints (ROAD_ID);');
    			tx.executeSql('CREATE INDEX IF NOT EXISTS directionindex ON roadpoints (DIRECTION);');
    			tx.executeSql('CREATE INDEX IF NOT EXISTS kmindex ON roadpoints (KM);');
    			tx.executeSql('CREATE INDEX IF NOT EXISTS idindex ON roadpoints (id);');
				

				//Straßentabelle erstellen
    			tx.executeSql(SQL_CREATE_STREETS); 
    			
    			// Bundeslaender-Tabelle erstellen
    			tx.executeSql(SQL_CREATE_PROVINCES);

    			//Mautstationen-Tabelle erstellen
    			tx.executeSql(SQL_CREATE_TOLLBOOTHS);

    			//Verkehrsmeldungen-Tabelle erstellen
    			tx.executeSql(SQL_CREATE_VERKEHRSMELDUNGEN);    			
    			
    			//Go Tabelle erstellen
    			tx.executeSql(SQL_CREATE_GO_APP_FUHRPARK); 
    		}, function(error) {
    			console.error('Persistence: ERROR creating Database: ', error);
    			return true;
    		},  function(tx) {
    			d.resolve();
    			return false;
    		});
        };
        
        this.querySuccess = function(tx, results) {
        	
        	if(!updateFinished) {
        		
	        	updateFinished = true;
	        		        	
	        	var len = results.rows.length;
	        	
	        	if (len > 0) {
	        		
	        		// found an entry for the stored appversion in our database:
	        		
	        		var appVersionFromDatabase = results.rows.item(0).version;
	            	var currentVersion = config.appversion;
	            	
	            	if ( currentVersion != appVersionFromDatabase ) {
	            		
	            		// new app version detected
	            		
	            		var dataFromSettingsAppsTable = [];
	            		
	            		tx.executeSql( 'SELECT * FROM settings_apps', [],
	        	    		function( tx, results ) {	// success callback
	        	    		
	                	    	var len = results.rows.length;
	                	    	
	                	    	
	                    	    for (var i = 0; i < len; i++) {
	                    	    	
	                    	    	var data = {
	                    	    			app: results.rows.item(i).app,
	                    	    			active: results.rows.item(i).active
	                    	    	};
	                    	    	
	                    	    	dataFromSettingsAppsTable.push(data);
	                    	    }
	                    		
	                    	    
	                    	    that.tableData['settings_apps'] = dataFromSettingsAppsTable;
	                    	    
	                    	    
	                    		
	                    		var theData = dataFromSettingsAppsTable[0];
	                    		
	                    		
	                    		// DELETING TABLES:
	                    		tx.executeSql('DROP TABLE IF EXISTS appinfo;');
	                    		tx.executeSql('DROP TABLE IF EXISTS provinces;');
	                    		tx.executeSql('DROP TABLE IF EXISTS streets;');
	                    		tx.executeSql('DROP TABLE IF EXISTS bundeslaender;');
	                    		tx.executeSql('DROP TABLE IF EXISTS rasten_de_at;');
	                    		tx.executeSql('DROP TABLE IF EXISTS rasten_en_us;');
	                    		tx.executeSql('DROP TABLE IF EXISTS vignetten_de_at;');
	                    		tx.executeSql('DROP TABLE IF EXISTS vignetten_en_us;');
	                    		tx.executeSql('DROP TABLE IF EXISTS go_de_at;');
	                    		tx.executeSql('DROP TABLE IF EXISTS go_en_us;');
	                    		tx.executeSql('DROP TABLE IF EXISTS stellplaetzeinfo;');
	                    		tx.executeSql('DROP TABLE IF EXISTS settings_apps;');
	//                    		tx.executeSql('DROP TABLE IF EXISTS settings_language;');
	//                    		tx.executeSql('DROP TABLE IF EXISTS statistics;');  // statistics table will not be deleted, because there will probably never be chagnes to that table so we leave it with its data, because if the user is offline and hasn't submitted his statistics to the server we don't want to delete the collected data that wasn't sent to the server yet
	                    		tx.executeSql('DROP TABLE IF EXISTS timestamps;');
//	                    		tx.executeSql('DROP TABLE IF EXISTS user;');    // user data must not be deleted if our app is updated, because we need the uuid or collected email address
	                    		tx.executeSql('DROP TABLE IF EXISTS videomaut;');
	                    		tx.executeSql('DROP TABLE IF EXISTS webcams_de_at;');
	                    		tx.executeSql('DROP TABLE IF EXISTS webcams_en_us;');
	                    		tx.executeSql('DROP TABLE IF EXISTS trafficinfo;');
	                    		//tx.executeSql('DROP TABLE IF EXISTS settings_additional;');	//additional settings should be kept during update process
	                    		tx.executeSql('DROP TABLE IF EXISTS go_app_carpark;');
	                    		
	                    		return false;
	        	    		},
	        	    		function( err ) {
	        	        	    console.error("Persistence: Error processing SQL: "+err.code);
	        	        	    return true;
	        	        	}
	    	            );	
	            	}	
	        	}
        	}
        	
        	return false;
        	
    	};
    },
    /**
     * checkSettingsStatus - check the app status in the local storage
     * 
     * checks the local status and writes it as a subapp status
     * 
     * this function is necessary to load only the data, that is marked active in the settings menu
     * 
     */
	checkSettingsStatus: function() {
		var that = this;
    	
    	this.db.transaction(
    			function(tx) {
    				tx.executeSql('SELECT * FROM settings_apps', [], function(tx, result){
    					var app_name = null;
    					if(result.rows.length > 0) {
    						for(var i = 0; i < result.rows.length; i++) {
    							if(result.rows.item(i).app.toLowerCase() == "service center"){
    								app_name = "serviceCenter";
    							} else {
    								app_name = result.rows.item(i).app.toLowerCase().split(" ")[0];
    							}
    							if(config.subapps[app_name] != undefined){
    								config.subapps[app_name].subapp_active = result.rows.item(i).active;
    							}
    							
    						}
    					}
    				});
    			},function(err) {}, function(succ) {});
	},
    
    
    clear: function() {
    	var d = $.Deferred();
    	this.checkSettingsStatus();
    	this.checkAppVersionAndUpdateDatabaseIfNecessary(d);
    	
    	return d.promise();
    },
    /**
     * checkAppVersionAndUpdateDatabaseIfNecessary - loads actual app version out of the database
     */
	checkAppVersionAndUpdateDatabaseIfNecessary: function(d) {
    	
		var that = this;
    	
    	this.db.transaction(
    			function(tx) {
    		
    				tx.executeSql('SELECT * FROM appinfo', [], that.querySuccess);
    		
    			},
    			
    			// error callback
    			function(err) {
    				that.populateDB(d);
    				return true;
    			},
    			
    			// success callback
    			function() {
    				that.populateDB(d);
    				return false;
    			}
    	);
    	
    	// CALLBACK:
    	function getAppVersionFailed(err) {
    	    that.populateDB(d);
    	};
    },
        
    addAccessLog: function(access_value) {
        
        var that = this;
        
    	this.db.transaction(
            function(tx) {
                //add entry to db
                var act_time = new Date().getTime();
                tx.executeSql('INSERT OR REPLACE INTO access_log (type, id, lastaccess) VALUES (?, ?, ?)', [access_value.type, access_value.id, act_time], function(tx, result) {/*console.log("SUCCESS");*/});
            },
            // error callback
            function(err) {return false;},
            // success callback
            function() {return true;}
        );
    },
    /**
     * tidyAccessLog
     *
     * cleans access log and keeps only entries that are out of the TOP x entries.
     */
    tidyAccessLog: function(){
        //KEEP TOP 15 because TOP 10 are shown --> to have backup if webcam is deleted
        var num_data_per_type = 3;
        var that = this;
        this.db.transaction(
            function(tx) {
                var sql = 'SELECT type, count(*) AS num_data FROM access_log GROUP BY type HAVING num_data > ?';
                
                tx.executeSql(sql, [num_data_per_type], function(tx, result) {
                    if(result.rows.length > 0){
                            for(var i = 0; i < result.rows.length; i++) {
                              var act_el = result.rows.item(i);
                              var del_elements = act_el.num_data - num_data_per_type - 1;
                              if(del_elements > 0){
                                    that.db.transaction(function(tx) {
                                        var sql_del = 'DELETE FROM access_log WHERE type = ? and id in (SELECT id from access_log WHERE type = ? ORDER BY lastaccess ASC LIMIT ?)';
                                                        tx.executeSql(sql_del, [act_el.type, act_el.type, del_elements], function(tx, result) {/*Success of deletion*/console.debug("Persistence: access_log: deletion success");});
                                       },// error callback of transaction
                                       function(err) {return false;},
                                       // success callback of transaction
                                       function() {return true;}
                                   );
                              }
                        }
                    }
                });
            },
            // error callback of transaction
            function(err) {return false;},
            // success callback of transaction
            function() {return true;}
        );
    },
        
    /**
     * clearAccessLog - deletes access log of special type
     *
     * @param {ENUM} type ... Possible values in constant APP_KEY_WEBCAM/APP_KEY_RASTEN
     */
    clearAccessLog: function(type){
        var that = this;
        this.db.transaction(
            function(tx) {
                var sql = 'DELETE FROM access_log WHERE type = ?';
                
                tx.executeSql(sql, [type], function(tx, result) {
                              });
            },
            // error callback of transaction
            function(err) {return false;},
            // success callback of transaction
            function() {return true;}
        );
    },

    /**
     * updateDBVersion - update DB version from oldVersion to newVersion
     * 
     */
    updateDBVersion : function(oldVersion, newVersion, callback) {
    	var that = this;
    	
    	// If the oldVersion is same as current version, it will be updated.
    	if(this.db.version != oldVersion) {
    		callback();
    		
    	} else {
	        this.db.changeVersion(oldVersion, newVersion, function(trans) {
	        	
        			if(oldVersion == "1.0") {
		        		//***************************************
		            	//CHANGES BETWEEN DB VERSION 1.0 and 1.1
		            	//***************************************
    					trans.executeSql('ALTER TABLE webcams_de_at ADD COLUMN road_id integer');
    					trans.executeSql('ALTER TABLE webcams_en_us ADD COLUMN road_id integer');
    					trans.executeSql('ALTER TABLE rasten_de_at ADD COLUMN road_id integer');
    					trans.executeSql('ALTER TABLE rasten_de_at ADD COLUMN richtungstxt varchar(255)');
    					trans.executeSql('ALTER TABLE rasten_en_us ADD COLUMN road_id integer');
    					trans.executeSql('ALTER TABLE rasten_en_us ADD COLUMN richtungstxt varchar(255)');
    					
        			} else if(oldVersion == "1.1") {
        		    	//***************************************
        		    	//CHANGES BETWEEN DB VERSION 1.1 and 1.2
        		    	//***************************************
    					trans.executeSql('ALTER TABLE go_de_at ADD COLUMN image_id varchar(255)');
    					trans.executeSql('ALTER TABLE go_en_us ADD COLUMN image_id varchar(255)');
    					trans.executeSql('ALTER TABLE vignetten_de_at ADD COLUMN image_id varchar(255)');
    					trans.executeSql('ALTER TABLE vignetten_en_us ADD COLUMN image_id varchar(255)');
    					trans.executeSql('ALTER TABLE rasten_de_at ADD COLUMN province_id integer');
    					trans.executeSql('ALTER TABLE rasten_en_us ADD COLUMN province_id integer');
    					trans.executeSql('ALTER TABLE webcams_de_at ADD COLUMN province_id integer');
    					trans.executeSql('ALTER TABLE webcams_en_us ADD COLUMN province_id integer');
    					trans.executeSql('ALTER TABLE junction ADD COLUMN PD integer');
        			} else if(oldVersion == "1.2") {
        		    	//***************************************
        		    	//CHANGES BETWEEN DB VERSION 1.2 and 1.3
        		    	//***************************************
        				trans.executeSql('ALTER TABLE rasten_de_at ADD COLUMN on1_rampe_beginn real');
						trans.executeSql('ALTER TABLE rasten_de_at ADD COLUMN on2_rampe_beginn real');
						trans.executeSql('ALTER TABLE rasten_en_us ADD COLUMN on1_rampe_beginn real');
						trans.executeSql('ALTER TABLE rasten_en_us ADD COLUMN on2_rampe_beginn real');
						
						/* KOMPAGNON CHANGES */
			        	trans.executeSql('ALTER TABLE roadwork_en_us ADD COLUMN RAMPENBAUSTELLE integer not null default(-1)');
			        	trans.executeSql('ALTER TABLE roadwork_de_at ADD COLUMN RAMPENBAUSTELLE integer not null default(-1)');
			        	
			        	// column rampenbaustelle needs to be included in primary key
			        	// solution in sqlite: 1. make new tables, 2. copy data, 3. delete old table, 4. rename new
			        	
			        	// 1.
			        	var SQL_CREATE_ROADWORK_DE_AT = 'CREATE TABLE IF NOT EXISTS roadwork_de_at_new(' +
								'ID integer not null,' + 
								'ROAD_ID integer not null,' +
								'DIRECTION integer not null, ' +
								'BEGINMETER_RFB1 integer not null, ' +
								'ENDMETER_RFB1 integer not null, ' +
								'BEGINMETER_RFB2 integer not null, ' +
								'ENDMETER_RFB2 integer not null, ' +
								'REASON varchar(50), ' +
								'STARTTIME timestamp, ' +
								'ENDTIME timestamp, ' +
								'BEGIN_TIME integer not null, ' +
								'END_TIME integer not null, ' +
								'SPEED_LIMIT integer, ' +
								'RAMPENBAUSTELLE integer not null,' +	//new in Version 1.3
								'primary key (ID, RAMPENBAUSTELLE)' +	//new in Version 1.3
								')';
			        	var SQL_CREATE_ROADWORK_EN_US = 'CREATE TABLE IF NOT EXISTS roadwork_en_us_new(' +
								'ID integer not null,' + 
								'ROAD_ID integer not null,' +
								'DIRECTION integer not null, ' +
								'BEGINMETER_RFB1 integer not null, ' +
								'ENDMETER_RFB1 integer not null, ' +
								'BEGINMETER_RFB2 integer not null, ' +
								'ENDMETER_RFB2 integer not null, ' +
								'REASON varchar(50), ' +
								'STARTTIME timestamp, ' +
								'ENDTIME timestamp, ' +
								'BEGIN_TIME integer not null, ' +
								'END_TIME integer not null, ' +
								'SPEED_LIMIT integer, ' +
								'RAMPENBAUSTELLE integer not null,' +	//new in Version 1.3
								'primary key (ID, RAMPENBAUSTELLE)' +	//new in Version 1.3
								')';
			        	trans.executeSql(SQL_CREATE_ROADWORK_DE_AT);
			        	trans.executeSql(SQL_CREATE_ROADWORK_EN_US);
			        	
			        	// 2.
			        	var column_list = "ID, ROAD_ID, DIRECTION, BEGINMETER_RFB1, ENDMETER_RFB1, BEGINMETER_RFB2, ENDMETER_RFB2,";
			        	column_list+="REASON, STARTTIME, ENDTIME, BEGIN_TIME, END_TIME, SPEED_LIMIT, RAMPENBAUSTELLE";
			        	
			        	trans.executeSql('INSERT INTO roadwork_de_at_new('+ column_list +') SELECT * FROM roadwork_de_at;');
			        	trans.executeSql('INSERT INTO roadwork_en_us_new('+ column_list +') SELECT * FROM roadwork_en_us;');
			        	
			        	// 3.
			        	trans.executeSql('DROP TABLE roadwork_de_at;');
			        	trans.executeSql('DROP TABLE roadwork_en_us;');
			        	
			        	//4.
			        	trans.executeSql('ALTER TABLE roadwork_de_at_new RENAME TO roadwork_de_at;');
			        	trans.executeSql('ALTER TABLE roadwork_en_us_new RENAME TO roadwork_en_us;');

			        	
			        	var SQL_CREATE_IGL = 'CREATE TABLE IF NOT EXISTS igl(' +
		    					'ID integer primary key not null,' +
		    					'ROAD_ID integer,'+
		    					'DIRECTION integer,'+
		    					'NAME varchar(255),'+
		    					'ACTIVE integer,'+
		    					'ROAD_KM_FROM real,'+
		    					'ROAD_KM_TO real' +
		    					')';
			        	trans.executeSql(SQL_CREATE_IGL);
			        	
			        	//hide KOMPAGNON IN SETTINGS TABLE
    					trans.executeSql('UPDATE settings_apps SET active = 0 WHERE app LIKE ?', ['Kompagnon']);
        			} else if(oldVersion == "1.3") {
        		    	//***************************************
        		    	//CHANGES BETWEEN DB VERSION 1.3 and 1.4
        		    	//***************************************
	        			trans.executeSql('ALTER TABLE tollbooths ADD COLUMN NUMMER varchar(4)');
						trans.executeSql('ALTER TABLE junction ADD COLUMN ON1_RAMPE_BEGINN real');
						trans.executeSql('ALTER TABLE junction ADD COLUMN ON2_RAMPE_BEGINN real');
						
        			}
        			
				}, 
				function(e) { //error
					console.error("Persistence: DB Error during update of DB from v" + oldVersion + " to v" + newVersion + " Error: ",e);
					callback();
				},
				function() { //success
					!release_flag && console.debug("Persistence: Updated DB Version to v" + newVersion + " (old version v" + oldVersion + ")");
					callback();
				}
			);
    	}
    }
});


$.Class('at.asfinag.unterwegs.Application', {}, {

	/**
	 * init
	 * 
	 * @param parentId
	 * @param {Object} config
	 */
    init: function(parentId, config) {
    	!release_flag && console.log("[init] Application");
    	
    	//FIX FOR DEVICE ID PROBLEMS
    	if(window.device != undefined && window.device.uuid != undefined){
    		//use default device id
    		config.mydeviceid = window.device.uuid.split('-').join('');
    	} else {
	    	config.db.db.transaction(function(tx) {
	    		tx.executeSql("SELECT setValue FROM settings_additional WHERE setKey = 'app_devid' LIMIT 1", [], function(tx, result) {
						if(result.rows.length == 1) {
							config.mydeviceid = result.rows.item(0).setValue;
						} else {
							//create & store new device ID
							config.mydeviceid = Sha256.hash((Math.random()*10000) + new Date() + (Math.random()*10000));
		    				tx.executeSql('INSERT INTO settings_additional(setKey, setValue) VALUES(?, ?)', ["app_devid", config.mydeviceid], function(tx, result) {
		    					//console.log("stored");
		    				});
						}
				});
			}, 
			function(e) { 
				//console.log(e);
				return false;
			}
			);
		}
		//END FIX FOR DEVICE ID PROBLEMS
    	
    	var activityIndicator_loadingSpinner = new at.asfinag.unterwegs.mobile.Loading('videomaut_freeze_ui');
		activityIndicator_loadingSpinner.setVisible(true);
    	
    	$.ajaxSetup({ cache: false });
    	
        this.parentId = parentId;
        this.jqParent = $('#' + parentId);
        this.config = config;
        this.subapps = config.subapps;
        this.mobileTouch;
        
        this.sendingStats = IS_NOT_SENDING_STATS;
        
        this.status = APP_STATUS_RUNNING;
        
        this.controller = new at.asfinag.unterwegs.mobile.Controller();
        this.currentController = undefined;
        
        this.statistics = {};
        
        this.loading = new at.asfinag.unterwegs.mobile.Loading();
        
        var that = this;
        
        that.loadApp_clicked = false;
        
        this.hasInitializedSubapps = false;
        
        
        this.device_orientation;
        
        that.ignoreClick = false;

        var intervalId;
        
        // if hash == '#/', then reload the page without the home route
        if(decodeURIComponent(location.hash.split('#')[1]) == '/') {
        	window.location = location.href.split('#')[0];
        }
        
        this.overlay = {
        		// Overlay for Applications Alert-Dialog
            	'alert': new at.asfinag.unterwegs.mobile.TouchOverlay(
            		'alert',
            		'app/overlay_alert.ejs',
            		{},
            		
            		/**
                     * onLoad
                     */
            		function() {
            			
            		},
            		
            		/**
                     * onShow
                     */
            		function() {
            			var me = this;
            			$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').on('click', function() {
            				me.setVisible(false);
            			});
            		},
            		
            		/**
                     * onDestroy
                     */
            		function() {
            			$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
            			if(this.callback != undefined && typeof(this.callback === 'function')) {
            				this.callback();
            			}
            		}
            	),
            	
            	// Overlay for Applications Yes-No-Dialog
            	'YesNoDialog': new at.asfinag.unterwegs.mobile.TouchOverlay(
                		'YesNoDialog',
                		'app/overlay_YesNoDialog.ejs',
                		{},
                		
                		// onLoad
                		function() {
                			
                		},
                		
                		// onShow
                		function() {
                			var me = this;
                			
                			$('div.footer.overlay > ul.buttonlist > li.button.yes').on('click', function() {
                				if(me.callback_yes != undefined) {
                					me.callback_yes();
                				}
                				me.setVisible(false);
                			});
                			
                			$('div.footer.overlay > ul.buttonlist > li.button.no').on('click', function() {
                				if(me.callback_yes != undefined) {
                					me.callback_no();
                				}
                				me.setVisible(false);
                			});
                			
                		},
                		
                		// onDestroy
                		function() {
                			this.callback_yes = undefined;
                			this.callback_no = undefined;
                			
                			$('div.footer.overlay > ul.buttonlistSingle > li.button.no').unbind('click');
                			$('div.footer.overlay > ul.buttonlistSingle > li.button.yes').unbind('click');
                		}
                ),
             // Overlay for Applications Legal-Notice-Dialog
            	'LegalNoticeDialog': new at.asfinag.unterwegs.mobile.TouchOverlay(
                		'LegalNotice',
                		'app/overlay_LegalNoticeDialog.ejs',
                		{},
                		
                		/**
                         * onLoad
                         */
                		function() {
                		},
                		
                		/**
                         * onShow
                         */
                		function() {
                			var me = this;
                			
                			/*nicht mehr verwendet --> keine Checkbox in der Legal Notice
                			 * $('span.legal_notice.checkbox, span.legal_notice_accept').on('click', function(){
                				$('span.legal_notice.checkbox').toggleClass('activated');
                			});*/
                			$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').on('click', function() {
                				/*if($('span.legal_notice.checkbox').hasClass('activated')){
                					me.callback(true);
                				} else {
                					me.callback(false);
                				}*/
                				me.callback(true);
                				me.setVisible(false);
                			});
                		},
                		
                		/**
                         * onDestroy
                         */
                		function() {
                			$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
                			if(this.callback != undefined && typeof(this.callback === 'function')) {
                				this.callback();
                			}
                		}
                )
            };
        
        var me = this;
        
        this.showHeader = function(visible) {
        	that.mobileTouch.box.showHeader(visible);
        },
        
        this.showFooter = function(visible) {
        	that.mobileTouch.box.showFooter(visible);
        },
        
        
        this.initLabels = function() {
	        that.mobileTouch.box.initLabels();
        },
        
        /**
         * Add Home Controller
         */
        this.controller.add('/', 'pages/home.ejs', {        	
        	
        	onLoad: function() {
        		var d = $.Deferred();
        		d.controller = this;
        		d.application = me;
        		var controller = this;
        		
        		controller.onResize = function(device_orientation) {
        			debug_flag && console.info('Application.class.js: window width: ' + $(window).width() + ' / height: ' + $(window).height());
        			
        			var dev_orientation = device_orientation;
        			//calculate device orientation --> because of bugs
        			if($(window).width() != null && $(window).width() != undefined) {
	        			if($(window).width() < $(window).height()) {
	        				var dev_orientation = 'portrait';
	        			} else {
	        				var dev_orientation = 'landscape';
	        			}
        			}
        			
        			if(dev_orientation == "portrait"){ 	//PORTRAIT
        				that.mobileTouch.box.showHeader(true);
        				that.mobileTouch.box.showFooter(true);
        				$('div#unterwegs').removeClass('white');
        				
        				$('div#unterwegs div.content.home').css({
        					'margin-left': 0,
        					'margin-right': 0
        				});
        				
        				//damit das Menü nicht links & rechts überlappt
        				if($('div.homeCards').length > 0){
        					$('div.homeCards').css('width', $(window).width() - ($('div.content.home').css('margin-left').split('px')[0]) - ($('div.content.home').css('margin-right').split('px')[0]) - ($('div.content.home div.homeCards').css('margin-left').split('px')[0]) - ($('div.content.home div.homeCards').css('margin-right').split('px')[0]));
        				}
        			} else { 							//LANDSCAPE
        				that.mobileTouch.box.showHeader(false);
        				that.mobileTouch.box.showFooter(false);
        				$('div#unterwegs').addClass('white');
        				$('div#unterwegs div.header.home div.background').show();
        				//move to right
        				$('div#unterwegs div.content.home').css({
        					'margin-left': 54,
        					'margin-right': -54
        				});
        				$('div.homeCards').css('width', $(window).width() - ($('div.content.home').css('margin-left').split('px')[0]) - ($('div.content.home').css('margin-right').split('px')[0]) - ($('div.content.home div.homeCards').css('margin-left').split('px')[0]) - ($('div.content.home div.homeCards').css('margin-right').split('px')[0]) - 56);
        			}
        			
        		}
        		
        		
        		me.loadPage(controller.path, { data: { offline: that.getNetworkState() == CONNECTION_NONE, items: controller.items, appversion: that.config.appversion, builddate: that.config.builddate, i18n: that.config.i18n, language: that.config.language, system: act_system } }, function() {
        			$('ul.homeList').hide(); //@deprecated - entfernen wenn CardView released wird
        			$('div.homeCards').hide();
        			
                    debug_flag && console.info('loadpage success now calling initsubappsssss');
                    me.initSubApps();
        			me.hashChange();
            		setTimeout(function() {
                        $('ul.homeList').show();//@deprecated - entfernen wenn CardView released wird
                        $('div.homeCards').show();
            			controller.onResize(me.device_orientation);
            			activityIndicator_loadingSpinner.setVisible(false);
            		}, 250);

        			d.resolve();
    			});        		
        		
        		return d.promise();
        	},
        	
        	
        	/**
        	 * onShow
        	 */
        	onShow: function() {
        		var that = this;
        		me.refreshPage();
        		
        		//WIDGET PART START (only relevant vor Android)
        		function resetLaunchParamAndNavigateTo(url) {
        			//console.log("resetLaunchParamAndNavigateTo", url);
        			config.launchparam = "";	// important reset otherwise the app will always go back to settings...
        			config.launchparamFavName = "";
        			config.launchparamCamId = "";
        			config.launchparamData = "";
        			//remove shortcut data
        			if(window.PluginNativeCode != undefined && window.PluginNativeCode.clearShortcutData != undefined 
							&& typeof window.PluginNativeCode.clearShortcutData === 'function') {
        				window.PluginNativeCode.clearShortcutData();
        			}
        			setTimeout(function(){
        				window.location = url;
					},500);
        		}
        		
        		function subpageNavigation(){
	        		var navigate_to_subpage = false;
	        		if(config.launchparamTime != "" && config.launchparamTime > 1){
	        			var comp_time = config.launchparamTime*1 + 5000; //if app is started from 
	        			var act_time = new Date().getTime();
	        			if(comp_time > act_time){
	        				navigate_to_subpage = true;
	        			}
	        		}
	        		//necessary for 1x1 Widget -> to jump to widget list
	        		if(config.launchparam == "FavSelect" && navigate_to_subpage){
	        			config.launchparamWidget = true;
	    				resetLaunchParamAndNavigateTo('#/webcams/favoriten?favname='+config.launchparamFavName+'&page-transition=next');
	        		}
	        		//necessary for Webcam Widget --> to jump to Webcam Details
	    			if(config.launchparam == "WebcamViewer" && navigate_to_subpage) {
	    				config.launchparamWidget = true;
	    				resetLaunchParamAndNavigateTo('#/webcams/favoriten?favname='+config.launchparamFavName+'&camid='+config.launchparamCamId+'&page-transition=next');
	    			}
	    			//
	    			if(config.launchparam == "WebcamList" && navigate_to_subpage){
	    				resetLaunchParamAndNavigateTo('#/webcams?page-transition=next');
	        		}
	    			//Widget Polli --> jump to main page
	    			if(config.launchparam == "Startpage" && navigate_to_subpage){
	    				resetLaunchParamAndNavigateTo('#/');
	        		}
	    			
	    			//Shortcut
	    			if(config.launchparam == "Shortcut" && navigate_to_subpage){
	    				if(config.launchparamData.substr(0,2) == "99"){
	    					resetLaunchParamAndNavigateTo("#/"+config.launchparamData.substr(2));
	    				} else {
	    					resetLaunchParamAndNavigateTo($.base64.decode(config.launchparamType));
	    				}
	    			}
        		}
    			
    			//WIDGET PART END
        		intervalId = window.setInterval(function() { 
        			that.controller.onResize(me.device_orientation);    			
        		}, 400);
                
        		//SEND DEVICE STATISTICS
        		if(application.config.devStatsSent != true){
        			application.sendDeviceStatistics();
            		application.config.devStatsSent = true;
        		}
        		
        		//SHOW LEGAL NOTICE POPUP   		
        		//if it's coming from settings page --> hide all app buttons
                $('li.legal_notice').on('click', function() {
                    application.showLegalNotice(false);
                });
        		/*removed - legal notice is not displayed on initial screen
        		 if(getURLParameterByName('legnotdecl') == "true"){
        			setTimeout(function(){
            			$('ul.homeList li').hide(); //@deprecated - entfernen wenn CardView released wird
            			$('div.homeCards').hide();
                    	$('a.imagebutton.settings').hide();
                    	$('.legal_notice').show();
					},300);
        		} else {
	        		this.application.config.settings.persistence.getAdditionalSetting('set_legalnotice', function (value){
	        			//wenn config value == undefined oder 0 --> Popup, wenn 1 --> nichts
	        			if(value == undefined || value.setValue == 0){
	        				application.showLegalNotice(false);
	    	    			return;
	        			} else {
	        				subpageNavigation();
	        			}
	        		});
        		}*/
                subpageNavigation();
        	},
        	
        	onDestroy: function() {
        		$('div#unterwegs div.header.home div.background').hide();	// hiding the left bar in landscape otherwise the left bar will become black which looks ugly
        		window.clearInterval(intervalId);
        	}
        });
        
		document.addEventListener('touchmove', function (e) { e.preventDefault(); }, false);
		if(window.orientation != undefined) {
			that.device_orientation = (window.orientation == -90 || window.orientation == 90) ? 'landscape' : 'portrait';
		} else {
			if($(window).width() / $(window).height() >= 1) {
				that.device_orientation = 'landscape';
			} else {
				that.device_orientation = 'portrait';
			}
		}
		
		document.addEventListener(
			'pause',
			function() {
				that.status = APP_STATUS_PAUSE;
			},
			false
		);
		
		document.addEventListener(
				'resume',
				function() {
					
					/*application.config.settings.persistence.getAdditionalSetting('set_legalnotice', function (value){
						if(value == undefined || value.setValue == 0){
							//do nothing --> disclaimer page is shown
						} else {
							resumeTasks();
						}
					});*/
					resumeTasks();
					
					function resumeTasks(){
						/*
						 * check if resume comes from Android Widget
						 * close app (necessary when user clicks on Settings button of widget)
						 * otherwise app gets started which is not intended
						 * 
						 */
						if(window.PluginNativeCode != undefined && window.PluginNativeCode.isComingFromWidget != undefined 
								&& typeof window.PluginNativeCode.isComingFromWidget === 'function') {
							fromWidget = window.PluginNativeCode.isComingFromWidget();
							if(fromWidget == "true"){
								navigator.app.exitApp();
							}
						}
						/*
						 * check shortcut data if coming from shortcut we have to route to specific page
						 * 
						 */
						if(window.PluginNativeCode != undefined && window.PluginNativeCode.getShortcutData != undefined 
								&& typeof window.PluginNativeCode.getShortcutData === 'function') {
							var shortcutdata = window.PluginNativeCode.getShortcutData();
							//remove shortcut data
		        			if(window.PluginNativeCode.clearShortcutData != undefined 
									&& typeof window.PluginNativeCode.clearShortcutData === 'function') {
		        				window.PluginNativeCode.clearShortcutData();
		        			}
							if(shortcutdata != ""){
								var splitted = shortcutdata.split('##');
								if(splitted.length == 3){
									config.launchparamData = splitted[2];
									if(splitted[2].substr(0,2) == "99"){
										var target_link = "#/"+splitted[2].substr(2);
				    				} else {
				    					var target_link = $.base64.decode(splitted[1]);
				    				}
									setTimeout(function(){
				        				window.location = target_link;
									},500);	
								}
							}
						}
						
						/*
						 * check in resume, the widget link to be able to jump into special areas of app
						 * 
						 *  necessary when widget is added, app forced to close, widget clicked again - then
						 *  the resume function is called
						 */
						if(window.PluginNativeCode != undefined && window.PluginNativeCode.getLaunchParam != undefined 
								&& typeof window.PluginNativeCode.getLaunchParam === 'function') {
							launchparam = window.PluginNativeCode.getLaunchParam();
							var splitted = launchparam.split('&');
							if(splitted[0] == 'Startpage') {
			        			setTimeout(function(){
			        				window.location = '#/';
								},500);
							} else if(splitted[0] == 'WebcamViewer'){
								config.launchparamWidget = true;
			        			setTimeout(function(){
			        				window.location = '#/webcams/favoriten?'+splitted[1]+'&'+splitted[2]+'&page-transition=next';
	
								},500);							
							}
						}
						
						that.status = APP_STATUS_RUNNING;
	
						for(var i in that.config.subapps) {
							var subapp = that.config.subapps[i];
							if(subapp.persistence != undefined && (subapp.subapp_active == undefined || subapp.subapp_active == 1)) {
								// loading/updating data for all subapps except Vertriebsstelle
								if (subapp.id != "Vertriebsstelle") {
									subapp.persistence.update();
									if(subapp.stellplatzInfos != undefined) {
										subapp.stellplatzInfos.update();
									}
								}
							}
						}
	//	 					var subapp = application.config.subapps[i]; 
	//	 					if(subapp.persistence != undefined) {
	//	 						list += application .config.subapps[i].title + '<br />';
	//	 					}
	//	         		}
						if(that.currentController != undefined && that.currentController.onResize != undefined && typeof(that.currentController.onResize) == 'function') {
							that.currentController.onResize(that.device_orientation);
						}
					}
				},
				false
			);
		
		document.addEventListener(
			'orientationchange', 
			function() {
				that.device_orientation = 'portrait';
				if(window.orientation != undefined) {
					that.device_orientation = (window.orientation == -90 || window.orientation == 90) ? 'landscape' : 'portrait';
				}
				
				if(that.currentController != undefined && that.currentController.onResize != undefined && typeof(that.currentController.onResize) == 'function') {
					that.currentController.onResize(that.device_orientation);
				}
				me.mobileTouch.box.resize();
			},
			false
		);
		
		window.addEventListener(
			'resize',
			function() {
				that.device_orientation = 'portrait';
				if(window.orientation != undefined) {
					that.device_orientation = (window.orientation == -90 || window.orientation == 90) ? 'landscape' : 'portrait';
				} else {
					if($(document).width() / $(document).height() >= 1) {
						that.device_orientation = 'landscape';
					} else {
						that.device_orientation = 'portrait';
					}
				}
				
				if(that.currentController != undefined && that.currentController.onResize != undefined && typeof(that.currentController.onResize) == 'function') {
					that.currentController.onResize(that.device_orientation);
				}
				me.mobileTouch.box.resize();
			},
			false);
        /**
         * hashChange - Hash Change Event Handling
         *
         * detects url-hash change and performs relevant action
         */
		this.hashChange = function() {
        	$(window).unbind('hashchange');
	        $(window).bind('hashchange', function(e) {
	        	me.showLoadingOverlay();
	        	
	        	var hash = location.hash.split('#')[1];
	        	var path = hash.split('?')[0];
	        	
	        	var controller = me.controller.list[path];

	        	// get url parameters
	        	var help = hash.split('?')[1];
	        	if(help != undefined) {
	        		var parameters = help.split('&');
	        	
	        		// controller: set url parameters
		        	for(var param in parameters) {
		        		var key = parameters[param].split('=')[0];
		        		var value = parameters[param].split('=')[1];
		        		controller.parameters = controller.parameters || {};
		        		controller.parameters[key] = decodeURIComponent(value);
		        	}
	        	}
	        	
	        	// invoke current controllers onDestroy event
	        	if(me.currentController != undefined && me.currentController.onDestroy != undefined && typeof(me.currentController.onDestroy) == 'function') {
	        		me.currentController.onDestroy();
	        	}
	        	// invoke controller events
	        	if(controller != undefined) { 
		        	if(controller.onLoad != undefined) {
		        		$.when(controller.onLoad(controller)).done(controller.onShow);
		        	} else {
		        		if(controller.onShow != undefined) {
		        			controller.onShow();
		        		}
		        	}
		        	// set new controller
		        	me.currentController = controller;
	        	}
	        });
	    }
        
        /**
         * initSubApps - initialization of subapps
         *
         * @param callback
         */
        this.initSubApps = function(callback) {
        	config.settings.setupApp(me);
	        
        	var countActiveApps = 0;
    	
        	$.when(config.settings.persistence.update(me.subapps)).then(function() {
        		var homeList = $('ul.homeList');
	            var cardView1 = $('div#cardview1 div.subapps');
	            var cardView2 = $('div#cardview2 div.subapps');
	            var cardView3 = $('div#cardview3 div.subapps');
	            var cardView4 = $('div#cardview4 div.subapps');
	            for(var c in me.subapps) {
	                if(me.subapps[c].active != 0) {
	                	if(me.subapps[c].updateIcon != undefined && typeof me.subapps[c].updateIcon === 'function') {
	                		me.subapps[c].updateIcon();
	                	}
	                	if(me.subapps[c].id == "HACONRoute"){
                			hideOnTabletClass = "hideOnTablet";
                		}
	                	// NEW in Release 2.8
	                	if(c == "kompagnon" || c == "webcams" || c == "verkehrsmeldungen"){
	                		cardView1.append(new EJS({ url: 'templates/cardview_items.ejs' }).render({ id: me.subapps[c].id, caption: me.subapps[c].title, path: me.subapps[c].path, icon: me.subapps[c].icon, hideOnTabletClass: hideOnTabletClass }));
	                	}
	                	if(c == "rasten" || c == "haconroute"){
	                		cardView2.append(new EJS({ url: 'templates/cardview_items.ejs' }).render({ id: me.subapps[c].id, caption: me.subapps[c].title, path: me.subapps[c].path, icon: me.subapps[c].icon, hideOnTabletClass: hideOnTabletClass }));
	                	}
	                	if(c == "videomaut" || c == "goapp" || c == "vertriebsstelle"){
	                		cardView3.append(new EJS({ url: 'templates/cardview_items.ejs' }).render({ id: me.subapps[c].id, caption: me.subapps[c].title, path: me.subapps[c].path, icon: me.subapps[c].icon, hideOnTabletClass: hideOnTabletClass }));
	                	}
	                	if(c == "news" || c == "serviceCenter" || c == "feedback"){
	                		cardView4.append(new EJS({ url: 'templates/cardview_items.ejs' }).render({ id: me.subapps[c].id, caption: me.subapps[c].title, path: me.subapps[c].path, icon: me.subapps[c].icon, hideOnTabletClass: hideOnTabletClass }));
	                	}
	                	// END NEW
	                	// prevent icons to show twice on main screen:
	                	//@deprecated - entfernen wenn CardView released wird
	                	if ( $('ul.homeList').find('li a.' + 'App_' + me.subapps[c].id).length == 0 ) {
	                		var hideOnTabletClass = "";
	                		if(me.subapps[c].id == "HACONRoute"){
	                			hideOnTabletClass = "hideOnTablet";
	                		}
	                		//homeList.append(new EJS({ url: 'templates/homelist.ejs' }).render({ id: me.subapps[c].id, caption: me.subapps[c].title, path: me.subapps[c].path, icon: me.subapps[c].icon, hideOnTabletClass: hideOnTabletClass }));
		                	countActiveApps++;
	                	}
	                	// end deprecated
		                
                    }
                }
	            $('.homeCards > .cardview a.App_News').attr('data-count',0); //reset data-count
	            $(".cardview").each(function() {
	            	switch($(this).find("div.subapps a").length){
	            		case 0: $(this).hide();
	            				break;
	            		case 1: $(this).find("div.subapps a").width('100%');$(this).show();
	            				break;
	            		case 2: $(this).find("div.subapps a").width('50%');$(this).show();
	            				break;
	            		default: $(this).find("div.subapps a").width('33%');$(this).show();
	            	}
	            	
	              });
	            
	            // append icon on home screen for every single subapp
	            if(countActiveApps == 0) {
	            	//homeList.append(new EJS({ url: 'templates/homelist.ejs' }).render({ id: config.settings.id, caption: config.settings.title, path: config.settings.path, icon: '' }));
	            	countActiveApps = 0;
	            }
	            //refresh page
	            that.refreshPage();
        	});
	                        
        };       
        
        var that = this;
        /**
         * init mobile Framework
         * checks device's connection and performs updates if possible
         */
        this.mobileTouch = new at.asfinag.unterwegs.mobile.Touch('unterwegs', { page: 'pages/loading.ejs', data: { version: that.config.version } }, function() {
         	//that.initSubApps(); 
        	//that.config.settings.setupApp(that); //2014-09-08 added        	
        	// go to home page
        	function goToHome() {
	        	setTimeout(function() {
		        	that.hashChange();	        	
		        	window.location = '#/';
	        	}, 450);
        	}

        	for(var i in that.config.subapps) {
        		that.config.subapps[i].setupApp(that);
        	}
        	
        	/**
        	 * updateData - updates app-data (Webcams, Rasten, ...) if a persistence attribute was found
        	 */ 
        	function updateData() {
        		var list = '';
				var count = 0;
				//load Streets and Provinces Table (neccessary for Webcams, Rasten, Vertriebsstelle, Kompagnon
				that.config.subapps.webcams.streetDao.update();
				that.config.subapps.webcams.provincesDao.update();
				for(var i in that.config.subapps) {
					var subapp = that.config.subapps[i]; 
					if(subapp.persistence != undefined && (subapp.subapp_active == undefined || subapp.subapp_active == 1)) {
						list += that.config.subapps[i].title + '<br />';
						
						// loading/updating data for all subapps except Vertriebsstelle
						if (subapp.id != "Vertriebsstelle") {
							subapp.persistence.update();							
						}
					}
					
					if(subapp.stellplatzInfos != undefined) {
						subapp.stellplatzInfos.update();
					}
				}
				
				goToHome();        					
        	}
        	
        	updateData();
        	
        }, this.controller, config.transitions);
    },
    
    showLoadingOverlay: function(t) {
    },
    
    
    /**
     * sendStatistics - sends statistics to server
     *
     * AJAX call to send the statistics data
     *
     * @param {Object} details - object that contains detail values (details.page, detail.type, detail.value) - created by @getAdditionalInfo
     * @param {function} callback
     */
    sendStatistics: function(details, callback) {
    	var that = this;
        // prevent app to send statistics while we are in development 
    	if (development_Mode) {
    		that.statistics = {};
            that.sendingStats = IS_NOT_SENDING_STATS;
    		if(callback != undefined && typeof(callback) == 'function') {
				callback();
			}
    		return;
    	}
		var statsToSend = { list: [] };
		
		for(var i in that.statistics) {
			//depending on page, additional information is stored in the statistics object (e.g. Webcams)
			if(i == details.page){
				that.statistics[i].addDetail(details.type, details.value);
			}
			statsToSend.list.push(that.statistics[i]);
		}
		
		var anonymizedStats = that.mapStatisticsData(statsToSend);
		
		if(anonymizedStats.list.length == 0){
			that.sendingStats = IS_NOT_SENDING_STATS;
			return;
		}
		
		/* 
		 * aus datenschutzrechtlichen Gründen, darf die DeviceId nicht mehr verwendet werden und wird
		 * deshalb mittels aktuellem Datum+Uhrzeit, Random-Wert
		 */
		$.when(application.config.settings.persistence.getAnonymizedDeviceID())
		.done(function(anonymizedDeviceID){
			that.doSendStatData(anonymizedStats,anonymizedDeviceID, callback);
		});
    },
    /**
     * doSendStatData
     * 
     * @param {Array} statsToSend - the stats that are sent
     * @param {String} anonymizedDeviceID - ID Hash
     * @param {function} callback - the callback to be called after success
     */
    doSendStatData: function(statsToSend, anonymizedDeviceID, callback){
    	var that = this;
    	var url = config.serverdata[act_system].statistic.url;
    	
		//application.config.anonymizedDeviceID = anonymizedDeviceID;
		if(statsToSend.list.length > 0){
			for (var i = 0; i < statsToSend.list.length; i++) {
				statsToSend.list[i].device = anonymizedDeviceID;
			}
		}
		!release_flag && console.debug('Application.class - sendStatistic - URL: '+url);
		//SEND TO SERVER
        $.ajax({
			url: url,
			type: 'POST',
			timeout: 4000,
			data: JSON.stringify(statsToSend),
			contentType: 'application/json',
			success: function(data) {			// success callback
				if(data == 'ok') {				// success
					var db = that.config.db.db;

			    	// delete saved stats from db since we successfully submitted them to the server
			    	db.transaction(
						function(tx) {
							for(var i in that.statistics) {
								tx.executeSql('DELETE FROM statistics WHERE app LIKE ?;', [i]);
								delete that.statistics[i];
							}							
						},
						function(e) {
							that.sendingStats = IS_NOT_SENDING_STATS;
							return true;
						},
						function(tx) {
							that.sendingStats = IS_NOT_SENDING_STATS;
							return false;
						}
					);
				} else {
					//no statistics could be send --> store to db
					that.sendingStats = IS_NOT_SENDING_STATS;
					setTimeout(function() {
						for(var i in that.statistics) {
							that.statistics[i].persist(that);				// persisting stats to db
						}
					}, 250);
				}
				setTimeout(function() {
					if(callback != undefined && typeof(callback) == 'function') {
						callback();
					}
				}, 250);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {				// error submitting stats to server, so we persist them to db
				
				that.sendingStats = IS_NOT_SENDING_STATS;
				setTimeout(function() {
					if(callback != undefined && typeof(callback) == 'function') {
						for(var i in that.statistics) {
							that.statistics[i].persist(that);		// persisting stats to db
						}
					} else {
						for(var i in that.statistics) {
							that.statistics[i].persist(that);				// persisting stats to db
						}
					}
				}, 250);
			}
		});
    },
    /**
     * mapStatisticsData - maps the statistic data to new requirements
     * 
     * hashes the deviceId and filters 
     * 
     * @param {Object} statsToSend
     */
    mapStatisticsData: function(statsToSend){
    	var anonymizedStats = { list: [] };
		var webcamViewer 	= [ "/webcams/bundesland/viewer" , "/webcams/strasse/viewer", 
		                 	    "/webcams/geolocation/viewer", "/webcams/favoriten/viewer"];
		// /webcams/viewer statistic --> entfernt, da nicht benötigt --> DSG
		var allowedStats 	= [ "/webcams", /*"/webcams/viewer",*/ "/rasten", "/verkehrsmeldungen", "/vertriebsstelle",
		         			    "/servicecenter", "/benachrichtigungen", "/go", "/kompagnon", "/melden", "/settings", 
		         			    "/videomaut" , "/" , "appstart", "/haconroute"  ];
    	for (var i = 0; i < statsToSend.list.length; i++) {

    		if(webcamViewer.indexOf(statsToSend.list[i].page) > -1){
    			statsToSend.list[i].page = "/webcams/viewer";
    		}
    		

    		if(allowedStats.indexOf(statsToSend.list[i].page) > -1){
	    		anonymizedStats.list.push({
	    			page: statsToSend.list[i].page,
	    			device: Sha256.hash(statsToSend.list[i].device),
	    			count: statsToSend.list[i].count,
	    			timestamp: statsToSend.list[i].timestamp,
	    			detail: statsToSend.list[i].detail
	    	    });
    		}
    	}
    	return anonymizedStats;
    },
    
    /**
     * getAdditionalInfo - checks if additional information has to be stored
     * 
     * necessary because of changes in statistics send process
     * 
     * @param {Object} parameters parameters value
     * @param {String} actual path (decision which addition info is checked depending on path)
     * @return object with type, value and page values to be used with Statistics.addDetail
     */
    getAdditionalInfo: function(parameters, path){
    	var retval = { type: "", value: "", page: "null"};
        var access_log_data = { type: "", id: "" };
    	switch(path){
    	/* According to PVIS-2638 send only webcam details */
    		/*case '/rasten/strasse/viewer':
    		case '/rasten/bundesland/viewer':
    		case '/rasten/geolocation/viewer':
    										if(parameters != null && parameters.data != null && parameters.data.items.length >= 1){
    											retval.page = path;
    											retval.type = "rastenname";
    											retval.value = parameters.data.items[0].name;
                                                //save Access Log
                                                access_log_data.type = APP_KEY_RASTEN;
                                                access_log_data.id = retval.value;
                                                this.config.db.addAccessLog(access_log_data);
    										}
        
    										return retval;
    										break;*/
    		case '/rasten/strasse/viewer/rastenwebcamviewer':
    		case '/rasten/bundesland/viewer/rastenwebcamviewer':
    		case '/webcams/strasse/viewer':
    		case '/webcams/bundesland/viewer':
    		case '/webcams/favoriten/viewer':
    		case '/webcams/geolocation/viewer':
    										if(parameters != null && parameters.data != null && parameters.data.current != null){
												retval.page = path;
												retval.type = "camname";
												retval.value = parameters.data.current.name;
                                                //save Access Log
                                                access_log_data.type = APP_KEY_WEBCAM;
                                                access_log_data.id = retval.value;
                                                this.config.db.addAccessLog(access_log_data);
											}

											return retval;
											break;
    	}

        
    	return "";
    },
    
    /**
     * loadPage - loads and displays a page
     *
     * @param {String} path the path/route of the controller of this page
     * @param {Object} parameters paramaeters object needed to load the page and display initial data
     * @param {function} callback callback function to be called when page was loaded
     */
    loadPage: function(path, parameters, callback) {
    	var that = this;
    	var clickIntervalId = 0;
    	if(that.ignoreClick == false) {
    		// add page change lock, to prevent fast clicking on back button and list items
			that.ignoreClick = true;
			
			$('ul.homeList a[class^="App_"]').attr('href', '#' + path); //@deprecated - entfernen wenn CardView released wird
			$('div.homeCards a[class^="App_"]').attr('href', '#' + path);
			clearInterval(clickIntervalId);
	        $('#unterwegs').removeClass('white');
	    	this.mobileTouch.loadPage(path, parameters, function() {
	    		if(that.currentController != undefined && that.currentController.onResize != undefined && typeof(that.currentController.onResize) == 'function') {
					that.currentController.onResize(that.device_orientation);
				}
	    		
	    		that.addStatistics(path, function() {
	    			var addInfo = that.getAdditionalInfo(parameters, path);
		    		that.sendStatistics(addInfo);
	    		});
	    		if(callback != undefined && typeof(callback) == 'function') {
	    			callback();
	    		}
	    	});
    	}
    	
    	// remove page change lock
		clickIntervalId = setInterval(
			function() {
				that.ignoreClick = false;
			}, 
			300
		);
    },
    
    /**
     * loadApp - loads a sub-app
     */
    loadApp: function(path, callback) {
	    
    	var that = this;
    	if(that.loadApp_clicked == false) {
    		that.loadApp_clicked = true;
	    
    		that.addStatistics(path, function() {
	    		if(callback != undefined && typeof(callback) == 'function') {
	    			that.sendStatistics("",callback);
	    		}
	    		setTimeout(function() {
	    			that.loadApp_clicked = false;
	    		}, 500);
	    	});	    	
    	}
    },
    
    /**
     * refreshPage - refreshes the page and it's iScroll component
     */
    refreshPage: function() {
    	var that = this;
    	setTimeout(function() {
    		that.mobileTouch.refreshPage();
    	}, 250);
    }, 
    
    /**
     * performs a page-change back to the previous page
     */
    back: function() {
    	if(_goingBack == false) {
    		_goingBack = true;
	    	var href = $('.back').attr('href');
	    	if($('.mobileTouchOverlay').length == 0) {
		    	if(href != undefined) {
		    		window.location = href;
		    	} else {
		    		var specialback = $('.back').data('backtype');
		    		//console.error(specialback);
		    		if(specialback != undefined){
		    			var elements = specialback.split('##');
		    		}
		    		if(elements != undefined && elements.length == 2 && elements[0] == "ELIDETAILS"){
		    			window.location = '#/goapp/details?car='+elements[1]+'&page-transition=previous&back=true';
		    		} else {
		    			navigator.app.exitApp();
		    		}
		    	}		    	
	    	}
            setTimeout(function() {
                _goingBack = false;
            }, 500);
    	}
    },
    
    componentInitialized: function(component) {
    },
    
    /**
     * getNetworkState - returns the actual network state
     *
     * @return {String} the device's network state
     */
    getNetworkState: function() {
    	if(navigator.connection != undefined) {
	    	var networkState = navigator.connection.type;
	
		    var states = {};
		    states[Connection.UNKNOWN]  = CONNECTION_UNKNOWN;
		    states[Connection.ETHERNET] = CONNECTION_ETHERNET;
		    states[Connection.WIFI]     = CONNECTION_WIFI;
		    states[Connection.CELL_2G]  = CONNECTION_CELL_2G;
		    states[Connection.CELL_3G]  = CONNECTION_CELL_3G;
		    states[Connection.CELL_4G]  = CONNECTION_CELL_4G;
		    states[Connection.NONE]     = CONNECTION_NONE;
		    
		    return states[networkState];
    	}
    	
    	return 'Unknown connection';
    },
    
    /**
     * addStatistics - creates or increments the statistics counter (locally) of a certain page
     * 
     * @param {String} page - the page that was opened
     * @callback {function} callback function when statistics are updated
     */
    addStatistics: function(page, callback) {
    	var that = this;
    	function startAddingStatistics() {
	    	var stats = undefined;
	    	for(var i in that.statistics) {
	    		if(that.statistics[i] != undefined && that.statistics[i].page != undefined && that.statistics[i].page == page) {
	    			that.statistics[i].count++;
	    			stats = that.statistics[i];
	    			callback();
	    			break;
	    		}
	    	}
	    	
	    	if(stats == undefined) {
	    		stats = new at.asfinag.unterwegs.Statistics(page, that.getDeviceId(), that, function(stats) {
	    			that.statistics[page] = stats;
	    			callback();
	    		});
	    	}
	    	
	    	return stats;
    	}
    	
    	if (that.sendingStats == IS_NOT_SENDING_STATS) {
    		that.sendingStats = IS_SENDING_STATS;
			startAddingStatistics();
		} else {
			var sendStatsInterval = window.setInterval(function() {
				if(that.sendingStats == IS_NOT_SENDING_STATS) {
					window.clearInterval(sendStatsInterval);
					startAddingStatistics();
				}
			}, 1000);
		}
		
    },
    
    /**
     * sendDeviceStatistics - prepares statistics for device (model, platform, version)
     *
     */
    sendDeviceStatistics: function() {
    	var that = this;
    	var startupStr = "appstart";
        
        //clean the access log - "old" data has to be removed
        this.config.db.tidyAccessLog();
        
		// send statistics at startup with device type info, operating system info etc.
		that.addStatistics(startupStr, function() {
			
			var devicemodel = 'UNKNOWN DEVICE MODEL12345';
			var deviceplatform = 'UNKNOWN DEVICE PLATFORM12345';
			var deviceversion = 'UNKNOW DEVICE VERSION12345';
			
			if(window.device) {
				devicemodel =  device.model;
				deviceplatform = device.platform;
				deviceversion = device.version;
			}
			
	    	that.statistics[startupStr].addDetail('deviceType', devicemodel);
	    	that.statistics[startupStr].addDetail('osType', deviceplatform);
	    	that.statistics[startupStr].addDetail('osVersion', deviceplatform + ' ' + deviceversion);
	    	
	    	that.sendStatistics("");
		});
    },
    
    /**
     * sendGoStatistics -
     *
     * IMPORTANT INFO: the call of addStatisticsForGO function is a workaround for the go app statistics that are sent at each app start:
     * we need our own addStatistics function (=addStatisticsForGO) for the following case:
     * after a fresh installation or if the user never started the go subapp, the addStatisticsForGO takes care that
     * the Statistics object for the Go Statistics won't initialize itself with count=1 (see Statistics.class.js), and therefore preventing,
     * that wrong statistics for go are sent at startup.
     */
    sendGoStatistics: function() {
    	var that = this;
		
		for(var i in that.statistics) {
			delete that.statistics[i];
		}
							
		var page = '/go';
    
    	function startAddingStatistics() {
	    	var stats = new at.asfinag.unterwegs.Statistics(page, that.getDeviceId(), that, function(stats) {
	    	
	    		if (stats.fetchedStatisticsFromDB) {
	    			stats.count--;
	    			that.statistics[page] = stats;
		    		that.sendStatistics("");	
	    		}
	    	});
    	}
    	
    	if (that.sendingStats == IS_NOT_SENDING_STATS) {
    		that.sendingStats = IS_SENDING_STATS;
			startAddingStatistics();
		} else {
			var sendStatsInterval = window.setInterval(function() {
				if(that.sendingStats == IS_NOT_SENDING_STATS) {
					window.clearInterval(sendStatsInterval);
					startAddingStatistics();
				}
			}, 1000);
		}
    },
    
    /**
     * getDeviceId - returns the actual device id
     * 
     * window.device = gmail konto (iOS MD5 Hash Mac Address)
     * window.device wird überschrieben in android.html
     * CHG-DH added window.device.uuid != undefined --> SGS 4 returns window.device but no window.device.uuid
     */    
    getDeviceId: function() {
    	!release_flag && console.log("GET DEVICE ID" + config.mydeviceid);
    	if(!release_flag){
    		console.log("SPECIAL DEV ID asf117777777@gmail.com");
    		return "asf117777777@gmail.com";
    	}
    	return config.mydeviceid;
    },
        
    /**
     * alert - opens an alert dialog (with styling info)
     * 
     * @param {String} text the information text to be shown
     * @param {String} text_ok the ok-button's caption
     * @param {String} box_class the class name that is used for overlay (used for styling issues)
     * @param {function} the callback function, which is going to be executed when the ok button was clicked
     */
    alert: function(title, text, text_ok, box_class, callback) {
    	this.overlay['alert'].data = {
    			title: title,
    			text: text,
    			text_ok: text_ok,
    			box_class: box_class
    	};
    	this.overlay['alert'].callback = callback;
    	this.overlay['alert'].setVisible(true);
    },
        
    /**
     * showYesNoDialog - opens a message dialog (with styling info)
     * 
     * @param {String} title the dialog's title
     * @param {String} text the information text to be shown
     * @param {String} text_yes the yes-button's caption
     * @param {function} callback_yes the callback function, which is going to be executed when the yes button was clicked
     * @param {String} text_no the no-button's caption
     * @param {String} box_class the class name that is used for overlay (used for styling issues)
     * @param {function} callback_no the callback function, which is going to be executed when the no button was clicked
     */
    showYesNoDialog: function(title, text, text_yes, callback_yes, text_no, callback_no, box_class) {
    	this.overlay['YesNoDialog'].data = { title: title, text: text, text_yes: text_yes, text_no: text_no, box_class: box_class };
    	this.overlay['YesNoDialog'].callback_yes = callback_yes;
    	this.overlay['YesNoDialog'].callback_no = callback_no;
    	this.overlay['YesNoDialog'].setVisible(true);
    },
    
    /**
     * showLegalNoticeDialog - opens a dialog for legal notice
     * 
     * @param {String} text the information text to be shown
     * @param {String} text_ok the ok-button's caption
     * @param {String} box_class the class name that is used for overlay (used for styling issues)
     * @param {function} the callback function, which is going to be executed when the ok button was clicked
     */
    showLegalNoticeDialog: function(title, text, text_ok, callback, cb_active, box_class) {
    	this.overlay['LegalNoticeDialog'].data = {
    			i18n: application.config.i18n[application.config.language],
    			title: title,
    			text: text,
    			text_ok: text_ok,
    			box_class: box_class,
    			checkbox_active: cb_active
    	};
    	this.overlay['LegalNoticeDialog'].callback = callback;
    	this.overlay['LegalNoticeDialog'].setVisible(true);
    },    
    
    /**
     * addController
     *
     * @param {List} controllerList
     */
    addController: function(controllerList) {
    	for(var i in controllerList) {
    		var controller = controllerList[i];
    		this.controller.add(controller.path, controller.view, { onLoad: controller.onLoad, onShow: controller.onShow, onDestroy: controller.onDestroy, onResize: controller.onResize });
    	}
    },
    /**
     * showLegalNotice - shows a popup with the legal notice
     *
     * options to accept or decline the legal notice, if declined all app functions are disabled
     */
    showLegalNotice: function(fromSettings) {
    	var thatFromSettings = fromSettings;
        application.showLegalNoticeDialog(
            application.config.i18n[application.config.language].settings.legal_notice_title,
            application.config.i18n[application.config.language].settings.legal_notice_text,
            application.config.i18n[application.config.language]['accept'],
            function(accepted) {
            	if(accepted == undefined){
            		//do nothing
            	} else {
	            	if(accepted){
	            		application.config.settings.persistence.setAdditionalSetting('set_legalnotice', '1','','', function(){});
	    	            
	            		// sending device stats at startup
	    	            application.sendDeviceStatistics();
	    	
	    	            // workaround for go statistics
	    	            application.sendGoStatistics();
    	                $('ul.homeList li').show(); //@deprecated - entfernen wenn CardView released wird
    	                $('div.homeCards').show();
    	                $('a.imagebutton.settings').show();
    	                $('.legal_notice').hide();
	            	} else {
	            		application.config.settings.persistence.setAdditionalSetting('set_legalnotice', '0','','', function(){});
	            		if(thatFromSettings){
	            			window.location = '#/?legnotdecl=true';
	            		} else {
	            			$('ul.homeList li').hide(); //@deprecated - entfernen wenn CardView released wird
	            			$('div.homeCards li').hide();
	                    	$('a.imagebutton.settings').hide();
	                    	$('.legal_notice').show();
	            		}
	            	}
            	}
            },
            fromSettings,
            fromSettings ? "settings" : "homepopup"
        );
    }
    
});


function validateVignettenBarcode(barcode, date) {

        var TYPE_PKW = '46';
        var TYPE_MOTORRAD = '26';

        function isValidBarcodeForJK(barcode) {
        	return isValidType(barcode) && isUCC12(barcode);
        }

        function isValidType(barcode) {
        	return barcode.substring(0, 2) == TYPE_PKW || barcode.substring(0, 2) == TYPE_MOTORRAD;
        }

        function getYear(long) {
        	
        }

        function getMonth(long) {
        	
        }

        function getMinDate(long) {
        	
        }

        function getMaxDate(long) {
        	
        }

        function isUCC12(digits) {
        	if(digits == undefined || digits.length != 12 || parseInt(digits) != digits) {
        		return false;
        	}
        	
        	var calcEven = false;
        	var sumOdd = 0;
        	var sumEven = 0;
        	
        	for(var i = 0; i < digits.length-1; i++) {        						
        		if(calcEven) {
        			sumEven += parseInt(digits[i]);
        		} else {
        			sumOdd += parseInt(digits[i]);
        		}
        		
        		calcEven = !calcEven;
        	}
        	
        	var checksum = sumOdd * 3 + sumEven;
        	var digit = (checksum % 10 == 0) ? 0 : (10 - (checksum % 10));
        	if(digit != digits[digits.length-1]) {
        		return false;
        	}
        	
        	return true;
        }

        return isValidBarcodeForJK(barcode, date);
}

$.Class('at.asfinag.unterwegs.Controller',
	{},
	{
		init: function(path, view) {
			this.path = path;
			this.view = view;

			debug_flag && console.info('Controller created:');
			debug_flag && console.info('==================================================');
			debug_flag && console.info('PATH: ' + this.path);
			debug_flag && console.info('VIEW: ' + this.view);
			debug_flag && console.info('==================================================');
		},

		onShow: function() {
			debug_flag && console.warn('"' + this.path + '" onShow called, but no implementation found!');
		},

		onLoad: function() {
			debug_flag && console.warn('"' + this.path + '" onLoad called, but no implementation found!');
		},

		onDestroy: function() {
			debug_flag && console.warn('"' + this.path + '" onDestroy called, but no implementation found!');
		},

		onResize: function() {
			debug_flag && console.warn('"' + this.path + '" onResize called, but no implementation found!');
		}
	}
);

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.GoApp', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
               
        this.updateOnStartup = true;
        this.persistence;
        
        this.modes = [];
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {    	
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.GoDAO(application);
        
        this.parentController = new at.asfinag.unterwegs.goapp.ParentController(); 

        this.application.addController([
            new at.asfinag.unterwegs.goapp.controller.Index(this),
            new at.asfinag.unterwegs.goapp.controller.Details(this),
            new at.asfinag.unterwegs.goapp.controller.VehicleDeclaration(this),
            new at.asfinag.unterwegs.goapp.controller.VehicleLocks(this),
            new at.asfinag.unterwegs.goapp.controller.VehicleEli(this),
            new at.asfinag.unterwegs.goapp.controller.VehicleBackPayment(this),
            new at.asfinag.unterwegs.goapp.controller.GoBoxGuide(this),
        ]);
    }
});

config.subapps.goapp = new at.asfinag.unterwegs.GoApp('GoApp', 'GO App', '/goapp');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.GoDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
		this.authkey = "";
	},
	
	/**
	 * updates the webcam information
	 * 
	 * @param {function} callback
	 */
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    },
    /**
     * loadAllVehicles - loads all vehicles from backend and stores them to db-table go_app_carpark
     */
    loadAllVehicles: function(){
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlVehicles = encodeURI(config.serverdata[act_system].go.url + config.serverdata[act_system].go.carpark);
    	!release_flag && console.debug('GoDAO: loadAllVehicles - URL: '+urlVehicles);
    	
    	//AUTH Header
    	var authheader = this.authkey;
    	
    	$.ajax({
			url: urlVehicles,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {
				
				/**
				 * insertData - inserts data to go_app_carpark table
				 * 
				 * @param tx
				 */
				function insertData(tx) {
					tx.executeSql('DELETE FROM go_app_carpark', [], function (tx, res) {
						var sqlCarInfo = 'INSERT OR IGNORE INTO go_app_carpark (fahrzeugId, land, basiskategorie, schadstoffklasse, obuid, vertragsart, obutyp, kennzeichen, kartenname, guthabenNetto, guthabenVom, fahrzeughalterId, pan, ablaufdatum, lastModified, virtualisiert, godSaldo, godSaldoLastUpdate, sperren) ' +
											 'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
			    		for(var name in data) {
			    			var car = data[name];
			    			tx.executeSql(sqlCarInfo, [car.fahrzeugId, car.land, car.basiskategorie, car.schadstoffklasse, car.obuid, 
			    			                           car.vertragsart, car.obutyp, car.kennzeichen, car.kartenname, car.guthabenNetto, 
			    			                           car.guthabenVom, car.fahrzeughalterId, car.pan, car.ablaufdatum, car.lastModified, 
			    			                           car.virtualisiert, car.godSaldo, car.godSaldoLastUpdate, JSON.stringify(car.sperren)], 
			    			    					(function(name) { 
			    					})(name));
			    		}
					});
				}
				
				/**
				 * errorCB - error callback for transaction
				 * 
				 * @param error
				 */
				function errorCB (error) {
					console.error('GoDao: loadAllVehicles - Transaction Error: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				/**
				 * successCB - success callback for transaction
				 */
				function successCB() {
					setTimeout(function() {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				
				db.transaction(insertData, errorCB, successCB);
				
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.debug("GoDAO: loadAllVehicles: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
				dfd.reject(errorThrown);
			}
    	});
    	
    	return dfd.promise();
    },
    
    /**
     * 
     */
    removeAllVehicles: function(){
    	var db = this.application.config.db.db;
    	
    	var dfd = $.Deferred();
    	function removeData(tx){
	    	tx.executeSql('DELETE FROM go_app_carpark  ', [], function (tx, res) {
	    		dfd.resolve();
	    	});
    	}
    	
    	function errorCB (error) {
			console.error('GoDAO: removeAllVehicles - Transaction Error: ' + error.message);
			dfd.reject(error.message);
		}
		
		
		function successCB() {
		}

		db.transaction(removeData, errorCB, successCB);	
    	return dfd.promise();
    },
    
    /**
     * getAllVehicles - loads all vehicles from local db
     * 
     */
    getAllVehicles: function() {
    	var dfd = $.Deferred();
    	
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * ' +
	    				'FROM go_app_carpark';
			tx.executeSql(sql, [], function(tx, result) {
				var data = [];
				if(result.rows.length > 0) {
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
				}
				dfd.resolve(data);
				return false;
			});
    	});	    	

    	return dfd.promise();
    },
    
    loadVehicleDetails: function(carId) {
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlVehicleDetails = encodeURI(config.serverdata[act_system].go.url + config.serverdata[act_system].go.car_detail + carId);
    	!release_flag && console.debug('GoDAO: loadVehicleDetails - URL: '+urlVehicleDetails);
    	
    	//AUTH Header
    	var authheader = this.authkey;
    	$.ajax({
			url: urlVehicleDetails,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {		
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.debug("GoDAO: loadVehicleDetails: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
				dfd.reject(errorThrown);
			}
    	});
    	
    	return dfd.promise();    	
    },
    
    getVehicleFromDb: function(carId){
    	var dfd = $.Deferred();
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT *' +
	    				'FROM go_app_carpark ' +
	    				'WHERE fahrzeugId = ? LIMIT 1;';
			tx.executeSql(sql, [carId], function(tx, result) {
				if(result.rows.length > 0) {
					var data = {};
					var act_row = result.rows.item(0);
					data.kennzeichen 		= act_row.kennzeichen;
					data.land 				= act_row.land;
					data.obuid 				= act_row.obuid;
					data.basiskategorie 	= act_row.basiskategorie;
					data.schadstoffklasse 	= act_row.schadstoffklasse;
					data.kartenname			= act_row.kartenname;
					data.obutyp 			= act_row.obutyp;
					data.vertragsart 		= act_row.vertragsart;
					data.ablaufdatum 		= act_row.ablaufdatum;
					data.guthabenNetto 		= act_row.guthabenNetto;
					data.guthabenVom 		= act_row.guthabenVom;
					data.sperren 			= JSON.parse(act_row.sperren);
					data.zugewiesen 		= act_row.zugewiesen;
					data.fahrzeugId 		= act_row.fahrzeugId;
					data.fahrzeughalterId 	= act_row.fahrzeughalterId;
					data.sperrliste 		= '';
					data.virtualisiert 		= act_row.virtualisiert;
					data.pan 				= act_row.pan;
					data.godSaldo 			= act_row.godSaldo;
					data.maxNachzahlungsSekunden = act_row.obutyp;

					dfd.resolve(data);
				} else {
					dfd.reject();
				}
				
				
			}, function(e){
				dfd.reject();
			});
    	});	
    	
    	return dfd.promise();
    },
    
    /**
     * getEliData - loads ELI data
     * 
     * @param {Object} data - the data to be sent to the server
     */
    getEliData: function(data){
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlELI = encodeURI(config.serverdata[act_system].go.url + config.serverdata[act_system].go.eli);
    	!release_flag && console.debug('GoDAO: getEliData - URL: '+urlELI);
    	
    	//AUTH Header
    	var authheader = this.authkey;
    	
		var eli_test_data = [ {
			"verrechnet" : "Verrechnet am 01.08.2012",
			"refnr" : "9115224677",
			"zahlungsmittel" : "Barzahlung",
			"nettobetrag" : "129,50",
		    "zeitraumVon" : "01.04.2012",
		    "zeitraumBis" : "01.08.2012",
			"einzeltransaktionen" : [ {
				"datum" : "01.08.2012 08:54:36",
				"autobahn" : "A2",
				"strecke" : "Staatsgrenze Arnoldstein - Arnoldstein",
				"basiskategorie" : "4",
				"schadstoffklasse" : "EEV",
				"summe" : "0,35"
			}, {
				"datum" : "01.08.2012 08:56:56",
				"autobahn" : "A2",
				"strecke" : "Arnoldstein - Hermagor",
				"basiskategorie" : "4",
				"schadstoffklasse" : "EEV",
				"summe" : "0,83"
			}, {
				"datum" : "01.08.2012 09:01:50",
				"autobahn" : "A2",
				"strecke" : "Hermagor - Warmbad Villach",
				"basiskategorie" : "4",
				"schadstoffklasse" : "EEV",
				"summe" : "3,50"
			}, ]
		}, {
			"verrechnet" : "Verrechnet am 04.08.2012",
			"refnr" : "9115224549",
			"zahlungsmittel" : "Barzahlung",
			"nettobetrag" : "38,14",
		    "zeitraumVon" : "01.04.2012",
		    "zeitraumBis" : "01.12.2012"
		}, {
			"verrechnet" : "Noch nicht verrechnet",
			"refnr" : null,
			"zahlungsmittel" : null,
			"nettobetrag" : "38,14",
		    "zeitraumVon" : "01.01.2012",
		    "zeitraumBis" : "01.08.2014",
		} ];
    	
    	//dfd.resolve(eli_test_data);
    	
    	$.ajax({
			url: urlELI,
			cache: false,
			dataType: 'json',
			type: 'POST',
			data: $.toJSON(data),
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.debug("GoDAO: getEliData: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
				console.error(XMLHttpRequest.getResponseHeader('Location'));
				dfd.reject(errorThrown);
			}
    	});
    	
    	return dfd.promise();
    }, 
    
    /**
     * getEliTransactionData - loads ELI transaction data
     * 
     * @param {Object} data - the data to be sent to the server
     */
    getEliTransactionData: function(data){
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlELITransaction = encodeURI(config.serverdata[act_system].go.url+ config.serverdata[act_system].go.eli_transactions);
    	!release_flag && console.debug('GoDAO: getEliTransactionData - URL: '+urlELITransaction);
    	
    	//AUTH Header
    	var authheader = this.authkey;
    	
    	//ToDo: change - no data available from backend
		var eli_transaction_data = [ {
			"transaktionsDatum" : "01.08.2012 08:54:36",
			"strasse" : "A2",
			"bezeichnung" : "Staatsgrenze Arnoldstein - Arnoldstein",
			"basiskategorie" : "4",
			"schadstoffklasse" : "EEV",
			"nettobetrag" : "0,35"
		}, {
			"transaktionsDatum" : "01.08.2012 08:56:56",
			"strasse" : "A2",
			"bezeichnung" : "Arnoldstein - Hermagor",
			"basiskategorie" : "4",
			"schadstoffklasse" : "EEV",
			"nettobetrag" : "0,83"
		}, {
			"transaktionsDatum" : "01.08.2012 09:01:50",
			"strasse" : "A2",
			"bezeichnung" : "Hermagor - Warmbad Villach",
			"basiskategorie" : "4",
			"schadstoffklasse" : "EEV",
			"nettobetrag" : "3,50"
		}, ];
    	
    	//dfd.resolve(eli_transaction_data);
    	
    	$.ajax({
			url: urlELITransaction,
			cache: false,
			dataType: 'json',
			type: 'POST',
			data: $.toJSON(data),
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.debug("GoDAO: getEliTransactionData: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
				dfd.reject(errorThrown);
			}
    	});
    	
    	return dfd.promise();
    },
    
    /**
     * requestBackPayment - 
     * 
     * @param {Object} data - the data to be sent to the server
     */
    requestBackPayment: function(data){
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlBackPaymentRequest = encodeURI(config.serverdata[act_system].go.url + config.serverdata[act_system].go.nachzahlung);
    	!release_flag && console.debug('GoDAO: requestBackPayment - URL: '+urlBackPaymentRequest);
    	
    	//AUTH Header
    	var authheader = this.authkey;
    	    	
    	$.ajax({
			url: urlBackPaymentRequest,
			cache: false,
			dataType: 'json',
			type: 'POST',
			data: $.toJSON(data),
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.debug("GoDAO: requestBackPayment: AJAX Error: XMLHttpRequest: ", XMLHttpRequest, " textStatus: ", textStatus, " error: ", errorThrown);
				
				dfd.reject(XMLHttpRequest.status, XMLHttpRequest.getResponseHeader('Location'));
			}
    	});
    	
    	return dfd.promise();
    }, 
    /**
     * doBackPayment - 
     * 
     * @param {Object} data - the data to be sent to the server
     */
    doBackPayment: function(data){
    	var dfd = $.Deferred();
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	
    	var urlDoBackPayment = encodeURI(config.serverdata[act_system].go.url + config.serverdata[act_system].go.nachzahlung_pay);
    	!release_flag && console.debug('GoDAO: doBackPayment - URL: '+urlDoBackPayment);
    	
    	//AUTH Header
    	var authheader = this.authkey;    	
    	
    	$.ajax({
			url: urlDoBackPayment,
			cache: false,
			dataType: 'json',
			type: 'POST',
			data: $.toJSON(data),
			timeout: 20000,
			beforeSend: function (jqXHR, settings) {
				jqXHR.setRequestHeader('Authorization', authheader);
				jqXHR.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
			},
			success: function(data) {
				dfd.resolve(data);
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				dfd.reject(XMLHttpRequest.status, XMLHttpRequest.getResponseHeader('Location'));
			}
    	});
    	
    	return dfd.promise();
    },     
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.GoBoxGuide',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/more/goboxguide',
				''
			);

			var that = this;
			var application = subapp.application;
			var data;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				subapp.parentController.showLoading();
				$.when(application.config.settings.persistence.getAdditionalSettingDeferred("go_decllng"))
				.done(function(langobj){
					if(langobj != undefined && typeof(langobj) == "object"){
						showPage(langobj.setValue);
					} else {
						showPage('de-AT');
					}
				});
				
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				subapp.parentController.changeBackLink(GO_BACKLINK_MORE);
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('select#go_box_guide_language').unbind('change');
			};
		
			function showPage(lang) {
				var url = 'app/GoApp/view/templates/goBoxGuide/' + lang.toUpperCase() + '_goBoxGuide.ejs';
				$('#go_box_guide div#guide_content').html(new EJS({url: url}).render());
				subapp.parentController.showContent();
				$('div.page[data-page=more] ul.listview.more').hide();
				$("#go_box_guide_language option").prop('selected', false);
				$("#go_box_guide_language option[value='"+lang+"']").prop('selected', true);
				$('#go_box_guide').show();
				
				$('select#go_box_guide_language').unbind('change');
				$('select#go_box_guide_language').on('change', function() {
					application.config.settings.persistence.setAdditionalSetting("go_decllng", $(this).val());
					showPage($(this).val());
	            });	
				
				setTimeout(function() {
					application.mobileTouch.refreshPage();
	            }, 250);		
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.EEKUpload',
	{},
	{
		/**
		 * init 
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp) {
			this._super(
				'/goapp/eekupl',
				'app/GoApp/view/eekupload.ejs'
			);

			var that = this;
			var application = subapp.application;
			var page;
			var pics_to_upload = [];

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var controller = this;
				var activetab = "carpark";
				if(controller.parameters.car == undefined || controller.parameters.car == ""){
					activetab = "account";
	        		//$('a.imagebutton.back.go').attr('href', "#/goapp?activeTab=account&page-transition=previous&back=true");
	        	}
    			application.loadPage(
    					controller.path,
    					{ data: {
							    config: application.config,
							    numtype: controller.parameters.type,
							    activetab: activetab,
    							}
    					},
    				    function() { 
		    				application.refreshPage();
    			});
	        },
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	var that = this;
	        	
	        	//TEST DATA
	        	/*$('div.images').append(new EJS({url: 'app/GoApp/view/templates/eek_pic_item.ejs'}).render({ imagedata: "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==", id: 123 }));
	        	$('div.images').append(new EJS({url: 'app/GoApp/view/templates/eek_pic_item.ejs'}).render({ imagedata: "iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==", id: 12523 }));
	        	updateListener();*/
	        	
	        	/* ADD IMAGE */
	        	$('li.button.eek.upload').on('click', function() {
	        		navigator.camera.getPicture(function(imagedata){
    					$('div.images').append(new EJS({url: 'app/GoApp/view/templates/eek_pic_item.ejs'}).render({ imagedata: imagedata, id: (new Date()).getTime() }));
    					$('li.button.eek.send span.button').removeClass('disabled');
    					$('div.noimages').hide();
    					updateListener();
    					application.refreshPage();
	        		}, function(error){
    					!release_flag && console.log("EEKUpload: navigator.camera.getPicture Error: "+error);
    				}, { quality: 50,
    				    destinationType: Camera.DestinationType.DATA_URL,
    				    encodingType: Camera.EncodingType.JPEG
    				});
	        		
	        		
	        		return false;
				});	
	        	
	        	/* SEND DATA TO SERVER */
	        	$('li.button.eek.send').on('click', function() {
	        	
	        	});
	        	
	        	function updateListener(){
	        		$('div.picitem span.close').unbind('click');
	        		$('div.picitem span.close').on('click', function() {
	        			$('div.picitem[data-id='+$(this).data('id')+']').remove();
	        			if($('div.images div.picitem').length == 0){
	        				$('li.button.eek.send span.button').addClass('disabled');
	        				$('div.noimages').show();
	        			}
	        		});
	        	}
	        	
	        	setTimeout(function() {
	        		application.refreshPage();
	    		}, 250);
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	        	$('li.button.eek.upload').unbind('click');
	        	$('li.button.eek.send').unbind('click');
	        	$('div.picitem span.close').unbind('click');
	        }
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.VehicleDeclaration',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/details/vehicledeclaration',
				''
			);

			var that = this;
			var application = subapp.application;
			var data;
			var settings = {
			          output:'css',
			          bgColor: '#ffffff',
			          color: '#000000',
			          barWidth: 1.5,
			          barHeight: 100
			        };
			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				var theSubapp = subapp;
				
				theSubapp.parentController.showLoading();
				
				if(controller != null && controller.parameters != null && controller.parameters.car != null){
					//hide listview items
					$('ul.listview.items').hide();
					$.when(application.config.settings.persistence.getAdditionalSettingDeferred("go_decllng"))
					.done(function(lang){
						showPage(theSubapp.parentController, lang);
					});
				}
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;

				subapp.parentController.changeBackLink(GO_BACKLINK_DETAILS, controller.parameters.car);
				
				//TODO Unterscheidung zwischen easyGo (2 Barcodes), toll2GO (ObuID barcode), GO (kein Barcode),
				//Text nur im Deutschen unterschiedlich ob Toll2Go oder Go
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('select#vehicle_declaration_language').unbind('change');
			};
		
			function showPage(parentController, language) {
				var data = parentController.activeVehicle;
				var theParentController = parentController;
				var lang = application.config.language;
				if(language != undefined && language.setValue != undefined){
					lang = language.setValue;
				}
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleDeclaration.ejs'}).render({ data: {vehicle: data, i18n: application.config.i18n, language: application.config.language, declaration_language: lang}})).addClass("nopadding");
				theParentController.showContent();
				
				$("#obu_barcode").html("").show().barcode(data.obuid.substr(8), 'code128', settings); //substr --> don't display the first 8 digits
				$('div#obu_barcode div').last().append('<br/>(OBU-ID)');
				$("#pan_barcode").html("").show().barcode(padWithZeros(data.pan,20), 'code128', settings);
				$('div#pan_barcode div').last().append('<br/>(PAN)');
				setTimeout(function() {
					application.mobileTouch.refreshPage();
	            }, 250);
				
				$('select#vehicle_declaration_language').on('change', function() {
					application.config.settings.persistence.setAdditionalSetting("go_decllng", $(this).val());
					$('#declaration_mult_lang').html(application.config.i18n[$(this).val()].go.carpark.vehicle_declaration.text);
					setTimeout(function() {
						application.mobileTouch.refreshPage();
		            }, 250);
	            });			
			};
		}
	}
);


//***********************************************************************************************
//
// Parent Class (Helper Class) to help initializing some child-classes like Bundesland.class.js,
// Strasse.class.js, Favoriten.class.js, Geolocation.class.js,...
//
//
$.Class('at.asfinag.unterwegs.goapp.ParentController', {}, {
    
	/**
	 * init
	 * 
	 * @param {Object} controller
	 * @param {Object} subapp
	 */
	init: function() {
		this.activeVehicle = null;
    },
	
	/**
	 * render
	 * 
	 * @param {Array} items
	 */
	render: function (items) {
		
	},
    
	/**
	 * showLoading
	 */
	 showLoading: function() {
		$('div.page[data-page=carpark] ul.listview.not_logged_in').hide();
		$('div.page[data-page=carpark] ul.listview.loading').show();
		$('div.page[data-page=carpark] ul.listview.noentries').hide();
		$('div.page[data-page=carpark] ul.listview.no_internet_connection').hide();
		$('div.page[data-page=carpark] ul.listview.items').hide();
		$('div.page[data-page=carpark] div.last_update').hide();
		$('div.page[data-page=carpark] #content_section').hide();
		$('div.page[data-page=carpark] li#backpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_success').hide();
		$('div#sticky_wrapper').hide();
		setTimeout(function() {
			application.mobileTouch.refreshPage();
        }, 250);
	},
	
	/**
	 * 
	 */
	showContentLoading: function() {
		$('div.page[data-page=carpark] div#content_section ul.listview li.loading').show();
		$('ul.listview.eli li.button span.button.send_request').hide();
        $('ul.listview.eli li.button.send_request').hide();
		$('ul.listview.backPayment li.button span.button.send_request').hide();
        $('ul.listview.backPayment li.button.send_request').hide();
		$('div.page[data-page=carpark] li#backpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_success').hide();
		$('div.page[data-page=carpark] li.no_connection.error').hide();
		$('div.page[data-page=carpark] li.no_data_found.error').hide();
	},	
	
	/**
	 * showList
	 */
	showList: function() {
		$('div.page[data-page=carpark] ul.listview.not_logged_in').hide();
		$('div.page[data-page=carpark] ul.listview.loading').hide();
		$('div.page[data-page=carpark] ul.listview.noentries').hide();
		$('div.page[data-page=carpark] ul.listview.no_connection').hide();
		$('div.page[data-page=carpark] ul.listview.items').show();
		$('div.page[data-page=carpark] div.last_update').show();
		$('div.page[data-page=carpark] #content_section').hide();
		$('div.page[data-page=carpark] li#backpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_success').hide();
		$('div#sticky_wrapper').hide();
	},
	
	/**
	 * showList
	 */
	showContent: function(show_sticky) {
		$('div.page[data-page=carpark] ul.listview.not_logged_in').hide();
		$('div.page[data-page=carpark] ul.listview.loading').hide();
		$('div.page[data-page=carpark] ul.listview.noentries').hide();
		$('div.page[data-page=carpark] ul.listview.no_connection').hide();
		$('div.page[data-page=carpark] ul.listview.items').hide();
		$('div.page[data-page=carpark] div.last_update').hide();
		$('div.page[data-page=carpark] li#backpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_success').hide();
		$('div.page[data-page=carpark] #content_section').show();
		$('div.page[data-page=carpark] div#content_section ul.listview li.loading').hide();
		
		if(show_sticky){
			$('span#time_range').html("");
			$('span#price_info').html("");
			$('div#sticky_wrapper').show();
		} else {
			$('div#sticky_wrapper').hide();
		} 
		
		setTimeout(function() {
			application.mobileTouch.refreshPage();
        }, 250);
	},
	
	showError: function(error_type){
		var err_found = false;
		$('div.page[data-page=carpark] ul.listview.not_logged_in').hide();
		$('div.page[data-page=carpark] ul.listview.loading').hide();
		$('div.page[data-page=carpark] ul.listview.items').hide();
		$('div.page[data-page=carpark] div.last_update').hide();
		$('div.page[data-page=carpark] #content_section').hide();
		$('div.page[data-page=carpark] li#backpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_error').hide();
		$('div.page[data-page=carpark] li#dobackpayment_success').hide();
		$('ul.listview.eli li.button span.button.send_request').show();
        $('ul.listview.eli li.button.send_request').show();
		$('ul.listview.backPayment li.button span.button.send_request').show();
        $('ul.listview.backPayment li.button.send_request').show();
		if(!isStringEmpty(error_type)){
			if(error_type == GO_ERROR_LOGIN){
				$('div.page[data-page=carpark] ul.listview.not_logged_in').show();
				err_found = true;
			}
		}
		
		if(!err_found){
			if(isOffline()){
				$('div.page[data-page=carpark] ul.listview.no_connection').show();
			} else {
				$('div.page[data-page=carpark] ul.listview.noentries').show();
			}
		}
		
		setTimeout(function() {
			application.mobileTouch.refreshPage();
        }, 250);		
	},
	
	/**
	 * changeBackLink - modifies the back link of the page
	 * 
	 * @param {enum} type
	 * @param {int} vehicleId
	 * @param {function} backFunction - the function to be called on back click
	 */
	changeBackLink: function(type, vehicleId, backFunction, backtype) {
		var link = '#/goapp?activeTab=carpark';
		var removeLink = false;
		switch(type){
			case GO_BACKLINK_OVERVIEW: 	link = '#/goapp?activeTab=carpark';
										break;
			case GO_BACKLINK_DETAILS: 	link = '#/goapp/details?car=' + vehicleId;
										break;
			case GO_BACKLINK_FUNCTION: 	removeLink = true;
										break;
			case GO_BACKLINK_MORE: 		link = '#/goapp?activeTab=more';
										break;
		}
		if(removeLink){
			//Back Button behaviour
			$('a.imagebutton.back.go').data('backtype',"ELIDETAILS##"+vehicleId);
			$('a.imagebutton.back.go').removeAttr('href');
			$('a.imagebutton.back.go').unbind('click');
			$('a.imagebutton.back.go').on('click', function() {
				if(typeof(backFunction) === 'function'){
					backFunction();
				}
			});
		} else {
			$('a.imagebutton.back.go').data('backtype',"");
			$('a.imagebutton.back.go').unbind('click');
			link = link + '&page-transition=previous&back=true';
			$('a.imagebutton.back.go').attr('href', link);
		}
		
		//hide refresh button
		$('a.imagebutton.refresh').hide();
	},
	jumptoCarparkTab: function() {
		application.mobileTouch.box.changePage('carpark');
		$('div.footer.go ul.tabs li.navigation.account').removeClass('active');
		$('div.footer.go ul.tabs li.navigation.more').removeClass('active');
		$('div.footer.go ul.tabs li.navigation.carpark').addClass('active');
		this.checkRefreshIcons("carpark");
	},
	checkRefreshIcons: function(active_tab){
		if(active_tab == "carpark"){
			if($('#content_section').css('display') == "none"){
				$('div.go.header h1 span.additional_header').show();
				$('a.imagebutton.refresh').show();
			} else {
				$('div.go.header h1 span.additional_header').hide();
				$('a.imagebutton.refresh').hide();
			}
		} else {
			$('div.go.header h1 span.additional_header').hide();
			$('a.imagebutton.refresh').hide();
		}
	}
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.VehicleBackPayment',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/details/backpaymemt',
				''
			);

			var that = this;
			var application = subapp.application;
			var data;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				showPage();				
				
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				//ToDo change back link
				subapp.parentController.changeBackLink(GO_BACKLINK_DETAILS, controller.parameters.car);
				
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('ul.listview.backPayment li.button span.button.send_request').unbind('click');
				$('ul.listview.backPayment li.buttonrow span.button.today').unbind('click');
				$('ul.listview.backPayment li.buttonrow span.button.all').unbind('click');
			};
		
			function showPage() {
				var data = subapp.parentController.activeVehicle;
				
				var date_from = new Date(new Date()-(subapp.parentController.activeVehicle.maxNachzahlungsSekunden*1000) + 2*60*1000); //+2mins because of server time
				var date_to = new Date(new Date() - 5*60*1000);
				var dateArray = getDates(date_from, date_to);
				
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleBackPayment.ejs'}).render({ data: {vehicle: data, i18n: application.config.i18n, language: application.config.language, valid_days: dateArray, dateFrom: date_from, dateTo: date_to}})).removeClass("nopadding");
				subapp.parentController.showContent();
				
				subapp.parentController.changeBackLink(GO_BACKLINK_DETAILS, subapp.parentController.vehicleId);
				
				/*
				 * Today
				 */
				$('ul.listview.backPayment li.buttonrow span.button.today').on('click', function() {
					var date_to = new Date(new Date() - 5*60*1000);	
					var date_from = new Date(date_to);
					date_from.setHours("00");
					date_from.setMinutes("00");

					setDateFromTo(date_from, date_to);
				});

				/*
				 * All
				 */
				$('ul.listview.backPayment li.buttonrow span.button.all').on('click', function() {		
					var date_from = new Date(new Date()-(subapp.parentController.activeVehicle.maxNachzahlungsSekunden*1000) + 2*60*1000); //+2mins because of server time
					var date_to = new Date(new Date() - 5*60*1000);
					
					setDateFromTo(date_from, date_to);
				});
				
				//check changes
				$('select#backpaym_date_from').on('change', function(){
					// getting the previous value
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateFrom();
					checkDateProblems('from', previousValue, null, null);
				});
				$('select#backpaym_date_from_hours').on('change', function(){
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateFrom();
					checkDateProblems('from', null, previousValue, null);
				});
				$('select#backpaym_date_from_minutes').on('change', function(){
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateFrom();
					checkDateProblems('from', null, null, previousValue);
				});
				$('select#backpaym_date_to').on('change', function(){
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateTo();
					checkDateProblems('from', previousValue, null, null);
				});
				$('select#backpaym_date_to_hours').on('change', function(){
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateTo();
					checkDateProblems('to', null, previousValue, null);
				});
				$('select#backpaym_date_to_minutes').on('change', function(){
		            var previousValue = $(this).data("prevvalue");
		            $(this).data("prevvalue", $(this).val());
					checkDateTo();
					checkDateProblems('to', null, null, previousValue);
				});				
				
				$('ul.listview.backPayment li.button span.button.send_request').on('click', function() {
					subapp.parentController.showContentLoading();
					//var date_from 					= $('input#backpaym_date_from').val();
					var date_from = $('select#backpaym_date_from').val() + " " + $('select#backpaym_date_from_hours').val() + ":" + $('select#backpaym_date_from_minutes').val();
					//var date_to 					= $('input#backpaym_date_to').val();
					var date_to = $('select#backpaym_date_to').val() + " " + $('select#backpaym_date_to_hours').val() + ":" + $('select#backpaym_date_to_minutes').val();
					
					//replace / with . if language is englisch
					date_from 		= replaceAll('/','.',date_from);
					date_to 		= replaceAll('/','.',date_to);
					var emission_class_corrected	= $('select#vehicle_emission_class').val();
					var vehicle_category_corrected	= $('select#vehicle_category').val();
					var activeVehicle = subapp.parentController.activeVehicle;
					var data = {"fahrzeugId":activeVehicle.fahrzeugId,
							"zeitraumVon":date_from,
							"zeitraumBis":date_to,
							"schadstoffklasse":emission_class_corrected,
							"basiskategorie":vehicle_category_corrected,
							"fahrzeughalterId":activeVehicle.fahrzeughalterId,
							"pan":activeVehicle.pan,
							"obuid":activeVehicle.obuid,
							"kennzeichen":activeVehicle.kennzeichen,
							"land":activeVehicle.land,
							"vertragsart": activeVehicle.vertragsart,
							"betrag":null,
							"backpayFrameEntries":null,
							"postpayZahlungsmittel":null,
							"maxNachzahlungsSekunden":activeVehicle.maxNachzahlungsSekunden };
					$.when(subapp.persistence.requestBackPayment(data))
					.then(function(data){
						subapp.parentController.activeVehicleBackpaymData = data;
						showBackPaymentDetails(data);
					})
					.fail(function(HttpStatus, errorMessage){
						subapp.parentController.activeVehicleBackpaymData = null;
						showErrorMessage(HttpStatus, errorMessage);
					});
					
				});
			};
			
			function showBackPaymentDetails(data){
				var activeVehicle = subapp.parentController.activeVehicle;
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleBackPaymentDetails.ejs'}).render({ data: {payment: data, vehicle: activeVehicle, i18n: application.config.i18n, language: application.config.language}})).removeClass("nopadding");
				
				subapp.parentController.changeBackLink(GO_BACKLINK_FUNCTION, activeVehicle.fahrzeugId, showPage);
				
				subapp.parentController.showContent();
				
				$('ul.listview.backPayment li.button span.button.send_request').on('click', function() {
					subapp.parentController.showContentLoading();
					
					var nzRequest = {};
					nzRequest.fahrzeugId 				= subapp.parentController.activeVehicleBackpaymData.fahrzeugId;
					nzRequest.zeitraumVon 				= subapp.parentController.activeVehicleBackpaymData.zeitraumVon;
					nzRequest.zeitraumBis 				= subapp.parentController.activeVehicleBackpaymData.zeitraumBis;
					nzRequest.schadstoffklasse 			= subapp.parentController.activeVehicleBackpaymData.schadstoffklasse;
					nzRequest.basiskategorie 			= subapp.parentController.activeVehicleBackpaymData.basiskategorie;
					nzRequest.fahrzeughalterId 			= subapp.parentController.activeVehicleBackpaymData.fahrzeughalterId;
					nzRequest.pan 						= subapp.parentController.activeVehicleBackpaymData.pan;
					nzRequest.obuid 					= subapp.parentController.activeVehicleBackpaymData.obuid;
					nzRequest.kennzeichen				= subapp.parentController.activeVehicleBackpaymData.kennzeichen;
					nzRequest.land 						= subapp.parentController.activeVehicleBackpaymData.land;
					nzRequest.vertragsart 				= subapp.parentController.activeVehicleBackpaymData.vertragsart;
					nzRequest.betrag 					= subapp.parentController.activeVehicleBackpaymData.betrag;
					nzRequest.backpayFrameEntries 		= subapp.parentController.activeVehicleBackpaymData.backpayFrameEntries;
					nzRequest.postpayZahlungsmittel 	= subapp.parentController.activeVehicleBackpaymData.postpayZahlungsmittel;
					nzRequest.maxNachzahlungsSekunden 	= subapp.parentController.activeVehicleBackpaymData.maxNachzahlungsSekunden;
					
					$.when(subapp.persistence.doBackPayment(nzRequest))
					.then(function(data){
						doBackPaymentDone();
					})
					.fail(function(HttpStatus, errorMessage){
						doBackPaymentError(HttpStatus, errorMessage);
					});
					
				});
			}
			
			function doBackPaymentDone(){
				outputError = "";
				subapp.parentController.showContent();
				$('#dobackpayment_success').html(application.config.i18n[application.config.language].go.nz.nz_paid);
				$('#dobackpayment_success').show();
				//hide payment button
                $('ul.listview.backPayment li.button span.button.send_request').hide();
                $('ul.listview.backPayment li.button.send_request').hide();
				
			}
			
			function doBackPaymentError(HttpStatus, errorMessage){
				var outputError = "";
				if ((HttpStatus == 404 || HttpStatus == 409) && !isStringEmpty(errorMessage)) {
					outputError = application.config.i18n[application.config.language].go.nz.INFO[errorMessage.replace('INFO.','')];
				} else {
					if(isOffline()){
						outputError = application.config.i18n[application.config.language].no_internet_connection;
					} else {
						outputError = application.config.i18n[application.config.language].go.nz.INFO.nz_error;
					}
				}
				subapp.parentController.showContent();
				$('#dobackpayment_error').html(outputError);
				$('#dobackpayment_error').show();
				$('ul.listview.backPayment li.button span.button.send_request').show();
                $('ul.listview.backPayment li.button.send_request').show();
			}
			
			function showErrorMessage(HttpStatus, errorMessage){
				$('ul.listview.backPayment li.button span.button.send_request').show();
                $('ul.listview.backPayment li.button.send_request').show();
				var outputError = "";
				if(HttpStatus == 409){
					outputError = application.config.i18n[application.config.language].go.nz.INFO.ueberlappungen + "<br/>" + errorMessage;
				} else if(HttpStatus == 400 || HttpStatus == 409){
					if(!isStringEmpty(errorMessage)){
						outputError = application.config.i18n[application.config.language].go.nz.INFO[errorMessage.replace('INFO.','')];
					}
				}
				
				//Default message
				if(isStringEmpty(outputError)){
					if(isOffline()){
						outputError = application.config.i18n[application.config.language].no_internet_connection;
					} else {
						outputError = application.config.i18n[application.config.language].go.nz.INFO.keinenachzahlung;
					}
				}
				subapp.parentController.showContent();
				$('#backpayment_error').html(outputError);
				$('#backpayment_error').show();
			}
			
			function setDateFromTo(date_from, date_to){
				if(!isStringEmpty(date_from)){
					var hours_from = getTimeWithLeadingZero(date_from.getHours());
					var minutes_from = getTimeWithLeadingZero(date_from.getMinutes());
					var date_from_str = getFormattedDateString(date_from,"de-AT"); //"de-AT" necessary to get DD-MM-YYYY
					$("select#backpaym_date_from option").prop('selected', false);
					$("select#backpaym_date_from option[value='"+date_from_str+"']").prop('selected', true);
					$("select#backpaym_date_from").data("prevvalue", date_from_str);
					
					$("select#backpaym_date_from_hours option").prop('selected', false);
					$("select#backpaym_date_from_hours option[value='"+hours_from+"']").prop('selected', true);
					$("select#backpaym_date_from_hours").data("prevvalue", hours_from);
					
					$("select#backpaym_date_from_minutes option").prop('selected', false);
					$("select#backpaym_date_from_minutes option[value='"+minutes_from+"']").prop('selected', true);
					$("select#backpaym_date_from_minutes").data("prevvalue", minutes_from);
				}
				if(!isStringEmpty(date_to)){
					var hours_to = getTimeWithLeadingZero(date_to.getHours());
					var minutes_to = getTimeWithLeadingZero(date_to.getMinutes());
					var date_to_str = getFormattedDateString(date_to,"de-AT"); //"de-AT" necessary to get DD-MM-YYYY
					$("select#backpaym_date_to option").prop('selected', false);
					$("select#backpaym_date_to option[value='"+date_to_str+"']").prop('selected', true);
					$("select#backpaym_date_to").data("prevvalue", date_to_str);
					
					$("select#backpaym_date_to_hours option").prop('selected', false);
					$("select#backpaym_date_to_hours option[value='"+hours_to+"']").prop('selected', true);
					$("select#backpaym_date_to_hours").data("prevvalue", hours_to);
					
					$("select#backpaym_date_to_minutes option").prop('selected', false);
					$("select#backpaym_date_to_minutes option[value='"+minutes_to+"']").prop('selected', true);
					$("select#backpaym_date_to_minutes").data("prevvalue", minutes_to);
				}
			}
			
			function checkDateFrom(){
				var min_date = new Date(new Date()-(subapp.parentController.activeVehicle.maxNachzahlungsSekunden*1000) + 2*60*1000); //+2mins because of server time
				var max_date = new Date(new Date() - 5*60*1000);
				
				if($('select#backpaym_date_from').val() == getFormattedDateString(min_date, "de-AT")){
					if(Number($('select#backpaym_date_from_hours').val()) < (new Date(min_date)).getHours()){
						setDateFromTo(min_date, null);
					} else if(Number($('select#backpaym_date_from_hours').val()) == (new Date(min_date)).getHours()
							&& Number($('select#backpaym_date_from_minutes').val()) < (new Date(min_date)).getMinutes()){
						setDateFromTo(min_date, null);
					}
				}
			}
			
			function checkDateTo(){
				var min_date 	= new Date(new Date()-(subapp.parentController.activeVehicle.maxNachzahlungsSekunden*1000) + 2*60*1000); //+2mins because of server time
				var max_date 	= new Date(new Date() - 5*60*1000);
				
				if($('select#backpaym_date_to').val() == getFormattedDateString(max_date, "de-AT")){
					if(Number($('select#backpaym_date_to_hours').val()) > (new Date(max_date)).getHours()){
						setDateFromTo(null, max_date);
					} else if(Number($('select#backpaym_date_to_hours').val()) == (new Date(max_date)).getHours()
							&& Number($('select#backpaym_date_to_minutes').val()) > (new Date(max_date)).getMinutes()){
						setDateFromTo(null, max_date);
					}
				}
			}
			
			/**
			 * 
			 * @param changer from|to --> if value is incorrect this value is changed back to it's initial value
			 * @param date
			 * @param hour
			 * @param minute
			 */
			function checkDateProblems(changer, date, hour, minute){
				var min_date 	= new Date(new Date()-(subapp.parentController.activeVehicle.maxNachzahlungsSekunden*1000) + 2*60*1000); //+2mins because of server time
				var max_date 	= new Date(new Date() - 5*60*1000);
				var date_from 	= getDateObject($('select#backpaym_date_from').val());
				var date_to	 	= getDateObject($('select#backpaym_date_to').val());
				
				if(date_from > date_to){
					if(changer=="from"){
						$("select#backpaym_date_from option").prop('selected', false);
						$("select#backpaym_date_from option[value='"+date+"']").prop('selected', true);
						$("select#backpaym_date_from").data("prevvalue", date);						
					} else {
						$("select#backpaym_date_to option").prop('selected', false);
						$("select#backpaym_date_to option[value='"+date+"']").prop('selected', true);
						$("select#backpaym_date_to").data("prevvalue", date);						
					}
				} else if(date_from < date_to){
				} else {
					//day equal --> check Hours
					if(Number($('select#backpaym_date_from_hours').val()) > Number($('select#backpaym_date_to_hours').val())){
						if(changer=="from"){
							$("select#backpaym_date_from_hours option").prop('selected', false);
							$("select#backpaym_date_from_hours option[value='"+hour+"']").prop('selected', true);
							$("select#backpaym_date_from_hours").data("prevvalue", hour);					
						} else {
							$("select#backpaym_date_to_hours option").prop('selected', false);
							$("select#backpaym_date_to_hours option[value='"+hour+"']").prop('selected', true);
							$("select#backpaym_date_to_hours").data("prevvalue", hour);				
						}
					} else if(Number($('select#backpaym_date_from_hours').val()) < Number($('select#backpaym_date_to_hours').val())){
						//alles in Ordnung
					} else {
						//day and hour equal --> check minutes
						if(Number($('select#backpaym_date_from_minutes').val()) > Number($('select#backpaym_date_to_minutes').val())){
							if(changer=="from"){
								$("select#backpaym_date_from_minutes option").prop('selected', false);
								$("select#backpaym_date_from_minutes option[value='"+minute+"']").prop('selected', true);
								$("select#backpaym_date_from_minutes").data("prevvalue", minute);			
							} else {
								$("select#backpaym_date_to_minutes option").prop('selected', false);
								$("select#backpaym_date_to_minutes option[value='"+minute+"']").prop('selected', true);
								$("select#backpaym_date_to_minutes").data("prevvalue", minute);				
							}
						}
					}
				}
			}
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.VehicleLocks',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/details/vehiclelocks',
				''
			);

			var that = this;
			var application = subapp.application;
			var data;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				var theSubapp = subapp;
				
				theSubapp.parentController.showLoading();
				
				//hide listview items
				$('ul.listview.items').hide();
				showPage(theSubapp.parentController);
				
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				//ToDo change back link
				subapp.parentController.changeBackLink(GO_BACKLINK_DETAILS, controller.parameters.car);
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {

			};
		
			function showPage(parentController) {
				var data = parentController.activeVehicle;
				var theParentController = parentController;
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleLocks.ejs'}).render({ data: {vehicle: data, i18n: application.config.i18n, language: application.config.language}})).removeClass("nopadding");
				theParentController.showContent();
				
				setTimeout(function() {
					application.mobileTouch.refreshPage();
	            }, 250);		
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.Details',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/details',
				''
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				var theSubapp = subapp;
				
				theSubapp.parentController.showLoading();
				
				//if user is coming back, vehicle data is already loaded
					
					
				
				if(controller != null && controller.parameters != null && controller.parameters.car != null){
					if(theSubapp.parentController.activeVehicle != null && controller.parameters.car == theSubapp.parentController.activeVehicle.fahrzeugId){
						showContent(theSubapp.parentController);
					} else {
						//hide listview items
						$('ul.listview.items').hide();
						subapp.parentController.vehicleId = controller.parameters.car;
						$.when(subapp.persistence.loadVehicleDetails(controller.parameters.car))
						.then(function(data){
							theSubapp.parentController.activeVehicle = data;
							showContent(theSubapp.parentController);
						})
						.fail(function(){
							//display minimal view with Fahrzeugdeklaration
							$.when(subapp.persistence.getVehicleFromDb(controller.parameters.car))
							.then(function(data){
								theSubapp.parentController.activeVehicle = data;
								showContent(theSubapp.parentController);
							})
							.fail(function(){	
								setTimeout(function(){
	                                 window.location= '#/goapp?page-transition=previous';
	                            }, 500);
							});
						});
					}
				}
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				$('div.go.header h1 span.additional_header').hide();
				subapp.parentController.changeBackLink(GO_BACKLINK_OVERVIEW);
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {

			};
			
			function showContent(parentController){
				if(isOffline()){
					iv_offline = true;
				} else {
					iv_offline = false;
				}
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleDetails.ejs'}).render({ data: {vehicle: parentController.activeVehicle, i18n: application.config.i18n, language: application.config.language, offline: iv_offline}})).removeClass("nopadding");
                                
                //only necessary for iOS
                $('div.page[data-page=carpark] ul.additional_options li.link.vehicle_declaration').on('tap', function() {
                    var vehicleID = $(this).data('vehicleid');
                    setTimeout(function(){
                             window.location= '#/goapp/details/vehicledeclaration?car=' + vehicleID + '&page-transition=next';
                             }, 500);
                });
                $('div.page[data-page=carpark] ul.additional_options li.link.eli').on('tap', function() {
                      if($(this).data('offline') != true && $(this).data('offline') != "true"){
                        var vehicleID = $(this).data('vehicleid');
                        setTimeout(function(){
                          window.location= '#/goapp/details/eli?car=' + vehicleID + '&page-transition=next';
                        }, 500);
                      }
                  });

                $('div.page[data-page=carpark] ul.additional_options li.link.nz').on('tap', function() {
                      if($(this).data('offline') != true && $(this).data('offline') != "true"){
                      var vehicleID = $(this).data('vehicleid');
                      setTimeout(function(){
                                 window.location= '#/goapp/details/backpaymemt?car=' + vehicleID + '&page-transition=next';
                                 }, 500);
                      }
                  });
				parentController.showContent();
			}
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.VehicleEli',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp/details/eli',
				''
			);

			var that = this;
			var application = subapp.application;
			var data;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				subapp.parentController.showLoading();
				
				showSearchPage();
				
				d.resolve();
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				subapp.parentController.vehicleId = controller.parameters.car;
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('ul.listview.eli li.buttonrow span.button.today').unbind('click');
				$('ul.listview.eli li.buttonrow span.button.week').unbind('click');
				$('ul.listview.eli li.buttonrow span.button.month').unbind('click');
				$('ul.listview.eli li.buttonrow span.button.all').unbind('click');
				$('ul.listview.eli li.button span.button.send_request').unbind('click');
			};
		
			/**
			 * showSearchPage - displays search Page
			 */
			function showSearchPage() {
				var data = subapp.parentController.activeVehicle;
				
				var start_date = getEarliestDay();
				var end_date = new Date();
				
				var monthArray = new Array();
				monthArray.push(getTimeWithLeadingZero(start_date.getMonth()+1)+"."+start_date.getFullYear());
				monthArray.push(getTimeWithLeadingZero(end_date.getMonth()+1)+"."+end_date.getFullYear());
				
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleEliSearch.ejs'}).render({ data: {vehicle: data, i18n: application.config.i18n, language: application.config.language, monthArray: monthArray}})).removeClass("nopadding");
				subapp.parentController.showContent();
				
				subapp.parentController.changeBackLink(GO_BACKLINK_DETAILS, subapp.parentController.vehicleId, null);
				
				/*
				 * Today
				 */
				$('ul.listview.eli li.buttonrow span.button.today').on('click', function() {
					setEliDateFromTo(new Date(), new Date());
				});
				
				/*
				 * Week
				 */
				$('ul.listview.eli li.buttonrow span.button.week').on('click', function() {
					var day = "";
					var d = new Date();
					
					switch (new Date().getDay()) {
						case 0:	 d.setDate(d.getDate()-6);// 0=Sonntag
								break;
						case 1: d.setDate(d.getDate());// 1=Montag
								break;							
						case 2: d.setDate(d.getDate()-1);// 2=Dienstag
								break;
						case 3: d.setDate(d.getDate()-2);// 3=Mittwoch
								break;
						case 4: d.setDate(d.getDate()-3);// 4=Donnerstag
								break;
						case 5: d.setDate(d.getDate()-4);// 5=Freitag
								break;
						case 6:	d.setDate(d.getDate()-5);
								break;
					}
					setEliDateFromTo(d, new Date());
				});
				
				/*
				 * Month
				 */
				$('ul.listview.eli li.buttonrow span.button.month').on('click', function() {
					setEliDateFromTo(new Date(new Date().getFullYear(), new Date().getMonth(), 1), new Date());
				});
				
				/*
				 * All - all is from the first day of the last month till now
				 */
				$('ul.listview.eli li.buttonrow span.button.all').on('click', function() {
					setEliDateFromTo(getEarliestDay(), new Date());
				});
				
				//check changes
				$('select#eli_date_from_monthyear').on('change', function(){
					checkEliDateFrom();
				});
				
				$('select#eli_date_from_days').on('change', function(){
					checkEliDateFrom();
				});				

				$('select#eli_date_to_monthyear').on('change', function(){
					checkEliDateTo();
				});

				$('select#eli_date_to_days').on('change', function(){
					checkEliDateTo();			
				});
				
				/*
				 * sendRequest - loads eli data from server
				 */
				$('ul.listview.eli li.button span.button.send_request').on('click', function() {
					var from 	= $('select#eli_date_from_days').val() + "."+$('select#eli_date_from_monthyear').val();
					var to 		= $('select#eli_date_to_days').val() + "."+$('select#eli_date_to_monthyear').val();
					
					//replace / with . if language is englisch
					from 	= replaceAll('/','.',from);
					to 		= replaceAll('/','.',to);
					if(isStringEmpty(from) || isStringEmpty(to)){
						$('li.no_date.error').show();
					} else {
						$('li.no_date.error').hide();
						subapp.parentController.showContentLoading();
						var vehicle = subapp.parentController.activeVehicle;
						//send Request
						$.when(subapp.persistence.getEliData({ zeitraumVon: from,zeitraumBis: to,kennzeichen: vehicle.kennzeichen,land: vehicle.land, obuid: vehicle.obuid, fahrzeugId: vehicle.fahrzeugId,fahrzeughalterId: vehicle.fahrzeughalterId}))
						.then(function(data){
							subapp.parentController.vehicleId 		= vehicle.fahrzeugId;
							subapp.parentController.vehicleEliData 	= data;
							subapp.parentController.vehicleEliFrom 	= from;
							subapp.parentController.vehicleEliTo 	= to;
							showEliData();
						})
						.fail(function(){
							showEliError();
						});
					}
				});	
			};
			
			function showEliError(){
				$('div.page[data-page=carpark] div#content_section ul.listview li.loading').hide();
				if(isOffline()){
					$('li.no_connection.error').show();
					$('li.no_data_found.error').hide();
				} else {
					$('li.no_connection.error').hide();
					$('li.no_data_found.error').show();
				}
				$('ul.listview.eli li.button span.button.send_request').show();
                $('ul.listview.eli li.button.send_request').show();
			}
			/**
			 * showEliData - displays eli information
			 */
			function showEliData(){
				var data 		= subapp.parentController.vehicleEliData;
				var vehicle_id 	= subapp.parentController.vehicleId;
				var date_from 	= subapp.parentController.vehicleEliFrom;
				var date_to 	= subapp.parentController.vehicleEliTo;
				
				var sum_netto = 0;
				for(var i in data){
					sum_netto = parseFloat(sum_netto) + parseFloat(data[i].nettobetrag.replace(',','.'));
				}
				
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleEliData.ejs'}).render({ data: {elidata: data, vehicle_id: vehicle_id, sum_netto: sum_netto, date_from: date_from, date_to: date_to, i18n: application.config.i18n, language: application.config.language}})).removeClass("nopadding");
				


				subapp.parentController.showContent(true);
				//show time range
				$('span#time_range').html(application.config.i18n[application.config.language].go.eli.time_period + ": " + formatDateForLang(date_from, application.config.language) + ' - ' + formatDateForLang(date_to, application.config.language));
				$('span#price_info').html(application.config.i18n[application.config.language].go.eli.sum_amount + ": " + formatNumber(sum_netto,2));
								
				/*
				 * getEliTransactionData
				 */
				$('ul.listview.eli.details li').on('click', function() {
					subapp.parentController.showLoading();
					var transactionNum = $(this).data('transactionnum');
					if(subapp.parentController.vehicleEliData != null && subapp.parentController.vehicleEliData.length > 0){
						var data = subapp.parentController.vehicleEliData[transactionNum];
						$.when(subapp.persistence.getEliTransactionData(data))
						.then(function(data){
							subapp.parentController.vehicleEliTransactionData = data;
							showEliTransactionData();
						})
						.fail(function(){
							subapp.parentController.showError();
						});
					} else {
						setTimeout(function(){
                            window.location= '#/goapp?page-transition=previous';
                        }, 500);
					}
				});
				subapp.parentController.changeBackLink(GO_BACKLINK_FUNCTION, vehicle_id, showSearchPage);
			};
			
			/**
			 * showEliTransactionData - shows eli transaction details
			 */
			function showEliTransactionData(){
				var data = subapp.parentController.vehicleEliTransactionData;
				var sum_netto = 0;
				var datum = "";
				for(var i in data){
					datum = data[i].transaktionsDatum.substr(0,10);
					sum_netto = parseFloat(sum_netto) + parseFloat(data[i].nettobetrag.replace(',','.'));
				}
				
				$('#content_section').html(new EJS({url: 'app/GoApp/view/templates/vehicleEliTransactionData.ejs'}).render({ data: {transactiondata: data, sum_netto: sum_netto, i18n: application.config.i18n, language: application.config.language}})).removeClass("nopadding");
				subapp.parentController.showContent(true);
				$('span#time_range').html(formatDateForLang(datum,application.config.language));
				$('span#price_info').html(application.config.i18n[application.config.language].go.eli.sum_amount + ": " + formatNumber(sum_netto,2));
				subapp.parentController.changeBackLink(GO_BACKLINK_FUNCTION, subapp.parentController.activeVehicle.fahrzeugId, showEliData);
			}
			
			/**
			 * checkEliDate - checks if the date selected is valid, if not the date is changed to a valid date
			 * 
			 * @param {enum(from|to)} field
			 */
			function checkEliDate(field){
				if(field == "from"){
					var date = $('select#eli_date_from_days').val()+"."+$('select#eli_date_from_monthyear').val();
					if(!isNaN(getDateObject(date))){
						return true;
					} else {
						var count = 0;
						while(isNaN(getDateObject(date))){
							$('select#eli_date_from_days').val($('select#eli_date_from_days').val() - 1);
							date = ($('select#eli_date_from_days').val())+"."+$('select#eli_date_from_monthyear').val();
							
							if(count>4){
								break;
							}
							count++;
						}
					}
				} else {
					var date = $('select#eli_date_to_days').val()+"."+$('select#eli_date_to_monthyear').val();
					if(!isNaN(getDateObject(date))){
						return true;
					} else {
						var count = 0;
						while(isNaN(getDateObject(date))){
							$('select#eli_date_to_days').val($('select#eli_date_to_days').val() - 1);
							date = ($('select#eli_date_to_days').val())+"."+$('select#eli_date_to_monthyear').val();
							
							if(count>4){
								break;
							}
							count++;
						}
					}					
				}
				return true;
			}
			
			function checkEliDateFrom(){
				checkEliDate("from");
				checkEliDateProblems("from");
			}
			
			function checkEliDateTo(){
				checkEliDate("to");
				if($('select#eli_date_to_monthyear').val() == getTimeWithLeadingZero((new Date()).getMonth()+1)+"."+(new Date()).getFullYear()){
					if($('select#eli_date_to_days').val() > (new Date()).getDate()){
						setEliDateFromTo(null, new Date());
					}
				}
				checkEliDateProblems("to");
			}
			/**
			 * 
			 * @param {enum(from|to)} field
			 */
			function checkEliDateProblems(field){
				//check if from is higher than to
				var date_from 	= getDateObject($('select#eli_date_from_days').val()+"."+$('select#eli_date_from_monthyear').val());
				var date_to 	= getDateObject($('select#eli_date_to_days').val()+"."+$('select#eli_date_to_monthyear').val());
				
				if(date_from > date_to){
					if(field == "from"){
						setEliDateFromTo(getEarliestDay(), null);
					} else {
						setEliDateFromTo(null, new Date());
					}
				}
			}
			
			/**
			 * getEarliestDay - returns the earliest valid date
			 * 
			 * defined as the 1st of the month before
			 * 
			 * @returns {Date}
			 */
			function getEarliestDay(){
				if((new Date()).getMonth() == 0){
					var year_start = new Date().getFullYear() - 1;
					var month_start = 11;
				} else {
					var year_start = new Date().getFullYear();
					var month_start = new Date().getMonth() - 1;
				}
				
				return new Date(year_start, month_start, 1);
			}
			
			
			/**
			 * setEliDateFromTo - sets the date of the select-boxes
			 * 
			 * if @date_from or @date_to is null, they are not set
			 * @param {Date} date_from
			 * @param {Date} date_to
			 */
			function setEliDateFromTo(date_from, date_to){
				if(!isStringEmpty(date_from)){
					var month 	= getTimeWithLeadingZero(date_from.getMonth()+1)+"."+date_from.getFullYear()
					var day 	= getTimeWithLeadingZero(date_from.getDate());
					
					$("select#eli_date_from_days option").prop('selected', false);
					$("select#eli_date_from_days option[value='"+day+"']").prop('selected', true);
					
					$("select#eli_date_from_monthyear option").prop('selected', false);
					$("select#eli_date_from_monthyear option[value='"+month+"']").prop('selected', true);
				}
				if(!isStringEmpty(date_to)){
					var month_to 	= getTimeWithLeadingZero(date_to.getMonth()+1)+"."+date_to.getFullYear()
					var day_to 	= getTimeWithLeadingZero(date_to.getDate());

					$("select#eli_date_to_days option").prop('selected', false);
					$("select#eli_date_to_days option[value='"+day_to+"']").prop('selected', true);
					
					$("select#eli_date_to_monthyear option").prop('selected', false);
					$("select#eli_date_to_monthyear option[value='"+month_to+"']").prop('selected', true);
				}
			}
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.goapp.controller.Index',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/goapp',
				'app/GoApp/view/Index.ejs'
			);

			var that = this;
			var application = subapp.application;
	    	
	    	function showLoginLoading(){
				$('div.page[data-page=account] ul.listview li input').prop('disabled', true);
				$('div.page[data-page=account] ul.listview li').addClass('nobottomborder');
				$('div.page[data-page=account] ul.listview li.button.login').hide();
				$('div.page[data-page=account] ul.listview li.error').hide();
				$('div.page[data-page=account] ul.listview li.login_loading').show();
	    	}

	    	function showLoggedIn(){
				$('div.page[data-page=account] ul.listview li.password').hide();
				$('div.page[data-page=account] ul.listview li.save_data').hide();
				$('div.page[data-page=account] ul.listview li.login_loading').hide();
				$('div.page[data-page=account] ul.listview li.error').hide();
				$('div.page[data-page=account] ul.listview li.button.logout').show();
	    	}	    	
	    	
	    	function showLoggedOut(){
	    		//delete object data
	    		subapp.parentController.activeVehicle 				= null;
	    		subapp.parentController.activeVehicleBackpaymData 	= null;
	    		subapp.parentController.vehicleId 					= null;
	    		subapp.parentController.vehicleEliData 				= null;
	    		subapp.parentController.vehicleEliFrom			 	= null;
	    		subapp.parentController.vehicleEliTo 				= null;
	    		
	    		$('div.page[data-page=account] ul.listview li input').prop('disabled', false);
	    		$('div.page[data-page=account] ul.listview li').removeClass('nobottomborder');
	    		$('div.page[data-page=account] ul.listview li.password').show();
	    		$('div.page[data-page=account] ul.listview li.save_data').show();
	    		$('div.page[data-page=account] ul.listview li.button.logout').hide();
	    		$('div.page[data-page=account] ul.listview li.error').hide();
	    		$('div.page[data-page=account] ul.listview li.button.login').show();
	    		//remove all items from listview
                $('div.page[data-page=carpark] ul.listview.noentries').hide();
	    		$('div.page[data-page=carpark] ul.listview.items').html("");
	    		$('div.page[data-page=carpark] div#content_section').html("").removeClass("nopadding");
	    		$('div.page[data-page=carpark] ul.listview.not_logged_in').show();
	    	}
	    	
	    	function showLoginError(error){
	    		$('div.page[data-page=account] ul.listview li input').prop('disabled', false);
				$('div.page[data-page=account] ul.listview li').removeClass('nobottomborder');
				$('div.page[data-page=account] ul.listview li.login_loading').hide();
				$('div.page[data-page=account] ul.listview li.password').show();
				$('div.page[data-page=account] ul.listview li.save_data').show();
				$('div.page[data-page=account] ul.listview li.button.login').show();
				$('div.page[data-page=account] ul.listview li.error').hide(); //hide all errors
	    		
				if(isOffline()) {
					$('div.page[data-page=account] ul.listview li.error.no_connection').show();
	    		} else if(error == "Unauthorized") {
	    			$('div.page[data-page=account] ul.listview li.error.login_error').show();
	    		} else {
	    			$('div.page[data-page=account] ul.listview li.error.unknown_error').show();
	    		}
				
	    	}
	    	
	    	/** 
	    	 * showList 
	    	 */
	    	function showList() {
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('ul.listview.items').show();	
	    	}
    		

    		/**
    		 * onLoad
    		 */
			that.onLoad = function() {
				var jumpToMore = false;
				if(location.hash.search("activeTab=more") > 0){
					jumpToMore = true;
				}
				function loadPage(userdata){
					if(userdata != null && userdata != undefined && userdata.setValue1 != undefined){
						subapp.persistence.authkey = userdata.setValue2;
					} else {
						subapp.persistence.authkey = null;
					}
					var d = $.Deferred();
					application.loadPage(
		 				that.path, {
							data: {						
								i18n: application.config.i18n,
								language: application.config.language,
								mobile_user: (userdata != undefined && userdata.setValue != undefined) ? userdata.setValue : "",
								partner_id: (userdata != undefined && userdata.setValue1 != undefined) ? userdata.setValue1 : "",
								valid_user: (userdata != undefined && userdata.setValue != undefined && userdata.setValue1 != undefined) ? true : false,
							}
						},
						function() {
							//callback after page loading --> jump to carpark tab if user is logged in
							if(subapp.persistence.authkey != null && subapp.persistence.authkey != ""){
								if(!jumpToMore){
									subapp.parentController.jumptoCarparkTab();
								}
							}
							d.resolve();
						}
					);
	
					return d.promise();
				}	
				
				return $.when(application.config.settings.persistence.getAdditionalSettingDeferred("go_userdata"))
						.done(loadPage);
			};

			/**
			 * onShow
			 */
			that.onShow = function() {
				/*
				 * load vehicles stored in the database 
				 */
				$.when(subapp.persistence.getAllVehicles())
				.done(function(data){
					that.render(data);
				});
				
				$('.footer > ul.tabs > li.navigation').on('click', function() {
					if($(this).data('page') == "carpark"){
						if($('div.page[data-page=carpark] div#content_section').css('display') == "block" && $('div.page[data-page=carpark] div#content_section').html().trim().length == 0){
							if($('div.page[data-page=carpark] ul.listview.items').html().trim().length > 0){
								$('div.page[data-page=carpark] ul.listview.items').show();
							} else {
                                //check if authorized
                              if(isStringEmpty(subapp.persistence.authkey)){
                                $('div.page[data-page=carpark] ul.listview.noentries').hide();
                                $('div.page[data-page=carpark] ul.listview.not_logged_in').show();
                              } else {
                                $('div.page[data-page=carpark] ul.listview.not_logged_in').hide();
								$('div.page[data-page=carpark] ul.listview.noentries').show();
                              }
							}
						}
					} else if($(this).data('page') == "more"){
						//hide go-box guide and display default page
						$('div.page[data-page=more] div#go_box_guide').hide();
						$('div.page[data-page=more] ul.listview.more').show();
						
					}
					subapp.parentController.checkRefreshIcons($(this).data('page'));
				});
				
				/*
				 * Login 
				 */
				$('div.page[data-page=account] ul.listview li.button.login').on('click', function() {
					showLoginLoading();
					var user = $('input#mobile_user').val();
					var partner_id = $('input#partner_id').val();
					var password = $('input#password').val();
					subapp.persistence.authkey = 'Basic ' + $.base64.encode(user + ';' + partner_id + ':' + password);
					$.when(subapp.persistence.loadAllVehicles())
					.then(function(data){
						application.config.settings.persistence.setAdditionalSetting("go_updatetime", new Date());
						that.render(data);
					})
					.then(function(){
						showLoggedIn();
						if($('li.checkbox.save_data').hasClass('activated')){
							application.config.settings.persistence.setAdditionalSettingDeferred("go_userdata",user, partner_id, subapp.persistence.authkey);
						} else {
							application.config.settings.persistence.removeAdditionalSetting("go_userdata");
						}
						subapp.parentController.jumptoCarparkTab();
					})
					.fail(function(error){
						showLoginError(error);
					});
					

				});
				
				/*
				 * Logout 
				 */
				$('div.page[data-page=account] ul.listview li.button.logout').on('click', function() {
					$.when(subapp.persistence.removeAllVehicles())
					.then(application.config.settings.persistence.removeAdditionalSetting("go_userdata"))
					.then(application.config.settings.persistence.removeAdditionalSetting("go_updatetime"))
					.then(showLoggedOut())
					.fail(function(){
						setTimeout(function(){
                            window.location= '#/goapp?page-transition=previous';
                            }, 500);
					})
				});
				
				/*
				 * toggle save user data
				 */
				$('div.content.go li.checkbox.save_data').on('click', function() {
					$(this).toggleClass('activated');
				});
				
				/*
				 * Refresh 
				 */
				$('div.header a.imagebutton.refresh').on('click', function() {
					that.doRefreshPage();
				});
				
				/*
				 * to Login Button
				 */
				$('ul.not_logged_in li.button.jump_to_login').on('click', function() {
					$('li.navigation.account.go').trigger('click');
				});
				
				//dial intent
				$('a[data-telnr]').on('click', function() {
					if(window.PluginNativeCode != undefined && window.PluginNativeCode.openDialIntent != undefined 
							&& typeof window.PluginNativeCode.openDialIntent === 'function') {
	    				window.PluginNativeCode.openDialIntent($(this).data('telnr'));
					}
					return false;
				});					
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('a[data-telnr]').unbind('click');
				/*$('div.content.go li.checkbox.save_data').unbind('click');
	    		$('div.page[data-page=account] ul.listview li.button.login').unbind('click');
				$('div.page[data-page=account] ul.listview li.button.logout')
	    		$('ul.not_logged_in li.button.jump_to_login').unbind('click');
	    		$('div.header a.imagebutton.refresh').unbind('click');
	    		$('div.page[data-page=carpark]  ul.listview.noentries.no_connection li.button.reload').unbind('click');*/
			};
			
			/**
			 * render - renders carpark data
			 * 
			 * @param {Array<Object>} data - car data
			 */
			that.render = function(data){
				if(data != undefined && data != null && data.length > 0){					
					//remove old items
					subapp.parentController.showLoading();
					$('div.page[data-page=carpark] ul.listview.items').html("");

					$('div.page[data-page=carpark] ul.listview.items').append(new EJS({url: 'app/GoApp/view/templates/cars.ejs'}).render({ data: {items: data, i18n: application.config.i18n, language: application.config.language}}));
					
					//get update time
					$.when(application.config.settings.persistence.getAdditionalSettingDeferred("go_updatetime"))
					.done(function(data){
						var update_time = new Date(data.setValue);
						$('span.go_last_update').text(getFormattedDateString(update_time, application.config.language)+" "+getFormattedTimeString(update_time, application.config.language));
						$('div.last_update').show();
						setTimeout(function() {
							application.mobileTouch.refreshPage();
			            }, 250);
					});
					
					showList();
				} else {
                                if(isStringEmpty(subapp.persistence.authkey)){
                                subapp.parentController.showError(GO_ERROR_LOGIN);
                                } else {
                                subapp.parentController.showError();
                                }
                                
					$('div.page[data-page=carpark]  ul.listview.noentries.no_connection li.button.reload').on('click', function() {
						that.doRefreshPage();
					});
				}
			},
			that.doRefreshPage = function(){
				if(!isOffline()){
					subapp.parentController.showLoading();
					$('div.page[data-page=carpark] ul.listview.no_connection.text').hide();	
					$.when(subapp.persistence.loadAllVehicles())
					.then(function(data){
						application.config.settings.persistence.setAdditionalSetting("go_updatetime", new Date());
						that.render(data);
					})
					.fail(function(){
						if(isStringEmpty(subapp.persistence.authkey)){
							subapp.parentController.showError(GO_ERROR_LOGIN);
						} else {
							subapp.parentController.showError();
						}
					});
				} else {
					$('div.page[data-page=carpark] ul.listview.no_connection.text').show();	
				}
			}
			
		},
	}
	
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Kompagnon', {}, {
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
               
        this.updateOnStartup = true;
        this.decimalDigits = 1;
        this.modes = [];
        
        /*window.onerror = function(message, url , linenumber, column, errorObj) {
        	var platform = "UNKNOWN DEVICE";
        	var deviceVersion = "UNKNOWN VERSION";
        	
        	if(window.device != undefined && window.device.platform != undefined) {
        		platform = window.device.platform;
        		deviceVersion = window.device.version;
        	}
        	var report = 
        		JSON.stringify({
	        	"message":message,
	        	"url":url,
	        	"linenumber":linenumber,
	        	"platform":platform,
	        	"version":deviceVersion
        		});  	
        	$.ajax
            ({
                type: "POST",
                url: this.application.config.serverdata[act_system].kompagnon_crash_report,
                dataType: 'json',
                async: true,
                data: report,
                success: function() {}
            });
        	return release_flag; //suppress error if true
		}*/
        
        /**
         * settings
         * for description check SubApp.class.js
        */
        this.settingsvalues = [
                               
                {
        			info: "show construction sites",
        			type: SETTINGS_TYPE_LIST,
        			text: "kompagnon.settings_construction.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_construction.description",
        			fieldlist: {
        				option1_all: 'kompagnon.settings_construction.option1_all',
        				option2_short: 'kompagnon.settings_construction.option2_short',
        				option3_long: 'kompagnon.settings_construction.option3_long',
        				option4_none: 'kompagnon.settings_construction.option4_none'
        			},
        			db_key: "ko_constr",
        			def_value: 'option1_all',
        			testing: false
        		},
        		
        		{
        			info: "show Tunnels Yes/No ",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_tunnel.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_tunnel.description",
        			fieldlist: {},
        			db_key: "ko_tunnel",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		},

        		{
        			info: "show IGL Yes/No ",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_igl.title",
        			icon: "",
        			description: "kompagnon.settings_igl.description",
        			fieldlist: {},
        			db_key: "ko_igl",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		},
        		
        		{
        			info: "show webcams",
        			type: SETTINGS_TYPE_LIST,
        			text: "kompagnon.settings_webcams.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_webcams.description",
        			fieldlist: {
        				option1_fav: 'kompagnon.settings_webcams.option1_fav',
        				option2_all: 'kompagnon.settings_webcams.option2_all',
        				option3_none: 'kompagnon.settings_webcams.option3_none'
        			},
        			db_key: "ko_webcams",
        			def_value: 'option1_fav',
        			testing: false
        		},
        		{
        			info: "show resting options",
        			type: SETTINGS_TYPE_LIST,
        			text: "kompagnon.settings_resting.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_resting.description",
        			fieldlist: {
        				option1_all: 'kompagnon.settings_resting.option1_all',
        				option2_areasandstation: 'kompagnon.settings_resting.option2_areasandstation',
        				option3_with_gas: 'kompagnon.settings_resting.option3_with_gas',
        				option4_none: 'kompagnon.settings_resting.option4_none'
        			},
        			db_key: "ko_rest",
        			def_value: 'option1_all',
        			testing: false
        		},
        		{
        			info: "show Junctions Yes/No ",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_junctions.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_junctions.description",
        			fieldlist: {},
        			db_key: "ko_junc",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		},
        		{
        			info: "show special toll stations Yes/No ",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_tollstat.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_tollstat.description",
        			fieldlist: {},
        			db_key: "ko_tollst",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		},
        		{
        			info: "show Hints",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_hints.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_hints.description",
        			fieldlist: {},
        			db_key: "ko_hints",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		},
        		{
        			info: "send FCD Yes/No ",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "kompagnon.settings_fcd.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "",
        			description: "kompagnon.settings_fcd.description",
        			fieldlist: {},
        			db_key: "ko_fcd",
        			def_value: CONST_ACTIVATE,
        			testing: false
        		}
        		
        	 ];        
        
    },
    
    setupApp: function(application) {    	
        this.application = application;
        if(!window.wakelocked) {
	        window.wakelocked = false; //global and dirty but quickfix and it works
	    }
        
  		//DAOs      
        this.persistence = new at.asfinag.unterwegs.persistence.RoadpointDAO(application);        
        this.streetDao = new at.asfinag.unterwegs.persistence.StreetDAO(application);
        this.tollBoothDao = new at.asfinag.unterwegs.persistence.TollboothDAO(application);
        this.tunnelDao = new at.asfinag.unterwegs.persistence.TunnelDAO(application, this);
        this.roadWorkDao = new at.asfinag.unterwegs.persistence.RoadWorkDAO(application);
        this.rastenDao = new at.asfinag.unterwegs.persistence.RastenDAO(application);
        this.junctionDao = new at.asfinag.unterwegs.persistence.JunctionDAO(application);
        this.webcamDao = new at.asfinag.unterwegs.persistence.WebcamsDAO(application);
        this.weatherDao = new at.asfinag.unterwegs.persistence.WeatherDAO(application);
        this.delayDao = new at.asfinag.unterwegs.persistence.DelayDAO(application);
        this.settingsDao = new at.asfinag.unterwegs.persistence.SettingsDAO(this.application);
        this.iglDao = new at.asfinag.unterwegs.persistence.IglDAO(application);
        
        this.positionLogger = new at.asfinag.unterwegs.kompagnon.PositionLogger(application);

        this.refreshRate = 2; //refresh/second
        this.refreshRateDynamicEventsPassiv = 5; //refresh/minutes
        this.refreshRateDynamicEventsActiv = 1; //refresh/minutes
        this.tunnelSpeed = 60; //Geschwindigkeit im Tunnel in km/h
        this.showTunnelsLongerThan = 0.5; // Km
        this.sound = false; //play sound on e.g. new events
        this.logPositionDataWeb=false;
        this.sendPositionDataToBackend = SEND_POSITION_DATA_TO_BACKEND;
        this.logPositionDataDb=false;
        this.logPositionDataAsfinag=true;
        this.enableOverlays=false;
        this.showDisclaimer=true;
        this.firstStart=true;
        var random = Math.random();
        application.uniqueId = Sha256.hash(application.getDeviceId() + (random*10000));

        var missingPois = '';
        
        this.missingPoisText = "";
        this.noPoisVoiceShown = false;

        this.application.addController([
            new at.asfinag.unterwegs.kompagnon.controller.Index(this),
            new at.asfinag.unterwegs.kompagnon.controller.GeoLocation(this, this.decimalDigits),
            new at.asfinag.unterwegs.kompagnon.controller.Tests(this)
           // new at.asfinag.unterwegs.kompagnon.controller.Visualization(this)      
        ]);
              
        this.addOverlays([
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.Disclaimer(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.NoGPS(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.OffAsfinag(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.NotYetAsfinag(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.DisclaimerHelp(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.NoDirection(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.NoJunctions(this),
                          new at.asfinag.unterwegs.kompagnon.controller.overlay.NoPois(this)
                      ]);
    }
});
config.subapps.kompagnon = new at.asfinag.unterwegs.Kompagnon('Kompagnon', 'Kompagnon', '/kompagnon');


$.Class('at.asfinag.unterwegs.kompagnon.PositionLogger', {}, {

	controller:undefined,
	init: function(application) {
    	this.application = application;
    	var db = application.config.db.db;
    	controller = this;
    	var that = this;
    	return this;
    },
    
    logAndSendCurrentParameter: function(gpsPoint, currentTime){
    	//LOCAL VARIABLES
    	var device = null;
    	//CHECK FOR PARAMETERS 
    	if(gpsPoint == null){
    		window.onerror("GPSPoint is null and won't be transmitted to server", config.serverdata[act_system].kompagnon_position_logging, "16", null, null);
    		return
    	}
    	//CHECK DEVICE
    	device = window.device;
    	if(device == null){
    		device.model = "Unknown";
    		device.version = "Unknown";
    		device.uuid = "Unknown";
    	}
    	if(device.model == null){
    		device.model = "Unknown";
    		device.uuid = "Unknown";
    	}
    	//JSON ARRAY WHICH CONTAINS THE DATA
    	var para = { "data": [{
    				 "Latitude" : "" + gpsPoint.lat, 
    				 "Longitude" : "" + gpsPoint.lon, 
    				 "GPSAccuracy" : "" + gpsPoint.accuracy, 
    				 "GPSTimestamp" : "" + new Date(currentTime), 
    				 "Appdata" : ""+ device.uuid + " | " + device.model + " | " + device.version
    				 }]
    			   };
    	//JQUERY AJAX POST CALL IMPORTANT TO ADD CONTENTTYPE OTHERWISE THINGS ARE NOT WORKING CORRECTLY
    	$.ajax({
    		type: "POST",
    		url: config.serverdata[act_system].kompagnon_position_logging,
    		contentType: "application/json",
    		data: JSON.stringify(para)
    	}).done(function(){
    		console.log("Position successfully send to backend");
    	}).error(function(){
    		window.onerror("Unable to send position data to server", config.serverdata[act_system].kompagnon_position_logging, "30", null, null);
    	});
    },
    
    log: function(gpsPoint, direction, km, roadId) {
    	var that = this;
    	var db = this.application.config.db.db;
    	var deviceId = that.application.uniqueId;
    	if(direction==undefined) {
    		direction = -1;
    	}
    	if(roadId==undefined) {
    		roadId = -1;
    	}

    	console.log("" + config.serverdata[act_system].kompagnon_logging);
    	
    	$.ajax({
    		type: 'POST',
    		url: config.serverdata[act_system].kompagnon_logging,
    		dataType: 'json',
    		data: '{data : [' + JSON.stringify({'UserId': that.application.uniqueId, 'Latitude': gpsPoint.lat, 'Longitude': gpsPoint.lon, 
    		        'RoadId': roadId, 'KM':km, 'VehicleSpeed': gpsPoint.speed, 'Heading':gpsPoint.heading,
					'Direction': direction, 'GPSAccuracy':gpsPoint.accuracy, 'GPSTimestamp' :gpsPoint.timestamp,'Appdata':'', 'format': 'json' })+']}',
    		success: function(data) {
    			console.debug('position data logged successfully');
    		},
    		error: function(a, b, c) {
		    	db.transaction(
					function(tx) {
						tx.executeSql('INSERT INTO positiondata (Latitude, Longitude, RoadId, KM, VehicleSpeed, Heading, Direction, GPSAccuracy, GPSTimestamp, Appdata) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);', 
										[gpsPoint.lat, gpsPoint.lon, 
					    		         roadId, km, gpsPoint.speed, gpsPoint.heading, direction, gpsPoint.accuracy, gpsPoint.timestamp,''
					    		        ]
	    		        );
					}, 
					function(e) {
						console.debug('error saving position data to db, message: "' + e.message);
						return true;
					},
					
					function(tx, result) {
						//console.debug('positiondata saved to db');
						return false;
					}
				);
    		}
    	});
    },
    
    sendDbLogToJson: function(callback) {
    	var that = this;
    	that.getAllLogsFromDb(
    		function(positionDatas){
    			that.logToJSON(positionDatas,
    				function(){
    					callback();
    				}
    			);
    		}
    	);
    },
    
    sendLogToAsfinag: function(callback) {
    	var that = this;
    	that.getAllLogsFromDb(
    		function(positionDatas){
    			that.sendDBLogToAsfinag(positionDatas,
    				function(success){
    					console.log('sent log to asfinag: ' + success);
    					if(success) {
    						console.log('removing logs from internal db');
	    					that.removeLogFromDb(function() {
		    					callback();
	    					});
	    				}
    				}
    			);
    		}
    	);
    },
    
    getAllLogsFromDb: function(callback){
    	
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'Select * from positiondata;';
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result);
					return false;
				} else {
					callback([]);
				}
				return false;
			},
			function(error) {
				console.log('PositionLogger: error in getAllLogsFromDb: ' + error.message);
			});
    	});	
    },
    
    logToAsfinag: function(gpsPoint, direction, km, roadId) {
    	var that = this;
    	var db = this.application.config.db.db;
    	var deviceId = that.application.uniqueId;
    	if(direction==undefined) {
    		direction = -1;
    	}
    	if(roadId==undefined) {
    		roadId = -1;
    	}
    	
    	
    	//changed URL CALL
    	//var url = config.serverdata[act_system].logging.urlasfinag; //old
    	var url = config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_logging;
    	
    	$.ajax({
    		type: 'POST',
    		url: url,
    		dataType: 'json',
    		data: 'request={data : [' + JSON.stringify({'UserId': that.application.uniqueId, 'Latitude': gpsPoint.lat, 'Longitude': gpsPoint.lon, 
    		        'RoadId': roadId, 'KM':km, 'VehicleSpeed': gpsPoint.speed, 'Heading':gpsPoint.heading,
					'Direction': direction, 'GPSAccuracy':gpsPoint.accuracy, 'GPSTimestamp' :gpsPoint.timestamp,'Appdata':'', 'format': 'json' })+']}',
    		success: function(data) {
    			console.debug('asfinag position data logged successfully');
    		},
    		error: function(a, b, c) {
    			console.log('asfinag logging error: ' + b + ', ' + c);
    			that.logToDb(gpsPoint, direction, km, roadId);
    		}
    	});
    },
    
    
    
    
    
    logToJSON: function(positionDatas,callback){
    	var arr = [];
    	var that = this;
    	if(positionDatas!=undefined && positionDatas.rows!=undefined) {
			for (var i=0; i<positionDatas.rows.length; i++) {
				var direction = positionDatas.rows.item(i).Direction;
				var roadId = positionDatas.rows.item(i).RoadId;
				if(roadId ==undefined||roadId=='undefined') {
					roadId = -1;
				}
				if(direction==undefined||direction=='undefined') {
					direction = -1;
				}
				arr.push({ 'UserId': that.application.uniqueId, 'Latitude': positionDatas.rows.item(i).Latitude, 'Longitude': positionDatas.rows.item(i).Longitude, 
			        'RoadId': roadId, 'KM':positionDatas.rows.item(i).KM, 'VehicleSpeed': positionDatas.rows.item(i).VehicleSpeed, 'Heading':positionDatas.rows.item(i).Heading,
					'Direction': direction, 'GPSAccuracy':positionDatas.rows.item(i).GPSAccuracy, 'GPSTimestamp' :new Date(positionDatas.rows.item(i).GPSTimestamp),'Appdata':'',
					});
				
			}
    	}
    	$.ajax({
    		type: 'POST',
    		url: config.serverdata[act_system].kompagnon_logging,
    		cache:false,
    		dataType: 'json',
    		data: '{data : ' + JSON.stringify(arr)+'}',
    		success: function(data) {
    			console.debug('position data logged successfully');
    			if(callback != undefined){
    				callback();
    			}
    		},
    		error: function(jqXHR, textStatus, errorThrown) {
    			console.log('error sending position data, message: "' + textStatus + ', ' + errorThrown);
    			callback();
    		}
		});
    },
    
    sendDBLogToAsfinag: function(positionDatas,callback){
    	var arr = [];
    	var that = this;
    	if(positionDatas!=undefined && positionDatas.rows!=undefined) {
			for (var i=0; i<positionDatas.rows.length; i++) {
				var direction = positionDatas.rows.item(i).Direction;
				var roadId = positionDatas.rows.item(i).RoadId;
				if(roadId ==undefined||roadId=='undefined'||roadId=='null'||roadId==null) {
					roadId = -1;
				}
				if(direction==undefined||direction=='undefined'||direction=='null'||direction==null) {
					direction = -1;
				}
				var heading = positionDatas.rows.item(i).Heading;
				if(heading==undefined||heading=='undefined'||heading=='null'||heading==null) {
					heading = -1;
				}
				var speed = positionDatas.rows.item(i).VehicleSpeed;
				if(speed==undefined||speed=='undefined'||speed=='null'||speed==null) {
					speed = -1;
				}
				
				arr.push({ 'UserId': that.application.uniqueId, 'Latitude': positionDatas.rows.item(i).Latitude, 'Longitude': positionDatas.rows.item(i).Longitude, 
			        'RoadId': roadId, 'KM':positionDatas.rows.item(i).KM, 'VehicleSpeed': speed, 'Heading':heading,
					'Direction': direction, 'GPSAccuracy':positionDatas.rows.item(i).GPSAccuracy, 'GPSTimestamp' :new Date(positionDatas.rows.item(i).GPSTimestamp),'Appdata':'SamsungA',
					});
				
			}
    	}
    	//changed URL CALL
    	//var url = config.serverdata[act_system].logging.urlasfinag
    	var url = config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_logging;
    	//console.log('logging url: ' + url);
    	var dataString = 'request={"data" : ' + JSON.stringify(arr)+'}';
    	//console.log('data to log: ' + dataString);
    	$.ajax({
    		type: 'POST',
    		url: url,
    		cache:false,
    		dataType: 'json',
    		data: dataString,
    		success: function(data) {
    			var success = true;
    			if(data.status=='NOK') {
    				success = false;
    				console.log('FCD backend said NOK');
    			} else {
    				console.debug('position data sent to asfinag successfully: ' + data.status);
    			}
    			if(callback != undefined){
    				callback(success);
    			}
    		},
    		error: function(jqXHR, textStatus, errorThrown) {
    			console.log('error sending position data, message: "' + textStatus + ', ' + errorThrown);
    			callback(false);
    		}
		});
    },
    
    
    logToDb: function(gpsPoint, direction, km, roadId) {
    	var that = this;
    	var db = this.application.config.db.db;
    	var deviceId = that.application.uniqueId;
    	db.transaction(
			function(tx) {
				tx.executeSql('INSERT INTO positiondata (Latitude, Longitude, RoadId, KM, VehicleSpeed, Heading, Direction, GPSAccuracy, GPSTimestamp, Appdata) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?,?);', 
								[gpsPoint.lat, gpsPoint.lon, 
			    		         roadId, km, gpsPoint.speed, gpsPoint.heading, direction, gpsPoint.accuracy, gpsPoint.timestamp,'fromBrowser'
			    		        ]
		        );
			}, 
			function(e) {
				console.log('error saving position data to db, message: "' + e.message);
				return true;
			},
			
			function(tx, result) {
				return false;
			}
		);
    },
    
    removeLogFromDb: function(callback){
    	var db = this.application.config.db.db;
    	db.transaction(
			function(tx) {
				tx.executeSql('DELETE FROM positiondata;');
			}, 
			function(e) {
				console.debug('error removing positiondata from db, message: "' + e.message);
				callback();
			},
			
			function(tx, result) {
				console.debug('Succesfully removed  positiondata from db');
				callback();
			}
		);
    },
    
    resetLog: function(callback) {
		var db = this.application.config.db.db;
		var SQL_CREATE_POSITIONDATA = 'CREATE TABLE IF NOT EXISTS positiondata(' +
        										'ID integer PRIMARY KEY AUTOINCREMENT, ' +
												'Latitude real, '+ 
												'Longitude real, '+ 
												'RoadId integer, '+ 
												'KM real, '+ 
												'VehicleSpeed integer, '+ 
												'Heading real, '+ 
												'Direction integer, '+ 
												'GPSAccuracy integer,'+ 
												'GPSTimestamp timestamp,'+ 
												'Appdata varchar(255)'+
        										')';
    	db.transaction(
			function(tx) {
				tx.executeSql('DROP TABLE positiondata;');
			}, 
			function(e) {
				console.debug('error dropping table positiondata from db, message: ' + e.message);
				return true;
			},
			
			function(tx, result) {
				console.debug('dropped positiondatatable');
			}
		);
		
		db.transaction(
			function(tx) {
				tx.executeSql(SQL_CREATE_POSITIONDATA);
			}, 
			function(e) {
				console.debug('error creating table positiondata from db, message: ' + e.message);
				return true;
			},
			
			function(tx, result) {
				console.debug('created positiondatatable');
			}
		);
		callback();
		
		
    }

});


/*
 (c) 2011-2014, Vladimir Agafonkin
 SunCalc is a JavaScript library for calculating sun/mooon position and light phases.
 https://github.com/mourner/suncalc
*/

(function () { 'use strict';

// shortcuts for easier to read formulas

var PI   = Math.PI,
    sin  = Math.sin,
    cos  = Math.cos,
    tan  = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    rad  = PI / 180;

// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas


// date/time constants and conversions

var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

function toJulian(date) { return date.valueOf() / dayMs - 0.5 + J1970; }
function fromJulian(j)  { return new Date((j + 0.5 - J1970) * dayMs); }
function toDays(date)   { return toJulian(date) - J2000; }


// general calculations for position

var e = rad * 23.4397; // obliquity of the Earth

function rightAscension(l, b) { return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l)); }
function declination(l, b)    { return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l)); }

function azimuth(H, phi, dec)  { return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi)); }
function altitude(H, phi, dec) { return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H)); }

function siderealTime(d, lw) { return rad * (280.16 + 360.9856235 * d) - lw; }


// general sun calculations

function solarMeanAnomaly(d) { return rad * (357.5291 + 0.98560028 * d); }

function eclipticLongitude(M) {

    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center
        P = rad * 102.9372; // perihelion of the Earth

    return M + C + P + PI;
}

function sunCoords(d) {

    var M = solarMeanAnomaly(d),
        L = eclipticLongitude(M);

    return {
        dec: declination(L, 0),
        ra: rightAscension(L, 0)
    };
}


var SunCalc = {};


// calculates sun position for a given date and latitude/longitude

SunCalc.getPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c  = sunCoords(d),
        H  = siderealTime(d, lw) - c.ra;

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: altitude(H, phi, c.dec)
    };
};


// sun times configuration (angle, morning name, evening name)

var times = SunCalc.times = [
    [-0.833, 'sunrise',       'sunset'      ],
    [  -0.3, 'sunriseEnd',    'sunsetStart' ],
    [    -6, 'dawn',          'dusk'        ],
    [   -12, 'nauticalDawn',  'nauticalDusk'],
    [   -18, 'nightEnd',      'night'       ],
    [     6, 'goldenHourEnd', 'goldenHour'  ]
];

// adds a custom time to the times config

SunCalc.addTime = function (angle, riseName, setName) {
    times.push([angle, riseName, setName]);
};


// calculations for sun times

var J0 = 0.0009;

function julianCycle(d, lw) { return Math.round(d - J0 - lw / (2 * PI)); }

function approxTransit(Ht, lw, n) { return J0 + (Ht + lw) / (2 * PI) + n; }
function solarTransitJ(ds, M, L)  { return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L); }

function hourAngle(h, phi, d) { return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d))); }

// returns set time for the given sun altitude
function getSetJ(h, lw, phi, dec, n, M, L) {

    var w = hourAngle(h, phi, dec),
        a = approxTransit(w, lw, n);
    return solarTransitJ(a, M, L);
}


// calculates sun times for a given date and latitude/longitude

SunCalc.getTimes = function (date, lat, lng) {

    var lw = rad * -lng,
        phi = rad * lat,

        d = toDays(date),
        n = julianCycle(d, lw),
        ds = approxTransit(0, lw, n),

        M = solarMeanAnomaly(ds),
        L = eclipticLongitude(M),
        dec = declination(L, 0),

        Jnoon = solarTransitJ(ds, M, L),

        i, len, time, Jset, Jrise;


    var result = {
        solarNoon: fromJulian(Jnoon),
        nadir: fromJulian(Jnoon - 0.5)
    };

    for (i = 0, len = times.length; i < len; i += 1) {
        time = times[i];

        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);
        Jrise = Jnoon - (Jset - Jnoon);

        result[time[1]] = fromJulian(Jrise);
        result[time[2]] = fromJulian(Jset);
    }

    return result;
};


// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas

function moonCoords(d) { // geocentric ecliptic coordinates of the moon

    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude
        M = rad * (134.963 + 13.064993 * d), // mean anomaly
        F = rad * (93.272 + 13.229350 * d),  // mean distance

        l  = L + rad * 6.289 * sin(M), // longitude
        b  = rad * 5.128 * sin(F),     // latitude
        dt = 385001 - 20905 * cos(M);  // distance to the moon in km

    return {
        ra: rightAscension(l, b),
        dec: declination(l, b),
        dist: dt
    };
}

SunCalc.getMoonPosition = function (date, lat, lng) {

    var lw  = rad * -lng,
        phi = rad * lat,
        d   = toDays(date),

        c = moonCoords(d),
        H = siderealTime(d, lw) - c.ra,
        h = altitude(H, phi, c.dec);

    // altitude correction for refraction
    h = h + rad * 0.017 / tan(h + rad * 10.26 / (h + rad * 5.10));

    return {
        azimuth: azimuth(H, phi, c.dec),
        altitude: h,
        distance: c.dist
    };
};


// calculations for illumination parameters of the moon,
// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and
// Chapter 48 of "Astronomical Algorithms" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.

SunCalc.getMoonIllumination = function (date) {

    var d = toDays(date),
        s = sunCoords(d),
        m = moonCoords(d),

        sdist = 149598000, // distance from Earth to Sun in km

        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),
        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),
        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -
                cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));

    return {
        fraction: (1 + cos(inc)) / 2,
        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,
        angle: angle
    };
};


// export as AMD module / Node module / browser variable
if (typeof define === 'function' && define.amd) define(SunCalc);
else if (typeof module !== 'undefined') module.exports = SunCalc;
else window.SunCalc = SunCalc;

}());



var SunCalc = require('./suncalc'),
    t = require('tape');

function near(val1, val2, margin) {
    return Math.abs(val1 - val2) < (margin || 1E-15);
}

var date = new Date('2013-03-05UTC'),
    lat = 50.5,
    lng = 30.5;

var testTimes = {
    solarNoon: '2013-03-05T10:10:57Z',
    nadir: '2013-03-04T22:10:57Z',
    sunrise: '2013-03-05T04:34:57Z',
    sunset: '2013-03-05T15:46:56Z',
    sunriseEnd: '2013-03-05T04:38:19Z',
    sunsetStart: '2013-03-05T15:43:34Z',
    dawn: '2013-03-05T04:02:17Z',
    dusk: '2013-03-05T16:19:36Z',
    nauticalDawn: '2013-03-05T03:24:31Z',
    nauticalDusk: '2013-03-05T16:57:22Z',
    nightEnd: '2013-03-05T02:46:17Z',
    night: '2013-03-05T17:35:36Z',
    goldenHourEnd: '2013-03-05T05:19:01Z',
    goldenHour: '2013-03-05T15:02:52Z'
};

t.test('getPosition returns azimuth and altitude for the given time and location', function (t) {
    var sunPos = SunCalc.getPosition(date, lat, lng);

    t.ok(near(sunPos.azimuth, -2.5003175907168385), 'azimuth');
    t.ok(near(sunPos.altitude, -0.7000406838781611), 'altitude');
    t.end();
});

t.test('getTimes returns sun phases for the given date and location', function (t) {
    var times = SunCalc.getTimes(date, lat, lng);

    for (var i in testTimes) {
        t.equal(times[i].toUTCString(), new Date(testTimes[i]).toUTCString(), i);
    }
    t.end();
});

t.test('getMoonPosition returns moon position data given time and location', function (t) {
    var moonPos = SunCalc.getMoonPosition(date, lat, lng);

    t.ok(near(moonPos.azimuth, -0.9783999522438226), 'azimuth');
    t.ok(near(moonPos.altitude, 0.006969727754891917), 'altitude');
    t.ok(near(moonPos.distance, 364121.37256256194), 'distance');
    t.end();
});

t.test('getMoonIllumination returns fraction and angle of moon\'s illuminated limb and phase', function (t) {
    var moonIllum = SunCalc.getMoonIllumination(date);

    t.ok(near(moonIllum.fraction, 0.4848068202456373), 'fraction');
    t.ok(near(moonIllum.phase, 0.7548368838538762), 'phase');
    t.ok(near(moonIllum.angle, 1.6732942678578346), 'angle');
    t.end();
});


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.RoadWorkDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		//gets called on init
	},

	//get all RoadWorks from asfinag if timestamp is not current	
    loadRoadWorkData: function() {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	
    	
    	var data = {};
    	
    	//var urlTimestamp = encodeURI(config.ods.url + '/baustellen0200timestamp.json?username=' + config.ods.user + '&password=' + config.ods.password);
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_roadwork_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        console.debug('RoadWorkDAO: checking database');
			        db.transaction(checkTimestamp, function(e) { 
			        									console.error('ERROR: ' + e.message); 
			        							   }, 
			        							   function(tx) {
											         /*debug_flag && console.info('transaction1 done...');*/ });				
												   
				} else {
					// timestamp is empty / timestamp-Backend is broken
					that.loadData();
				}
			},
			error: function() {
				that.loadData();
			}
    	});
    	
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		var language = config.language;
    		tx.executeSql(sql, ['RoadWork_' + language], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == that.finishDate.getTime()) {
    				// RoadWork is up to date...
    				that.status = DATA_STATUS_READY;
    				console.log('RoadWork finished checking timestamp - timestamp ok');
    				
    			} else {
    				// update RoadWork:
    				console.log('RoadWork finished checking timestamp - timestamp not up to date');
    				that.loadData();
    			}
    			return false;
    		});
    	}
    },
    
    loadData: function() {
    		
		console.debug('RoadWorkDAO:loadData...');
		var url;
		var language = config.language;
		/*if (language == 'de-AT') {
    			url = encodeURI(config.ods.url + 'baustellenatDE0200.json?username=' + config.ods.user + '&password=' + config.ods.password);
    		}
    		else
    		{
    			url = encodeURI(config.ods.url + 'baustellenenUS0200.json?username=' + config.ods.user + '&password=' + config.ods.password);
    		}*/
		//url = encodeURI(config.ods.url + 'apppos.json?username=' + config.ods.user + '&password=' + config.ods.password);
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_roadwork_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
		
		
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('RoadWorkDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('RoadWorkDAO: success');
				if (that.finishDate != undefined) {
					data.timestamp = that.finishDate.getTime();
				} else {
					data.timestamp = new Date().getTime();
				}
    				
				function insertData(tx) {
					console.debug('RoadWorkDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					console.debug('RoadWorkDAO: delete timestamps, RoadWork, insert RoadWork');
					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['RoadWork%'], function (tx, res) {
						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['RoadWork_' + language, data.timestamp], function(tx, result) {
							tx.executeSql('DELETE FROM roadwork_de_at', [], function (tx, res) {
			    					tx.executeSql('DELETE FROM roadwork_en_us', [], function (tx, res) {
										var sqlInsertData = 'INSERT OR IGNORE INTO '+ getTablenameForCurrentLanguage('roadwork') + ' (ID, ROAD_ID, DIRECTION, BEGINMETER_RFB1, ENDMETER_RFB1, BEGINMETER_RFB2, ENDMETER_RFB2, REASON, STARTTIME, ENDTIME, BEGIN_TIME, END_TIME, SPEED_LIMIT, RAMPENBAUSTELLE )'+ 
																					'VALUES(?, ?,      ?, 			?, 			?, 			?, 				?, 			?, 			?, 			?,?,?,?,?)';
						 
						    	    	console.debug('number of items to insert: ' + data.length);
					    	    		for(var i in data) {    
					    	    			var rw = data[i];
					    	  			    	    			
					    	    			if(rw.ID != undefined){
					    	    				
					    	    				//fix for iOS
					    	    				//iOS is using a different format of date
					    	    				function getTime(time){
					    	    				
					    	    					var dateArray = time.split(' ');
                							  		var year = dateArray[0].split('-');
               								  		var time = dateArray[1].split(':');
					    	    					return new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]).getTime();
					    	    				}
				
					    	    				tx.executeSql(sqlInsertData, [rw.ID, rw.ROAD_ID, rw.DIRECTION, rw.BEGINMETER_RFB1, rw.ENDMETER_RFB1, rw.BEGINMETER_RFB2, rw.ENDMETER_RFB2, 
					    	    												rw.REASON, getTime(rw.STARTTIME), getTime(rw.ENDTIME), rw.BEGIN_TIME, rw.END_TIME, rw.SPEED_LIMIT, rw.RAMPENBAUSTELLE ],
					    	    					(function(i) {
					    	    					})(i));
					    	    			}
					    	    		}
					    	    });		
							});
						});
					});
					
				}
    				
				function errorCB (error) {
					console.error('ERROR2: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				
				function successCB() {
					setTimeout(function () {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				
				// Check if the returning data from ODS is not empty
				if(data != ''){
					db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				}else{
					that.status = DATA_STATUS_READY;	
				}
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('RoadWorkDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			}
		});
		
   	},
   	
   	/*
     *	Direction: Richtungsfahrbahn (1,2)
     *  roadID: Straße ( Westautobahn, ...)
     *  kmFrom: in Kilometer, Aktueller Standort
     * 	kmTo: in Kilometer, bis zu welchem Kilometer man sehen möchte
     */
    
   	getRoadWorksFromKmToKmAtTime: function(currentDirection, roadId, kmFrom, kmTo, date, show, callback) {
   		if(show != true){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM '+ getTablenameForCurrentLanguage('roadwork') +' WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((BEGINMETER_RFB1 >= ? AND BEGINMETER_RFB1 <= ?) OR (BEGINMETER_RFB1 <= ? AND ENDMETER_RFB1 >= ?)) AND (STARTTIME + BEGIN_TIME <= ?) AND (ENDTIME + END_TIME >= ?)';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM '+ getTablenameForCurrentLanguage('roadwork') +' WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((BEGINMETER_RFB2 <= ? AND BEGINMETER_RFB2 >= ?) OR (BEGINMETER_RFB2 >= ? AND ENDMETER_RFB2 <= ?)) AND (STARTTIME + BEGIN_TIME <= ?) AND (ENDTIME + END_TIME >= ?)';
	    	}
	    	
//	    	console.log(kmFrom  + " : " + kmTo );
//	    	console.log(sql + " : " + roadId + " : " + 1000*kmFrom + " : " + 1000*kmTo + " : " + 1000*kmFrom + " : " + 1000*kmFrom);
	    	if(sql!=undefined) {
		    	db.transaction(function(tx) {
		    		//console.log(sql);
		    		//console.log(1000*kmFrom);
		    		//console.log(1000*kmTo)
					tx.executeSql(sql, [roadId, currentDirection, 1000*kmFrom, 1000*kmTo,1000*kmFrom, 1000*kmFrom,date.getTime(),date.getTime()], function(tx, result) {
						if(result.rows.length > 0) {
							callback(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getRoadWorksFromKmToKmAtTime: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
		    	});	
	    	} else {
	    		callback([]);
	    	}
    	}
    },
    
    getAllRoadworks: function(callback) {
	var db = this.application.config.db.db;
	var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('roadwork');
	
	db.transaction(function(tx) {
		tx.executeSql(sql, [], function(tx, result) {
			if(result.rows.length > 0) {
				callback(result.rows);
			} else {
				callback([]);
			}
		});
	});	
}
    
});

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.TunnelDAO', {}, {

	init: function(application, subapp) {
		this.application = application;
		this.subapp = subapp;
	},
	
	update: function(callback) {
		var that = this;
		
	},

	//get all Tunnels from asfinag if timestamp is not current	
    loadTunnelData: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	//var urlTimestamp = encodeURI(config.ods.url + 'tunnel0200timestamp.json?username=' + config.ods.user + '&password=' + config.ods.password);
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_tunnel_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	//console.log(urlTimestamp);
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        console.debug('TunnelDAO: checking database');
			        db.transaction(checkTimestamp, function(e) { 
			        									console.error('ERROR: ' + e.message); 
			        							   }, 
			        							   function(tx) {
											         /*debug_flag && console.info('transaction1 done...');*/ });				
												  
				} else {
					// timestamp is empty / timestamp-Backend is broken
					that.loadData();
				}
			},
			error: function() {
				that.loadData();
			}
    	});
    	
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		tx.executeSql(sql, ['tunnel'], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == that.finishDate.getTime()) {
    				// Tunnel is up to date...
    				that.status = DATA_STATUS_READY;
    				console.log('Tunnel finished checking timestamp - timestamp ok');
    				
    			} else {
    				// update Tunnel:
    				console.log('Tunnel finished checking timestamp - timestamp not up to date');
    				that.loadData();
    				
    			}
    			return false;
    		});
    	}
    },
    
    loadData: function() {
    		
		console.debug('TunnelDAO:loadData...');
		//var url = encodeURI(config.ods.url + 'tunnel0200.json?username=' + config.ods.user + '&password=' + config.ods.password);
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_tunnel_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
		
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('TunnelDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('TunnelDAO: success, Time: ' + that.finishDate);
				if (that.finishDate != undefined) {
					data.timestamp = that.finishDate.getTime();
				} else {
					data.timestamp = new Date().getTime();
				}
    				
				function insertData(tx) {
					console.debug('TunnelDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					console.debug('TunnelDAO: delete timestamps, Tunnel, insert Tunnel');
					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['tunnel'], function (tx, res) {
						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['tunnel', data.timestamp], function(tx, result) {
							tx.executeSql('DELETE FROM tunnel', [], function (tx, res) {
								var sqlInsertData = 'INSERT OR IGNORE INTO tunnel (ID,NAME,ROAD_ID,LENGTH_RFB1,LENGTH_RFB2,KM_FROM_RFB1,KM_TO_RFB1, KM_FROM_RFB2, KM_TO_RFB2, ONCOMING_TRAFFIC, DIRECTION )'+ 
																			'VALUES(?, ?,      ?, 			?, 			?, 			?, 				?, 			?, 			?, 			?,?)';
				 
				    	    	console.debug('number of items to insert: ' + data.length);
			    	    		for(var i in data) {    
			    	    			var t = data[i];
			    	    			
			    	    			
			    	    			if(t.ID != undefined){
			    	    				//TODO warte noch auf Direction von der Schnittstelle
			    	    				tx.executeSql(sqlInsertData, [t.ID, t.NAME, t.ROAD_ID, t.LENGTH_RFB1, t.LENGTH_RFB2, t.KM_FROM_RFB1, t.KM_TO_RFB1, t.KM_FROM_RFB2, t.KM_TO_RFB2, t.ONCOMING_TRAFFIC, t.DIRECTION],
			    	    					(function(i) {
			    	    					})(i));
			    	    			}
			    	    		}
							});
						});
					});
					
				}
    				
				function errorCB (error) {
					console.error('ERROR2: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				
				function successCB() {
					setTimeout(function () {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				

				// Check if the returning data from ODS is not empty
				if(data != ''){
					db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				}else{
					that.status = DATA_STATUS_READY;
				}
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('TunnelDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				
			}
		});
		
   	},
   	
	/*
     *	Direction: Richtungsfahrbahn (1,2)
     *  roadID: Straße ( Westautobahn, ...)
     *  kmFrom: in Kilometer, Aktueller Standort
     * 	kmTo: in Kilometer, bis zu welchem Kilometer man sehen möchte
     */
    
    getTunnelsFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show != true){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM  tunnel WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((KM_FROM_RFB1 >= ? AND KM_FROM_RFB1 <= ?) OR (KM_FROM_RFB1 <= ? AND KM_TO_RFB1 >= ?)) AND (KM_TO_RFB1 - KM_FROM_RFB1 > ' + this.subapp.showTunnelsLongerThan +' )';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM tunnel WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((KM_FROM_RFB2 <= ? AND KM_FROM_RFB2 >= ?) OR (KM_FROM_RFB2 >= ? AND KM_TO_RFB2 <= ?)) AND (KM_FROM_RFB2 - KM_TO_RFB2 > '+ this.subapp.showTunnelsLongerThan +' )';
	    	}
	    	
	    	//console.log(sql+ " : " +roadId+ " : " +currentDirection+ " : " +this.subapp.showTunnelsLongerThan);
	    	if(sql!=undefined) {
				db.transaction(function(tx) {
					tx.executeSql(sql, [roadId, currentDirection, kmFrom, kmTo, kmFrom, kmFrom], function(tx, result) {
						if(result.rows.length > 0) {
							callback(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getTunnelsFromKmToKm: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
				});	
	    	} else {
	    		callback([]);
	    	}
    	}
    },
   	
   	/*
     *	Direction: Richtungsfahrbahn (1,2)
     *  roadID: Straße ( Westautobahn, ...)
     *  km: aktuelle Kilometrierung
     */
    
    getCurrentTunnel: function(currentDirection, roadId, km, callback) {
    	var db = this.application.config.db.db;
    	var sql;
    	if(currentDirection == 1){
    		sql = 'SELECT * FROM tunnel WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND (KM_FROM_RFB1 <= ?) AND (KM_TO_RFB1 >= ?)';
    	}else if(currentDirection == 2){
    		sql = 'SELECT * FROM tunnel WHERE (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND (KM_FROM_RFB2 >= ?) AND (KM_TO_RFB2 <= ?)';
    	}
    	if(sql!=undefined) {
	    	db.transaction(function(tx) {
				tx.executeSql(sql, [roadId, currentDirection, km, km], function(tx, result) {
					if(result.rows.length > 0) {
						callback(result.rows);
					} else {
						callback(undefined);
					}
				},
				function(transaction, error) {
					console.log('error in getCurrentTunnel: ' + error.message + ' code: ' + error.code);
					callback(undefined);
				});
	    	});	
	    } else {
	    	callback(undefined);
	    }
    },
   	
    getAllTunnel: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM tunnel';
    	
    	db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
    	});	
    }
    
});

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.TollboothDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var dateFromTimestampTollbooths = 0;
    	var insertData = [];
		insertData.push(['1', 'Mautstelle Bosruck','Reithtal 38','8940','Liezen','+43 (0) 50108-26700','+43 (0) 50108-26720','info@asfinag.at','26','A 9 Pyhrn Autobahn','13','1','56.718','65.7','66.774','8','14.3233914','47.58147591','Spital am Pyhrn','30']);
		insertData.push(['2', 'Mautstelle Gleinalm','Vorderlainsach 34','8770','St. Michael i.O.','+43 (0) 50108-26300','+43 (0) 50108-26320','info@asfinag.at','26','A 9 Pyhrn Autobahn','13','1','132.63','134.811','157.123','8','15.02977083','47.3235365','KN St. Michael','40']);
		insertData.push(['3', 'Mautstelle Rosenbach','Rosenbach 133','9183','Rosenbach','+43 (0) 50 108-27500','+43 (0) 50 108-27520','info@asfinag.at','28','A 11 Karawanken Autobahn','17','1','11.536','14.985','21.243','0','14.0302226','46.53329381','St. Jakob/Rosental','59']);
		insertData.push(['4', 'Mautstelle Schönberg','Brennerautobahn 4','6141','Schönberg im Stubaital','+43 (0) 50108-39000','+43 (0) 50108-39020','info@asfinag.at','30','A 13 Brenner Autobahn','21','1','10.08','10.6','19.23','9','11.40312485','47.18371963','Schönberg Stubaital','10']);
		insertData.push(['5', 'Mautstelle St. Jakob','Betriebszentrale','6580','St. Anton am Arlberg','+43 (0) 50108-38400','+43 (0) 50108-38420','info@asfinag.at','10','S 16 Arlberg-Schnellstraße','45','1','23.573','23.6','39.626','7','10.31463088','47.14171335','St. Anton/Arlberg','19']);
		insertData.push(['6', 'Mautstelle Bosruck','Reithtal 38','8940','Liezen','+43 (0) 50108-26700','+43 (0) 50108-26720','info@asfinag.at','26','A 9 Pyhrn Autobahn','13','2','66.774','65.7','56.718','8','14.32376359','47.58148844','Ardning / Admont','30']);
		insertData.push(['7', 'Mautstelle Gleinalm','Vorderlainsach 34','8770','St. Michael i.O.','+43 (0) 50108-26300','+43 (0) 50108-26320','info@asfinag.at','26','A 9 Pyhrn Autobahn','13','2','157.123','134.811','132.63','8','15.02999552','47.32356943','Übelbach','40']);
		insertData.push(['8', 'Mautstelle Schönberg','Brennerautobahn 4','6141','Schönberg im Stubaital','+43 (0) 50108-39000','+43 (0) 50108-39020','info@asfinag.at','30','A 13 Brenner Autobahn','21','2','19.23','10.6','10.08','9','11.4032592','47.18397627','Matrei Steinach','10']);
		insertData.push(['9', 'Mautstelle St. Jakob','Betriebszentrale','6580','St. Anton am Arlberg','+43 (0) 50108-38400','+43 (0) 50108-38420','info@asfinag.at','10','S 16 Arlberg-Schnellstraße','45','2','39.626','23.6','23.573','9','10.31466424','47.14156702','Langen/Arlberg','19']);
		insertData.push(['10', 'Mautstelle St. Michael','Höf 55','5582','St. Michael i.L.','+43 (0) 50108-25400','+43 (0) 50108-25420','info@asfinag.at','27','A 10 Tauern Autobahn','14','1','92.163','104.251','113.113','4','13.60858666','47.09498718','Zederhaus','50']);
		insertData.push(['11', 'Mautstelle St. Michael','Höf 55','5582','St. Michael i.L.','+43 (0) 50108-25400','+43 (0) 50108-25420','info@asfinag.at','27','A 10 Tauern Autobahn','14','2','113.113','104.251','92.163','6','13.60929253','47.09550808','Rennweg Katschberg','50']);
		//init loading
		db.transaction(checkTimestampTollbooths,loadTollboothError, callback);
		
    	function loadTollBooths(tx) {

	    	var insertDataSql = 'INSERT OR IGNORE INTO TOLLBOOTHS(ID, NAME, ADDRESS, ZIP, CITY, PHONE, FAX, EMAIL, ' +
						'TOLLBOOTH_ID, INFO, ROAD_ID, DIRECTION, ROAD_KM_FROM, ROAD_KM_TOLLSTATION, ROAD_KM_TO, '+ 
						'PROVINCE_ID, LON_WGS84, LAT_WGS84, LAST_EXIT_JUNCTION, NUMMER) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);';

			var successCount = 0;
			tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['tollbooths'], function (tx, result) {
				tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['tollbooths', new Date().getTime()], 
					function(tx, result) {
						tx.executeSql('DELETE FROM TOLLBOOTHS', [], function (tx, result) {
							$.each(insertData, function(index,value) {
			    				tx.executeSql(insertDataSql, value, function() {
			    										   		//console.log('tollbooth inserted');
			    										   }, loadTollboothError
											   );
							});
							console.log('tollbooths inserted...');
							that.status = DATA_STATUS_READY;
						});
					}, 
					function(transaction, error) {
						console.log("TollBoothDAO error on loadTollBooths: " + error.message);
						that.status = DATA_STATUS_ERROR_WHILE_LOADING;
					}
				);
			});
    	}
    	
    	function loadTollboothError(transaction, error) {
    		console.log("error loading tollbooths, errorMessage");
    		that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    		return true;
    	}
    	
    	function checkTimestampTollbooths(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		tx.executeSql(sql, ['tollbooths'], function(tx, result) {
    			if(result.rows.length == 1) {
    				// data is up to date
    				that.status = DATA_STATUS_READY;
    				
    			} else {
    				// load data
    				loadTollBooths(tx);
    			}
    			return false;
    		});
    		//setTimeout(callback, 500);//give the tollbooths 500ms to insert
    	}
    	
    },
    
    /*
     *	Direction: Richtungsfahrbahn (1,2)
     *  roadID: Straße ( Westautobahn, ...)
     *  kmFrom: in Kilometer, Aktueller Standort
     * 	kmTo: in Kilometer, bis zu welchem Kilometer man sehen möchte
     */
    
    getTollBoothsFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show != true){
    		callback([]);
    	}else{
    	
	    	var db = this.application.config.db.db;
	    	var sql;
	    	
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM tollbooths WHERE (ROAD_ID = ?) AND (DIRECTION = ?) AND (ROAD_KM_TOLLSTATION >= ?) AND (ROAD_KM_TOLLSTATION <= ?)';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM tollbooths WHERE (ROAD_ID = ?) AND (DIRECTION = ?) AND (ROAD_KM_TOLLSTATION <= ?) AND (ROAD_KM_TOLLSTATION >= ?)';
	    	}
	    	if(sql!=undefined) {
		    	db.transaction(function(tx) {
					tx.executeSql(sql, [roadId, currentDirection, kmFrom, kmTo], function(tx, result) {
						if(result.rows.length > 0) {
		                    callback(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getTollBoothsFromKmToKm: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
		    	});	
	    	} else {
				callback([]);
	    	}
    	}
    },
    
    getAllTollbooths: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM tollbooths';
    	
    	db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
    	});	
    },
    
    getTollBoothPrice: function(currNummer, successCallback, errorCallback) {

    	var data = {};
    	var url =  config.serverdata[act_system].videomaut.url + config.serverdata[act_system].videomaut.lastTicket+ '?phoneId=kmpg&email=no.mail@asfinag.at';
    	
    	$.ajax({
		    url: url, 
		    cache: false,
		    dataType:"json",
			timeout: 25000,
		    success: function(data){
		    	var tollInfo = data.strecken;
		    	if(tollInfo != null && tollInfo.length > 0){
					console.log("TollboothDAO.getTollBoothPrice: success");
		    		for(var i=0; i < tollInfo.length; i++) {
		    			if(tollInfo[i].nummer == currNummer) {
		    				successCallback(tollInfo[i].tarifEinzel);
		    			}
		    		}
		    	}
		    },
		    error: function() {
		    	console.log("TollboothDAO.getTollBoothPrice: error");
		    	errorCallback();
		    }
		});
	}
    
});


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.RoadpointDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		//gets called on init
	},
	
	firstStart: function(callback) {
	  	var that = this;
    	this.status = DATA_STATUS_LOADING;
		var db = this.application.config.db.db;
		db.transaction(function(tx) {
	    	var sql = 'SELECT count(*) as NR FROM roadpoints;';
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.item(0).NR==0) {
					var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_apppos_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
			    	$.ajax({
						url: urlTimestamp,
						cache: false,
						dataType: 'json',
						success: function(data) {
							if(data != null && data.length > 0){
								datastore_last_changed = data[0].aktualisierung;
								var dateArray = datastore_last_changed.split(' ');
						        var year = dateArray[0].split('-');
						        var time = dateArray[1].split(':');
						        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
						    
						       if(release_date == that.finishDate.getTime()) {
				    				// timestamp is up to date...
				    				console.log('roadpoints finished checking timestamp - timestamp ok - loading roadpoints from file');
				    				that.readRoadpointsFromFile();
				    			} else {
				    				// timestamp is NOT up to date...
				    				console.log('roadpoints finished checking timestamp - timestamp not up to date - loading roadpoints from backend');
				    				that.loadData();
				    			}
							} else {
								// timestamp is empty / timestamp-Backend is broken
								that.loadData();
							}
						},
						error: function() {
							console.log('roadpoints-timestamp backend not reachable - loading roadpoints from file');
							that.readRoadpointsFromFile();
						}
			    	});
				} else {
					that.loadRoadData(callback); 
				}
			},
			function(error) {
				console.log('RoadPointDAO: error in firstStart: ' + error.message);
			});
    	});	
		
	},

	//get all roadpoints from asfinag if timestamp is not current, do not call it outside of RoadpointDAO, use firstStart instead	
    loadRoadData: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_apppos_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	//console.debug('RoadpointDAO:url:' + urlTimestamp);		

    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',
			success: function(data) {
				datastore_last_changed = data[0].aktualisierung;
				
				var dateArray = datastore_last_changed.split(' ');
		        var year = dateArray[0].split('-');
		        var time = dateArray[1].split(':');

		        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
		        console.debug('RoadpointDAO: checking database');
		        db.transaction(checkTimestamp, function(e) { 
		        									console.error('ERROR: ' + e.message); 
		        							   }, 
		        							   function(tx) {
										         /*debug_flag && console.info('transaction1 done...');*/ });				
											   },
			error: function() {
				that.loadData();
			}
    	});
    	
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		tx.executeSql(sql, ['roadpoints'], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == that.finishDate.getTime()) {
    				// road is up to date...
    				that.status = DATA_STATUS_READY;
    				console.log('roadpoints finished checking timestamp - timestamp ok');
    				
    			} else {
    				// update roadpoints:
    				console.log('roadpoints finished checking timestamp - timestamp not up to date');
    				that.loadData();
    			}
    			return false;
    		});
    	}
    },
    
    loadData: function() {
    		
		console.debug('RoadpointDAO:loadData...');
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_apppos_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);

		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('RoadpointDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('RoadpointDAO: success');
			
    				
				function insertData(tx) {
					console.debug('RoadpointDAO:insertData');  
							that.insertData(db, data);
				}
    				
				function errorCB (error) {
					console.error('ERROR2: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				function successCB() {
					setTimeout(function () {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				
				// Check if the returning data from ODS is not empty
				if(data != ''){
					db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				}else{
					that.status = DATA_STATUS_READY;
					console.log("empty roadpoints!");
				}
				
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('RoadpointDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			
			}
		});
		
   	},
   	/*
   	 *	roadId = Id der aktuellen Straße 
   	 *	currPosition = aktuelle Position
   	 *	direction = Richtung in welche Gefahren wird (1 oder 2) 
   	 *	visualisationWidth =  Visualisierungsbereich, wie weit der MaxPoint wegliegen darf
   	 *  gridSize = Abstand zwischen 2 benachbarten Roadpoints
   	 */
    
    getMaxPoint: function(roadId, currentKm, direction, viewingRange, gridSize, callback){
    	var db = this.application.config.db.db;
    	
    	var pointLimit = viewingRange / gridSize;
    	var order = (direction==2) ? 'desc' : 'asc';
    	var order2 = (direction==1) ? 'desc' : 'asc';
    	var km = (direction==1) ? 'AND KM > ?' : 'AND KM < ?';
	   	db.transaction(function(tx) {
    		var sql = 'SELECT * FROM (select * from Roadpoints where ROAD_ID = ? AND DIRECTION = ? '+ km +' ORDER BY KM ' + order + ' LIMIT ?) ORDER BY km ' + order2 + ' LIMIT 1';
			tx.executeSql(sql, [roadId, direction, currentKm, pointLimit], function(tx, result) {
				if(result.rows.length >0 ) {
					callback(result.rows.item(0));
				} else {
					callback([]);
				}
				return false;
			}, function(error) {
				console.log('RoadPointDAO: error in getMaxPoint: ' + error.message + ' code: ' + error.code);
				callback([]);
			});
	
    	});	
    },
    
   	/* Returns the last RoadPoint of a Street in a 
   	 *	roadId = Id der aktuellen Straße 
   	 *	direction = Richtung in welche Gefahren wird (1 oder 2) */
   	
    
    getLastPoint: function(roadId, direction, callback){
    	var db = this.application.config.db.db;
    	var order = (direction==2) ? 'asc' : 'desc';
	   	db.transaction(function(tx) {
    		var sql = 'select * from Roadpoints where ROAD_ID = ? AND DIRECTION = ? ORDER BY KM ' + order + ' LIMIT 1';
			tx.executeSql(sql, [roadId, direction], function(tx, result) {
				if(result.rows.length>0) {
					//console.log(result.rows.item(0));
					callback(result.rows.item(0));
				} else {
					callback([]);
				}
				return false;
			}, function(error) {
				console.log('RoadPointDAO: error in getLastPoint: ' + error.message + ' code: ' + error.code);
				callback([]);
			});
	
    	});	
    },
    
    //get all roadpoints from db, this could be a lot!
    getAllRoadpoints: function(callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM roadpoints;';
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result);
					return false;
				} else {
					callback([]);
				}
				return false;
			},
			function(error) {
				console.log('RoadPointDAO: error in getAllRoadpoints: ' + error.message);
				callback([]);
			});
    	});	
    },

	readRoadpointsFromFile: function() {
    	var db = this.application.config.db.db;
    	var that = this;
		$.ajax({
		    url:"app/Kompagnon/initdata/roadpoints.json", 
		    type:"get",
		    dataType:"json",
		    contentType:"application/text",
		    success: function(data){
				console.debug('RoadpointDAO:insertDataFromFile');    					
				that.insertData(db, data);
		    },
		    error: function(error) {
		    	console.log('error');
		    	that.status = DATA_STATUS_ERROR_WHILE_LOADING;
		    }
		});	
	},
	
	insertData: function(db, data) {
		var that = this;
		if (that.finishDate != undefined) {
			data.timestamp = that.finishDate.getTime();
		} else {
			data.timestamp = release_date;
		}
		var pointsDone = 0;
    	db.transaction(function(tx) {
			tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['roadpoints'], function (tx, res) {
				tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['roadpoints', data.timestamp], function(tx, result) {
					tx.executeSql('DELETE FROM roadpoints', [], function (tx, res) {
						var sqlInsertData = 'INSERT OR REPLACE INTO roadpoints(ID, LAT, LON, ROAD_ID, DIRECTION, KM) VALUES(?, ?, ?, ?, ?, ?)';
		    	    
    	    			var count = 0;
		    	    	console.debug('number of items to insert: ' + data.length);
	    	    		for(var i in data) {    
	    	    			var r = data[i];
	    	    			count++;
	    	    			if(r.ROAD_ID != undefined) {
		    	    			tx.executeSql(sqlInsertData, [count, r.lat, r.lon, r.ROAD_ID, r.DIRECTION, r.KM],
		    	    					(function(i) {
		    	    						pointsDone++;
		    	    						if(pointsDone == data.length) {
		    	    							that.status = DATA_STATUS_READY;
		    	    							console.log("Roadpoints ready!");
		    	    						}
		    	    					})(i));
		    	    		}
	    	    		}
					});
				});
			});
		});
	},
	    
    getRoadPointById: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM roadpoints WHERE id = ?;';
			
			tx.executeSql(sql, [parameters[1]], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result);
					return false;
				} else {
					callback([]);
				}
				return false;
			});//there should be error handling here but the method is not in use anymore, will be removed a
    	});	
    },
    
    calcDistance: function(lat1, lon1, lat2, lon2) {
		function toRad(Value) {
		    /** Converts numeric degrees to radians */
		    return Value * Math.PI / 180;
		}
	
	    //Radius of the earth in:  1.609344 miles,  6371 km  | var R = (6371 / 1.609344);
	    var R = 6371 ; // Radius of earth in km
	    var dLat = toRad(lat2-lat1);
	    var dLon = toRad(lon2-lon1); 
	    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
	            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
	            Math.sin(dLon/2) * Math.sin(dLon/2); 
	    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
	    var d = R * c;
	    return d;
    },
    
    getPointDirectionAndKm: function(direction, km, roadId, callback) {
    	var db = this.application.config.db.db;
    	var returnPoint;
    	
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM roadpoints WHERE DIRECTION=? AND KM=? AND ROAD_ID=?;';
			tx.executeSql(sql, [direction, km, roadId], function(tx, result) {
				if(result.rows.length>0) {
					var point = result.rows.item(0);
					if(point!=undefined) {
						returnPoint={'id': point.ID, 
			     					 'lat':point.LAT, 
									 'lon': point.LON, 
									 'roadid':point.ROAD_ID,
									 'km':point.KM,
									 'direction':point.DIRECTION,
									 'mindistance':0
									 
						};		
						callback(returnPoint);	          
					}         	    	
				} else {
					callback(undefined);
				}
			});
		});
    },
    calculateEventDistances: function(currentDirection, roadPoint, events, gridSize, callback) {
		var distances = new Array();
		var doneSize = events.length;
		var db = this.application.config.db.db;
		if(events.length==0) {
			callback(distances, events);
		}
	   	db.transaction(function(tx) {
	    	for(var i = 0; i<events.length; i++) {
				event = events[i];
				var km;
				if(event.km!=undefined) {
					km = event.km;
				} else if(event.fromKm!=undefined) {
					if(currentDirection==1){
						event.fromKm >= roadPoint['km'] ? km = event.fromKm : km = event.toKm;
					}else{
						event.fromKm <= roadPoint['km'] ? km = event.fromKm : km = event.toKm;
					}
				} else {
					console.error('can\'t compute distance for event: ' + event.eventType);
				}
				//console.log('eventType: ' + event.eventType);
				var sql;
				if(currentDirection==1) {
					sql = 'SELECT distinct km FROM roadpoints WHERE road_id=' + roadPoint['roadid']+' AND direction=1 AND km>='+ roadPoint['km']+' AND km<='+km; 
				} else {
					sql = 'SELECT distinct km FROM roadpoints WHERE road_id=' + roadPoint['roadid']+' AND direction=2 AND km<='+ roadPoint['km']+' AND km>='+km;
				}
				tx.executeSql(sql, [], 
					function(tx, result) {
						//console.log('distance: ' + result.rows.item(0).NR*gridSize);
						distances.push(parseFloat(result.rows.length*gridSize));
						if(distances.length==doneSize) {
							callback(distances, events);
						}
						return false;
    	
			    	},
					function(transaction, error) {
						console.log('error in distance calculation: ' + error.code + ' ' + error.message);
						callback(undefined, undefined);
						return false;
					}
				);
			}
		});
    },
      
    getNextRoadPoint: function(currentKm, direction, gridSize, roadId, callback) {
    	this.getPointDirectionAndKm(direction, ((currentKm+gridSize).toFixed(2)), roadId, callback);
    },

    getPreviousRoadPoint: function(currentKm, direction, gridSize, roadId, callback) {
    	this.getPointDirectionAndKm(direction, ((currentKm-gridSize).toFixed(2)), roadId, callback);
    },    
    
    getClosestRoadPointByLocation: function(leftDowner, rightUpper, gpsPoint, currentDirection, handleRoadpoints, handleNoRoadPoints) {//location is a 2-dimensional array of four points

    	var that = this;
    	var db = this.application.config.db.db;
    	
    	db.transaction(function(tx) {
	    	var sql;
	    	var parameters;
//	    	if(currentDirection==undefined) {
	    		sql = 'SELECT * FROM roadpoints WHERE LAT >= ? AND LAT <= ? AND LON >= ? AND LON <= ?;';
	    		parameters = [leftDowner['lat'], rightUpper['lat'], leftDowner['lon'], rightUpper['lon']];
//	    	} else if(currentDirection!=undefined) {
//		    	sql = 'SELECT * FROM roadpoints WHERE LAT >= ? AND LAT <= ? AND LON >= ? AND LON <= ? AND DIRECTION=?;';
//		    	parameters = [leftDowner['lat'], rightUpper['lat'], leftDowner['lon'], rightUpper['lon'], currentDirection];
//	    	}
			tx.executeSql(sql, parameters, function(tx, result) {
				if(result.rows.length > 0) {
					var returnPoint;
					var minDistance = 10000;
					otherClosePoints = [];
					for (var i=0; i<result.rows.length; i++){
						var point = result.rows.item(i);
						var distance = that.calcDistance(point.LAT, point.LON, gpsPoint['lat'], gpsPoint['lon']);
						if(distance<minDistance) {
							minDistance = distance;
							if(returnPoint!=undefined) {
								otherClosePoints.push({'id': returnPoint.ID, 
						     						   'lat':returnPoint.LAT, 
													   'lon': returnPoint.LON, 
													   'roadid':returnPoint.ROAD_ID,
													   'km':returnPoint.KM,
													   'direction':returnPoint.DIRECTION,
													   'mindistance':minDistance,
													   'distance':distance
													  });
							}
							returnPoint = point;
						} else {
							otherClosePoints.push({
													'id': point.ID,
													'lat': point.LAT, 
													'lon': point.LON,
													'roadid':point.ROAD_ID,
													'km':point.KM,
													'direction':point.DIRECTION,
													'mindistance':minDistance,
													'distance':distance
												  });
						}
				    }
				    
					var roadPoint={'id': returnPoint.ID, 
	     						   'lat':returnPoint.LAT, 
								   'lon': returnPoint.LON, 
								   'roadid':returnPoint.ROAD_ID,
								   'km':returnPoint.KM,
								   'direction':returnPoint.DIRECTION,
								   'mindistance':minDistance,
								   'distance':distance
					};
					handleRoadpoints(gpsPoint, roadPoint, otherClosePoints, leftDowner, rightUpper);
					return false;
				} else {
					handleNoRoadPoints();
					
				}
				return false;
			});
    	});	
    }
});

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.StreetDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
    	var that = this;
    	this.statusStreets = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var dateFromTimestampStreets = 0;
    	
    	console.log('StreetDAO: loadStreetdata...');
    	//var urlTimestampStreets = encodeURI(config.ods.url + '/allstreets0200timestamp.json?username=' + config.ods.userBB10 + '&password=' + config.ods.passwordBB10);    	
    	var urlTimestampStreets = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_streets_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	that.callback = callback;
		
		// LOADING STREETS FROM BACKEND
    	$.ajax({
			url: urlTimestampStreets,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        dateFromTimestampStreets = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        db.transaction(checkTimestampStreets, function(e) { console.error('ERROR VTST2: ' + e.message); }, function(tx) { /*debug_flag && console.info('transaction1 done...');*/ });
			        
				} else {
					// timestamp is empty / timestamp-Backend is broken
					that.loadData();
				}
			},
			error: function() {
				
				loadDataForDataType('streets');
			}
    	});
    	
    	function loadDataForDataType(dataType) {
    		
    		
    		
    		//var url = encodeURI(config.ods.url + '/all' + dataType + '0200.json?username=' + config.ods.userBB10 + '&password=' + config.ods.passwordBB10);
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_streets_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		!release_flag && console.log('StreetDAO: loadData from: ' + url);
    		    		
    		
    		// AJAX
    		$.ajax({
    			url: url,
    			cache: false,
    			dataType: 'json',
    			timeout: 25000,
    			success: function(data) {
    			
    			
    			
    				function insertData(tx) {
	    				if (dataType == "streets") {
	        				if (dateFromTimestampStreets != undefined) {
	        					data.timestamp = dateFromTimestampStreets.getTime();
	    					} else {
	    						data.timestamp = new Date().getTime();
	    					}
	    				} 
	    				
    					
    					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', [dataType + '%'], function (tx, res) {
    						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', [dataType + '_' + language, data.timestamp], function(tx, result) {
    							tx.executeSql('DELETE FROM ' + dataType, [], function (tx, res) {
    								tx.executeSql('DELETE FROM ' + dataType, [], function (tx, res) {
    									var sqlInsertData = '';
    									
    									
    									if (dataType == 'streets') {
	    									sqlInsertData = 'INSERT OR IGNORE INTO ' + dataType + ' (id, ROAD_ID, ROAD_INFO, ROAD_INFO2, ROAD_CODE_1, ROAD_CODE_2, ROAD_NAME) VALUES(?, ?, ?, ?, ?, ?, ?)';
    									} 
    									
    									 
    				    	    		
    									var itemCount = 0;
    									
    									for(var i in data) {
    										itemCount++;
    									}
    									
    									var i = 0;
    									
    									
    									function asyncLoop(iterations, func, callback) {
    									    var index = 0;
    									    var done = false;
    									    var loop = {
    									        next: function() {
    									            if (done) {
    									                return;
    									            }

    									            if (index < iterations) {
    									                index++;
    									                func(loop);
    									            } else {
    									                done = true;
    									                callback();
    									            }
    									        }
    									    };
    									    loop.next();
    									    return loop;
    									}
    									
    									
    									
    									function insertDataToDB(callback) {
//    									    console.log('Hey doing some stuff at index ' + i);
    									    var r = data[i];
    									    if (r != undefined) {
    									    	if (dataType == 'streets') {
			    									tx.executeSql(sqlInsertData, [r.id, r.ROAD_ID, r.ROAD_INFO, r.ROAD_INFO2, r.ROAD_CODE_1, r.ROAD_CODE_2, r.ROAD_NAME ]);
		    									} 
    									    	
    									    }
    									    
    									    i++;
//    									    console.log('next index: ' + i);
    									    callback();
    									}
    									
    									var loopLength = 10;
    									
    									function startAnotherLoop() {
//    										console.log('start another loop');
    										
    										if (i < itemCount) {
    											asyncLoop(loopLength, function(loop) {
    												insertDataToDB(function(result) {

            									        // Okay, for cycle could continue
            									        loop.next();
            									    })},
            									    startAnotherLoop
            									);
    										}
    									}
    									
    									
    									asyncLoop(loopLength, function(loop) {
    										insertDataToDB(function(result) {

    									        // Okay, for cycle could continue
    									        loop.next();
    									    })},
    									    startAnotherLoop
    									);
    								});
        						});
    						});
    					});
    				}
    				
    				
    				function errorCB (error) {
//    					console.error('ERROR VTST1 : ' + error.message);
    					that.statusStreets = DATA_STATUS_ERROR_WHILE_LOADING;
					}
					
					
					function successCB() {
						setTimeout(function() {
							if (dataType == "streets") {
								that.statusStreets = DATA_STATUS_READY;
							
							}							
						}, 250);
					}
					
    				
					// Check if the returning data from ODS is not empty
					if(data != ''){
						db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
					}else{
						that.statusStreets = DATA_STATUS_READY;
					}
    				
    			},
    			error: function(a, b, c) {
    				if (dataType == "streets") {
						that.statusStreets = DATA_STATUS_ERROR_WHILE_LOADING;
					} 
    			}
    		});	
    	}
    	
    	
    	
    	
    	
    	function checkTimestampStreets(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		var dataType = 'streets';
    		
    		tx.executeSql(sql, [dataType + '_' + language], function(tx, result) {
    			console.log('StreetDAO: checking timestamp');
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == dateFromTimestampStreets.getTime()) {
    				// data is up to date
    				console.log('StreetDAO: data up to date');
    				that.statusStreets = DATA_STATUS_READY;
    				
    			} else {
    				console.log('StreetDAO: data not up to date');
    				loadDataForDataType(dataType);
    			}
    			return false;
    		});
    	}
    },
    	
    getAllStreets: function(callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT ROAD_ID, ROAD_INFO, ROAD_INFO2, ROAD_NAME, ROAD_CODE_1 FROM streets ORDER BY ROAD_INFO2;';
			
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push({ roadId: result.rows.item(i).ROAD_ID, autobahn: result.rows.item(i).ROAD_NAME, info: result.rows.item(i).ROAD_INFO, searchParameter: result.rows.item(i).ROAD_INFO2, name: result.rows.item(i).ROAD_CODE_1 });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    getStreetByRoadId: function(roadId, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM streets WHERE ROAD_ID = ?;';
			tx.executeSql(sql, [roadId], function(tx, result) {
				if(result.rows.length > 0) {
					var street = {
									'roadid': result.rows.item(0).ROAD_ID, 
						            'info': result.rows.item(0).ROAD_INFO, 
						            'info2': result.rows.item(0).ROAD_INFO2, 
						            'code': result.rows.item(0).ROAD_CODE_1, 
						            'code2': result.rows.item(0).ROAD_CODE_2, 
						            'name': result.rows.item(0).ROAD_NAME
						          };
					callback(street);
				} else {
					callback(undefined);
				}
				return false;
			});
    	});	
    },
    
});

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.ProvincesDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var dateFromTimestampProvinces = 0;
    	
    	//var urlTimestampProvinces = encodeURI(config.ods.url + '/allprovinces0200timestamp.json?username=' + config.ods.userBB10 + '&password=' + config.ods.passwordBB10);
    	var urlTimestampProvinces = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_provinces_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	
		
		// LOADING PROVINCES FROM BACKEND    	
    	$.ajax({
			url: urlTimestampProvinces,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
					if(data != null && data.length > 0){
						datastore_last_changed = data[0].aktualisierung;
						
						var dateArray = datastore_last_changed.split(' ');
				        var year = dateArray[0].split('-');
				        var time = dateArray[1].split(':');
		
				        dateFromTimestampProvinces = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
				        db.transaction(checkTimestampProvinces, function(e) { console.error('ERROR VTST3: ' + e.message); }, function(tx) { /*debug_flag && console.info('transaction1 done...');*/ });				
					} else {
						// timestamp is empty / timestamp-Backend is broken
						that.loadData();
					}
				},
			error: function() {
				loadDataForDataType('provinces');
			}
    	});
    	
    	
    	
    	
    	function loadDataForDataType(dataType) {
    		
    		//var url = encodeURI(config.ods.url + '/all' + dataType + '0200.json?username=' + config.ods.userBB10 + '&password=' + config.ods.passwordBB10);
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_provinces_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		    		
    		
    		// AJAX
    		$.ajax({
    			url: url,
    			cache: false,
    			dataType: 'json',
    			timeout: 25000,
    			success: function(data) {
    			
    				if(data == null || data.length == 0){
    					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    					return false;
    				}
    			
    				if (dateFromTimestampProvinces != undefined) {
    					data.timestamp = dateFromTimestampProvinces.getTime();
					} else {
						data.timestamp = new Date();
					}
    				
    				function insertData(tx) {
    					
    					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', [dataType + '%'], function (tx, res) {
    						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', [dataType + '_' + language, data.timestamp], function(tx, result) {
    							tx.executeSql('DELETE FROM ' + dataType, [], function (tx, res) {
    								tx.executeSql('DELETE FROM ' + dataType, [], function (tx, res) {
    									var sqlInsertData = '';
    									
    									
    									if (dataType == 'provinces') {
	    									sqlInsertData = 'INSERT OR IGNORE INTO ' + dataType + ' (id, PROVINCE_ID, PROVINCE_NAME, PROVINCE_MIDCODE, PROVINCE_SHORTCODE, PROVINCE_COUNTRY) VALUES(?, ?, ?, ?, ?, ?)';
    									}
    									
    									var itemCount = 0;
    									
    									for(var i in data) {
    										itemCount++;
    									}
    									
    									var i = 0;
    									
    									
    									function asyncLoop(iterations, func, callback) {
    									    var index = 0;
    									    var done = false;
    									    var loop = {
    									        next: function() {
    									            if (done) {
    									                return;
    									            }

    									            if (index < iterations) {
    									                index++;
    									                func(loop);
    									            } else {
    									                done = true;
    									                callback();
    									            }
    									        }
    									    };
    									    loop.next();
    									    return loop;
    									}
    									
    									
    									
    									function insertDataToDB(callback) {
//    									    console.log('Hey doing some stuff at index ' + i);
    									    var r = data[i];
    									    if (r != undefined) {
		    									if (dataType == 'provinces') {
			    									tx.executeSql(sqlInsertData, [r.id, r.PROVINCE_ID, r.PROVINCE_NAME, r.PROVINCE_MIDCODE, r.PROVINCE_SHORTCODE, r.PROVINCE_COUNTRY ]);
		    									}
    									    	
    									    }
    									    
    									    i++;
//    									    console.log('next index: ' + i);
    									    callback();
    									}
    									
    									var loopLength = 10;
    									
    									function startAnotherLoop() {
//    										console.log('start another loop');
    										
    										if (i < itemCount) {
    											asyncLoop(loopLength, function(loop) {
    												insertDataToDB(function(result) {

            									        // Okay, for cycle could continue
            									        loop.next();
            									    })},
            									    startAnotherLoop
            									);
    										}
    									}
    									
    									
    									asyncLoop(loopLength, function(loop) {
    										insertDataToDB(function(result) {

    									        // Okay, for cycle could continue
    									        loop.next();
    									    })},
    									    startAnotherLoop
    									);
    								});
        						});
    						});
    					});
    				}
    				
    				
    				function errorCB (error) {
//    					console.error('ERROR VTST1 : ' + error.message);
    					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
					}
					
					
					function successCB() {
						setTimeout(function() {
							that.status = DATA_STATUS_READY;
						}, 250);
					}
					
				
					db.transaction(insertData, errorCB, successCB);	
					
    			},
    			error: function(a, b, c) {
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    			}
    		});	
    	}
    	
    	function checkTimestampProvinces(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		var dataType = 'provinces';
    		
    		tx.executeSql(sql, [dataType + '_' + language], function(tx, result) {
    			
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == dateFromTimestampProvinces.getTime()) {
    				// data is up to date
    				that.status = DATA_STATUS_READY;
    				
    			} else {
    				// load data
    				loadDataForDataType(dataType);
    			}
    			return false;
    		});
    	}
    },
    
    getAllProvinces: function(callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT distinct(PROVINCE_NAME), PROVINCE_SHORTCODE, PROVINCE_NAME, PROVINCE_COUNTRY FROM provinces;';
			
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						if (result.rows.item(i).PROVINCE_COUNTRY == "AT") {
							data.push({ provincename: result.rows.item(i).PROVINCE_NAME, provinceshortcode: result.rows.item(i).PROVINCE_SHORTCODE, provincename: result.rows.item(i).PROVINCE_NAME });	
						}
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
});

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.DelayDAO', {}, {
	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		
	},

	//get all Delays from asfinag if timestamp is not current	
    loadDelayData: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	that.loadData();
    },
    
    loadData: function() {
    		
		console.debug('DelayDAO:loadData...');
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_delay_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
		
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('DelayDAO:attempting read on url: ' + url);
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('DelayDAO: success');
			
    				
				function insertData(tx) {
					console.debug('DelayDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					
				      
				        	  
					tx.executeSql('DELETE FROM delay', [], function (tx, res) {
						var sqlInsertData = 'INSERT OR IGNORE INTO delay(ID,ROAD_ID, KM_FROM, KM_TO, DIRECTION, JAM_REASON, DELAY)'+ 
																	'VALUES(?, ?,      ?, 			?, 			?, ? ,?)';
		 
		    	    	console.debug('number of items to insert: ' + data.length);
//		    	    	console.log(data);
	    	    		for(var i in data) {    
	    	    			var t = data[i];
	    	    				var id = t.Road_Id + ":" + t.km_from + ":" + t.km_to + ":" + t.Direction + ":" + t.jam_reason + ":" + t.delay;
	    	    				tx.executeSql(sqlInsertData, [id.hashCode(), t.Road_Id, t.km_from, t.km_to, t.Direction, t.jam_reason, t.delay],
	    	    					(function(i) {
	    	    					})(i));
	    	    		}
					});
					
				}
    				
				function errorCB (error) {
					console.error('ERROR2: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				
				function successCB() {
					console.log('successful insert');
					if(data != ''){
						that.status = DATA_STATUS_READY;
					}else{
						that.status = DATA_STATUS_READY_EMPTY;
					}
				}
				
				db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('DelayDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			}
		});
		
   	},
    
    getDelayFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show != true){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM  delay WHERE (ROAD_ID = ?) AND (DIRECTION = 1) AND ((KM_FROM >= ? AND KM_FROM <= ?) OR (KM_FROM <= ? AND KM_TO >= ?))';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM  delay WHERE (ROAD_ID = ?) AND (DIRECTION = 2) AND ((KM_FROM <= ? AND KM_FROM >= ?) OR (KM_FROM >= ? AND KM_TO <= ?))';
	    	}
//	    	console.log(kmFrom  + " : " + kmTo );
	    	//console.log(sql + " : " + roadId + " : " + kmFrom + " : " + kmTo + " : " + kmFrom + " : " + kmFrom);
	    	if(sql!=undefined) {
				db.transaction(function(tx) {
					tx.executeSql(sql, [roadId, kmFrom, kmTo, kmFrom, kmFrom], function(tx, result) {
						if(result.rows.length > 0) {
							callback(result.rows);
							//console.log(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getDelayFromKmToKm: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
				});	
	    	} else {
	    		callback([]);
	    	}
    	}
    } ,
    
    getAllDelay: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM delay';
    	
    	db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
    	});	
    }
});

String.prototype.hashCode = function(){
	var hash = 0;
	if (this.length == 0) return hash;
	for (i = 0; i < this.length; i++) {
		char = this.charCodeAt(i);
		hash = ((hash<<5)-hash)+char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.JunctionDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		//gets called on init
	},

	//get all Junctions from asfinag if timestamp is not current	
    loadJunctionData: function() {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var data = {};
    	
    	//var urlTimestamp = encodeURI(config.ods.url + '/anschlussstellen0200timestamp.json?username=' + config.ods.user + '&password=' + config.ods.password);
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_junctions_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',     
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        console.debug('JunctionDAO: checking database');
			        db.transaction(checkTimestamp, function(e) { 
			        									console.error('ERROR: ' + e.message); 
			        							   }, 
			        							   function(tx) {
											         //console.log('timestamp done...');*/ 
											       });	
					       	       
				} else {
					// timestamp is empty / timestamp-Backend is broken
					that.loadData();
				}
			},
			error: function() {
				that.loadData();
			}
    	});
    	
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		tx.executeSql(sql, ['junction'], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == that.finishDate.getTime()) {
    				// Junction is up to date...
    				that.status = DATA_STATUS_READY;
    				console.log('Junction finished checking timestamp - timestamp ok');
    			} else {
    				// update Junction:
    				console.log('Junction finished checking timestamp - timestamp not up to date');
    				that.loadData();
    			}
    			return false;
    		});
    	}
    	
    },
    
    loadData: function() {
    	//http://maps.asfinag.at/ods2/anschlussstellenapp0200.json?username=asfinagapp&password=256f88
    	var language = config.language;
		console.debug('JunctionDAO:loadData...');
		//var url = encodeURI(config.ods.url + 'anschlussstellen0200.json?username=' + config.ods.user + '&password=' + config.ods.password);
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_junctions_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('JunctionDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('JunctionDAO: success, finishDate: ' + that.finishDate);
				if (that.finishDate != undefined) {
					data.timestamp = that.finishDate.getTime();
				} else {
					data.timestamp = new Date().getTime();
				}
				// Check if the returning data from ODS is not empty
				if(data != ''){
	    			db.transaction(insertData,errorCB, successCB);	
				}else{
					that.status = DATA_STATUS_READY;
				}
				function insertData(tx) {
					console.debug('JunctionDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					console.debug('JunctionDAO: delete timestamps, insert Junction');
					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['junction'], function (tx, res) {
						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['junction', data.timestamp], function(tx, result) {
							tx.executeSql('DELETE FROM junction', [], function (tx, res) {
								var sqlInsertData = 'INSERT OR REPLACE INTO junction (ID, ROAD_ID, JUNCTION, JUNCTION_TYPE, DIRECTION, JUNCTION_KM, NEXT_ROAD_ID, NEXT_DIRECTION, NEXT_JUNCTION_KM, KNNR, KM_EXIT, PD, ON1_RAMPE_BEGINN, ON2_RAMPE_BEGINN     )'+ 
																			'VALUES(   ?,   ?,      ?, 		  ?, 			?, 			?, 				?,          ?,               ?,          ?,     ?, ?, ?, ?)';
				    	    	console.debug('number of items to insert: ' + data.length);
			    	    		for(var i in data) {    
			    	    			var junc = data[i];
			    	    			if(i<data.length) {

				    	    			var on1RampeBeginn = (junc.ON_1_RAMPE_BEGINN==undefined) ? '0' : junc.ON_1_RAMPE_BEGINN;
				    	    			var on2RampeBeginn = (junc.ON_2_RAMPE_BEGINN==undefined) ? '0' : junc.ON_2_RAMPE_BEGINN;
				    	    			
//			    	    			 [ID_JUNCTION],[GIS_ID],[X_WGS84_PD],[Y_WGS84_PD],[X_LAMBERT_PD],[Y_LAMBERT_PD],[Bezeichnung_PD],[Kategorie],[Richtung_TXT_PD],[Stationierung_PD],[Status_PD]
//			    	    				,[StellplaetzePKW_PD],[LASTUPDATE],[LASTUPDATEDDS],[LASTUPDATE_BY],[ROAD_ID],[ROAD_INFO],[ROAD_INFO2],[ROAD_CODE_1],[ROAD_CODE_2],[ROAD_KM_FROM],[ROAD_KM_TO],[ROAD_NAME]
//			    	    				,[ROAD_SUB],[ROAD_STATUS],[ROAD_CLASS]
			    	    				tx.executeSql(sqlInsertData, [i, junc.ROAD_ID, junc.JUNCTION, junc.JUNCTION_TYPE, junc.DIRECTION, junc.JUNCTION_KM, junc.NEXT_ROAD_ID, junc.NEXT_DIRECTION, junc.NEXT_JUNCTION_KM, junc.KNNR, junc.KM_EXIT, junc.PD, on1RampeBeginn, on2RampeBeginn ],
			    	    					function() {
			    	    						//console.log('junction done...')
				    	    				}
			    	    				);
			    	    			}
								}
								console.log(' junctions inserted...');
							});
						});
					});
				}
    				
				function errorCB (transaction, error) {
					console.log(error);
					console.error('error loading junctions: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				function successCB() {
					setTimeout(function () {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('JunctionDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			}
		});
		
   	},
   	
   	getJunctionsFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
   		if(show != true){
    		callback([]);
    	}else{
    		var db = this.application.config.db.db;
        	var sql;
        	var kmCheck = (currentDirection==1) ? 'JUNCTION_KM_RAMPE >= ? AND JUNCTION_KM_RAMPE <= ?' : 'JUNCTION_KM_RAMPE <= ? AND JUNCTION_KM_RAMPE >= ?';
        	var rapmeValue = (currentDirection==1) ? 'ON1_RAMPE_BEGINN' : 'ON2_RAMPE_BEGINN';
        	//don't remove ORDER! we need it afterwards to condense it properly
        	sql = 'SELECT * ' +
        		  'FROM ( ' +
        		  '		SELECT 	*, ' +
        		  '				CASE WHEN ' + rapmeValue + ' = 0 THEN JUNCTION_KM ELSE ' + rapmeValue + ' END AS JUNCTION_KM_RAMPE ' +
        		  '		FROM junction ' +
        		  '		WHERE ROAD_ID = ? AND (DIRECTION = ? OR DIRECTION = 0)) ' + 
        		  'WHERE ' + kmCheck + ' ' +
        		  'ORDER BY JUNCTION_KM_RAMPE, KNNR;';
       		//console.log(sql);
        	//console.log(sql +', '+roadId+','+currentDirection+','+kmFrom+','+kmTo);
        	if(currentDirection!=undefined && currentDirection>-1) {
    	    	db.transaction(function(tx) {
    				tx.executeSql(sql, [roadId, currentDirection, kmFrom, kmTo], function(tx, result) {
    					if(result.rows.length > 0) {
    						callback(result.rows);
    						
    					} else {
    						callback([]);
    					}
    				}, function(transaction, error) {
    					console.log('JunctionDAO: error in getJunctionsFromKmToKm: ' + error.message + ' code: ' + error.code);
    					callback([]);
    				});
    	    	});	
    	    } else {
    	    	callback([]);
    	    }
    	}
    	
    },
    
   	getLongTermGoalFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, callback) {
    	var db = this.application.config.db.db;
    	var sql;
    	var kmCheck = (currentDirection==1) ? 'JUNCTION_KM >= ? AND JUNCTION_KM <= ?' : 'JUNCTION_KM <= ? AND JUNCTION_KM >= ?';
    	var dir = (currentDirection==1) ? 'asc' : 'desc';
   		sql = 'SELECT * FROM junction WHERE ROAD_ID = ? AND (DIRECTION = ? OR DIRECTION = 0) AND ' + kmCheck + 'AND JUNCTION_TYPE = \'Kn\'  ORDER BY JUNCTION_KM ' + dir + ' LIMIT 1;';
   		//console.log(sql);
    	//console.log(sql +', '+roadId+','+currentDirection+','+kmFrom+','+kmTo);
    	if(currentDirection!=undefined && currentDirection>-1) {
	    	db.transaction(function(tx) {
				tx.executeSql(sql, [roadId, currentDirection, kmFrom, kmTo], function(tx, result) {
					if(result.rows.length == 1 ) {
						//console.log("junctionDAO.getLongTermGoal, nächster Knoten: " + result.rows.item(0) );
						callback(result.rows.item(0));
					} else if (result.rows.length == 0) {
						//Kein Knoten gefunden, liefere letzte Anschlussstelle
						dir = (currentDirection==1) ? 'desc' : 'asc';
						sql = 'SELECT * FROM junction WHERE ROAD_ID = ? AND (DIRECTION = ? OR DIRECTION = 0) ORDER BY JUNCTION_KM ' + dir + ' LIMIT 1;';
						if(currentDirection!=undefined && currentDirection>-1) {
							db.transaction(function(tx) {
								tx.executeSql(sql, [roadId, currentDirection], function(tx, result) {
									if(result.rows.length == 1 ) {
										//console.log("junctionDAO.getLongTermGoal, letzter Junctionpoint: " + result.rows.item(0) );
										callback(result.rows.item(0));
									} else {
										console.log("getLongTermGoalFromKmToKm: There should be exactly 1 result.");
										callback(undefined);
									}
								},
								function(transaction, error) {
									console.log('error in getLongTermGoalFromKmToKm: ' + error.message + ' code: ' + error.code);
									callback(undefined);
								});
							});
						} else {
							callback(undefined);
						}
					} else{
						console.log('getLongTermGoalFromKmToKm: More than one result, count: ' + result.rows.length);
						callback(undefined);
					}
				}, function(transaction, error) {
					console.log('JunctionDAO: error in getLongTermGoalFromKmToKm: ' + error.message + ' code: ' + error.code);
					callback(undefined);
				});
	    	});	
    	} else {
    		callback(undefined)
    	}
    },
   	
    getAllJunctions: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM junction';
    	
    	db.transaction(function(tx) {
			
			tx.executeSql(sql, [], 
				function(tx, result) {
					if(result.rows.length > 0) {
						callback(result.rows);
					} else {
						callback([]);
					}
				}, function(transaction, error) {
					console.log('error in getAllJunctions: ' + error.message + ' code: ' + error.code);
				}
			);	
    	});
    },
    
    getNextJunction: function(direction, roadPoint, callback){
    	var db = this.application.config.db.db;  
    	var sql = null;
    	
    	if(direction == 1){
        	sql = "SELECT ROAD_ID, JUNCTION_TYPE, JUNCTION, DIRECTION, JUNCTION_km FROM junction WHERE (DIRECTION == ? OR DIRECTION == 0) AND ROAD_ID == ? AND JUNCTION_KM > ? ORDER BY JUNCTION_KM ASC";
    	} else if( direction == 2) {
    		sql = "SELECT ROAD_ID, JUNCTION_TYPE, JUNCTION, DIRECTION, JUNCTION_km FROM junction WHERE (DIRECTION == ? OR DIRECTION == 0) AND ROAD_ID == ? AND JUNCTION_KM < ? ORDER BY JUNCTION_KM DESC";
    	}
  
    	db.transaction(function(tx){
    		tx.executeSql(sql, [ direction, roadPoint['roadid'], roadPoint['km'] ], 
    			function(tx,result){
    				if(result.rows.length > 0){
    					callback(result.rows);
    				} else {
    					callback();
    				}	
    			}, 
    			function(transaction, error){
    				console.log('error in getNextJunction: ' + error.message + ' code: ' + error.code);
    			});
    	});
    }
   	
});


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.IglDAO', {}, {

	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		//gets called on init
	},
	loadIglData: function() {
		var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;

    	var data = {};
    	
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_igl_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',     
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        that.finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        console.debug('IglDAO: checking database');
			        db.transaction(checkTimestamp, function(e) { 
			        									console.error('ERROR: ' + e.message); 
			        							   }, 
			        							   function(tx) {
											         //console.log('timestamp done...');*/ 
											       });	
				} else {
					// timestamp is empty / timestamp-Backend is broken
					that.loadData();
				}
			},
			error: function() {
				that.loadData();
			}
    	});
    	
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		tx.executeSql(sql, ['igl'], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == that.finishDate.getTime()) {
    				// IG-L is up to date...
    				that.status = DATA_STATUS_READY;
    				console.log('Igl finished checking timestamp - timestamp ok');
    				
    			} else {
    				// update IG-L:
    				console.log('Igl finished checking timestamp - timestamp not up to date');
    				that.loadData();
    			}
    			return false;
    		});
    	}
    },
    
    loadData: function() {
    	
    	var language = config.language;
		console.debug('IglDAO:loadData...');
    	
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_igl_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('IglDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('IglDAO: success, finishDate: ' + that.finishDate);
				if (that.finishDate != undefined) {
					data.timestamp = that.finishDate.getTime();
				} else {
					data.timestamp = new Date().getTime();
				}
				// Check if the returning data from ODS is not empty
				if(data != ''){
	    			db.transaction(insertData,errorCB, successCB);	
				}else{
					that.status = DATA_STATUS_READY;
				}
				function insertData(tx) {
					console.debug('IglDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					console.debug('IglDAO: delete timestamps, insert igl');
					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['igl'], function (tx, res) {
						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['igl', data.timestamp], function(tx, result) {
							tx.executeSql('DELETE FROM igl', [], function (tx, res) {
								var sqlInsertData = 'INSERT OR REPLACE INTO igl (ID,ROAD_ID,DIRECTION,NAME,ACTIVE,ROAD_KM_FROM,ROAD_KM_TO)'+ 
																	     'VALUES(?, ?,      ?,        ?,   ?,     ?,           ?)';
				    	    	console.debug('number of items to insert: ' + data.length);
			    	    		for(var i in data) {    
			    	    			var igl = data[i];
			    	    			if(i<data.length) {

			    	    				tx.executeSql(sqlInsertData, [i,igl.ROAD_ID, igl.DIRECTION, igl.NAME,igl.ACTIVE, igl.ROAD_KM_FROM, igl.ROAD_KM_TO],
			    	    					function() {}
			    	    				);
			    	    			}
								}
								console.log(' igl inserted...');
							});
						});
					});
				}
    				
				function errorCB (transaction, error) {
					console.log(error);
					console.error('error loading igl: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				function successCB() {
					setTimeout(function () {
						that.status = DATA_STATUS_READY;							
					}, 250);
				}
				
			},
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('IglDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			}
		});	
    },
    
    getActiveIglsFromKmToKmAtTime: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
   		if(show != true){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	
	    	console.log("currentdir: "+currentDirection);
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM igl WHERE ACTIVE = ? AND (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((ROAD_KM_FROM >= ? AND ROAD_KM_FROM <= ?) OR (ROAD_KM_FROM <= ? AND ROAD_KM_TO >= ?))'; //TODO check
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM igl WHERE ACTIVE = ? AND (ROAD_ID = ?) AND (DIRECTION = ? OR DIRECTION = 0) AND ((ROAD_KM_TO <= ? AND ROAD_KM_TO >= ?) OR (ROAD_KM_TO >= ? AND ROAD_KM_FROM <= ?))'; //TODO check
	    	}
	    	
	    	if(sql!=undefined) {
		    	db.transaction(function(tx) {
					tx.executeSql(sql, [true, roadId, currentDirection, kmFrom, kmTo, kmFrom, kmFrom], function(tx, result) {
						if(result.rows.length > 0) {
							callback(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getIglsFromKmToKmAtTime: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
		    	});	
	    	} else {
	    		callback([]);
	    	}
    	}
    },
    
    getAllIgl: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM igl';
    	
    	db.transaction(function(tx) {
    		tx.executeSql(sql, [], function(tx, result) {
    			if(result.rows.length > 0) {
    				callback(result.rows);
    			} else {
    				callback([]);
    			}
    		});
    	});	
    }
       
});



at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.WeatherDAO', {}, {
	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		var that = this;
		
	},

	//get all Weathers from asfinag if timestamp is not current	
    loadWeatherData: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	that.loadData();
    },
    
    loadData: function() {
    		
		console.debug('WeatherDAO:loadData...');
		//var url = encodeURI(config.ods.url + 'weather0200.json?username=' + config.ods.user + '&password=' + config.ods.password);
		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].kmpgn_weather_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
							
		var that=this;
		var db = this.application.config.db.db;
		
		!release_flag && console.debug('WeatherDAO:attempting read on url: ' + url)
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			success: function(data) {
				console.debug('WeatherDAO: success');
			
    				
				function insertData(tx) {
					console.debug('WeatherDAO:insertData');    					
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					tx.executeSql('DELETE FROM weather', [], function (tx, res) {
						var sqlInsertData = 'INSERT OR IGNORE INTO weather(ID,ROAD_ID,BEGINMETER,ENDMETER,WARNING_TYP)'+ 
																	'VALUES(?, ?,      ?, 			?, 			?)';
		 
		    	    	console.debug('number of items to insert: ' + data.length);
//		    	    	console.log(data);
	    	    		for(var i in data) {    
	    	    			var t = data[i];
	    	    				var id = t.ROAD_ID + ":" + t.BEGINMETER + ":" + t.ENDMETER + ":" + t.WARNING_TYP;
	    	    				tx.executeSql(sqlInsertData, [id.hashCode(), t.ROAD_ID, t.BEGINMETER, t.ENDMETER, t.WARNING_TYP],
	    	    					(function(i) {
	    	    					})(i));
	    	    		}
					});
					
				}
    				
				function errorCB (error) {
					console.error('ERROR2: ' + error.message);
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				
				
				function successCB() {
					console.log('successful insert weather');
					if(data != ''){
						that.status = DATA_STATUS_READY;
					}else{
						that.status = DATA_STATUS_READY_EMPTY;
					}
				}
				
				db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				
			},
			
			error: function(jqXHR, textStatus, errorThrown) {
				console.debug('WeatherDAO: error while loading jqXHR: ' + jqXHR + ' textStatus:' + textStatus + ' errorThrown:' + errorThrown);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
			}
		});
		
   	},
    
    getWeatherFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show != true){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM  weather WHERE (ROAD_ID = ?) AND ((BEGINMETER >= ? AND BEGINMETER <= ?) OR (BEGINMETER <= ? AND ENDMETER >= ?))';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM weather WHERE (ROAD_ID = ?) AND ((ENDMETER <= ? AND ENDMETER >= ?) OR (ENDMETER >= ? AND BEGINMETER <= ?))';
	    	}
//	    	console.log(kmFrom  + " : " + kmTo );
//	    	console.log(sql + " : " + roadId + " : " + 1000*kmFrom + " : " + 1000*kmTo + " : " + 1000*kmFrom + " : " + 1000*kmFrom);
	    	if(sql!=undefined) {
				db.transaction(function(tx) {
					tx.executeSql(sql, [roadId,  1000*kmFrom, 1000*kmTo, 1000*kmFrom, 1000*kmFrom], function(tx, result) {
						if(result.rows.length > 0) {
							callback(result.rows);
							//console.log(result.rows);
						} else {
							callback([]);
						}
					},
					function(transaction, error) {
						console.log('error in getWeatherFromKmToKm: ' + error.message + ' code: ' + error.code);
						callback([]);
					});
				});	
	    	} else {
	    		callback([]);
	    	}
    	}
    } ,
    
    getAllWeather: function(callback) {
    	var db = this.application.config.db.db;
    	var sql = 'SELECT * FROM weather';
    	
    	db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
    	});	
    }
});

String.prototype.hashCode = function(){
	var hash = 0;
	if (this.length == 0) return hash;
	for (i = 0; i < this.length; i++) {
		char = this.charCodeAt(i);
		hash = ((hash<<5)-hash)+char;
		hash = hash & hash; // Convert to 32bit integer
	}
	return hash;
}

at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.TunnelSimulationController',
	{},
	{		
		init: function(application, subapp) {
			this.controller = this;
			this.subapp = subapp;
			this.roadPointDao = subapp.persistence;
			this.simulatedKm = 0;
			this.initialKm = undefined;
		},

		//Darf nur 1x pro Refresh aufgerufen werden
		runSimulation : function(currentKm, direction, roadId, refreshRate, tunnelSpeed, callback){
			if(this.simulatedKm == undefined){
				this.controller.startSimulation();
			}
			if(this.initialKm==undefined) {
				this.initialKm = currentKm;
			}
	    	var km = Math.round(((tunnelSpeed / 3.6 * refreshRate)) / 10);
	    	this.simulatedKm += (km/100);
	    	var delta = Math.round((this.simulatedKm*10))/10 ;
	    	this.roadPointDao.getPointDirectionAndKm(direction, ((this.initialKm + delta).toFixed(2)), roadId, callback);
	    },
	    
	    startSimulation: function(){
	    	this.simulatedKm = 0;
	    	this.initialKm = undefined;
	    },
	    
	    resetSimulation: function(){
	    	this.simulatedKm = undefined;
	    	this.initialKm = undefined;
	    }
	
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.Tests',
	{},
	{
		init: function(subapp) {//called like a constructor
			this._super(
				'/kompagnon/tests',
				'app/Kompagnon/view/tests.ejs'
			);
			var that = this;
			var application = subapp.application;
        	var tunnelDAO = new at.asfinag.unterwegs.persistence.TunnelDAO(application);
        	var roadworkDAO = new at.asfinag.unterwegs.persistence.RoadWorkDAO(application);     	
        	var junctionDAO = new at.asfinag.unterwegs.persistence.JunctionDAO(application);
        	var tollBoothDAO = subapp.tollBoothDao;
        	var roadWorkDAO = subapp.roadWorkDao;
        	var rastenDAO = subapp.rastenDao;
        	var positionLogger = subapp.positionLogger;
        	
			var freeze = new at.asfinag.unterwegs.mobile.Loading('kompagnon_freeze_ui');
			var pageLoaded = false;
			// modal freezen
            function freezeUI() {
                freeze.setVisible(true);
            }

            function unfreezeUI() {
                freeze.setVisible(false);
            }

			function showErrorNoConnection() {
				$('div.loading').hide();
				$('div.offline').show();
				$('div.error').hide();
				$('div.interface').hide();

				application.refreshPage();
			}

			function showErrorServerDown() {
				$('div.loading').hide();
				$('div.offline').hide();
				$('div.error').show();	// todo css anpassen fÃ¼r dieses div und ggf. fÃ¼r andere divs die im error-fall angezeigt werden
				$('div.interface').hide();

				application.refreshPage();
			}

			

			that.onLoad = function() {
				var that = this;
				var d = $.Deferred();
				d.controller = this;
				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							language: application.config.language,
							title: application.config.i18n[application.config.language].kompagnon.roadpoints,
							title_optional: '',
							addFavoriteButton: true
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			that.onShow = function() {//called when page is shown
				var controller = that;
				var that = this;
				
				subapp.persistence.getAllRoadpoints(function(roadPoints) {
					if(roadPoints.rows!=undefined) {
						$('#roadPointNumber').html(roadPoints.rows.length);
					}
				});

						
			    $('#roadPointNumber').on('click', function() {
						freezeUI();
						subapp.persistence.loadData(function() {
							unfreezeUI();
							$('#finished').html('roadpoint initialized');
						});
				});

				subapp.positionLogger.getAllLogsFromDb(function(positionData) {
					if(positionData.rows!=undefined) {
						$('#logEntryNumber').html(positionData.rows.length);
					}
				});

				subapp.tunnelDao.getAllTunnel(function(tunnels) {
					if(tunnels.length>0) {
						$('#tunnelNumber').html(tunnels.length);
					}
				});
				

				$('#tunnelNumber').on('click', function() {
					freezeUI();
					tunnelDAO.loadTunnelData(function() {
							unfreezeUI();
							$('#finished').html('Tunnels initialized');
						}
				    );
				});

				subapp.roadWorkDao.getAllRoadworks(function(roadworks) {
					if(roadworks.length>0) {
						$('#roadworksNumber').html(roadworks.length);
					}
				});
				
				$('#roadworksNumber').on('click', function() {
					freezeUI();
					roadworkDAO.loadRoadWorkData(function() {
							$('#finished').html('RoadWorks initialized');
							unfreezeUI();
						}
				    );
				});
				
				subapp.rastenDao.getAllRasten(function(rasten) {
					if(rasten.length>0) {
						$('#rastenNumber').html(rasten.length);
					}
				});
				
				
				$('#rastenNumber').on('click', function() {
					freezeUI();
					subapp.rastenDao.update(function(rasten) {
						$('#finished').html('Rasten initialized');
						unfreezeUI();
					} );
				});
				
				$('#junctionNumber').on('click', function() {
					freezeUI();
					junctionDAO.loadJunctionData(function() {
							unfreezeUI();
							$('#finished').html('Junctions initialized');
						}
				    );
				});

				subapp.junctionDao.getAllJunctions(function(junctions) {
					if(junctions.length>0) {
						$('#junctionNumber').html(junctions.length);
					}
				});
				
				$('#tollboothNumber').on('click', function() {
					freezeUI();
					tollBoothDAO.update(function() {
							$('#finished').html('Tollbooths initialized');
						}
				    );
					unfreezeUI();
				});

				subapp.tollBoothDao.getAllTollbooths(function(tollbooths) {
					if(tollbooths.length>0) {
						$('#tollboothNumber').html(tollbooths.length);
					}
				});
				
				
				$('#logEntryNumber').on('click', function() {
					freezeUI();
					positionLogger.sendDbLogToJson(function() {
							unfreezeUI();
							$('#finished').html('logdata sent');
						}
				    );
				});
				
				$('#deleteLogentries').on('click', function() {
					freezeUI();
					positionLogger.removeLogFromDb(function() {
							unfreezeUI();
							$('#finished').html('logdata removed');
							$('#logEntryNumber').html('-');						
						}
				    );
				});
				
				
				$('#resetLogs').on('click', function() {
					freezeUI();
					positionLogger.resetLog(function() {
							unfreezeUI();
							$('#finished').html('logdata reset');
							$('#logEntryNumber').html('-');						
						}
				    );
				});
				
				$('#resetAll').on('click', function() {
			    	var db = application.config.db.db;
			    	db.transaction(function(tx) {
		    			tx.executeSql('DROP TABLE IF EXISTS junction;');
		    			tx.executeSql('DROP TABLE IF EXISTS accesspoint;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'junction\';');
		    			tx.executeSql('DROP TABLE IF EXISTS roadpoints;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'roadpoints\';');
						tx.executeSql('DROP TABLE IF EXISTS positiondata;');
			    		tx.executeSql('DROP TABLE IF EXISTS roadwork_de_at;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'RoadWork_de-AT\';');
						tx.executeSql('DROP TABLE IF EXISTS roadwork_en_us;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'RoadWork_en-US\';');
						tx.executeSql('DROP TABLE IF EXISTS tollbooths;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'tollbooths\';');
						tx.executeSql('DROP TABLE IF EXISTS tunnel;');
						tx.executeSql('DELETE FROM timestamps where DATA = \'tunnel\';');
						tx.executeSql('DELETE FROM timestamps where DATA = \'Tunnel\';');
			    	});	
					alert('Bitte die App neu starten!');
				});
				
//				$('#reloadtollbooths').on('click', function() {
//					freezeUI();
//					//random TestDaten
//					var roadId = 14;
//					var currentKm = 90;
//					var direction = 1;
//					var viewingRange = 50;
//					var gridSize = 0.1;
//					subapp.persistence.getMaxPoint(roadId, currentKm, direction, viewingRange, gridSize, function(roadPoint) {
//						tollBoothDAO.getTollBoothsFromKmToKm(direction, roadId, currentKm, roadPoint.KM, function(tollBooths) {
//							console.log("finished");
//							$('#finished').html('');
//							for (var i=0; i<tollBooths.length; i++) {
//								$('#finished').append(tollBooths.item(i).NAME + ' : ' + tollBooths.item(i).ROAD_ID + ' : ' + tollBooths.item(i).DIRECTION + ' : ' + tollBooths.item(i).ROAD_KM_FROM + ' \n');
//							}	
//						} );
//					} );
//					unfreezeUI();
//				});
//				$('#reloadroadworks').on('click', function() {
//					freezeUI();
//					console.log("enter reloadRoadworks");
//					//roadworkDAO.loadRoadWorkData();
//					
//					//TODO: random TestDaten
//					var roadId = 14;
//					var currentKm = 90;
//					var direction = 1;
//					var viewingRange = 50;
//					var gridSize = 0.1;
//					var date = new Date(2013, 11, 22, 0, 0, 0);
//					//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		        	//var time = new Date(sdf.parse("2013-11-22 00:00:00"));
//		        	//$.datepicker.parseDate( "yy-mm-dd", "2007-01-26" );
//		        	//var time = $.datepicker.formatDate( "yy-mm-dd 00:00:00", new Date( 2013, 11, 22 ) );
//		        	
//		        	console.log(date);
//					subapp.persistence.getMaxPoint(roadId, currentKm, direction, viewingRange, gridSize, function(roadPoint) {
//						console.log("enter getRoadWorks:" + roadPoint.KM);
//						roadWorkDAO.getRoadWorksFromKmToKmAtTime(direction, roadId, currentKm, roadPoint.KM, date, function(roadWorks) {
//							console.log("finished: "+ roadWorks.length);
//							$('#finished').html('');
//							for (var i=0; i<roadWorks.length; i++) {
//								console.log(roadWorks.item(i));
//								$('#finished').append(roadWorks.item(i).REASON + ' : ' + roadWorks.item(i).ROAD_ID + ' : ' + roadWorks.item(i).DIRECTION + ' : ' + roadWorks.item(i).STARTTIME + ' \n');
//							}	
//						} );
//					} );
//					unfreezeUI();
//				});
				
				
			};

			that.onDestroy = function() {//called when we leave page e.g. back button
				$('li.button.reload').unbind('click');
				pageLoaded = false;

			};
		},
	}
);



at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.FCDController',
	{},
       
        {
        
		init: function(application) {//called like a constructor
			this.controller = this;
			this.application = application;
        },
        
        loadFCDParameters: function(callback) {
           	var that = this;
	    	var db = this.application.config.db.db;
    		var config = this.application.config;
    		var data = {};
    	
    		//var urlTimestamp = encodeURI(config.ods.url + '/anschlussstellen0200timestamp.json?username=' + config.ods.user + '&password=' + config.ods.password);
		   	var urlFCDData= encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.kmpgn_fcdconfig+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
			//console.debug('get fcd data from: ' + urlFCDData);
	    	$.ajax({
				url: urlFCDData,
				cache: false,
				dataType: 'json',
				success: function(data) {
					if(data.length=1 && data[0].speed!=undefined && data[0].delay!=undefined) {
						callback(data[0].speed, data[0].delay, data[0].accuracy);
					} else {
						console.debug('fcd data is not available or in wrong format');
					}
				},
				error: function() {
					console.debug('couldn\'t get fcd data');
				}
	        
	        });
		}
});












at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.AudioController',
	{},
       
        {
        
		init: function(application, subapp) {//called like a constructor
			this.controller = this;
			this.controller.subapp = subapp;
        },
        
        playNewEventSound: function() {
            //Create Media object from src
            //var my_media = new Media('app/Kompagnon/audio/newevent.mp3', function(){}, function(){}, function(){});

            //Play audio
            //my_media.play();
            if(this.controller.subapp.sound) {
	            navigator.notification.beep(1);
	        }
        }
});











at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.GeoLocation',
	{},
	{
		viewingRange:20,
		controller:undefined,
		subapp:undefined,
		application:undefined,
		positionLogger:undefined,
		refreshCount:undefined,
		geolocationCount:undefined,
		timers:[],
		lastLog:0,
		logFrequency:10,
		minimumSpeed: 19.5,//in m/s around 70 km/h
		leaveStreetAfterXTrys: 3,
		fcdEnabled:false,
		lastAsfinagLog:0,
		asfinagLogThreshold:90000,
		isDone:true,
		waitCount:0,
		lastRefreshDynamicEvents:undefined,
		refreshRateDynamicEvents:undefined,
		
		init: function(subapp,decimalD) {
			this._super(
				'/kompagnon/geolocation',
				//'app/Kompagnon/view/geolocation.ejs'
				'app/Kompagnon/view/visualization.ejs'
			);
			!release_flag && console.log("INIT GEOLOCATION");
			
			//Variables which are set ONCE per App-Start
			
			var that = this;
			
			this.decimalDigits = decimalD;
			var winSize = window.innerHeight;
   			subapp.audioController = new at.asfinag.unterwegs.kompagnon.controller.AudioController(application, subapp);
   			var tunnelSimulationController = new at.asfinag.unterwegs.kompagnon.controller.TunnelSimulationController(application,subapp);
			//var visualizationController = new at.asfinag.unterwegs.kompagnon.controller.VisualizationController(application, subapp);
			var visualizationController = new at.asfinag.unterwegs.kompagnon.controller.Visualization(application,subapp, this.viewingRange, this.decimalDigits);
			
            subApp = subapp;   
            application = subapp.application;
            positionLogger = subapp.positionLogger;
			controller = this;
			subapp.geolocationController = this;
			
			this.showRoadwork = true;
			this.showWebcam = true;
			this.showRasten = true;
			this.showJunction = true;
			this.showTollbooth = true;
			this.webCamFavorites = new Array();
			stellplaetzeList = new Array();
			intervalId = undefined;
			
			var freeze = new at.asfinag.unterwegs.mobile.Loading('kompagnon_freeze_ui');
			
			this.streetIsNew = true;
			
            that.onResize = function(){
            	controller.timers.push(setTimeout( function(){visualizationController.initView();
            	!release_flag && console.log("RESIZE GEOLOCATION"); }, 50));
            };
            
        	// modal freezen
            function freezeUI() {
            	var loadingMessage = this.application.config.i18n[this.application.config.language].kompagnon.loading;

            	// When data is loaded, loading message will be shown with the loading image.
            	// freeze.setVisible(false);
                freeze.setVisibleWithMessage(true, loadingMessage);
            };

            function unfreezeUI() {
                freeze.setVisible(false);
            };

			that.onLoad = function() {
				!release_flag && console.log("LOAD GEOLOCATION");
				
				//Variables which are set ONCE per Kompagnon-Start
				that.geolocationClosed = false;
				that.noPoisMsgNotShown = true;
				refreshCount = 0;
				lastRefreshDynamicEvents = new Date().getTime();
				refreshRateDynamicEvents = subapp.refreshRateDynamicEventsPassiv;
				geolocationCount = 0;
				visualizationController.onLoad();
				var d = $.Deferred();
				d.controller = this;
				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							language: application.config.language,
							title: application.config.i18n[application.config.language].kompagnon.geolocation,
							title_optional: '',
							addFavoriteButton: true
						}
					},
					function() {    			
						d.resolve();
					}
				);
				
				return d.promise();
			};

			that.onShow = function() {
				!release_flag && console.log("SHOW GEOLOCATION");
				that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
				
				controller.timers = [];
				var thatLocal = this;
				
				var GRID_SIZE = parseFloat('0.1');
				
				var gpsPoint;
				var previousPoint;
				var nextPoint;
				var currentDirection = undefined;
				var lastRoadPoint = undefined;
				var currentRoadPoint = undefined;
				var foundNoRoadPoints = 0;
				var currentRoadNotAsfinagCounter = 0;
		    	var currentStreet={'code':'-'};
				var maxPoint = undefined;
				var paused = false;
				var voice_loadingTrafficInfo=true;
				
				visualizationController.initView();
                
                subapp.fcdController =  new at.asfinag.unterwegs.kompagnon.controller.FCDController(application);
                subapp.fcdController.loadFCDParameters(function(speed, delay, accuracy) {
                	//ignore accuracy
                	that.minimumSpeed = parseFloat(speed)/3.6;//interface is in km/h convert to m/s
               		that.asfinagLogThreshold = delay * 1000; //in seconds so convert to ms
               		!release_flag && console.debug('set fcd parameters to speed: ' + that.minimumSpeed + ' asfinagLogThreshhold: ' + that.asfinagLogThreshold);
                });
                
                
                subapp.settingsDao.getAdditionalSetting('ko_hints',function(e){
                    if(e == undefined){
                    	!release_flag && console.log("additionalSetting empty");
                        subapp.settingsDao.setAdditionalSetting('ko_hints', 'X', '','', function(e){
                            if(e == undefined){
                            	!release_flag && console.log('Key ko_hints does not exist');
                            }
                        });
                     }
                     if(e && e.setValue == 'X'){
                        visualizationController.setDefaultMessages(true);
                     } else {
                        visualizationController.setDefaultMessages(false);
                     }
                });
               
                subapp.settingsDao.getAdditionalSetting('ko_constr',function(e){
                    
                    if(e == undefined){
                        subapp.settingsDao.setAdditionalSetting('ko_constr', 'option1_all', '','', function(e){
                            if(e == undefined){
                            	!release_flag && console.log('Key ko_constr does not exist');
                            }
                        });
                     }
                   
                     if(e && (e.setValue == 'option1_all' || e.setValue == 'option3_long')){
                    	 that.showRoadwork = true;
                     } else {
                    	 that.showRoadwork = false;
                     }
                });
                
                subapp.settingsDao.getAdditionalSetting('ko_webcams',function(e){
                    
                    if(e == undefined){
                        subapp.settingsDao.setAdditionalSetting('ko_webcams', 'option1_fav', '','', function(e){
                            if(e == undefined){
                            	!release_flag && console.log('Key ko_webcams does not exist');
                            }
                        });
                     }
                   
                     if(e && e.setValue == 'option1_fav'){
                    	 that.showWebcam = 1;
                     } else if(e && e.setValue == 'option2_all'){
                    	 that.showWebcam = 2;
                     } else if(e && e.setValue == 'option3_none'){
                    	 that.showWebcam = 0;
                     }
                });
                
                subapp.settingsDao.getAdditionalSetting('ko_rest',function(e){
                    
                    if(e == undefined){
                        subapp.settingsDao.setAdditionalSetting('ko_rest', 'option1_all', '','', function(e){
                            if(e == undefined){
                            	!release_flag && console.log('Key ko_rest does not exist');
                            }
                        });
                     }
                   
                     if(e && e.setValue == 'option1_all'){
                    	 that.showRasten = 1;
                     } else if(e && e.setValue == 'option2_areasandstation'){
                    	 that.showRasten = 2;
                     } else if(e && e.setValue == 'option3_with_gas'){
                    	 that.showRasten = 3;
                     } else if(e && e.setValue == 'option4_none'){
                    	 that.showRasten = 0;
                     }
                });
                
                subapp.settingsDao.getAdditionalSetting('ko_junc',function(e){
                    if(e == undefined){
                        subapp.settingsDao.setAdditionalSetting('ko_junc', 'X', '','', function(e){
                            if(e == undefined){
                            	!release_flag && console.log('Key ko_junc does not exist');
                            }
                        });
                     }
                   
                     if(e && e.setValue == 'X'){
                    	 that.showJunction = true;
                     } else {
                    	 that.showJunction = false;
                     }
                });
                
            
     
			   subapp.settingsDao.getAdditionalSetting('ko_tollst',function(e){
			         
			         if(e == undefined){
			             subapp.settingsDao.setAdditionalSetting('ko_tollst', 'X', '','', function(e){
			                 if(e == undefined){
			                	 !release_flag && console.log('Key ko_tollst does not exist');
			                 }
			             });
			          }
			        
			          if(e && e.setValue == 'X'){
			        	  that.showTollbooth = true;
			          } else {
			        	  that.showTollbooth = false;
			          }
			     });
			   
			   subapp.settingsDao.getAdditionalSetting('ko_tunnel',function(e){
			         
			         if(e == undefined){
			             subapp.settingsDao.setAdditionalSetting('ko_tunnel', 'X', '','', function(e){
			                 if(e == undefined){
			                	 !release_flag && console.log('Key ko_Tunnel does not exist');
			                 }
			             });
			          }
			        
			          if(e && e.setValue == 'X'){
			             that.showTunnel = true;
			          } else {
			         	that.showTunnel = false;
			          }
			     });

			   subapp.settingsDao.getAdditionalSetting('ko_igl',function(e){
			         
			         if(e == undefined){
			             subapp.settingsDao.setAdditionalSetting('ko_igl', 'X', '','', function(e){
			                 if(e == undefined){
			                	 !release_flag && console.log('Key ko_igl does not exist');
			                 }
			             });
			          }
			        
			          if(e && e.setValue == 'X'){
			             that.showIgl = true;
			          } else {
			         	that.showIgl = false;
			          }
			     });
			   
                subapp.settingsDao.getAdditionalSetting('ko_fcd',function(fcd){
                     if(fcd && fcd.setValue == 'X'){
                        that.fcdEnabled = true;
                        !release_flag && console.debug('fcd is enabled');
                     } else {
                    	!release_flag && console.debug('fcd disabled');
                     }
                });
			   
				var webcamsFavouritesDAO = new at.asfinag.unterwegs.WebcamsFavourites(application);
			   	
				// Hole alle FavoritenListen
				webcamsFavouritesDAO.getList(
					function(data) {
						// success
						visualizationController.getAllCameras = function(counter, listOfCameraLists){
							counter--;
							if(counter >= 0){
								//Hole alle Kameras einer Liste
								webcamsFavouritesDAO.getCameraList(listOfCameraLists[counter].favname,function(webcams) {
									// success
									for(var i = 0; i < webcams.length; i++){
										that.webCamFavorites.push(webcams[i]);
									}
									//Rekursiver Aufruf der restlichen Listen
									visualizationController.getAllCameras(counter,listOfCameraLists);
								});
							}
						};
						var length = data.length;
						visualizationController.getAllCameras(length,data);
					},
					function() {
						// error
						!release_flag && console.log("webcamsFavouritesDAO.getList: error");
					}
				);
				
				
				that.setCurrentDirection = function(newCurrentDirection){
					currentDirection = newCurrentDirection;
				};
				
				function acquire() {
					if(window.powerManagement) {
						window.powerManagement.acquireWakeLock(
							function() { 
								!release_flag && console.log('successfully acquired full wake lock'); 
							}
						);
					}
				};

				acquire();
				

				// when Kompagnon is loaded, it will show NotYetAsfinag Dialog. But, voice message will be loaded once.
				visualizationController.showNotYetAsfinag(true);
				if(subapp.firstStart) {
					visualizationController.showNotYetAsfinagVoice(true);
				}
				
				
				getLocation();
				
				//document.addEventListener("pause", handlePause, false);
				//document.addEventListener("resume", handleResume, false);
				
				function getLocation() {
					
					function handleNoRoadpoints(){
                		foundNoRoadPoints++;
                		
        				
                		if(foundNoRoadPoints >= that.leaveStreetAfterXTrys){
                			onRoad(false, false);//not on ASFINAG road
                    		currentRoadPoint = undefined;
                    		currentStreet = undefined;
    						visualizationController.clearRoadInfo();
    						foundNoRoadPoints = 0;
    						voice_loadingTrafficInfo=true;
                		}
                		!release_flag && console.log("foundNoRoadPoints:" + foundNoRoadPoints + " ,leaveStreetAfterXTrys : " + that.leaveStreetAfterXTrys);
						controller.isDone = true;
					}
					
					function handleRoadpoints(gpsPoint, roadPoint, otherClosePoints, leftDowner, rightUpper) {
					    
						//Found a Roadpoint, reset Counter, for more Info see function handleNoRoadpoints()
						foundNoRoadPoints = 0;
						
						var streetDao = subapp.streetDao;
						// if you change direction on the same street
						if(currentDirection!=undefined && 
						   roadPoint!=undefined && roadPoint['km']!=undefined && 
						   lastRoadPoint!=undefined && lastRoadPoint['km']!=undefined &&
						   roadPoint['roadid'] == lastRoadPoint['roadid'] &&
						   ((currentDirection==1 && roadPoint['km']<lastRoadPoint['km']) ||//We are probably moving in the opposite direction
						    (currentDirection==2 && roadPoint['km']>lastRoadPoint['km']))) {
							!release_flag && console.log('change direction');
						   currentDirection=undefined;
						   lastRoadPoint=undefined;
						   roadPoint=undefined;
						   this.streetIsNew = true;
						   controller.isDone = true;
						}
						
						//if roadPoint has wrong direction and there is another closePoint with the right direction -> switch them
						if(currentDirection!=undefined && roadPoint!=undefined && lastRoadPoint!=undefined && roadPoint.direction!=currentDirection) {
							for(var i = 0; i < otherClosePoints.length; i++) {
								if(otherClosePoints[i].km==roadPoint.km && otherClosePoints[i].direction!=roadPoint.direction && otherClosePoints[i].direction==currentDirection) {
									!release_flag && console.log("Replace nearest Roadpoint(wrong Direction) with another Roadpoint(right Direction, same KM)");
									roadPoint = otherClosePoints[i];
								}
							}
						}
						//if you change street
						if(currentDirection!=undefined && 
								   roadPoint!=undefined && 
								   lastRoadPoint!=undefined && 
								   roadPoint['roadid'] != lastRoadPoint['roadid'] ) {
									!release_flag && console.log('change street');
								   currentDirection=undefined;
								   lastRoadPoint=undefined;
								   roadPoint=undefined;
								   this.streetIsNew = true;
								   controller.isDone = true;
						}

						var ignorePoint = false;
						//we haven't moved enough for another update to be necessary
						if(currentDirection!=undefined && roadPoint!=undefined && roadPoint.direction!=currentDirection && roadPoint.km==lastRoadPoint.km) {
							!release_flag && console.log("Ignore. No Schmea Update because we have not moved enough");
							ignorePoint = true;
						    controller.isDone = true;
						}
						
						if(!ignorePoint){
							 if(roadPoint!=undefined && roadPoint['id']!=undefined) {
								currentRoadNotAsfinagCounter=0;
						    	currentRoadPoint = roadPoint;
						    	streetDao.getStreetByRoadId(roadPoint['roadid'], function(street) {
						    	 	currentStreet=street;
						    	
						    	 	visualizationController.updateRoadInfo(currentStreet, roadPoint);
						    	 	visualizationController.updateClosestRoadpoint(roadPoint, minDistance, refreshCount);
						    	 	if(currentStreet!=undefined && currentDirection!=undefined) {
						    	 		if(subapp.firstStart == true) {
							    	 		subapp.firstStart = false;
							    	 		voice_loadingTrafficInfo=false;
						    	 		}
										visualizationController.showNotYetAsfinag(false);
						    	 	}
						    	 	
						    	 	// We have a street and a Direction -> remove OffAsfinagOverlay
					    	 		onRoad(true, true);
						    	 	if(currentStreet!=undefined && currentDirection!=undefined) {	
						    	 		
						    	 		// We have a Direction -> remove NoDirectionOverlay
						    	 		visualizationController.showCurrentDirection(currentDirection);
						    	 		if(this.streetIsNew == true){
						    	 			freezeUI();
						    	 		}
						    	 		var roadDao = subapp.persistence;

						    	 		roadDao.getNextRoadPoint(parseFloat(roadPoint['km']), 
									                                    currentDirection, 
									                                    GRID_SIZE, 
									                                    roadPoint['roadid'],
									                                    function(foundNextPoint) {
									                                  		nextPoint = foundNextPoint;
									                                    });
						    	 		roadDao.getPreviousRoadPoint(parseFloat(roadPoint['km']), 
									                                        currentDirection, 
									                                        GRID_SIZE, 
									                                        roadPoint['roadid'], 
									                                        function(foundPreviousPoint) {
									                                        	previousPoint = foundPreviousPoint
									                                        });
										var minDistance = roadPoint['mindistance'];
										var calculatedMinDistance = calculateMinDistance(gpsPoint, nextPoint, previousPoint, roadPoint, roadDao) ;
										if(calculatedMinDistance<minDistance) {
											minDistance = calculatedMinDistance;
										}
										if(minDistance!=undefined) {
//										    if(minDistance*1000<gpsPoint['accuracy']) {
//										    	onRoad(true, true);//on road and mindistance ok
//											} else {
//												onRoad(false, true);//at least close to road but mindistance not ok
//											}                   	
											visualizationController.updateClosestRoadpoint(roadPoint, minDistance, refreshCount);
											var localRoadId = roadPoint['roadid'];
											var localKmFrom = roadPoint['km'];
											var events = [];
											var logs = [];
											var start = new Date().getTime();
											subapp.persistence.getMaxPoint(roadPoint['roadid'], roadPoint['km'], currentDirection, 
											                               that.viewingRange, GRID_SIZE, 
											                               function(maxPoint) {
																				logs.push('elapsed @max: ' + ((new Date().getTime()-start)/1000));
																				var localKmTo = maxPoint['KM'];
																				subapp.tollBoothDao.getTollBoothsFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, that.showTollbooth, 
																					function(tollBooths) {
																					!release_flag && console.log('Nr. of TollBooths: ' + tollBooths.length);
																				logs.push('elapsed @toll: ' + ((new Date().getTime()-start)/1000));
																        				var tollBoothsArray = [];
																        				for(var i = 0; i < tollBooths.length; i++) {
																							var item = tollBooths.item(i);
																							var tollBooth = {'id':item.ID, 'eventType':'Tollbooth', 'km':item.ROAD_KM_TOLLSTATION, 'name':item.NAME, 'nummer':item.NUMMER, 'distance':-1};
																							tollBoothsArray.push(tollBooth);
																						}
																						events = events.concat(tollBoothsArray);
																						subapp.tunnelDao.getTunnelsFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, that.showTunnel,
																							function(tunnels) {
																				logs.push('elapsed @tunnels: ' + ((new Date().getTime()-start)/1000));
																								!release_flag && console.log('Nr. of Tunnels: ' + tunnels.length);
																								var tunnelArray = [];
																		        				for(var i = 0; i < tunnels.length; i++) {
																									var item = tunnels.item(i);
																									var fromKm;
																									var toKm;
																									if(currentDirection == 1){
		 																								fromKm = item.KM_FROM_RFB1;
		 																								toKm = item.KM_TO_RFB1;
		 																							} else {
		 																								fromKm = item.KM_FROM_RFB2;
		 																								toKm = item.KM_TO_RFB2;
		 																							} 
																									var tunnel = {'id':item.ID, 'eventType':'Tunnel', 'name':item.NAME, 'fromKm':fromKm, 'toKm':toKm, 'distance':-1};
																									tunnelArray.push(tunnel);
																								}
																								events = events.concat(tunnelArray);
																								
																								var rampenBaustelleIDs ={};
																								
																								subapp.roadWorkDao.getRoadWorksFromKmToKmAtTime(currentDirection, localRoadId, localKmFrom, localKmTo, new Date(), that.showRoadwork, 
																									function(roadWorks) {
																				logs.push('elapsed @roadworks: ' + ((new Date().getTime()-start)/1000));
																										!release_flag && console.log('Nr. of Roadworks: ' + roadWorks.length);
																										var roadWorksArray = [];
																				        				for(var i = 0; i < roadWorks.length; i++) {
																											var item = roadWorks.item(i);
																											var fromKm;
																											var toKm;
																											if(currentDirection == 1){
																												fromKm = (parseFloat(item.BEGINMETER_RFB1)/1000).toFixed(2);
																												toKm = (parseFloat(item.ENDMETER_RFB1)/1000).toFixed(2);
																											} else {
																												fromKm = (parseFloat(item.BEGINMETER_RFB2)/1000).toFixed(2);
																												toKm = (parseFloat(item.ENDMETER_RFB2)/1000).toFixed(2);
																											}

																											if (item.RAMPENBAUSTELLE!=-1){
																												rampenBaustelleIDs[item.RAMPENBAUSTELLE]=item;
																											}
																											else {
																												var roadWork = {'id':item.ID, 'eventType':'RoadWork', 'RoadWorkType':'Baustelle','fromKm':fromKm, 'toKm':toKm, 'distance':-1, 'endDate':item.ENDTIME,'poi2str':0};
																												roadWorksArray.push(roadWork);
																											}
																										}
																										events = events.concat(roadWorksArray);
																										subapp.iglDao.getActiveIglsFromKmToKmAtTime(currentDirection, localRoadId, localKmFrom, localKmTo, that.showIgl, 
																												function(igls) {
																				logs.push('elapsed @igls: ' + ((new Date().getTime()-start)/1000));
																												
																													var iglArray = [];
																													var fromKm;
																													var toKm;
																													for(var i = 0; i < igls.length; i++) {
																														var item = igls.item(i);
																														if(currentDirection == 1){
																															fromKm = item.ROAD_KM_FROM;
																															toKm = item.ROAD_KM_TO;
																														} else {
																															toKm = item.ROAD_KM_FROM;
																															fromKm = item.ROAD_KM_TO;
																														} 
																													    var igl = {"id":item.ID,'eventType':'IG-L','name':item.NAME,'fromKm':fromKm, 'toKm':toKm};
																													    iglArray.push(igl);
																													}
																													events = events.concat(iglArray);
																										
																										subapp.weatherDao.getWeatherFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, true, 
																												function(weathers) {
																							logs.push('elapsed @weather: ' + ((new Date().getTime()-start)/1000));
																													
																													if(weathers.length > 0){
																														refreshRateDynamicEvents = subapp.refreshRateDynamicEventsActiv;
																													}
																													var weathersArray = [];
																							        				for(var i = 0; i < weathers.length; i++) {
																														var item = weathers.item(i);
																														var fromKm;
																														var toKm;
																														
																														
																														if(currentDirection == 1){
																															fromKm = (parseFloat(item.BEGINMETER)/1000).toFixed(2);
																															toKm = (parseFloat(item.ENDMETER)/1000).toFixed(2);
																														} else {
																															toKm = (parseFloat(item.BEGINMETER)/1000).toFixed(2);
																															fromKm = (parseFloat(item.ENDMETER)/1000).toFixed(2);
																														}
																														
																														var weather = {'id':item.ID, 'eventType':'Weather', 'WeatherType':item.WARNING_TYP,'fromKm':fromKm, 'toKm':toKm, 'distance':-1, poi2str:0};
																														weathersArray.push(weather);
																													}
																							        				events = events.concat(weathersArray);
																													subapp.delayDao.getDelayFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, true, 
																														function(delays) {
																									logs.push('elapsed @delay: ' + ((new Date().getTime()-start)/1000));
																															if(delays.length > 0){
																																refreshRateDynamicEvents = subapp.refreshRateDynamicEventsActiv;
																															}
																															var delaysArray = [];
																									        				for(var i = 0; i < delays.length; i++) {
																																var item = delays.item(i);
																																var fromKm = item.KM_FROM;
																																var toKm = item.KM_TO;
																																
																																
																																var delayInMin = Math.ceil(item.DELAY/60) ;
																																
																																var delay = {'id':item.ID, 'eventType':'Delay', 'DelayType':item.JAM_REASON,'fromKm':fromKm, 'toKm':toKm, 'delay':delayInMin , 'distance':-1, poi2str:0};
																																
																																delaysArray.push(delay);
																															}
																										        			events = events.concat(delaysArray);
																															subapp.rastenDao.getRastenFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, that.showRasten, 
																											        			function(rasten) {
																									logs.push('elapsed @rasten: ' + ((new Date().getTime()-start)/1000));
																																	!release_flag && console.log('Nr. of rasten: ' + rasten.length);
																																	
																											        				var rastenArray = [];
																											        				for(var i = 0; i < rasten.length; i++) {
																																		var item = rasten.item(i);

																																		var rastenKmRampe = item.rasten_km_rampe;
																																		if(rastenKmRampe == undefined || rastenKmRampe == "" || rastenKmRampe == 0) {
																																			rastenKmRampe = item.km;
																																		}
																																		
																																		var rast = {'id':item.id, 'eventType':'Rasten', 'rastenType':item.type, 'km':rastenKmRampe, 'name':item.name, 'services':item.services, 'distance':-1, 'lkwInfo':''};
																																		rastenArray.push(rast);
																																	}
																											        				
																											        				events = events.concat(rastenArray);
																											        				subapp.junctionDao.getJunctionsFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, that.showJunction, 
																											        					function(junctions) {
																									logs.push('elapsed @junctions: ' + ((new Date().getTime()-start)/1000));
																																			!release_flag && console.log('Nr. of junctions: ' + junctions.length);
																													        				var junctionsArray = [];
																													        				var currentJunction = -1;
																													        				var junction = {};
																													        				for(var i = 0; i < junctions.length; i++) {
																																				var item = junctions.item(i);
																																				if(currentJunction!=item.KNNR) {//new junction started
																																					currentJunction = item.KNNR;
																																					if(junction.id!=undefined) {//push previously handled junction
																																						junctionsArray.push(junction);
																																					}
																																					//create new junction
																																					var astRoadWork = undefined;
																																					if (item.JUNCTION_TYPE.toLowerCase() != "kn" && item.KNNR in rampenBaustelleIDs){
																																							astRoadWork=rampenBaustelleIDs[item.KNNR];
																																							delete rampenBaustelleIDs[item.KNNR];
																																					}
																																					junction = {'id':item.ID, 'eventType':'Junction', 'junctionType':item.JUNCTION_TYPE, 'km':item.JUNCTION_KM_RAMPE, 'name':item.JUNCTION, 'junctions':[], 'distance':-1, 'pd': item.PD,'roadwork':astRoadWork};
																																				}
																																				junction.junctions.push(item.NEXT_ROAD_ID);
																																			}
																																			if(junction.id!=undefined) { 
																																				junctionsArray.push(junction);//push last junction
																																			}
																																		
																																			events = events.concat(junctionsArray);
																																			
																												        					subapp.webcamDao.getWebcamsFromKmToKm(currentDirection, localRoadId, localKmFrom, localKmTo, that.showWebcam,
																												        						function(webcams) {
																									logs.push('elapsed @ewbcams: ' + ((new Date().getTime()-start)/1000));
																																					!release_flag && console.log('Nr. of webcams: ' + webcams.length)
																												        							var webcamArray = [];
																															        				for(var i = 0; i < webcams.length; i++) {
																																						var item = webcams.item(i);
																																						var webCamTyp;
																																						if(item.richtung == 0){
																																							webcamTyp = 'WebcamSpecial';
																																						}else if(currentDirection == item.richtung){
																																							webcamTyp = 'WebcamFront';
																																						}else {
																																							continue;
																																						}
																																						var terms=application.config.i18n[application.config.language].kompagnon.location_short;
																																						var webcamLocation = "";
																																						if (item.lage.split(',').length>1) {
																																							webcamLocation = item.lage.split(',')[1].replace('Anschlussstelle',terms.Anschlussstelle).replace('Halbanschlussstelle',terms.Halbanschlussstelle).replace('Knoten',terms.Knoten).replace('Rastplatz',terms.Rastplatz).replace('Raststation',terms.Raststation);
																																						}
																																						
																																						// show only Favorites
																																						if(that.showWebcam == 1){
																																							for(var x = 0; x < that.webCamFavorites.length;x++){
																																								if(item.name.localeCompare(that.webCamFavorites[x].camid) == 0){
																																									var webcam = {'id':item.id, 'name': item.name, 'eventType': 'Webcam', 'webcamType':webcamTyp, 'km':item.km, 'picture':item.thumbUrl, 'distance':-1,'location':webcamLocation};
																																									webcamArray.push(webcam);
																																								}
																																							}
																																						//show all Webcams
																																						}else{
																																							var webcam = {'id':item.id, 'name': item.name, 'eventType': 'Webcam', 'webcamType':webcamTyp, 'km':item.km, 'picture':item.thumbUrl, 'distance':-1, 'location':webcamLocation};
																																							webcamArray.push(webcam);
																																						}
																																					}
																															        				
																																					events = events.concat(webcamArray);
																																					var webcamKmFrom=9999999;
																																					var webcamKmTo=-1;
																																					$.each(events, function(index, event) {
																															        					if(event.km!=undefined && event.km<webcamKmFrom) {
																															        						webcamKmFrom = event.km;
																															        					} else if(event.fromKm!=undefined && event.fromKm<webcamKmFrom) {
																															        						webcamKmFrom = event.fromKm;
																															        					}
																															        					if(event.km!=undefined && event.km>webcamKmTo) {
																															        						webcamKmTo = event.km;
																															        					} else if(event.toKm!=undefined && event.toKm>webcamKmTo) {
																															        						webcamKmTo = event.toKm;
																															        					}
																																					});
																																					subapp.webcamDao.getWebcamsFromKmToKm(currentDirection, localRoadId, webcamKmFrom, webcamKmTo, that.showWebcam,
																																						function(eventWebcams) {
																									logs.push('elapsed @eventwebcams: ' + ((new Date().getTime()-start)/1000));
																																							!release_flag && console.log('Nr. of eventWebcams: ' + eventWebcams.length)
																																							if(eventWebcams.length>0) {
																																								for(var i = 0; i < eventWebcams.length; i++) {
																																									var item= eventWebcams.item(i);
																																									var webcam = {'id':item.id, 'eventType':'Webcam', 'km':item.km, 'picture':item.thumbUrl, 'distance':-1};
																																									$.each(events, function(indexEvent,event) {
																																										if(event.eventType=='RoadWork') {//TODO R1 or traffic jam or bad weather
																																											if(event.fromKm<=webcam.km && event.toKm>=webcam.km) {//if webcam within eventborders
																																												if(event.webcam==undefined || (event.webcam!=undefined && event.webcam.km>webcam.km)) {//if no webcam already set or set but current km is smaller than set km
																																													event.webcam = webcam;
																																												}
																																											}
																																										}
																																									});
																																								}
																																							}
																																							!release_flag && console.log('sorting');
																									logs.push('elapsed @before sort: ' + ((new Date().getTime()-start)/1000));
																															        						events.sort(function(a, b) {
																																								var kmA = a.km!=undefined ? a.km : a.fromKm;
																																								var kmB = b.km!=undefined ? b.km : b.fromKm;
																																								var typA = a.eventType;
																																								var typB = b.eventType;
																																								
																																								kmA = parseFloat(kmA).toFixed(controller.decimalDigits);
																																								kmB = parseFloat(kmB).toFixed(controller.decimalDigits);
																																								
																																								// Same KM -> compare Eventtype, alphabetical first
																																								// -1 -> a comes first, 1 -> b comes first
																																								var result = (kmA-kmB).toFixed(controller.decimalDigits);
																																								if(result == 0){
																																									return typA-typB;
																																								} else if(currentDirection == 1) {
																																									return kmA-kmB
																																								} else {
																																									return kmB-kmA;
																																								}
																																							});
																									logs.push('elapsed @after : ' + ((new Date().getTime()-start)/1000));
																																							!release_flag && console.log('sorting done');
																															        						subapp.persistence.calculateEventDistances(currentDirection, roadPoint, events, GRID_SIZE, function(distances, returnEvents) {
																									logs.push('elapsed @calculate event distances returns: ' + ((new Date().getTime()-start)/1000));
																															        							if(distances.length!=events.length) {
																															        								console.log('Geolocation: different events.lengths and distances.length: ' + distances.length + ' ' + events.length);
																															        							}
																															        							$.each(returnEvents, function(index, value) {
																															        								value.distance=distances[index];
																																								});
																									logs.push('elapsed @calculate event distances finishes: ' + ((new Date().getTime()-start)/1000));
																															        							subapp.persistence.getLastPoint(roadPoint['roadid'], currentDirection, function(lastPoint){
																									logs.push('elapsed @lastroadpoint: ' + ((new Date().getTime()-start)/1000));
																															        								subapp.junctionDao.getLongTermGoalFromKmToKm(currentDirection, localRoadId, maxPoint['KM'], lastPoint['KM'], function(longTermGoal) {
																									logs.push('elapsed @longtermgoal: ' + ((new Date().getTime()-start)/1000));
																																										!release_flag && console.log('longTermGoal: ' + longTermGoal);
																															        									if(geolocationCount==0) {
																															        										refreshCount = 0;
																															        									}
																															        									geolocationCount++;
																															        									//$('#count2').html(geolocationCount);
																															        									var end = new Date().getTime();
																																										var time = end - start;
																																										var logString = '';
																																	        							$.each(logs, function(index, value) {
																																	        								logString+=value;
																																	        								logString+='\n';
																																										});
																																	        							
																																	        							if(returnEvents == undefined || returnEvents.length == 0){
																																	        								!release_flag && console.log("direction: " + currentDirection );
																																	        								!release_flag && console.log("localKmFrom: " + localKmFrom );
																																	        								!release_flag && console.log("localRoadId: " + localRoadId );
																																	        								!release_flag && console.log("data:");
																																	        								!release_flag && console.log(returnEvents);
																																	        							}
																																	        							
																																	        							var devicePlatform = device.platform;
																																	        							var speed;
																																	        							!release_flag && console.log("Platform is: " + devicePlatform);
																																	        							if(devicePlatform == "Blackberry"){
																																	        								!release_flag && console.log("Speed fixed to 80!");
																																	        								speed = 80;
																																	        							}else{
																																	        								speed = gpsPoint['speed'];
																																	        							}
																																	        							
																															        									visualizationController.refreshData(returnEvents,speed,roadPoint,longTermGoal);
																															        						        	var date = new Date();
																															        						        	var times = SunCalc.getTimes(date, gpsPoint['lat'], gpsPoint['lon']);                  
																															        						        	var isNightOrTunnel = times.sunrise> date || times.sunset< date;
																															        						        	!release_flag && console.log("current time: "+date.toTimeString()+" sunrise: "+times.sunrise.toTimeString()+" sunset: "+times.sunset.toTimeString());
																															        						        	
																															        						        	subapp.tunnelDao.getCurrentTunnel(currentDirection, currentRoadPoint['roadid'], parseFloat(currentRoadPoint['km']), 
																															        					            			function(currTunnel) {
																															        						            			if(currTunnel != undefined){
																															        						            				isNightOrTunnel=true;
																															        						    		            }
																															        						            			visualizationController.enableNightModeIfNeeded(isNightOrTunnel);
																															        					            		}
																															        					            	);
																															        									controller.isDone = true;
																															        									
																															        									if(this.streetIsNew == true){
																															        										unfreezeUI();
																															        										this.streetIsNew = false;
																															    						    	 		}
																															        									
																															        								});
																															        							});
																															        						});
																															        					});
																												        						}
																												        					);
																												        				}
																												        			);
																											        			}
																											        		);
																														}
																													);
																												}
																						        		);
																										});
																									}
																								);
																							}
																						);
																					}
																				);
																			}
																		);
											lastRoadPoint = roadPoint;     
										} else {//if minDistance!=undefined 
											controller.isDone = true;
										}
								    } else {
								    	
								    	var getDirectionHumanReadable = function(){ //TODO: check if function needs to be renamed?
								    		
								    		var direction = 1;
								    		var result = new Array();
								    		
											subapp.junctionDao.getNextJunction( direction,lastRoadPoint, function( resultDir_1 ){
												if(resultDir_1 != undefined ){
													result[0] = resultDir_1.item(0);
												}
												
												direction = 2;
												subapp.junctionDao.getNextJunction( direction,lastRoadPoint, function( resultDir_2 ){
													if(resultDir_2 != undefined){
														result[1] = resultDir_2.item(0);
													}
													if(voice_loadingTrafficInfo){
														//TODO: Sprachausgabe
														visualizationController.loadingTrafficUpdatesVoice();
														voice_loadingTrafficInfo = false;
													}
												});
											});
								    	}
								    	
										if(lastRoadPoint == undefined) {
											lastRoadPoint = roadPoint;
											//Direction not known/unsure -> Show NoDirectionoverlay
											getDirectionHumanReadable(); //TODO: call sprachausgabe
										} else {
											if(lastRoadPoint['id']!=roadPoint['id']) {//we have moved
												if(lastRoadPoint['direction']==roadPoint['direction'] &&
												   lastRoadPoint['roadid']==roadPoint['roadid']) {//two times same direction
													currentDirection = roadPoint['direction'];
													
												} else {//other direction, currentDirection still unclear
													lastRoadPoint = roadPoint;
													//Direction not known/unsure -> Show NoDirectionoverlay
													getDirectionHumanReadable(); //TODO: call sprachausgabe
												}
											}	
										}
										controller.isDone = true;
									}
						    	});
		                    } else if(currentRoadNotAsfinagCounter>=that.leaveStreetAfterXTrys) {
		                    		onRoad(false, false);//not on ASFINAG road
		                    		voice_loadingTrafficInfo=true;
		                    		currentRoadPoint = undefined;
		                    		currentStreet = undefined;
									visualizationController.clearRoadInfo();
									controller.isDone = true;
		                    } else {
		                    	currentRoadNotAsfinagCounter++
		                    }
						} else {//ignore point
							controller.isDone = true;
						}
					}
		
					function onRoad(isOnRoad, withPoint) {
						if(isOnRoad==true && withPoint==true) {
							visualizationController.showOffAsfinag(false);
							!release_flag && console.log("OnRoad(): Auf der Straße!");
						} else if(!subapp.firstStart && isOnRoad==false && withPoint==true) {
							visualizationController.showOffAsfinag(false);
							!release_flag && console.log("OnRoad(): Auf der Straße aber unsicher!");
						} else if(isOnRoad==false && withPoint==false) {
							if(!subapp.firstStart) {
								visualizationController.showOffAsfinag(true);
						    }
					    } else {
					    	console.error("Geolocation:onRoad: we are in a black hole");
					    }
					}
								
					function calculateMinDistance(gpsPoint, nextPoint, previousPoint, roadPoint, roadDao) {
						var distance = 9999999;
						var gamma1 = 999;
						var gamma2 = 999;
						var distance1 = 999;
						var distance2 = 999;
						if(nextPoint!=undefined && nextPoint['lat']!=undefined) {
							c1 = roadDao.calcDistance(gpsPoint['lat'], gpsPoint['lon'], nextPoint['lat'], nextPoint['lon']);
							a1=roadDao.calcDistance(gpsPoint['lat'], gpsPoint['lon'], roadPoint['lat'], roadPoint['lon']);
							b1=roadDao.calcDistance(roadPoint['lat'], roadPoint['lon'], nextPoint['lat'], nextPoint['lon']);
		//					console.log('a1: ' + a1 + ' b1: ' + b1 + ' c1: ' + c1);
							gamma1 = Math.acos((Math.pow(c1,2)-Math.pow(a1,2)-Math.pow(b1,2)) / (-2*a1*b1))*(180/Math.PI);
//							console.log('gamma1: ' + gamma1);
							if(gamma1<=90) {
//								console.log('A, ' + gpsPoint['lat'] + ', ' + gpsPoint['lon']);
//								console.log('B, ' + roadPoint['lat'] + ', ' + roadPoint['lon']);
//								console.log('C, ' + nextPoint['lat'] + ', ' + nextPoint['lon']);
								var s1 = 0.5*(a1+b1+c1);
								distance1 = (2/b1)*Math.sqrt(s1*(s1-a1)*(s1-b1)*(s1-c1));
//								console.log('new mindistance from triangle1: ' + distance);
//								console.log('a1: ' + a1);
//								console.log('p= ' + Math.sqrt((Math.pow(a1,2)-Math.pow(distance,2))));
//								console.log('Vector: ' + (previous.lat));
							}					
						}
						if(previousPoint!=undefined && previousPoint['lat']!=undefined) {
							c2=roadDao.calcDistance(gpsPoint['lat'], gpsPoint['lon'], previousPoint['lat'], previousPoint['lon']);
							a2=roadDao.calcDistance(gpsPoint['lat'], gpsPoint['lon'], roadPoint['lat'], roadPoint['lon']);
							b2=roadDao.calcDistance(roadPoint['lat'], roadPoint['lon'], previousPoint['lat'], previousPoint['lon']);
	//						console.log('a2: ' + a2 + ' b2: ' + b2 + ' c2: ' + c2);
							var gamma2 = Math.acos((Math.pow(c2,2)-Math.pow(a2,2)-Math.pow(b2,2)) / (-2*a2*b2))*(180/Math.PI);
//							console.log('gamma2: ' +gamma2);
							if(gamma2<=90) {
//								console.log('GPSPoint, ' + gpsPoint['lat'] + ', ' + gpsPoint['lon']);
//								console.log('RoadPoint, ' + roadPoint['lat'] + ', ' + roadPoint['lon']);
//								console.log('PreviousPoint, ' + previousPoint['lat'] + ', ' + previousPoint['lon']);
								var s2 = 0.5*(a2+b2+c2);
								distance2 = (2/b2)*Math.sqrt(s2*(s2-a2)*(s2-b2)*(s2-c2));
//								console.log('new mindistance from triangle2: ' + distance);
								
							}
							if(gamma1<gamma2) {
								distance = distance1;
							} else {
								distance = distance2;
							} 
						}
						return distance;
					}
					
		            function handlePosition(position) {
		            		
		            	if(!that.geolocationClosed){
			            	controller.isDone = false;
			            	visualizationController.showGPSError(false);
							visualizationController.updatePositionInfo(position, refreshCount);
							//$('#count1').html(refreshCount);
							
							gpsPoint = {'lat':position.coords.latitude, 
										'lon':position.coords.longitude, 
										'accuracy':position.coords.accuracy,
										'heading':position.coords.heading,
										'speed':position.coords.speed,
										'timestamp': new Date(position.timestamp)};
							
							
							//gpsPoint = {'lat':48.203570, 'lon':16.231950, 'accuracy':100];
							
							//factor 1.25 = edge length / 125 in meter of bounding box).
							var lonDelta = 1.25/715;
							var latDelta = 1.25/1135;
							
							leftDowner = {'lat':gpsPoint['lat']-latDelta, 'lon':gpsPoint['lon']-lonDelta};
							rightUpper = {'lat':gpsPoint['lat']+latDelta, 'lon':gpsPoint['lon']+lonDelta};
							
						    var km = -1;
						    var roadId = -1;
						    if(currentRoadPoint!=undefined) {
						    	km = currentRoadPoint['km'];
						    }
						    if(currentStreet!=undefined) {
						    	roadId = currentStreet['roadid'];
						    }
						    var currentTime = new Date().getTime();
						    var doLog = currentTime-controller.lastLog>(controller.logFrequency*1000)?true:false;//only log every nsec
						    var doLog = doLog && that.fcdEnabled;
						    doLog = (doLog && roadId>0 && km>0)?true:false;
						    //doLog = true;
						    //gpsPoint.speed = 6.66;
						    if(doLog) {
						    	if(subapp.sendPositionDataToBackend){
							    	positionLogger.logAndSendCurrentParameter(gpsPoint, currentTime);
						    	}
							    if(subapp.logPositionDataWeb) {
								    positionLogger.log(gpsPoint, currentDirection, km, roadId);
								}
								if(subapp.logPositionDataDb) {
								    positionLogger.logToDb(gpsPoint, currentDirection, km, roadId);
								}
								if(subapp.logPositionDataAsfinag) {
									//speed must be lower than minimumSpeed
									if(gpsPoint.speed!=null && gpsPoint.speed < that.minimumSpeed) {								
										positionLogger.logToDb(gpsPoint, currentDirection, km, roadId);
										console.log('Speed is between 0 and ' + that.minimumSpeed +': Logging PositionData');
										//$('#fcd').html('fcd: ' + gpsPoint.speed);
									} else {
										//$('#fcd').html('no fcd: ' + gpsPoint.speed);
										console.log('speed is null or too high: Not Logging PositionData');
									}
									if(that.lastAsfinagLog!=0 && currentTime-that.lastAsfinagLog>that.asfinagLogThreshold) {
										positionLogger.sendLogToAsfinag(function(){
											console.log('sent fcd data to Asfinag');
										});
										that.lastAsfinagLog = currentTime;
									} else if(that.lastAsfinagLog==0){
										that.lastAsfinagLog = currentTime;
									} 
								}
								controller.lastLog = currentTime;
							}
							subapp.persistence.
							getClosestRoadPointByLocation(
									leftDowner, 
							        rightUpper,
							        gpsPoint, 
							        currentDirection,
							        handleRoadpoints,
							        handleNoRoadpoints
	                        );	
	                        if(!paused) {
	                        	//console.log('checking if we want to refresh: ' + controller.isDone);
	                        	if(controller.isDone) {
	                        		//console.log('----------------------------');
	                        		//console.log('start new cycle');
	                        		//console.log('----------------------------');
			            		    controller.timers.push(setTimeout(function(){getLocation();}, subapp.refreshRate*1000));
			            		} else {
			            			//console.log('initiating wait');
			            			function wait() {
			            				//console.log('in wait: ' + controller.isDone);
			            				if(controller.isDone) {
					            		    controller.timers.push(setTimeout(function(){getLocation();}, subapp.refreshRate*1000));
			            				} else {
			            					//console.log('waiting: ' + controller.waitCount);
			            					controller.waitCount++;
			            					controller.timers.push(setTimeout(function(){wait();}, 500));//wait for 0.5sec
			            				}
			            			}
			            			wait();
			            		}
		            		}
		            	}
		            }
					
		            function handlePositionError(error) {
		            	if(!that.geolocationClosed){
		            		console.log('handlePositionError');
			            	var tunnelDao = subapp.tunnelDao; 
			            	if(currentRoadPoint == undefined){
			            		handleGPSError(error);
			            		//setTimeout(function(){handleGPSError(error);}, 10000);
			            	}else{
				            	tunnelDao.getCurrentTunnel(currentDirection, currentRoadPoint['roadid'], parseFloat(currentRoadPoint['km']), 
				            			function(currTunnel) {
				            				//Falls man sich in einem Tunnel befindet
				            				
					            			if(currTunnel != undefined){
					            				console.log("kein GPSError weil in Tunnel!")
					            				visualizationController.showGPSError(true);
					            				handlePositionInTunnel(currTunnel);
					    		            }else{
					    		            	handleGPSError(error);
			                        		}
				            		}
				            	);
			            	}
		            	}
	                }		
		            
		            function handleGPSError(error) {
		            	console.log('handleGPSError');
		            	tunnelSimulationController.resetSimulation();
		            	visualizationController.showGPSError(true);
		            	if(!paused) {
							controller.timers.push(setTimeout(function(){getLocation();}, subapp.refreshRate*1000));
						}
		            }
		            
		            function handlePositionInTunnel(currTunnel) {
		            	console.log('handlePositionInTunnel');
		            	var km = -1;
						var roadId = -1;
						if(currentRoadPoint!=undefined) {
						   	km = currentRoadPoint['km'];
						}
					    if(currentStreet!=undefined) {
					    	roadId = currentStreet['roadid'];
					    }            		
	            		
	            		var newRoadPoint;
	            		
	            		tunnelSimulationController.runSimulation(parseFloat(km), currentDirection,roadId,subapp.refreshRate,subapp.tunnelSpeed,function(newRoadPoint) {
	            					visualizationController.updatePositionInfo(newRoadPoint, refreshCount);
				            		
								    if(subapp.logPositionDataWeb) {
									    positionLogger.log(gpsPoint, currentDirection, km, roadId);
									}
									if(subapp.logPositionDataDb) {
									    positionLogger.logToDb(gpsPoint, currentDirection, km, roadId);
									}
									if(subapp.logPositionDataAsfinag) {
										positionLogger.logToAsfinag(gpsPoint, currentDirection, km, roadId);
									}
									
									var simulatedGpsPoint = {'lat':newRoadPoint.lat, 
											'lon':newRoadPoint.lon, 
											'accuracy': 1,
											'heading': -1,
											'speed': subapp.tunnelSpeed/3.6};
									handleRoadpoints(simulatedGpsPoint, newRoadPoint, undefined, undefined, undefined);
									
									if(!paused) {
				            		    controller.timers.push(setTimeout(function(){getLocation();}, subapp.refreshRate*1000));
				            		}
	            				}
	            		);		
		            }
		            
		            
		            //visualization.animateMessagesWithSpeed(10);
		            var now = new Date().getTime();
		            //60 000 milliseconds => 1 minute
		          
		            var config = application.config.i18n[application.config.language].kompagnon;
		            
		            if((now - (refreshRateDynamicEvents * 60000) - lastRefreshDynamicEvents) > 0){
						lastRefreshDynamicEvents = now;
						
						
						subapp.weatherDao.loadWeatherData();
						subapp.delayDao.loadDelayData();
						
						waitForLoad();
						
						function waitForLoad(){
							
							var daosDone = 0;
							var test = '';
							
							if(subapp.weatherDao.status != DATA_STATUS_LOADING) {
		    					daosDone++;
		    					test += "weather, ";
		    				};
		    				if(subapp.delayDao.status != DATA_STATUS_LOADING) {
		    					daosDone++;
		    					test += "delay, ";
		    				};
		    			
		    				
		    				if(daosDone!=2) {
		    					!release_flag && console.log(test);
		                		controller.timers.push(setTimeout(function(){waitForLoad();}, 1000));
		                	} else {
							
								var allDataReady = true;
								var missingPOIs = new Array();
								
								if(subapp.weatherDao.status == DATA_STATUS_ERROR_WHILE_LOADING){
									missingPOIs.push(config.NoPOIs.weather);
									allDataReady = false;
								}
								
								if(subapp.delayDao.status == DATA_STATUS_ERROR_WHILE_LOADING){
									missingPOIs.push(config.NoPOIs.delay);
									allDataReady = false;
								}

								if(allDataReady == false && that.noPoisMsgNotShown == true && subapp.noPoisVoiceShown == false){
									var text = '';
									for(var i = 0; i < missingPOIs.length; i++){
										text += missingPOIs[i];
					            		if(missingPOIs.length != (i + 1)){
					            			text += ", ";
					            		}
					            	}
									subapp.missingPoisText = text;

									visualizationController.noPoisVoice(true);
									that.noPoisMsgNotShown=false;
								}
								else if (allDataReady == true && (that.noPoisMsgNotShown == false || subapp.noPoisVoiceShown == true)) {
									that.noPoisMsgNotShown=true;
									visualizationController.noPoisVoice(false);
								}
								
		                	}
						}
					}
		            
		            
		            refreshCount++;
		            that.geoLocation.getCurrentPosition(handlePosition, 
							handlePositionError ,
			                {maximumAge: 1000, timeout: 60000, enableHighAccuracy:true}
		            );

	            }
	            
	            function handlePause() {
	            	paused = true;
	            }
	            
	            function handleResume() {
	            	paused = false
	            	getLocation();
	            }
				
			};

			that.onDestroy = function() {
				console.log('ondestroy called');
				visualizationController.onDestroy();
				
				for (var i = 0; i < controller.timers.length; i++) {
				    clearTimeout(controller.timers[i]);
				}
				//quick reset of the timer array you just cleared
				controller.timers = [];
				function release() {//release screen dim lock
					if(window.powerManagement) {
						window.powerManagement.releaseWakeLock(
							function() {
								console.log('successfully released wake lock'); 
							}
						);
						
					}
				}
				release();
				
				that.geolocationClosed = true;
				window.clearInterval(intervalId);
				
			};
			
		

			
		}
	}
);



/*
 * Schnittpunktberechnung
//								console.log('a2: ' + a2);
//								var p = Math.sqrt((Math.pow(a2,2)-Math.pow(distance,2)));
//								console.log('p= ' + p);
//								var vecA = previousPoint['lat'] - roadPoint['lat'];
//								var vecB = previousPoint['lon'] - roadPoint['lon'];
//								console.log('vecA: ' + vecA);
//								console.log('vecB: ' + vecB);
//								var einheitsVektor = Math.sqrt(Math.pow(vecA, 2) + Math.pow(vecB, 2));
//								console.log('einheitsVector: ' + einheitsVektor);
//								var vecAEinheit = (vecA/einheitsVektor)/1000;
//								var vecBEinheit = (vecB/einheitsVektor)/1000;
//								console.log('vecAEinheit: ' + vecAEinheit);
//								console.log('vecBEinheit: ' + vecBEinheit);
//								var sX = (roadPoint['lat'] + (vecAEinheit*p));
//								var sY = (roadPoint['lon'] + (vecBEinheit*p));
//								console.log('S, ' + sX, ', ' + sY);
 * 
 */


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.MapController',
	{},
	{
		markers:[],
		rectangle:undefined,
		accuracyCircle:undefined,
		map:undefined,
		positionMarker:undefined,
		subapp:undefined,

		init: function(application, subapp) {
			this.subapp = subapp;
		},

		initMap: function() {
		    this.map  = new google.maps.Map(document.getElementById('map'), {
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				zoom: 17
			});
			var subapp = this.subapp;
			$('#increaseRate').on('click', function() {
				if(subapp.refreshRate<60) {
					subapp.refreshRate++;
					$('#refreshRate').html('refreshRate: ' + subapp.refreshRate+'sec');           	
				}
			});
				
			$('#decreaseRate').on('click', function() {
				if(subapp.refreshRate>1) {
					subapp.refreshRate--;
					$('#refreshRate').html('refreshRate: ' + subapp.refreshRate+'sec');           	
				}
			});
			$('#refreshRate').html('refreshRate: ' + subapp.refreshRate+'sec');           	
		},

		setCenter: function(myLocation) {
			if(this.map!=undefined) {
			    this.map.setCenter(myLocation);
			}
		},
		
		cleanMarkers: function() {
			for (var i = 0; i < this.markers.length; i++) {
				this.markers[i].setMap(null);
			}
			if(this.rectangle!=undefined) {
				this.rectangle.setMap(null)
			}
			if(this.accuracyCircle!=undefined) {
				this.accuracyCircle.setMap(null);
			}
		},
		
		addMarker: function(color, location) {
			var markerIcon = 'http://www.google.com/intl/en_us/mapfiles/ms/micons/' +  color +'-dot.png';
			var markerOptions = { map:this.map, position:location, icon:markerIcon };
		    var marker = new google.maps.Marker(markerOptions); 
		    this.markers.push(marker);
		    return marker;
		},
		showClosestPoint: function(closestPointLocation) {
			this.addMarker('green', closestPointLocation);
		},
		showCurrentDirection: function(currentDirection) {
			if(currentDirection!=undefined) {
				$('#currentDirection').html('currDir: ' + currentDirection);								
			} else {
				$('#currentDirection').html('currDir: direction unclear');								
			}
		},
		drawRectangle: function (leftDowner, rightUpper) {
			this.rectangle = new google.maps.Rectangle({
			    strokeColor: '#FF0000',
			    strokeOpacity: 0.6,
			    strokeWeight: 1,
			    fillColor: '#FF0000',
			    fillOpacity: 0.15,
			    map: this.map,
			    bounds: new google.maps.LatLngBounds(
			      new google.maps.LatLng(leftDowner['lat'], leftDowner['lon']),
			      new google.maps.LatLng(rightUpper['lat'], rightUpper['lon'])
			    )
			});
		},
		drawTriangle: function(point1, point2, point3) {
			var trianglePoints = [
					   new google.maps.LatLng(point1['lat'], point1['lon']),
					   new google.maps.LatLng(point2['lat'], point2['lon']),
					   new google.maps.LatLng(point3['lat'], point3['lon']),
					   new google.maps.LatLng(point1['lat'], point1['lon']),
			];
			var triangle = new google.maps.Polyline({
			    path: trianglePoints,
			    geodesic: true,
			    strokeColor: '#FF0000',
			    strokeOpacity: 1.0,
			    strokeWeight: 1
			  });
			  triangle.setMap(this.map);
			  this.markers.push(triangle);
		},
					
		drawAccuracy: function (gpsPoint) {
			this.accuracyCircle = new google.maps.Circle({
				map: this.map,
			    strokeColor: '#00AA00',
			    strokeOpacity: 1.0,
				radius: gpsPoint['accuracy'],  
				fillColor: '#00AA00',
			    strokeWeight: 1,
			    fillOpacity: 0.50,
			});
			if(this.positionMarker!=undefined) {
				this.accuracyCircle.bindTo('center', this.positionMarker, 'position');
			}
		},
		
		setPositionMarker: function(positionMarker) {
			this.positionMarker = positionMarker;
		},
		
		refit: function() {
			$('#map').height($(window).height()/1.8);
		},
		
		updatePositionInfo: function(position, refreshCount) {
			$("#geolocation").html(
				'Position: ' + position.coords.latitude + ', ' + position.coords.longitude + '<br />' +
                'Accuracy: ' + position.coords.accuracy + 
                ', Heading: ' + position.coords.heading + 
                ', Speed: ' + position.coords.speed + '<br />' +
                // 'Timestamp: ' + new Date(position.timestamp)          + '<br />' +
                'RefreshCount: ' + refreshCount
            );
		},
		
		updateRoadInfo: function(currentStreet, roadPoint) {
			$('#road').html(currentStreet['code']);
			$('#km').html(roadPoint['km']);
			$('#streetLabelValue').html(currentStreet['code']);
		},
		
		onRoad: function(onRoad, withPoint) {
		    var contentElement = $('#geolocationContent');
			if(onRoad==true && withPoint==true) {
				contentElement.css('backgroundColor', 'green');
			} else if(onRoad==false && withPoint==true) {
				contentElement.css('backgroundColor', 'orange');
			} else if(onRoad==false && withPoint==false) {
		    	contentElement.css('backgroundColor', 'LightBlue');	                
		    } else {
		    	console.debug('MapController:updateRoadInfo we are in a black hole')
		    }

		},
		
		setError: function(error, refreshCount) {
           	$('#kompagnonContainer').html(
				'Error code: ' + error.code + '\n message: ' + error.message + 
				'\n refreshCount: ' + refreshCount
			);
			$('#geolocationContent').css('backgroundColor','red');
		}
		
//		updateClosestRoadpoint(roadPoint) {
//        	closestRoadPoint.html(
//        		'closest point is ID: ' + 
//        		roadPoint['id'] + " loc: " +
//        	    roadPoint['lat'] + ', ' + 
//        	    roadPoint['lon'] + ' on road ' + 
//        	    currentStreet['code'] + ' @ KM ' + 
//        	    roadPoint['km'] + ' direction: ' + 
//        	    roadPoint['direction'] + ', ' + ' distance in m: ' + 
//        	    parseFloat(Math.round(roadPoint['mindistance']*100000) / 100).toFixed(2)//convert to meters
//			);
//		}

		
		
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.Index',
	{},
	{
		init: function(subapp) {//called like a constructor
			this._super(
				'/kompagnon',
				'app/Kompagnon/view/index.ejs'
			);
			var that = this;
			var currentController = this;
			var application = subapp.application;
			var freeze = new at.asfinag.unterwegs.mobile.Loading('kompagnon_freeze_ui');
			var pageLoaded = false;		
			currentController.test= '';

			// modal freezen
            function freezeUI() {
            	var loadingMessage = this.application.config.i18n[this.application.config.language].kompagnon.loading;

            	// When data is loaded, loading message will be shown with the loading image.
            	// freeze.setVisible(false);
                freeze.setVisibleWithMessage(true, loadingMessage);
            }

            function unfreezeUI() {
                freeze.setVisible(false);
            }
            
			that.onLoad = function() {
				var that = this;
				var d = $.Deferred();
				d.controller = this;
				application.loadPage(
	 				that.path, {
						data: {						
							i18n: application.config.i18n,
							language: application.config.language
						}
					},
					function() {    			
						d.resolve();
						setTimeout(function() {
							application.refreshPage();
						}, 50);
					}
				);	
				
				//Call all DAOs, DAO callbacks are unsafe, instead you can request the status
				
				
				
				subapp.tollBoothDao.update();
				subapp.tunnelDao.loadTunnelData();
				subapp.roadWorkDao.loadRoadWorkData();
				subapp.junctionDao.loadJunctionData();
				subapp.iglDao.loadIglData();
				subapp.weatherDao.loadWeatherData();
				subapp.delayDao.loadDelayData();
				subapp.webcamDao.update();
				subapp.persistence.firstStart();
				subapp.streetDao.update();
				
				
				
				
				
				
				subapp.settingsDao.getAdditionalSetting('ko_fcd',function(fcd){
                     if(fcd && fcd.setValue == 'X'){
						subapp.positionLogger.sendLogToAsfinag(function() {
							console.log('sent and cleared position logs...');
						});
                     } 
                });
                return d.promise();
			};
			
			that.onShow = function() {//called when page is shown
				//check if data has been loaded
				var that = this;
				var allDataReady = true;
				var allJunctionsReady = true;
				var missingPOIs = new Array();
				
				if(application.getNetworkState() != CONNECTION_NONE) {
					//console.debug('connection');
				}
				else {
					// check internet connection - if we don't have a connection we show the overlay
					if( (application.getNetworkState() == CONNECTION_NONE) && !pageLoaded ) {
						
						// NO INTERNET CONNECTION:
						// trigger button at tabbar to change to Tickets-View
						//show overlay
						pageLoaded = true;  // setting pageLoaded to true so if the onShow event is called again not sideeffects will happen, like that the reload button triggers a tab-change from Kaufen-Tab to Meine-Karten-Tab...
					}
				}

                function waitForLoad() {
                	var that = this;
                	
                	var config = that.application.config.i18n[that.application.config.language].kompagnon;
                	
                	daosDone = 0;
    				test = '';
                	
                	if(subapp.tollBoothDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "tollbooth, ";
    				};
    				if(subapp.tunnelDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "tunnel, ";
    				};
    				if(subapp.roadWorkDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "roadwork, ";
    				};
    				if(subapp.junctionDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "junction, ";
    				};
    				if(subapp.weatherDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "weather, ";
    				};
    				if(subapp.delayDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "delay, ";
    				};
    				if(subapp.webcamDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "webcam, ";
    				};
    				if(subapp.persistence.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "roadpoint, ";
    				};
    				if(subapp.streetDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "street, ";
    				};
    				if(subapp.iglDao.status != DATA_STATUS_LOADING) {
    					daosDone++;
    					test += "igl, ";
    				};
    				
    				var numberOfDaos=10; // update if new Dao added
                	if(daosDone!=numberOfDaos) {
                		console.debug('wait for load called, done: ' + daosDone+"/"+numberOfDaos);
                		console.log(test);
                		setTimeout(waitForLoad, 1000);
                	} else {
                		console.log(test);
                		console.debug('all daos done, check if all data present');
                		
                		console.debug('check static data');
						subapp.tollBoothDao.getAllTollbooths(function(tollbooths) {
							if(tollbooths.length==0) {
								missingPOIs.push(config.NoPOIs.tollbooth);
								allDataReady = false;
							}
							subapp.roadWorkDao.getAllRoadworks(function(roadworks) {
								if(roadworks.length==0) {
									missingPOIs.push(config.NoPOIs.roadwork);
									POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_SCENARIO_DIALOG_NO_DYNAMIC_DATA, null);
									!release_flag && console.log("SPRACHAUSGABE: Baustellen konnten nicht aktualisiert werden und stehen derzeit nicht zur Verfügung");
									allDataReady = false;
								}
								subapp.junctionDao.getAllJunctions(function(junctions) {
									allDataReady.junction = true;
									if(junctions.length==0) {
										allDataReady = false;
										allJunctionsReady = false;
									}
									subapp.tunnelDao.getAllTunnel(function(tunnels) {
										if(tunnels.length==0) {
											missingPOIs.push(config.NoPOIs.tunnel);
											allDataReady = false;
										}
										subapp.webcamDao.getAllWebcams(function(webcam) {
											if(webcam.length==0) {
												missingPOIs.push(config.NoPOIs.webcams);
												allDataReady = false;
											}
											subapp.iglDao.getAllIgl(function(igl) {
												if(igl.length==0) {
													missingPOIs.push(config.NoPOIs.igl);
													allDataReady = false;
												}
											
												console.debug('check dynamic data');
												
												if(subapp.weatherDao.status == DATA_STATUS_ERROR_WHILE_LOADING){
													missingPOIs.push(config.NoPOIs.weather);
													allDataReady = false;
												}
												
												if(subapp.delayDao.status == DATA_STATUS_ERROR_WHILE_LOADING){
													missingPOIs.push(config.NoPOIs.delay);
													allDataReady = false;
												}
												
												if(!allDataReady && !subapp.noPoisVoiceShown) {
													var text = '';
													for(var i = 0; i < missingPOIs.length; i++){
														text += missingPOIs[i];
									            		if(missingPOIs.length != (i + 1)){
									            			text += ", ";
									            		}
									            	}
													subapp.missingPoisText = text;
													subapp.noPoisVoiceShown = true;
													
													!release_flag && console.log("[Index.class.js] SPRACHAUSGABE : aufgrund technischer Probleme stehen derzeit keine "+ subapp.missingPoisText +" zur Verfügung");
													POI2String(P2S_SCENARIO_DIALOG_NO_DYNAMIC_DATA, P2S_TYPE_INSIDE, subapp.missingPoisText);
												}
												
												
												unfreezeUI();
												
												if(allJunctionsReady == false) {
													subapp.overlay['/kompagnon/visualization/overlay/nojunctions'].setVisible(true); 
												} else if(allDataReady == false){
													var text = '';
													for(var i = 0; i < missingPOIs.length; i++){
														text += missingPOIs[i];
									            		if(missingPOIs.length != (i + 1)){
									            			text += ", ";
									            		}
									            	}
													
													subapp.missingPois = text;
													subapp.overlay['/kompagnon/visualization/overlay/nopois'].setVisible(true);
												} else {
													if(subapp.showDisclaimer) {
														subapp.overlay['/kompagnon/visualization/overlay/disclaimer'].setVisible(true);
														subapp.showDisclaimer=false;
													} else {
														setTimeout(function() {window.location='#/kompagnon/geolocation?page-transition=next' },250);
													}
												}
												
			
			//									$('li.button.reload').on('click', function() {
			//										that.onShow();
			//									});
												
			//									subapp.persistence.readRoadpointsFromFile(function() {
			//										console.log('roadpoints read');
			//									});
												
											});
										});
									});
								});
							});
						});
                	}
				}
				freezeUI();
	            waitForLoad();
			};

			that.onDestroy = function() {//called when we leave page e.g. back button
				$('li.button.reload').unbind('click');
				pageLoaded = false;
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.kompagnon.controller.Visualization',
	{},
       
        {
		// Priority in Detailkachel, 1 before 99
		PriorityDoNotShow: false,
		PriorityDoShow: true,
		slowSpeed: 36,
		mediumSpeed:60,
		
		
		init: function(application, subapp, viewingRange, decimalD) {//called like a constructor
//			this._super(
//				'/kompagnon/visualization',
//				'app/Kompagnon/view/visualization.ejs'
//			);
			
			//Variables which are set ONCE per App-Start
			
			var that = this;
			var pageLoaded = false;
           
            that.initalMessages = false;
            this.subapp = subapp;
            this.application = application;
			this.controller = this;
			subapp.visualizationController = this;
			
			this.viewRange = viewingRange;
			
            this.decimalDigits = decimalD;
            this.visualisationCounter;
			
		},
			
		onLoad: function(){
			//Variables which are set ONCE per Kompagnon-Start, called in Geolocation.onLoad
		    this.messageCounter = 0;
            this.containerSpace = 0;
            this.currSpeed = 0;
			this.maxMessages = 0;
			this.pixelPerKm = 0;
			this.timeLineHeight = 0;	
            this.visualisationCounter = 0;
            this.currentDetailActivEvents = [];
            this.detailViewUpdateNumber = 0;
            this.nextRestkm = undefined;
            this.missingPOIs = [];
            this.nightMode = false;
            
         	this.displayOffAsfinag = false;
          	this.displayGPSError = false;
          	this.displayGPSSettingError = true;
          	this.displayNotYetAsfinag = false;
          	this.isNoDirectionOverlayActive = false;
          	this.displayMissingJunctions = false;
          	
            this.showDefaultMessages = false;
            this.detailViewEmpty = true;
            //If this is closed no changes can be made
            this.VisualizationClosed = false;
            this.labels = this.application.config.i18n[this.application.config.language].kompagnon;
            this.streetsList = undefined;

            // Webcam pictures and Stellplaetze Info will be updated every 2 minutes
            this.webcamPicUpdateActive = true;
            this.lkwInfoUpdateActive = false;
            this.stellplaetzeList = [];
            this.intervalId = undefined;
            
        	var that = this;
        	if(that.intervalId == undefined) {
				that.subapp.rastenDao.getStellplaetzeInfo(
							function(data) {
								// success
								that.stellplaetzeList = data;
								that.lkwInfoUpdateActive = true;
							},
							function() {
								// error
							}
				)
			} 
            that.intervalId = window.setInterval(function() {
            	that.webcamPicUpdateActive = true;

            	if(!that.lkwInfoUpdateActive) {
	            	that.subapp.rastenDao.getStellplaetzeInfo(
							function(data) {
								// success
								that.stellplaetzeList = data;
				            	that.lkwInfoUpdateActive = true;
							},
							function() {
								// error
							}
	            	);
            	}
            	
			}, 120000);
            
            
            // get street information for Junction-KN
            that.subapp.streetDao.getAllStreets(function(streets) {
				that.streetsList = streets;
			}); 
            
		},
		
		onDestroy: function(){
			//Disable night modus if required
			this.enableNightModeIfNeeded(false);
            this.showGPSError(false);
            this.showOffAsfinag(false);
            this.showNoJunctions(false);
            this.showNotYetAsfinag(false);
            
            // close the timer
            window.clearInterval(this.intervalId);
            
            //If this is closed no changes can be made
            this.VisualizationClosed = true;
		},
        
        setDefaultMessages: function(value){ 
            var that = this;
            that.showDefaultMessages = value;
        },
     
        /* creates a Message(div), gets called
         * event: data of the corresponding event(div)
         */
        addMessage: function(event){
           	this.subapp.audioController.playNewEventSound();
        	var that = this;
            this.messageCounter++;
            var iconAttributeHeight;
            
         	var view = 'app/Kompagnon/view/templates/messageBox.ejs';
            var templateData =  { eventType: event.data.eventType};
        	$('#message_Container').append(new EJS({url: view}).render({ data: templateData}));
       
            var element = $('#message_Container').children('div').last();       
            element[0].data = event.data;
            
            /*
             * if distance >= 10km show it as integer
             * else as float decimal digit
             */
            if (event.data.distance>=10) {
            	event.data.distance = parseInt(event.data.distance);
			}else {
            	event.data.distance = parseFloat(event.data.distance).toFixed(that.decimalDigits);
			}
            
            if(event.data.eventType == "Junction"){
                if(event.data.junctionType == "Kn"){
                   
                    var streetIdArray = new Array();
                    var maxShownStreetId = 0;
             
                    //NOTIFY ICONS JUNCTION IN MESSAGEBOX
                    for (var i=0; i< event.data.junctions.length; i++){
                        var streetId = that.getStreetInfo(event.data.junctions[i]);
                        for(var k=0; k< streetIdArray.length; k++){
                            if(streetIdArray[k] == streetId){
                                streetId = false;
                            }
                        }
                        if(streetId){
                        	streetIdArray.push(streetId);
                        }
                    }
                    
                    var templateData =  {
                    		maxShownStreetId: 3, 
                    		streetIds: streetIdArray,
                    		name: event.data.name,
                    		distance: event.data.distance
                    		};

                	var view = 'app/Kompagnon/view/templates/messageBoxJunctionKn.ejs';
                	$(element).append(new EJS({url: view}).render({ data: templateData}));
                
                }
                else if(event.data.junctionType == "ASt" || event.data.junctionType == "AST" || event.data.junctionType == "HASt" || event.data.junctionType == "As" || event.data.junctionType == "FV"){
 
            		var templateData =  {
            				name: event.data.name,
			   				distance: event.data.distance, 
			   				pd: event.data.pd, 
			   				roadwork: event.data.roadwork
			   				};

                 	var view = 'app/Kompagnon/view/templates/messageBoxJunctionAst.ejs';
                 	$(element).append(new EJS({url: view}).render({ data: templateData}));
                }
                else {
                	console.log("Unbekannter JunctionType: DatenFehler!");
                	console.log(event);
                }
            }
            else if(event.data.eventType == "Rasten"){
            	iconAttributeHeight = 5;
            	
            	var messageContainerWidth = $('#message_Container').width();
                var messageContainerIconWidth = 20;
                var left = messageContainerWidth - messageContainerIconWidth*1.3;

                that.subapp.rastenDao.getNextRasten(that.currentDirection, event.data.km, that.currentStreet , function(result){

                	if(result.length>0 && result.item(0).km!=undefined){
                		that.nextRestkm = Math.abs(parseFloat(parseFloat(result.item(0).km) - parseFloat(event.data.km)));

                		var templateData =  {
                				rastenType: event.data.rastenType, 
    							gasstation: event.data.gasstation, 
    							restaurant: event.data.restaurant, 
    							streetIds: streetIdArray, 
    							left: left,
    							name: event.data.name,
    							parkingDescriptionText: that.labels.parkingPlace,
    							km: Math.round(parseInt(event.data.km)),
    							distance: event.data.distance,
    							next: that.labels.nextRest,
    							nextRestkm: parseFloat(that.nextRestkm+parseFloat(event.data.distance)).toFixed(that.decimalDigits),
    							lkwInfo: event.data.lkwInfo
                				};
                	} else{
                		that.nextRestkm = undefined;
                		var templateData =  {
                				rastenType: event.data.rastenType, 
    							gasstation: event.data.gasstation, 
    							restaurant: event.data.restaurant, 
    							streetIds: streetIdArray, 
    							left: left,
    							name: event.data.name,
    							parkingDescriptionText: that.labels.parkingPlace,
    							km: Math.round(parseInt(event.data.km)),
    							distance: event.data.distance,
    							lkwInfo: event.data.lkwInfo
                				};
                	} 
                	
            		var view = 'app/Kompagnon/view/templates/messageBoxRasten.ejs';
            		$(element).append(new EJS({url: view}).render({ data: templateData}));
            		
            		// update next rasten km
            		that.updateDistanceToNextRasten(element,event.data.distance);
            		
            		// update Rasten Description Label (calculate and set the position)
            		that.updateRastenDescriptionLabel(element);
                });
                
           }
           else if(event.data.eventType == "RoadWork"){
                    
              	var dateArray = new Date(event.data.endDate).toDateString().split(' ');
                var date = null;
                
                                
                if(application.config.language == "de-AT"){
                   //spec DIN 1355 Blatt 1
                   germanMonth = {
                		   "Jan": "Jan", 
                		   "Feb": "Feb", 
                		   "Mar": "Mrz", 
                		   "Apr": "Apr", 
                		   "May": "Mai", 
                		   "Jun": "Juni",
                		   "Jul": "Juli", 
                		   "Aug": "Aug", 
                		   "Sep": "Sep", 
                		   "Oct": "Okt",
                		   "Nov": "Nov", 
                		   "Dec": "Dez"	  
                   };
                   dateArray[1] = germanMonth[dateArray[1]];
                }
                  
                date = " " + dateArray[2] + ". "+ dateArray[1];
                var templateData =  {
                		length: event.data.length,
                		description: that.labels.roadwork,
                		name: event.data.name,
                		distance: event.data.distance,
                		endDate: date
                		};

            	var view = 'app/Kompagnon/view/templates/messageBoxRoadWork.ejs';
            	$(element).append(new EJS({url: view}).render({ data: templateData}));
       
           }
           else if(event.data.eventType == "IG-L"){
               var templateData =  {
            		   length: event.data.length,
                       name: event.data.name,
                       distance: event.data.distance,
                       description: that.labels.iglTag+" "+that.labels.aktiv
                       };

           	var view = 'app/Kompagnon/view/templates/messageBoxIGL.ejs';
           	$(element).append(new EJS({url: view}).render({ data: templateData}));
      
          }
           else if(event.data.eventType == "Webcam"){
        	   var templateData =  {
		   				name: event.data.name,
		   				distance: event.data.distance,
      	    			picture: event.data.picture,
		   				language: application.config.language,
		   				tag: that.labels,
		   				location: event.data.location
		   				};
        	   
        	   if(event.data.webcamType == "WebcamFront") {
        		   var view = 'app/Kompagnon/view/templates/messageBoxWebcamFront.ejs';
        	   }else  if(event.data.webcamType == "WebcamBack") {
        		   var view = 'app/Kompagnon/view/templates/messageBoxWebcamBack.ejs';
        	   } else if(event.data.webcamType == "WebcamSpecial") {
        		   var view = 'app/Kompagnon/view/templates/messageBoxWebcamSpecial.ejs'; 
        	   }
        	   $(element).append(new EJS({url: view}).render({ data: templateData}));
        	   
	       }else if(event.data.eventType == "Tollbooth"){
	    	   var templateData =  {
        			   name: event.data.name,
        			   distance: event.data.distance
        			   };

       	    	var view = 'app/Kompagnon/view/templates/messageBoxTollbooth.ejs';
       	    	$(element).append(new EJS({url: view}).render({ data: templateData}));
       	    	
	    	    this.subapp.tollBoothDao.getTollBoothPrice(event.data.nummer,
						function(myPrice) {
							// success
			        		$('#eventPrice').html(myPrice);
						},
						function() {
							// error
						}
				)
           }
           else if(event.data.eventType == "Weather"){
        	   
        		var templateData =  {
        				data: event.data,
						tag: that.labels
						};
        	   
        		var view = 'app/Kompagnon/view/templates/messageBoxWeather.ejs';
        	  
       	       	$(element).append(new EJS({url: view}).render({ data: templateData}));
           } else if(event.data.eventType == "Delay"){
        	   
       		var templateData =  {
       				data: event.data,
					tag: that.labels
					};
       	   
       		var view = 'app/Kompagnon/view/templates/messageBoxDelay.ejs';
       	  
      	    $(element).append(new EJS({url: view}).render({ data: templateData}));
          }
        }, 
        
        messageWillDisappearByEvent: function(event){
        	that = this;
        	if(event.hasMessage == true){
        		$('#message_Container').children().each(function(){
	   					if(this.data.id == event.data['id'] && this.data.eventType == event.data['eventType'] ){
	   						//TODO
	   					//	that.messageWillDisappear(this);
	   						that.removeDisappearedMessage(this);
	   						event.hasMessage = false;
	   			  		}
	   		   	}); 
	   		}
        },
        
        /* Moves a Message out of view, then calls removeDisappearedMessage */
        messageWillDisappear: function(message){ 
            var that = this;
            message.style.webkitTransitionDuration = "0.5s";
            message.style.webkitTransform = "translate3d(1px," + window.innerHeight  +"px,0px)";
          
            //When Animation is finished, call removeDisappearedMessage()
            console.log(message);
            console.log($(message));
                 
            window.setTimeout(function(){
                that.removeDisappearedMessage(message);
            }, 500);
        },
        
        /* Gets called by  messageWillDisappear()
         * Removes Message(div) from the DOM
         */
        removeDisappearedMessage: function(message){
        	this.messageCounter--;  
            $(message).remove();    
        },
        
        /* Updates Data for all Events on Screen,
         * data: data array, holds incoming events 
         */ 
        updateEventsData: function(data, pos){
        	//loop through all Data
        	that = this;
        
    		//find correct Event 
 		   $('#event_Container').children('.event').each(function(){
 			  for(var i = 0; i != data.length; i++){
     			  if(this.data.id == data[i]['id'] && this.data.eventType == data[i]['eventType'] ){
     				that.updateEventDistance(this, data[i].distance, pos);
     			  }
 			  }
 		   });     		   
        },
        
        updateEventDistance: function(event, newDistance, pos){
        	 //update distance
        	 event.data.test = 0;
			 //Extensive Events
			 if(event.isExtensive == true){
				 var endDistance;
				 event.data.test = 1;
				 //change < > depending on Direction, 1 asc, 2 desc
				 if(pos['direction'] == 1){
					if(event.data.fromKm >= pos['km']){ 
						//if you have not passed the Start of the Event: newDistance is distance to start -> calculate endDistance
						event.data.endDistance = parseFloat(parseFloat(newDistance) +  parseFloat(event.data.length)).toFixed(that.decimalDigits);
						event.data.distance = parseFloat(newDistance).toFixed(that.decimalDigits);
						event.data.test = 3;
					}else{
						//you have passed the Start of the Event, newDistance is already the distance to the end, distance is ZERO
						event.data.endDistance = parseFloat(newDistance).toFixed(that.decimalDigits); 
						event.data.distance = 0;
						event.data.test = 4;
					}
				}else if(pos['direction'] == 2){
					if(event.data.fromKm <= pos['km']){ 
						//if you have not passed the Start of the Event: newDistance is distance to start -> calculate endDistance
						event.data.endDistance = parseFloat(parseFloat(newDistance) + parseFloat(event.data.length)).toFixed(that.decimalDigits);
						event.data.distance = parseFloat(newDistance).toFixed(that.decimalDigits);
						event.data.test = 5;
					}else{
						//you have passed the Start of the Event, newDistance is already the distance to the end, distance is ZERO
						event.data.endDistance = parseFloat(newDistance).toFixed(that.decimalDigits); 
						event.data.distance = 0;
						event.data.test = 6;
					}
				}
				 
            //Point Events
			 }else{
				 event.data.test = 2;
            	 event.data.distance = parseFloat(newDistance).toFixed(that.decimalDigits);
             }
			 
        },
        
       
        checkDataForOldEvents: function(data, pos){
        	//loop through all Data
        	that = this;
        	
        		//find correct Event
        	$('#event_Container').children('.event').each(function(){
        		var newData = false;
     			for(var i = 0; i != data.length; i++){
     				if(this.data.id == data[i]['id'] && this.data.eventType == data[i]['eventType'] ){
     					newData = true;
     				}
     			}
     			if(newData == false){
     				  /*if there is no new Data for an Event, you 
	     				a.) must have passed it
	     				b.) it vanished  */
     				//console.log("removeEvent: " + this.data.eventType);
     				that.removeEvent(this);
     				if(this.hasMessage == true){
     					that.messageWillDisappearByEvent(this);
     				}
     			}
     		});
        },
        
       colorEvents: function(){
    		$('#event_Container').children('.event').each(function(){
 				if(this.hasMessage == true || this.supposedToHaveMessage == false || this.isDetailViewActiv == true){
 					if($(this).hasClass("inactiveEvent") == true){
     					$(this).removeClass("inactiveEvent");
     				}else if(this.data.eventType=='Webcam'){
     					$(this).removeClass("inactiveWebcam");
     	            }else if($(this).hasClass("inactiveExtensiveEvent") == true){
     					$(this).removeClass("inactiveExtensiveEvent");
     				}     			
 				}else{
     				if(this.isExtensive){
 						$(this).addClass("inactiveExtensiveEvent");
 					}else if(this.data.eventType=='Webcam'){
 						$(this).addClass("inactiveWebcam");
 		            }else{
 						$(this).addClass("inactiveEvent"); 
 					}
     			}
     		});
        },
        
        updateMessagesData: function(data,speed){
        	//loop through all Data
        	that = this;
        	var messages = $('#message_Container').children();
    		var numberOfRasten = 0;
    		
    		messages.each(function(){
    			if(this.data!=undefined && this.data.eventType == "Rasten"){
    				numberOfRasten++;
    			}
    		});
    		var rastenIndex=0;
    		
        	for(var i = 0; i != data.length; i++){
        		//find correct Event 
        		messages.each(function(){
        			if(this.data!=undefined && this.data.id == data[i]['id'] && this.data.eventType == data[i]['eventType'] ){
        				that.rotateMessageContent(this);
        				//update distance
        				that.updateMessageDistance(this,data[i].distance);
        				if(this.data.eventType == "RoadWork"){
        					if (data[i].distance<=1 && this.data.poi2str<1){
        						
            					// if there is a roadwork in detail view, voice will not be spoken
            					var detailEvents = that.getNewDetailEvents();
            					var detailEventsData = detailEvents[1];
            					var baustelleInDetailEvents = false;
            					for(var j=0; j<detailEventsData.length; j++) {
            						if(detailEventsData[j].data.eventType == "RoadWork") {
            							baustelleInDetailEvents = true;
            						}
            					}
            					
        						this.data.poi2str=1;
        						if(!baustelleInDetailEvents) {
	        						!release_flag && console.log("SPRACHAUSGABE: Sie nähern sich an einer Baustelle mit einer Länge von "+this.data.length);   	
	        		            	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_BEFORE, [this.data.length]);
        						}
        					}
        				}
        				
        				if(this.data.eventType == 'Weather'){
        					var event=this;
        					if (data[i].distance<=1 && event.data.poi2str<1){
        						event.data.poi2str=1;
        						var weather_type=undefined;
        			        	   switch (event.data.WeatherType) {
        							case "Glaette":
        								weather_type=that.labels.weather.glaette;
        								break;
        							case "StarkerSchneefall":
        								weather_type=that.labels.weather.starkerschneefall;
        								break;
        							case "Starkregen":
        								weather_type=that.labels.weather.starkregen;
        								break;
        							case "GewitterHagel":
        								weather_type=that.labels.weather.gewitterhagel;
        								break;
        							case "Nebel":
        								weather_type=that.labels.weather.nebel;
        								break;
        							case "SchneeVerfrachtungen":
        								weather_type=that.labels.weather.schneeverfrachtung;
        								break;
        							case "Sturm":
        								weather_type=that.labels.weather.sturm;
        								break;
        							default:
        								break;
        							}
	        			        	if (weather_type!=undefined){        			        		   
	        			        	   !release_flag && console.log("SPRACHAUSGABE: Sie nähern sich einem Bereich mit aktueller "+event.data.WeatherType+"! Fahren Sie vorsichtig");   	
	        				           POI2String(P2S_SCENARIO_WEATHER_WARNING, P2S_TYPE_BEFORE, [weather_type]);
        			        	   }
        					}
        				}
        				
        				//update delay
        				if(this.data.eventType == 'Delay'){
        					if (data[i].distance<=1 && this.data.poi2str<1){
        						this.data.poi2str=1;
        						!release_flag && console.log("SPRACHAUSGABE: Achtung! Sie nähern sich einem möglichen Stau");   	
        		            	POI2String(P2S_SCENARIO_ASFINAG_DELAY, P2S_TYPE_BEFORE, null);
        					}
        					that.updateMessageDelay(this,data[i].delay,speed); 
        				}
        				
        				// It will be updated every 2 minutes
        				if(this.data.eventType == 'Webcam' && that.webcamPicUpdateActive){
        					that.updateWebcamPic(this, data[i].picture);
        				}
        				
        				if(this.data.eventType == "Rasten"){
        					rastenIndex++;
        					
	        				if(that.lkwInfoUpdateActive){
	        					for(var j=0;j<that.stellplaetzeList.length;j++) {
	        						var item = that.stellplaetzeList[j];
	        						if(item.ID == data[i].id) {
	        							if(item.TRUCK_RESTAREA_STATUS == "rot") {
	        								data[i].lkwInfo = that.labels.rasten.voll;
	        	                		} else if (item.TRUCK_RESTAREA_STATUS == "gruen"){
	        	                			data[i].lkwInfo = that.labels.rasten.frei;
	        	                		} else {
	        	                			data[i].lkwInfo = "";
	        	                		}
	        							break;
	        						} 
	        					}
        						that.updateLkwInfo(this, data[i].lkwInfo);
        					}
        					
	     					if (numberOfRasten==rastenIndex && that.nextRestkm!= undefined){
	     						that.updateDistanceToNextRasten(this,data[i].distance);
	     					} else {
	     						$(this).find('.nextStopText').html("");
	     					}
	     				}
        			}
        		});
        	}

        	// webcam pictures will not be updated in 2 minutes
        	if(that.webcamPicUpdateActive){
        		that.webcamPicUpdateActive = false;
        	}

        	// stellplatzInfo will be updated, if it exist and active
        	if(numberOfRasten > 0 && that.lkwInfoUpdateActive){
        		that.lkwInfoUpdateActive = false;
        	}
        },
        
        updateMessageDistance : function(message, newDistance){
            var that = this;
            if (newDistance>=10){
            	message.data.distance = parseInt(newDistance);
            }
            else {            	
            	message.data.distance = parseFloat(newDistance).toFixed(that.decimalDigits);
            }
        	$(message).find('#eventDistance').html(message.data.distance);
        },
        
        updateMessageDelay : function(message, newDelay,speed){
            var that = this;
        	message.data.delay = parseFloat(newDelay).toFixed(that.decimalDigits);
        	
        	if(speed < that.slowSpeed){
        		$(message).find('#eventDesc').html(that.labels.bigDelay);
        	}else if(speed < that.mediumSpeed){
        		$(message).find('#eventDesc').html(that.labels.mediumDelay);
        	}else if(speed > that.mediumSpeed){
        		$(message).find('#eventDesc').html(that.labels.smallDelay);
        	}
        },
        
        updateDistanceToNextRasten: function(message, newDistance){
        	var that = this;
        	// if distance >= 10km show it as integer
        	var nextRestDistance = parseFloat(that.nextRestkm+parseFloat(newDistance)).toFixed(that.decimalDigits);
        	if (nextRestDistance>=10) {
        		nextRestDistance = parseInt(that.nextRestkm+parseFloat(newDistance));
    		}
        	$(message).find('#nextRestDistance').html(nextRestDistance);
        },
        
        updateWebcamPic : function(message, pictureUrl){
            var that = this;
        	message.data.picture = pictureUrl;
        	$(message).find("#webcamPicture").attr("src", message.data.picture +"&"+ new Date().getTime());
        },
        
        updateLkwInfo : function(message, newLkwInfo){
        	var that = this;
        	message.data.lkwInfo = newLkwInfo;
        	if(newLkwInfo != "") {
        		
        		$(message).find('#eventLkwText').html(message.data.lkwInfo);
        		$(message).find('#eventLkwText').css("display","inline");
        		$(message).find('#eventLkwIcon').css("display","inline");
        		
        		if(newLkwInfo != "frei" && newLkwInfo != "free"){
            		$(message).find('#eventLkwIcon').css("color","#5a5a5a");
            		$(message).find('#eventLkwText').css("color","#5a5a5a");
            		
            		// update Rasten Description Label (calculate and set the position)
            		that.updateRastenDescriptionLabel(message);
            		
        		} else {
            		$(message).find('#eventLkwIcon').css("color","white");
            		$(message).find('#eventLkwText').css("color","white");
        		}
            	
        	} else {
        		$(message).find('#eventLkwText').css("display","none");
        		$(message).find('#eventLkwIcon').css("display","none");
        	}
        	
        },
        
        rotateMessageContent : function(message){
            var that = this;
            
            switch (message.data.eventType) {
			case "Tollbooth":
				if((that.visualisationCounter % 3) == 0){
					$(message).find('#eventPrice').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				else if((that.visualisationCounter % 3) == 1){
					var price = $(message).find('#eventPrice')[0].textContent;
					if(price == "" || price == " ") {
						$(message).find('#eventPrice').css("display","none");
						$(message).find('#eventDistance').css("display","block");
					} else {
						$(message).find('#eventPrice').css("display","block");
						$(message).find('#eventDistance').css("display","none");
					}
				}
				else if((that.visualisationCounter % 3) == 2){
					$(message).find('#eventPrice').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				break;
			case "RoadWork":
				if((that.visualisationCounter % 3) == 0){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				else if((that.visualisationCounter % 3) == 1){
					$(message).find('#eventLength').css("display","block");
					$(message).find('#eventDistance').css("display","none");
				}
				else if((that.visualisationCounter % 3) == 2){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				break;
			case "Delay":
				if((that.visualisationCounter % 3) == 0){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","block");
					$(message).find('#eventDelay').css("display","none");
				}
				else if((that.visualisationCounter % 3) == 1){
					$(message).find('#eventLength').css("display","block");
					$(message).find('#eventDistance').css("display","none");
					$(message).find('#eventDelay').css("display","none");
				}else if((that.visualisationCounter % 3) == 2){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","none");
					$(message).find('#eventDelay').css("display","block");
				}
				break;
			case "IG-L":
				if((that.visualisationCounter % 3) == 0){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				else if((that.visualisationCounter % 3) == 1){
					$(message).find('#eventLength').css("display","block");
					$(message).find('#eventDistance').css("display","none");
				}
				else if((that.visualisationCounter % 3) == 2){
					$(message).find('#eventLength').css("display","none");
					$(message).find('#eventDistance').css("display","block");
				}
				break;
			}
        },
        
        //Helper Function, get Streetnames by Streed-ID 
        getStreetInfo: function (roadId) { 
            var that = this;
            if(that.streetsList != undefined) {
	            for(var s = 0; s<that.streetsList.length; s++) {
	                if(that.streetsList[s].roadId==roadId) {
	                    
	                    if(that.currentStreet != that.streetsList[s].info){
	                        return that.streetsList[s].info;
	                    }
	                    return false;
	                }
	            }
            } else {
            	return false;
            }
        },
        
        
        addEventToTimeLine: function(data, currPos){
        	var that = this;
        	
        	//Create new Event(div)
        	var view = 'app/Kompagnon/view/templates/eventBox.ejs';
            var templateData =  { eventType: data.eventType};
        	$('#event_Container').append(new EJS({url: view}).render({ data: templateData}));
            var element = $('#event_Container').children('div').last();
           
            //Save Data in Event(div)
        	element[0].data = data;
        	element[0].newElement = true;
            element[0].movementDelta = 0;
            element[0].hasMessage = false;
            element[0].supposedToHaveMessage = true;
            element[0].isExtensive = false;
            element[0].isDetailViewActiv = false;
            element[0].hasEnteredDetailView = false;
            element[0].isDetailViewListActiv = false;
            
            
            if (element[0].data.eventType =='RoadWork' || element[0].data.eventType =='Weather' || element[0].data.eventType =='IG-L' || element[0].data.eventType =='Delay'){
            	element[0].priority = that.PriorityDoShow;
            	element[0].isExtensive = true;
            }
            else if (element[0].data.eventType =='Tunnel'){
            	element[0].isExtensive = true;
            	element[0].priority = that.PriorityDoNotShow;
            }
            else{
            	element[0].priority = that.PriorityDoNotShow;
            }
            
            // Write Data into the new Event(div), according to its EventType            
			if(element[0].data.eventType=='Tunnel') {
				$(element[0]).append("<div class='TunnelEntry'></div>");
				$(element[0]).append("<div class='TunnelExit'></div>");
				$(element[0]).append("<div class='TunnelInternal'></div>");				  
				//Tunnel never get Messages, the Event should have a color from the start
				element[0].supposedToHaveMessage = false;
			} 
			
			else if(element[0].data.eventType=='Rasten') {
				var services = $.parseJSON(data.services);
				
				// Restaurant ICON Logic
				if(services["restaurant"] != undefined){
					if(	services["restaurant"][0] == "Rasthaus in Betrieb" 	|| 
						services["restaurant"][2] == "offen" 				|| 
						services["restaurant"][2] == "integriert" 			||
						(services["restaurant"][0] == "Rasthaus nicht in Betrieb" 	&& services["fastfood"] != undefined) ||
						(services["restaurant"][2] == "nicht geplant" 				&& services["fastfood"] != undefined) ){
						
						element[0].data.restaurant = true;
					}
				}
				// Gasstation ICON Logic
				if(services["tankstelle"] != undefined){
					element[0].data.gasstation = true;
				}
			}else if(element[0].data.eventType=='Webcam') {
				var view = 'app/Kompagnon/view/templates/eventIconWebcam.ejs';
                $(element).append(new EJS({url: view}).render({ data: element[0].data.webcamType}));
			}
	            
            if(element[0].isExtensive == true){
                element[0].data.length = parseFloat(Math.abs(element[0].data.toKm - element[0].data.fromKm)).toFixed(that.decimalDigits);
                var height = element[0].data.length * this.pixelPerKm;
                element.css("height","" + height + "px");
                element.toggleClass("inactiveExtensiveEvent");
            }else if(element[0].data.eventType=='Webcam'){
            	element.toggleClass("inactiveWebcam");
            }else{
            	element.toggleClass("inactiveEvent");
            }
            
         
        },
        
        /* Animates all Events, gets called from refreshData (once per RefreshRate), calls isEventEnteringDetailView()
         * uses the this.currSpeed times pixelPerKm*/
        animateEvents: function(){ 
            var that = this;
            /* Loops through all Events */
            
            $('#event_Container').children('.event').each(function(){
            	var event = this;
            	if(event.isExtensive == true){
            		var top = that.timeLineHeight - (event.data.endDistance * that.pixelPerKm);
            	}else{
            		var top = that.timeLineHeight - (event.data.distance * that.pixelPerKm);
            		////If the event is not extensiv, subtract Offset(half height)
            		top = top - parseInt($(this).css("height"))/2;
            	}
            	$(event).css("top", Math.round(top) +"px");
		 
            	that.isEventEnteringDetailView(this);
            	
                /* If events leaves Detailview -> update DetailView depending on its contents 
                 * 
                 * This functionality can be found in the refreshEvents() Method. 
                 * Instead of removing Events if they are "leaving" the screen, 
                 * they get removed if there is no more incoming Data for them.
                 * */
            }); 
        },
        
        /* Animates all Messages, gets called from refreshData (once per RefreshRate) *
         * Give each Message a Position between 1 and MaxMessage 
         * Animate Message according to messagePosition */
        animateMessages: function(){
            var that = this;
           
            /*Push all Message into an Array*/
            $('#event_Container').children('.event').each(function () {
            	var event = this;
            	 $('#message_Container').children().each(function () {
            		var message = this;
                 	if(message.data!=undefined && event.data != undefined && message.data.id == event.data.id && message.data.eventType == event.data.eventType){
                 		//Animate Message according to messagePosition
                        this.style.webkitTransitionDuration = "0.5s";
                        this.style.webkitTransform = "translate3d(0px," + (that.containerSpaceRest + (that.messageHeight * (event.messagePosition -1)))  +"px,0px)";
                 	}
                 });
            });
        },
        
        randomShowMessage: function(){
            var that = this;
                       
            if(that.isDetailViewListActiv == false && that.showDefaultMessages){
                var view = 'app/Kompagnon/view/templates/detailViewVirtualEvent.ejs';
                var element = $('#detailViewInfos');
                var random = (Math.random() * (1 - 0) + 0).toFixed(2);

                if(random <=0.1){
                    $(element).append(new EJS({url: view}).render({ content: that.labels.DefaultMessage.text1}));
                }
                else {
                	$(element).append(new EJS({url: view}).render({ content: that.labels.DefaultMessage.text2}));
                }
                
                $("#detailViewTitle").css("width", parseInt(element.css("width")));
            }

        },
        
        isEventEnteringDetailView : function(event){
        	var firstCollision;
        	if(!event.isExtensive){
        		//If the event is not extensiv, add Offset(half height)
        		firstCollision = that.timeLineHeight - (parseFloat(event.data.distance) * this.pixelPerKm)+ parseInt($(event).css("height"))/2;
        	}
        	else{
	        	firstCollision = that.timeLineHeight - (parseFloat(event.data.distance)* this.pixelPerKm);
        	}	
            //If events enters Detailview -> update DetailView depending on its contents
            if(firstCollision >= this.detailViewEnteringHeight && !event.hasEnteredDetailView){
            	event.hasEnteredDetailView = true;	
            }
        },
        
        checkActiveEventForDetailView : function(){  
	   		var that = this;
            var nextActivEvent = [];
            
            $('#event_Container').children('.event').each(function (){
	            //Webcams have PriorityDoNotShow -> do not get DetailViewActiv
	            if(this.hasEnteredDetailView && this.priority != that.PriorityDoNotShow){
	                 nextActivEvent.push(this);
	            }  
            });
            
            if(nextActivEvent.length > 0){
                that.detailViewEmpty = false;
                $('#event_Container').children('.event').each(function(){
                    this.isDetailViewActiv = false;
                    for (var i=0;i<nextActivEvent.length;i++){
                        if(this.data.id == nextActivEvent[i].data.id && this.data.eventType == nextActivEvent[i].data.eventType){
                            this.isDetailViewActiv = true;
                        }
                    }
                });
            }else{
            	that.resetDetailView();	
            }
        },     
        
        removeEvent : function(event){
      	   	$(event).remove();
        },
        
        /* Checks the Data Array for new Events, calls addEvent for every new Event
         * data: data array, holds incoming events 
         */
       checkDataForNewEvents : function(data, currPos){
    	   for(var i = 0; i != data.length; i++){
    		   var newEvent = true;
    		   $('#event_Container').children('.event').each(function(){
    			   if(this.data.id == data[i]['id'] && this.data.eventType == data[i]['eventType']){
    				   //Event was found, it is not new
    				  newEvent = false;  
    			   }
    		   });
    		   if(newEvent){
    			   // New Event Found: add it to Screen
				   this.addEventToTimeLine(data[i], currPos);
    		   }   
    	   } 
        },
        
        /* 
         * Gets called from refreshData once per refreshRate
         * Updates Messages depending on Events and Screenspace 
         */
        refreshMessageView : function(){
        	that = this;

        	/*
        	 * get all Events that should have a message (everything besides "events with supposedToHaveMessage = false" and "events with isdetailViewActiv = true" 
        	 * prepare them for sorting
        	 */  
            var sortedEvents = new Array();
            $('#event_Container').children('.event').each(function () {
        		if(!this.isDetailViewActiv && this.supposedToHaveMessage == true){
        			/*prepare for sorting by Distance*/
        			sortedEvents.push(this);
        		}
            });
            
            /*Sort them by distances*/
            sortedEvents.sort(function(a,b){
            	return a.data.distance - b.data.distance
            });
            
            /* Calculate their Messageposition */
            $('#event_Container').children('.event').each(function () {	
            	/* StandardPosition thats way too high */
            	this.messagePosition = -1;
            	for(var i = 0; i < sortedEvents.length; i++){
            		 if(sortedEvents[i].data.id == this.data.id && sortedEvents[i].data.eventType == this.data.eventType){
            			 this.messagePosition = that.maxMessages - i;
            		 }
            	}
            });
        	
            /* add/remove Messenges depending on position of their events */
        	$('#event_Container').children('.event').each(function(){
        		var event = this;
        		/* depending on Screen Size you can only show maxMessages*/
        		if(event.messagePosition > 0){
        			if(event.hasMessage == false && event.supposedToHaveMessage == true){
        				that.addMessage(event);
        				event.hasMessage = true;
        			}
        		}else{
        			if(event.hasMessage == true){
        				//set hasMessage to false again;
        				that.messageWillDisappearByEvent(event);
        			}
        		}
    		});	
        },
        
        checkForMessagesWithoutEvent : function(){
        	$('#message_Container').children('.message').each(function(){
        		var msg = this;
        		var wrongMessage = true;
        		
        		$('#event_Container').children('.event').each(function(){
        			var event = this;
        			if(msg.data.id == event.data.id && msg.data.eventType == event.data.eventType){
        				wrongMessage = false;
        			} 
        		});
        		if(wrongMessage == true ){
        			console.log("Warning: A message without Events was found. Delete it now. Should not happen!");
					that.removeDisappearedMessage(msg);
        		}
        	});
        },
        
        //called once per refreshRate
        refreshLongTermGoal: function(longTermGoal) { 
        	//1.Gibt es Knoten-Events ohne Message-Kachel?
        	var found = false;
        	$('#event_Container').children('.event').each(function(){
    			var event = this;
    			if(event.data.eventType == 'Junction'){
    				if(event.data.junctionType == 'Kn'){
    					if(event.hasMessage == false && event.supposedToHaveMessage == true && found == false)  {
    						found = true;
    	    				$('#labelHeader').html(event.data.name);	
    					}
    				}
    			} 
    		});
        	//2. Ansonsten verwende geliefertes Fernziel(erster Kn außerhalb des Visualisierungsbereich bzw. letzte Ast auf der derzeitigen Straße 
        	if(found == false && longTermGoal!=undefined){
        		$('#labelHeader').html(longTermGoal.JUNCTION);
        	}
		},
		
		//called once per refreshRate
        resetLongTermGoal: function() { 
			$('#labelHeader').html("");
		},
        
        /* METHODS THAT CONNECT TO GEOLOCAITON */
        
        /* Geolocation calls this once per refresh
         * data: data array, holds incoming events 
         * speed: speed of the mobile/car
         * pos: position of the last roadpoint the mobile/car passed
         * 
         * */
        refreshData : function(data, speed, pos, longTermGoal){
            var that = this;
            that.visualisationCounter++;
            if(!this.VisualizationClosed){
            	
            	this.displayNotYetAsfinag = false;
            	
	        	/* EVENTS */
	            //Checks the Data Array for new Events, calls addEvent for every new Event, has to be the first call in refreshData
	            this.checkDataForNewEvents(data, pos);
	            
	            //Checks the Data Array for old Events, remove gone Events,can trigger Detailview()
	            this.checkDataForOldEvents(data, pos);
	            
	            // Updates Data for all Events on Screen, 
	            this.updateEventsData(data, pos);
	            
	            //Animates Events, sets their Top attribut to the new Distance -Data ,can trigger DetailView() | checkDataForNewEvents, checkDataForOldEvents, updateEventsData, refreshMessageView have to have been called before
	            this.animateEvents();
	            
	            // Looks at all Events in DetailviewRange and calculates which is activ
		        this.checkActiveEventForDetailView();
		            
		        //updates DetailView, has to be called after animateEvents() and checkDataForOldEvents() and checkActiveEventForDetailView()
	            // made a new function for the neue kleine Detailkachel
		        this.updateDetailView(speed);
	            
		        //Updates Messages depending on Events and Screenspace
	            this.refreshMessageView(data);
	            
	            // Remove old artifact messages, will hopefully never do anything
	            this.checkForMessagesWithoutEvent();
	            
	            // Updates Data for all Messages on Screen
	            this.updateMessagesData(data,speed);	
	            
	            //Animates Messages | refreshMessageView, updateEventsData, refreshMessageView have to have been called before
	            this.animateMessages();
	           
	            //refreshes the LongTermGoal at the Top of the Screen
	            this.refreshLongTermGoal(longTermGoal);
	            
	            //Colors all Events that have a Message
	            this.colorEvents();
	            
	            // If Detailview is inactive and Setting is ON, show random Tip
	            that.randomShowMessage();
	            
	            //If there's no data, create a NoDataMessage
	            that.refreshNoDataMessage(data);
            }
        
        },
        
        enableNightModeIfNeeded: function(night) {
        	var detailView=$("#detailView");
        	this.nightMode=night;
        	if(night){        		
        		$('#kompagnonContainer').css({"background":"#413F3E"});
        		$('#night').addClass("nightMode");
    
        		if (detailView.hasClass("detailViewEmpty")) {
        			detailView.removeClass("detailViewEmpty");
        			detailView.addClass("detailEmptyNight");
				}
        		
        	} else {
        		$('#night').removeClass("nightMode");
        		$('#kompagnonContainer').css({"background":"white"});

        		if (detailView.hasClass("detailEmptyNight")) {
        			detailView.removeClass("detailEmptyNight");
        			detailView.addClass("detailViewEmpty");
				}
        	}
        },
        
        refreshNoDataMessage: function(data){
        	var noDataDiv = $("#noData");
        	        	
        	//If there is a noData-Message, delete it;
        	if(noDataDiv!=undefined) {
	        		noDataDiv.remove();
	        }
        	
        	//If there's no data, create a NoDataMessage
	       	if(data==undefined || data.length==0) {
	       		var templateData =  { tag: that.labels };
	       		var view = 'app/Kompagnon/view/templates/messageNoData.ejs';
	       		$("#message_Container").append(new EJS({url: view}).render({ data: templateData}));
	       		//Change font color depending on current mode (day/night)
	       		if(this.nightMode){
	       			$("#noData").css("color", "white");
	       			return;
	       		}
	       		$("#noData").css("color", "black");
	    	} 
        },
        
        /* Geolocation calls this once in its onShow Method */
        initView: function(){
        	var controller = this;
        	this.messageCounter = 0;
        	this.detailViewHeight =  parseInt($("#detailView").css("height"));
        	
        	$('#event_Container').css("height","100%");
            $('.scroller').css("height","100%");

            $("#message_Container").css("height", 	parseInt($("#kompagnonContainer").css("height"))
            										- parseInt($("#detailView").css("height"))
            										- parseInt($("#message_Container").css("top"))
            										- 10 );
            
            $("#message_Container").css("width", parseInt(
            										(	parseInt($("#kompagnonContainer").css("width")) -
            											parseInt($("#event_Container").css("width"))) -
            										(	parseInt($("#message_Container").css("left")) * 2)
            									));
            
            $('#kompagnonContainer').css('display','block');
            
            var line = document.getElementById("line");
            line.style.height = window.innerHeight + "px";
        	
            this.messageHeight = 95;
            var containerSpace = $("#message_Container").height();
            this.maxMessages = parseInt(containerSpace / this.messageHeight);
            this.containerSpaceRest = containerSpace % this.messageHeight;
            
            this.detailViewEnteringHeight = parseInt($("#event_Container").css("height")) - parseInt($("#detailView").css("height"))-parseInt($("#fahrzeug").css("height"));
          
            this.timeLineHeight = parseInt($("#event_Container").css("height")) - parseInt($("#detailView").css("height"))-parseInt($("#fahrzeug").css("height"));

            var arrow =   parseInt($("#arrow").css("height")) + parseInt($("#arrow").css("top"),10);
            this.pixelPerKm = (this.timeLineHeight - arrow) / this.viewRange;	
            
            this.initDetailView();
			
			var dbLogButton = $('#dbLogging');
			dbLogButton.on('click', function() {
				controller.subapp.logPositionDataDb = !controller.subapp.logPositionDataDb;
				dbLogButton.text('DB: ' + controller.subapp.logPositionDataDb);
			});
			dbLogButton.text('DB: ' + controller.subapp.logPositionDataDb);

			var asfinagLogButton = $('#asfinagLogging');
			asfinagLogButton.on('click', function() {
				controller.subapp.logPositionDataAsfinag = !controller.subapp.logPositionDataAsfinag;
				asfinagLogButton.text('Asfinag: ' + controller.subapp.logPositionDataAsfinag);
			});
			asfinagLogButton.text('Asfinag: ' + controller.subapp.logPositionDataAsfinag);
			
			/* //Change Direction Button is currently deactivated (PVIS 2074)
			
			$('#changeDirection').on('click', function() {
	            controller.directionCallback();
	            controller.clearRoadInfo();
	        });
	        
	        */
			
        },

		
        loadingTrafficUpdatesVoice : function() {
        	!release_flag && console.log("SPRACHAUSGABE: Verkehrsmeldungen zu Ihrem Standort werden aktualisiert");   	
        	POI2String(P2S_SCENARIO_DIALOG_REFRESH_VKM, P2S_TYPE_INSIDE, null);
        	this.displayGPSSettingError = false;
        },
        
		showGPSError: function(show){
			if(!this.VisualizationClosed){
				if (show && this.displayGPSError != show){
					console.log("showGPSError: " +show + " : " + this.displayGPSError);
					$("#noGPSLabel").css("display","block");
					this.displayGPSError = show;
					
					if(this.displayGPSSettingError) {
						!release_flag && console.log("@@@@@@@@@@ SPRACHAUSGABE: Derzeit keine Ortung möglich. Bitte überprüfen Sie die Systemeinstellungen Ihres Gerätes.");
						POI2String(P2S_SCENARIO_DIALOG_NOGPS_SETTINGS, P2S_TYPE_INSIDE, null);
						this.displayGPSSettingError = false;
						
					} else {
						!release_flag && console.log("@@@@@@@@@@ SPRACHAUSGABE: Derzeit keine Ortung möglich.");
						POI2String(P2S_SCENARIO_DIALOG_NOGPS, P2S_TYPE_INSIDE, null);
					}
					
				}
				else if (!show && this.displayGPSError != show){
					console.log("hideGPSError: " +show + " : " + this.displayGPSError);
					$("#noGPSLabel").css("display","none");
					this.displayGPSError = show;
				}
			}else if(!show){
				$("#noGPSLabel").css("display","none");
				this.displayGPSError = false;
			}
		},
		
		showOffAsfinag: function(show){
			if(!this.VisualizationClosed){
				if(this.displayOffAsfinag != show){
					console.log("showOffAsfinag: " +show + " : " + this.displayOffAsfinag);
					this.subapp.overlay['/kompagnon/visualization/overlay/offasfinag'].setVisible(show);    
					this.displayOffAsfinag = show;
				}
			}
		},
		
		noPoisVoice: function(show){
			if(!this.VisualizationClosed){
				if (!show ){					
					!release_flag && console.log("SPRACHAUSGABE: "+ this.subapp.missingPoisText+" stehen wieder zur Verfügung, wir wünschen weiterhin eine gute Fahrt");
					POI2String(P2S_SCENARIO_DIALOG_DYNAMIC_DATA, P2S_TYPE_INSIDE, this.subapp.missingPoisText);
					this.subapp.missingPoisText = "";
					this.subapp.noPoisVoiceShown = false;
				}
				else{				
					!release_flag && console.log("SPRACHAUSGABE: aufgrund technischer Probleme stehen derzeit keine "+ this.subapp.missingPoisText+" zur Verfügung");
					POI2String(P2S_SCENARIO_DIALOG_NO_DYNAMIC_DATA, P2S_TYPE_INSIDE, this.subapp.missingPoisText);
					
				}
				
			}
		},
		
		showNotYetAsfinag: function(show){
			if(!this.VisualizationClosed || !show){	
				if(this.displayNotYetAsfinag != show){
					console.log("shownotyetasfinag: " +show + " : " + this.displayNotYetAsfinag);
					this.subapp.overlay['/kompagnon/visualization/overlay/notyetasfinag'].setVisible(show); 
					this.displayNotYetAsfinag = show;
				}
			}
		},
		
		showNotYetAsfinagVoice: function(show){
			if(!this.VisualizationClosed){	
				!release_flag && console.log("SPRACHAUSGABE: Kompagnon ist bereit und startet automatisch sobald Sie auf eine Autobahn oder Schnellstraße auffahren.");
				POI2String(P2S_SCENARIO_DIALOG_START, P2S_TYPE_INSIDE, null);
			}
		},
		
		showNoJunctions: function(show){
			if(!this.VisualizationClosed || !show){
				if(this.displayMissingJunctions != show){
					console.log("showNoJunction: " +show + " : " + this.displayMissingJunctions);
					this.subapp.overlay['/kompagnon/visualization/overlay/nojunctions'].setVisible(show); 
					this.displayMissingJunctions = show;
				}
			}
		},
		
		updatePositionInfo: function(position, refreshCount) {
			//not necessary to implement as we don't display GPS Position information
		},
		
		updateRoadInfo: function(currentStreet, roadPoint) {
			if(currentStreet!=undefined) {
                var that = this;
                that.currentStreet = currentStreet['info'];
				$('#streetLabelValue').html(currentStreet['info']);
			}
		},
		
		clearRoadInfo: function() {
			this.resetEvents();	
			this.resetMessages();
			this.resetDetailView();
			this.resetLongTermGoal();	
        },
		
		resetEvents: function() {
			//called when user leaves road, turns around or any other situation where we
            //dont exactly kno where we are
            $('#event_Container').children('.event').each(function(){ 
				$(this).remove();
			});
		
		},
		
		resetMessages: function(){
			$('#message_Container').children().each(function(){ 
				$(this).remove();
      	   		
			});
			this.messageCounter = 0;
			this.nextRestkm=undefined;
		},
		
		updateClosestRoadpoint: function(roadPoint, distance) {
			//TODO implement only for test purposes?
		},

		
		showCurrentDirection: function(currentDirection) {
			
			var that = this;
			if(currentDirection == 1 || currentDirection == 2) {
				that.currentDirection = currentDirection;
			}

			/* Currently deactivated
			var changeDirectionDiv = $('#changeDirection');
			if(changeDirection!=undefined && (currentDirection == 1 || currentDirection == 2)) {
				changeDirectionDiv.hide();
			}
			*/
					
		},
		
		initDetailView: function(){
		    $("#detailViewInfos").css("width", window.innerWidth); 
		  	this.resetDetailView();
        },
        
    	resetDetailView: function(){
			var element = $("#detailViewInfos");
            $(element).children().remove();
            
            this.detailViewEmpty = true;
            this.currentDetailActivEvents = [];
            this.detailViewUpdateNumber = 0;

            $("#detailView").removeClass();
            if (this.nightMode==true) {
            	$("#detailView").addClass("detailEmptyNight");
			}
            else {            	
            	$("#detailView").addClass("detailViewEmpty");
            }
		},
		
		updateDetailView: function(speed){
            var that = this;
            that.isDetailViewListActiv=true;
            
            var updateArray = that.getNewDetailEvents();
            var needsUpdate=updateArray[0];
            var newDetailEvents =  updateArray[1];
            
            /*
             *  Animate detailView if all following criterias are met
             *  		- !needsUpdate: the events in detailView havent changed
             *  		- more than 1 Event in detailBox
             *  		- (that.visualisationCounter % 2) != that.detailViewUpdateNumber
             *  			animate detailView only every second round in order to show the current main detailEvent for longer time
             */
            if(!needsUpdate && newDetailEvents.length>1 && (that.visualisationCounter % 2) != that.detailViewUpdateNumber){
            	that.animateDetailView();
            }
            else if (newDetailEvents.length>0){
            	that.detailViewUpdateNumber = (that.visualisationCounter % 2);
            	newDetailEvents = that.sortDetailEvents(newDetailEvents);
        		that.loadDetailViewTemplate(newDetailEvents,speed); 
        		newDetailEvents[newDetailEvents.length-1].data.shownInDetail=true;
        		that.currentDetailActivEvents = newDetailEvents;
	        }
            else{
        		//DetailView leer
        		that.resetDetailView();
        		that.isDetailViewListActiv=false;
        	}
        },
		
		/*
		 * DetailView slide-animation for multiple detailEvents
		 */
		animateDetailView: function(currentDetailActivEvents){
			var that=this;
			var local = $("#detailViewInfos").contents().find('#view_'+(that.currentDetailActivEvents.length-1));
			$("#detailView").removeClass();
			if (local.hasClass("RoadWork_detail")){
				$("#detailView").addClass("RoadWork_detail");
			}else if(local.hasClass("IG-L_detail")){
				$("#detailView").addClass("IG-L_detail");
			}else if(local.hasClass("Delay_detail")){
				$("#detailView").addClass("Delay_detail");
			}else if(local.hasClass("Weather_detail")){
				$("#detailView").addClass("Weather_detail");
			}
			
			local.addClass('fadeOutToRight');
			for (var i=0;i<that.currentDetailActivEvents.length-1;i++){
				var width=100-(1+i)*5;
				width=width.toString()+"%";
				$("#detailViewInfos").contents().find('#view_'+i).css({"width":width});
			}
		},
		
		/*
		 * Returns new detailEventList and a boolean value that describes whether the eventList has changed or not
		 * return [boolean, new detailEventList]
		 * Voice output for roadworks if needed.
		 */
		getNewDetailEvents: function(){
			var that = this;
			var newDetailEvents=[];
			var amount = that.currentDetailActivEvents.length;
			
			$('#event_Container').children('.event').each(function () {
                if(this.isDetailViewActiv){
                	var oldEvent=false;
                	for (var i=0;i<that.currentDetailActivEvents.length;i++){
                		if (that.currentDetailActivEvents[i].data.id==this.data.id && that.currentDetailActivEvents[i].data.eventType==this.data.eventType){
                			this.data.shownInDetail = that.currentDetailActivEvents[i].data.shownInDetail;
                			oldEvent=true;
                			amount-=1;
                		}
                	}
                	if (oldEvent==false){
                		this.data.shownInDetail = false;
                		amount=-1;
                	}
                    newDetailEvents.push(this);
                    
                    if (this.data.eventType=="RoadWork"){
                    	if (this.data.endDistance <=1 && this.data.length >= 1 && this.data.poi2str<6){
                        	this.data.poi2str=6;
                        	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_INSIDE, [Math.ceil(this.data.endDistance)]);
                        	!release_flag && console.log("SPRACHAUSGABE: noch "+Math.ceil(this.data.endDistance)+" Kilometer");   	
                        }
                        else if (this.data.endDistance <=2 && this.data.length >= 2 && this.data.poi2str<5){
                        	this.data.poi2str=5;
                        	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_INSIDE, [Math.ceil(this.data.endDistance)]);
                        	!release_flag && console.log("SPRACHAUSGABE: noch "+Math.ceil(this.data.endDistance)+" Kilometer");  
                        }
                        else if (this.data.endDistance <=4 && this.data.length >= 4 && this.data.poi2str<4){
                        	this.data.poi2str=4;
                        	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_INSIDE, [Math.ceil(this.data.endDistance)]);
                        	!release_flag && console.log("SPRACHAUSGABE: noch "+Math.ceil(this.data.endDistance)+" Kilometer");  
                        }
                        else if (this.data.endDistance <=8 && this.data.length >= 8 && this.data.poi2str<3){
                        	this.data.poi2str=4;
                        	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_INSIDE, [Math.ceil(this.data.endDistance)]);
                        	!release_flag && console.log("SPRACHAUSGABE: noch "+Math.ceil(this.data.endDistance)+" Kilometer");  
                        }
                        else if (this.data.endDistance <=15 && this.data.length >=15 && this.data.poi2str<2){
                        	this.data.poi2str=2;
                        	POI2String(P2S_SCENARIO_CONSTRUCTION_SITE_LONG, P2S_TYPE_INSIDE, [Math.ceil(this.data.endDistance)]);
                        	!release_flag && console.log("SPRACHAUSGABE: noch "+Math.ceil(this.data.endDistance)+" Kilometer");  
                        }
                    }
                }
            });
			var needsUpdate=amount==0?false:true;
			return [needsUpdate,newDetailEvents];
		},
		
		/*
		 * Sorts detailEvent-array.
		 * Criterias:
		 * 			1st boolean shownInDetailView: describes whether this event has been as main detailViewEvent during this round
		 * 			2nd	float distance:	show events with smaller distance before events with longer distance
		 */
		sortDetailEvents: function(newDetailEvents){
			var allDetailEventsShown=true;
        	for (var i=0;i<newDetailEvents.length;i++){
        		if (newDetailEvents[i].data.shownInDetail==false){
        			allDetailEventsShown=false;
        		}
        	}
        	if (allDetailEventsShown==true){
        		for (var i=0;i<newDetailEvents.length;i++){
            		newDetailEvents[i].data.shownInDetail=false;
        		}
        	}
        	
        	newDetailEvents.sort(function(a,b){
            	if (a.data.shownInDetail && !b.data.shownInDetail){
            		return -1;
            	} else if (!a.data.shownInDetail && b.data.shownInDetail){
            		return 1;
            	}
        		return b.data.endDistance - a.data.endDistance;
            });
        	return newDetailEvents;
		},

        loadDetailViewTemplate: function(detailViewActivEvents,speed){
            var messageKey = that.labels;
            var datas=[];
            for (var i=0;i<detailViewActivEvents.length;i++)
            {
                var detailViewActivEvent =detailViewActivEvents[i];
                var element = $("#detailViewInfos");
                $(element).children().remove();
                element[0].data = detailViewActivEvent.data;
                var data =detailViewActivEvent.data;
                

	                
	            if(data.eventType == "RoadWork"){
	            	
	            	var templateData =  {  
	            			eventType: data.eventType,
   							NameTag: messageKey.roadworkTag,
   							endDistance: data.endDistance,
   							kmTag: messageKey.km,
   							noch: messageKey.enddistance};
	            
	            	datas.push(templateData);
	           }else if(data.eventType == "Weather"){
	        	   
	        		var templateData =  { 	
	        				eventType: data.eventType,
	        				WeatherType: data.WeatherType,
	        				vorsicht: messageKey.weather.title,
	        				gewitterhagel: messageKey.weather.gewitterhagel,
	        				glaette: messageKey.weather.glaette,
	        				nebel: messageKey.weather.nebel,
	        				starkerschneefall: messageKey.weather.starkerschneefall,
	        				schneeverfrachtung: messageKey.weather.schneeverfrachtung,
	        				starkregen: messageKey.weather.starkregen,
	        				sturm: messageKey.weather.sturm,
	        				bereich: messageKey.weather.desc
	        				};
	        	   
	        		datas.push(templateData);
	           }else if(data.eventType == "IG-L"){
	           	
	           	var templateData =  {  	eventType: data.eventType,
	           							NameTag: messageKey.iglTag,
	           							endDistance: data.endDistance,
	           							kmTag: messageKey.km,
	           							noch: messageKey.enddistance};
	           
	           	datas.push(templateData);  
	          }else if (data.eventType == "Delay"){
	            	
	            	var templateData =  {
	            			speed: speed,
	            			slowSpeed: that.slowSpeed, 
	            			mediumSpeed: that.mediumSpeed, 
	            			smallDelay: messageKey.smallDelay, 
	            			mediumDelay: messageKey.mediumDelay,
	            			bigDelay: messageKey.bigDelay,
	            			eventType: data.eventType,
   							NameTag: messageKey.delay.desc1,
   							endDistance: data.endDistance,
   							kmTag: messageKey.km,
   							noch: messageKey.enddistance
   							};
	            	
	            	datas.push(templateData);
	            }
            }
            if (datas.length>0){
            	var view = 'app/Kompagnon/view/templates/detailView.ejs';
                $(element).append(new EJS({url: view}).render({ data: datas}));
            }
            else{
            	that.resetDetailView();
            }
		},

        updateRastenDescriptionLabel : function(message){
			
			var nameDescriptionContainer = $(message).find('.messageBoxNameDescriptionLabel').children('div');
    		var arraySize = nameDescriptionContainer.length;
		
    		if(arraySize > 1){	

    			var containerWidth = parseInt($(message).find('.messageBoxNameDescriptionLabel').css("width"));
    			var iconContainerWidth = 0;
    			var distanceFromIcon = 0;
    			
    			for(var i=arraySize-1; i>0; i--){
    				var strObjectWidth = $(nameDescriptionContainer[i]).css('width');
    				var objectWidth = parseInt( ""+strObjectWidth.slice(0 , strObjectWidth.length - 2 ) );
    				iconContainerWidth += objectWidth;
    			}
    			
    			iconContainerWidth += (arraySize-2)*5;
    			
    			var textDiv = $(nameDescriptionContainer[0]);
    			var strTextWidth = textDiv.css('width').slice(0, textDiv.css('width').length );
    			var textWidth = parseInt(""+strTextWidth);
    			var spaceBetweenTextAndIcon = 5;
    			
    			if((containerWidth - textWidth - spaceBetweenTextAndIcon - iconContainerWidth) <= 0 ){
    				$(nameDescriptionContainer[0]).css('max-width', ""+ (containerWidth - iconContainerWidth - spaceBetweenTextAndIcon + 2)  + "px");
    				
    				for(i=1; i< nameDescriptionContainer.length; i++){
    					$(nameDescriptionContainer[i]).css("left", "" + (containerWidth - iconContainerWidth - spaceBetweenTextAndIcon + distanceFromIcon)  +"px");
    					distanceFromIcon += 25;
    				}
    				
    			}else {
    				$(nameDescriptionContainer[0]).css('max-width', ""+ textWidth + 2 + "px");
    				
    				for(i=1; i< nameDescriptionContainer.length; i++){
    					$(nameDescriptionContainer[i]).css("left", "" + (textWidth + spaceBetweenTextAndIcon + distanceFromIcon )  +"px");
    					distanceFromIcon += 25;
    				}
    			}
    			
    		} else {
    			$(nameDescriptionContainer).css('width','100%');
    			$(nameDescriptionContainer).css('max-width','100%');
    		}
        }
		
		
    });
/*
 * how to use the webcam overlay
 * 
	var webcam = {};
	webcam.url = 'http://webcams2.asfinag.at/webcamviewer/CamPicServlet?user=asfinagapp&camname=VK_S36_0_34,550~F2-I';
	subapp.overlay['/kompagnon/visualization/overlay/webcam'].webcam = webcam;
	subapp.overlay['/kompagnon/visualization/overlay/webcam'].setVisible(true);
 */


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.NoGPS',
		{},
		{
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/nogps', 
					'app/Kompagnon/view/overlay/NoGPS.ejs'
				);
				this.data = {};

				var that = this;
				
				this.subapp = subapp;

	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var controller = this;

	                $('div.footer.overlay > ul.buttonlistSingle > li.button').on('click', function() {
	                	//Zurück zu Asfinag Unterwegs
	                	window.location = '#/'; 
	                	controller.setVisible(false);
	                });

	                this.refreshOverlay();
	                
	            };

	            that.onDestroy = function() {
					$('div.footer.overlay > ul.buttonlistSingle > li.button').unbind('click');
	            };
			}
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.Disclaimer',
		{},
		{
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/disclaimer', 
					'app/Kompagnon/view/overlay/Disclaimer.ejs'
				);
				this.data = {};

				var that = this;

	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
					var SETTING_NAME = 'kompagnon_show_help';
					
	                $('div.footer.overlay > ul.buttonlist > li.button.ok').on('click', function() {
	                subapp.settingsDao.getAdditionalSetting(SETTING_NAME, function(value) {
	                
	                	if(value == null || value.setValue != 'X'){
	                		//Add new setting if it doesnt exist
	                		subapp.settingsDao.setAdditionalSetting('kompagnon_show_help', 'X', '', '', function(ret) {});
		                	//Show Tutorial
		                    subapp.overlay['/kompagnon/visualization/overlay/disclaimerHelp'].setVisible(true);
	                	} else { window.location = '#/kompagnon/geolocation?page-transition=next'; }
	                	
	                    //hide Disclaimer
	                	that.setVisible(false);
	                	that.refreshOverlay();
	                	});
	                });
	                
	                $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
	                	//Zurück zu Asfinag Unterwegs
	                	window.location = '#/'; 
	                    that.setVisible(false);
                        //window.location = '#/kompagnon/geolocation?page-transition=next';
                        that.refreshOverlay();
	                });

	                that.refreshOverlay();
	            };

	            that.onDestroy = function() {
					$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
					$('div.footer.overlay > ul.buttonlistSingle > li.button.cancel').unbind('click');
	            };
			}
		}
	);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.OffAsfinag',
		{},
		{	runningTimeout: false,
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/offasfinag', 
					'app/Kompagnon/view/overlay/OffAsfinag.ejs'
				);
				this.controller = this;
				this.data = {};

				var that = this;
	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
	                $('#menuButton').on('click', function() {
	                	//ZurÃ¼ck zu Asfinag Unterwegs
						window.location = '#/';
	                });
	                
	                that.refreshOverlay();
	            };

	            that.onDestroy = function() {
					$('#menuButton').unbind('click');
	            };
			}
			
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.NoJunctions',
		{},
		{	runningTimeout: false,
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/nojunctions', 
					'app/Kompagnon/view/overlay/NoJunctions.ejs'
				);
				this.controller = this;
				this.data = {};

				var that = this;
	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
	                $('#menuButton').on('click', function() {
	                	//ZurÃ¼ck zu Asfinag Unterwegs
						window.location = '#/';
						that.setVisible(false);
	                });
	                
	                $('#mapButton').on('click', function() {
	                	//Verkehrsinfos
	                	window.location = '#/verkehrsmeldungen?page-transition=next'; 
	             
	                    that.setVisible(false);
	                });
	                that.refreshOverlay();
	            };

	            that.onDestroy = function() {
					$('#menuButton').unbind('click');
					$('#mapButton').unbind('click');
	            };
			}
			
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.NotYetAsfinag',
		{},
		{	runningTimeout: false,
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/notyetasfinag', 
					'app/Kompagnon/view/overlay/NotYetAsfinag.ejs'
				);
				this.controller = this;
				this.data = {};

				var that = this;

				that.subapp = subapp;
				
	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
					
	                $('#menuButton').on('click', function() {
	                	//ZurÃ¼ck zu Asfinag Unterwegs
	                	window.location = '#/'; 
	                });
	                 
	            };

	            that.onDestroy = function() {
					$('#menuButton').unbind('click');
	            };
			}
			
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.NoPois',
		{},
		{	init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/nopois', 
					'app/Kompagnon/view/overlay/NoPois.ejs'
				);
				
				this.data = {};
				
				

				var that = this;
				that.subapp = subapp;
				
				
	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
					
					$('p.noPoiText').prepend(subapp.missingPois);
					
	                $('#menuButton').on('click', function() {
	                	//ZurÃ¼ck zu Asfinag Unterwegs
						window.location = '#/';
						that.setVisible(false);
	                });
	                
	                $('#closeButton').on('click', function() {
	                	//To Disclaimer or start Kompagnon immediatly
	                	if(subapp.showDisclaimer) {
	                		subapp.overlay['/kompagnon/visualization/overlay/disclaimer'].setVisible(true); 
	                		subapp.visualizationController.displayMissingPois = false;
	                		that.setVisible(false);
	                		subapp.showDisclaimer = false;
						} else {
							setTimeout(function() {window.location='#/kompagnon/geolocation?page-transition=next' },250);
							subapp.visualizationController.displayMissingPois = false;
							that.setVisible(false);
						}
	                });
	                that.refreshOverlay();
	            };

	            that.onDestroy = function() {
					$('#menuButton').unbind('click');
					$('#mapButton').unbind('click');
	            };
			}
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.DisclaimerHelp',
		{},
		{
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/disclaimerHelp', 
					'app/Kompagnon/view/overlay/DisclaimerHelp.ejs'
				);
				this.data = {};

				var that = this;

	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	            };

	            that.onShow = function() {
					var that = this;
                    var pageCounter = 0;
                    var maxPages = $("#mask ul > li").length - 1;
                    var acceptButton = $('div.footer.overlay > ul.buttonlist > li.button.ok');
                    var cancelButton = $('div.footer.overlay > ul.buttonlist > li.button.cancel');
                    var nextButton = acceptButton;
                    var backButton = cancelButton;
                    
                    var skipTutorial = function(){
                        subapp.showDisclaimer = false;
                        window.location = '#/kompagnon/geolocation?page-transition=next';
                        that.setVisible(false);
                    }
                    
                    acceptButton.on('click', function() {
	                    
                        pageCounter++;
                        if(pageCounter > maxPages){
                            skipTutorial();
                        } else if(pageCounter > 0){
                            
                                backButton.html(""+that.data.i18n[that.data.language].commonstrings.back);
                                $('#mask > ul > li').each(function (index){

                                    if($(this).hasClass("fadeInFromRight") || $(this).hasClass("fadeInFromLeft")){
                                        var object = $(this);
                                        var newObject =  $('#mask > ul > li');
                                        
                                        object.removeClass();
                                        object.addClass("fadeOutLeft");
                                        
                                        newObject.eq(pageCounter).removeClass();
                                        newObject.eq(pageCounter).addClass("fadeInFromRight");
                                        $('.centerContainer > div').eq(pageCounter).css("background-color","#47525e");
                                        return;
                                    }
                                });
                            }
                        });
	                
                    cancelButton.on('click', function(){
                        
                        var object = null;
                        pageCounter--;
                        
                        if($(this).text() == ""+that.data.i18n[that.data.language].commonstrings.abbrechen.toString()){
                            skipTutorial();
                            return;
                        }
  
                        object = $('#mask > ul > li').eq(pageCounter);
                        object.removeClass();
                        object.addClass("fadeInFromLeft");
                        
                        object = $('#mask > ul > li').eq(pageCounter+1);
                        object.removeClass();
                        object.addClass("fadeOutRight");
                        
                        $('.centerContainer > div').eq(pageCounter+1).css("background-color","#ecf0f1");

                        if(pageCounter <= 0){
                            backButton.html(""+that.data.i18n[that.data.language].commonstrings.abbrechen);
                            pageCounter = 0;
                        }
                        
                    });
                    
                    that.refreshOverlay();
	            };

	            that.onDestroy = function() {
					$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
					$('div.footer.overlay > ul.buttonlistSingle > li.button.cancel').unbind('click');
	            };
			}
		}
	);

at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.kompagnon.controller.overlay.NoDirection',
		{},
		{
			init: function(subapp) {
				this._super(
					'/kompagnon/visualization/overlay/noDirection', 
					'app/Kompagnon/view/overlay/NoDirection.ejs'
				);
				this.data = {};

				var that = this;
				
	            that.onLoad = function() {
					that.data = this.data || {};
	    			that.data.language = application.config.language; 
	    			that.data.i18n = application.config.i18n;
	    			that.data.showButton = false;
	            };

	            that.onShow = function() {
					var that = this;	

	                $('div.footer.overlay > ul.buttonlist > li.button.direction_1').on('click', function() {
	                	subapp.visualizationController.showCurrentDirection(1);
	                	subapp.geolocationController.setCurrentDirection(1);
	
	                	that.setVisible(false);
	                    window.location = '#/kompagnon/geolocation?page-transition=next';
	                    that.refreshOverlay();
	                });
	                
	                $('div.footer.overlay > ul.buttonlist > li.button.direction_2').on('click', function() {
	                	subapp.visualizationController.showCurrentDirection(2);
	                	subapp.geolocationController.setCurrentDirection(2);

	                	that.setVisible(false);
	                    window.location = '#/kompagnon/geolocation?page-transition=next';
	                    that.refreshOverlay();
	                });

	                that.refreshOverlay();
	            };
            
	            that.onDestroy = function() {
					$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
					$('div.footer.overlay > ul.buttonlistSingle > li.button.cancel').unbind('click');
	            };
			}
		}
	);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.HACONMap', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.controller.add('/haconmap', '', {
        	onLoad: function() {
        		var locale = application.config.language;
        		if(window.PluginNativeCode != undefined) {
	        		window.PluginNativeCode.openActivity('hafasmap', locale);
        			window.location = '#/';
        		} 
        	}
        });
    }    
});

config.subapps.haconmap = new at.asfinag.unterwegs.HACONMap('HACONMap', 'HACONMap', '/haconmap');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Verkehrsinfos', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.controller.add('/verkehrsinfos', '', {
        	onLoad: function() {
        		var locale = application.config.language;
        		if(window.PluginNativeCode != undefined) {
        			application.loadApp('/verkehrsinfos',
	        			function() {
	        				window.PluginNativeCode.openActivity('verkehrsinfos', locale);
	        			}
	        		);
        			window.location = '#/';
        		} else {
                    if(verkehrsinfos != undefined && typeof(verkehrsinfos.startTraffic) == 'function') {
                    	verkehrsinfos.startTraffic();
                    	window.location = '#/';
                    } else {
                    	console.error('Verkehrsinfos.class.js: Function not available in browser mode!');
                    }
        		}
        	}
        });
    }    
});

config.subapps.verkehrsinfos = new at.asfinag.unterwegs.Verkehrsinfos('Verkehrsinfos', 'Verkehrsinfos', '/verkehrsinfos');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Verkehrsmeldungen', {}, {
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        
        this.updateOnStartup = true;
        this.modes = [];
        
        this.verkehrsmeldungenList = {};
        
        this.webcamViewer = {};
        
    },
    
    setupApp: function(application) {
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.VerkehrsmeldungenDAO(application);
        var me = this;
        
        
        // Adding Controller (kind of ViewController)
        this.application.addController([
            new at.asfinag.unterwegs.verkehrsmeldungen.controller.Index(this),
            new at.asfinag.unterwegs.verkehrsmeldungen.controller.VerkehrsmeldungenList(this, '/verkehrsmeldungen/verkehrsmeldungenlist'),
            new at.asfinag.unterwegs.verkehrsmeldungen.controller.VerkehrsmeldungenViewer(this, '/verkehrsmeldungen/verkehrsmeldungenlist'),
        ]);
        
    }
});

config.subapps.verkehrsmeldungen = new at.asfinag.unterwegs.Verkehrsmeldungen('Verkehrsmeldungen', 'Verkehrsmeldungen', '/verkehrsmeldungen');


$.Class('at.asfinag.unterwegs.VerkehrsmeldungenList',
	/* @static */
	{},
	{
		/* @prototype */
		init: function() {
			
			var that = this;
			var _list;
			var _current;
			
		
			that.setList = function(list) {
				_list = list;
			};

			that.getList = function() {
				return _list;
			};
			
			
			that.setCurrent = function(current) {
				_current = current;
			};

			that.getCurrent = function() {
				return _current;
			};
			
		}
	}
);

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.VerkehrsmeldungenDAO', {}, {
	init: function(application) {
		this.application = application;
	},
	
	update: function(callback) {
		!release_flag && console.log("VerkehrmeldungenDAO - do nothing");
	},
	
	/**
	* @param backlink boolean if users comes back from subscreen by backlink
	*/
    getTrafficInfoData: function(backlink, callback) {
    	if(backlink){
	    	this.status = DATA_STATUS_READY;	
    		callback(this.status);
    		return;
    	
    	}
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	//this.statusStreets = DATA_STATUS_LOADING;
    	//this.statusProvinces = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var dateFromTimestampStreets = 0;
    	var dateFromTimestampProvinces = 0;
    	
    	//LOADING Verkehrsmeldungen 
    	var urlTrafficInfo = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].verkehrsmeldungen_daten + '?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	!release_flag && console.debug('VerkehrsmeldungenDAO: load Data - URL: '+urlTrafficInfo);
    	$.ajax({
			url: urlTrafficInfo,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
				function insertData(tx) {	
					tx.executeSql('DELETE FROM trafficinfo', [], function (tx, res) {			
						var sqlWebcamliste = 'INSERT OR IGNORE INTO trafficinfo (situationid, language, source, x_wgs84, y_wgs84, eventtext, expires, validfrom, validto, messagetext, icon, direction, direction_text, bundesland, bldshort, distance, km, road_info, road_code_1, road_code_2, road_km_from, road_km_to, road_name) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
				    	for(var name in data) {
				    		var tinfo = data[name];
				    		//tinfo.EVENT_TEXT --> eventText bei den Umgebungsdaten, VALID_TO --> validTo
				    		//tinfo.DIRECTION_TXT
				    		//distance nicht da, kein km
				    		if(tinfo.validFrom == "1970-01-01 01:00:00" || tinfo.validFrom == "1970-01-01"){
					    		tinfo.validFrom = null;
				    		}
				    		if(tinfo.VALID_TO == "1970-01-01 01:00:00" || tinfo.VALID_TO == "1970-01-01"){
					    		tinfo.VALID_TO = null;
				    		}
				    		if(tinfo.expires == "1970-01-01 01:00:00" || tinfo.expires == "1970-01-01"){
					    		tinfo.expires = null;
				    		}
				    		
				    		if(tinfo.validFrom.length == 10){
					    		tinfo.validFrom = tinfo.validFrom + " 11:11:11"; //default time
				    		}
				    		if(tinfo.VALID_TO.length == 10){
					    		tinfo.VALID_TO = tinfo.VALID_TO + " 11:11:11"; //default time
				    		}
				    		tinfo.validFrom = getDateObject(tinfo.validFrom, true);
				    		tinfo.VALID_TO = getDateObject(tinfo.VALID_TO, true);
				    		tinfo.expires = getDateObject(tinfo.expires, true);
				    		tx.executeSql(sqlWebcamliste, [tinfo.situationId, config.language, tinfo.source, tinfo.wsg84X, tinfo.wsg84Y, tinfo.EVENT_TEXT, tinfo.expires, tinfo.validFrom, tinfo.VALID_TO, tinfo.messageText, tinfo.icon, tinfo.direction, tinfo.DIRECTION_TXT, tinfo.bundeslandbezeichnung, tinfo.bundeslandshortcode, 0.0, 0.0, tinfo.ROAD_INFO, tinfo.ROAD_CODE_1, tinfo.ROAD_CODE_2, tinfo.ROAD_KM_FROM, tinfo.ROAD_KM_TO, tinfo.ROAD_NAME ], 
				    		(function(name) { 
				    			})(name));
				    	}
				    });
			    }
				function errorCB (error) {
						console.error('ERROR2: ' + error.message);
						that.status = DATA_STATUS_ERROR_WHILE_LOADING;
						callback(that.status);
				}
					
					
				function successCB() {
					setTimeout(function() {
						that.status = DATA_STATUS_READY;
						callback(that.status);						
					}, 250);
				}
					
				db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler	
			},
			error: function(a, b, c) {
			console.error('error: '+a+"#"+b+"#"+c);
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				callback(that.status);	
			}
    	});
    },
 
     getStreets: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT road_code_2, count(road_code_2) as num_vkm, road_info, road_code_1, road_km_from, road_km_to, road_name FROM trafficinfo GROUP BY ROAD_CODE_2 ORDER BY ROAD_CODE_2;';
			
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push({ autobahn: result.rows.item(i).road_name, autobahn_num: result.rows.item(i).num_vkm, info: result.rows.item(i).road_info, searchParameter: result.rows.item(i).road_code_2, name: result.rows.item(i).road_code_1 });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },   
    
    
    /* deprecated */
    getAllStrasse: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT ROAD_INFO, ROAD_INFO2, ROAD_NAME, ROAD_CODE_1 FROM streets ORDER BY ROAD_INFO2;';
			
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push({ autobahn: result.rows.item(i).ROAD_NAME, info: result.rows.item(i).ROAD_INFO, searchParameter: result.rows.item(i).ROAD_INFO2, name: result.rows.item(i).ROAD_CODE_1 });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    getProvinces: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		//var sql = 'SELECT DISTINCT(bundesland), bldshort FROM trafficinfo ORDER BY bundesland;';
    		var sql = 'SELECT bundesland, count(bundesland) as num_vkm, bldshort FROM trafficinfo GROUP BY bundesland ORDER BY bundesland;';
    		
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						//if (result.rows.item(i).PROVINCE_COUNTRY == "AT") {
							data.push({ titel: result.rows.item(i).bundesland, bundesland_num: result.rows.item(i).num_vkm, searchParameter: result.rows.item(i).bldshort, name: result.rows.item(i).bundesland });	
						//}
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			}, function(a,b,c) { console.log("error");});
    	});	
    },  
    
    /* deprecated*/
    getAllBundesland: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT distinct(PROVINCE_NAME), PROVINCE_SHORTCODE, PROVINCE_NAME, PROVINCE_COUNTRY FROM provinces;';
			
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						if (result.rows.item(i).PROVINCE_COUNTRY == "AT") {
							data.push({ titel: result.rows.item(i).PROVINCE_NAME, searchParameter: result.rows.item(i).PROVINCE_SHORTCODE, name: result.rows.item(i).PROVINCE_NAME });	
						}
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    getTrafficInfoByStreet: function(searchParameter, callback) {
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM trafficinfo WHERE road_code_2 LIKE ? ORDER BY validfrom DESC';
			
			tx.executeSql(sql, [searchParameter], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						var source_txt = "" 
						if (result.rows.item(i).source == "ATOEA") {
							source_txt = "ÖAMTC";
						} else if (result.rows.item(i).source == "ATOE3") {
							source_txt = "Ö3";
						}
						data.push({ situationid: result.rows.item(i).situationid, language: result.rows.item(i).language, source: result.rows.item(i).source, source_txt: source_txt,
									x_wgs84: result.rows.item(i).x_wgs84, y_wgs84: result.rows.item(i).y_wgs84, eventtext: result.rows.item(i).eventtext,
									expires: result.rows.item(i).expires, validfrom: result.rows.item(i).validfrom, validto: result.rows.item(i).validto,
									messagetext: result.rows.item(i).messagetext, icon: result.rows.item(i).icon, direction: result.rows.item(i).direction, direction_text: result.rows.item(i).direction_text,
									bundesland: result.rows.item(i).bundesland, bldshort: result.rows.item(i).bldshort, distance: result.rows.item(i).distance,
									km: result.rows.item(i).km, road_info: result.rows.item(i).road_info, road_code_1: result.rows.item(i).road_code_1,
									road_code_2: result.rows.item(i).road_code_2, road_km_from: result.rows.item(i).road_km_from, road_km_to: result.rows.item(i).road_km_to, road_name: result.rows.item(i).road_name
									 });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },

    getTrafficInfoByProvince: function(searchParameter, callback) {
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM trafficinfo WHERE bldshort LIKE ? ORDER BY validfrom DESC';
			
			tx.executeSql(sql, [searchParameter], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						var source_txt = "" 
						if (result.rows.item(i).source == "ATOEA") {
							source_txt = "ÖAMTC";
						} else if (result.rows.item(i).source == "ATOE3") {
							source_txt = "Ö3";
						}
						data.push({ situationid: result.rows.item(i).situationid, language: result.rows.item(i).language, source: result.rows.item(i).source, source_txt: source_txt,
									x_wgs84: result.rows.item(i).x_wgs84, y_wgs84: result.rows.item(i).y_wgs84, eventtext: result.rows.item(i).eventtext,
									expires: result.rows.item(i).expires, validfrom: result.rows.item(i).validfrom, validto: result.rows.item(i).validto,
									messagetext: result.rows.item(i).messagetext, icon: result.rows.item(i).icon, direction: result.rows.item(i).direction, direction_text: result.rows.item(i).direction_text,
									bundesland: result.rows.item(i).bundesland, bldshort: result.rows.item(i).bldshort, distance: result.rows.item(i).distance,
									km: result.rows.item(i).km, road_info: result.rows.item(i).road_info, road_code_1: result.rows.item(i).road_code_1,
									road_code_2: result.rows.item(i).road_code_2, road_km_from: result.rows.item(i).road_km_from, road_km_to: result.rows.item(i).road_km_to, road_name: result.rows.item(i).road_name
									 });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    
    getTrafficInfoByGeoLocation: function(searchParameter, backlink, callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	//if backlink, not necessary to load traffic info from service
    	if(backlink){
    	    var subapp = application.subapps['verkehrsmeldungen'];
	    	var verkehrsinfo = subapp.verkehrsmeldungenList['verkehrsmeldungenList'].getList();
	    	if(verkehrsinfo != null && verkehrsinfo.length > 0){
		    	callback(verkehrsinfo);
		    	return;
	    	}
    	}
        	//LOADING Verkehrsmeldungen 
    	var urlTrafficInfoGeo = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].verkehrsmeldungen_umgebung_daten + '?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password)  + '&parameter=[' + searchParameter + ']';
    	!release_flag && console.debug('VerkehrsmeldungenDAO: load Geolocation - URL: '+urlTrafficInfoGeo);
    	$.ajax({
			url: urlTrafficInfoGeo,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
				var returndata = [];
				if(data != null){
					if(data.length > 0) {
						that.status = DATA_STATUS_READY;
						for(var name in data) {
					    	var tinfo = data[name];
							var source_txt = "" 
							if (tinfo.source == "ATOEA") {
								source_txt = "ÖAMTC";
							} else if (tinfo.source == "ATOE3") {
								source_txt = "Ö3";
							}
							var validFrom 	= getDateObject(tinfo.validFrom, true);
					    	var validTo 	= getDateObject(tinfo.validTo, true);
					    	var expires 	= getDateObject(tinfo.expires, true);
							returndata.push({ situationid: tinfo.situationId, language: config.language, source: tinfo.source, source_txt: source_txt,
										x_wgs84: tinfo.wsg84X, y_wgs84: tinfo.wsg84Y, eventtext: tinfo.eventText,
										expires: expires, validfrom: validFrom, validto: validTo,
										messagetext: tinfo.messageText, icon: tinfo.icon, direction: tinfo.direction, direction_text: tinfo.directionTxt,
										bundesland: tinfo.bundeslandbezeichnung, bldshort: tinfo.bundeslandshortcode, distance: tinfo.distance,
										km: tinfo.km, road_info: tinfo.ROAD_INFO, road_code_1: tinfo.ROAD_CODE_1,
										road_code_2: tinfo.ROAD_CODE_2, road_km_from: tinfo.ROAD_KM_FROM, road_km_to: tinfo.ROAD_KM_TO, road_name: tinfo.ROAD_NAME
										 });
						}
						
					}
				} else {
					console.log("RETURN NULL");
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
				callback(returndata);
				return;
			},
			error: function(a, b, c) {
				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				callback([]);	
			}
    	});
    }
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.verkehrsmeldungen.controller.VerkehrsmeldungenViewer',
	{},
	{
		init: function(subapp, path) {
			
			this._super(
				path + '/viewer',
				'app/Verkehrsmeldungen/view/VerkehrsmeldungenViewer.ejs'
			);

			var that = this;
			var application = subapp.application;

			
			
			// ======================================================================
			// ON LOAD
			that.onLoad = function() {
				var d = $.Deferred();
	    		d.controller = this;
	    		d.application = subapp;
	    		var controller = this;
	    		var verkehrsmeldungenList = subapp.verkehrsmeldungenList['verkehrsmeldungenList'];
	    		var list = verkehrsmeldungenList.getList();
	    		var current = list[controller.parameters.theIndex];
	    		controller.items = current;
	    		
	    		
	    		function onReady() {
		    		
	    			application.loadPage(
	    					controller.path,
	    					{ data: {
	    							items: controller.items,
								    backlink: path,
								    language: application.config.language,
								    i18n: application.config.i18n,
								    controller: {
								    			path: path,
								    			listtype: controller.parameters.listtype
								    			}
	    							}
	    					},
	    				    function() { 
			    				// TODO: statistics
			    				//application.statistics[controller.path].addDetail('rastenname', controller.items[0].name);
			    				application.refreshPage();
			    				d.resolve();
	    			});
	    		}
	    		
	            
	        	onReady();
	    			    		
	    		return d.promise();
	        },
	        
	        
	        
	        // ====================================================================
	        // ON SHOW
	        that.onShow = function() {
	        	var me = this;
	        	var controller = this;
	        	var verkehrsmeldungenList = subapp.verkehrsmeldungenList['verkehrsmeldungenList'];
	    		var list = verkehrsmeldungenList.getList();
	    		var current = list[me.controller.parameters.theIndex];
	    		
	    		
	    		var hosts = [ 	
					'http://maps.asfinag.at',
					'http://s1.maps.asfinag.at', 
					'http://s2.maps.asfinag.at', 
					'http://s3.maps.asfinag.at', 
					'http://s4.maps.asfinag.at', 
					'http://s5.maps.asfinag.at'
				];

	    		
	    		var layers = {
					'base': {
						name: 'PVIS Base Layer',
						host: hosts,
						path: '/maps/tiles',
						layers: 'pvis:europe',
						transitionEffect: 'resize',
						format: 'image/jpeg'
					}
				};
	    		
	    		var resolutions = [
	    			616,
					358.4,
					179.2,
					89.6,
					44.8,
					22.4,
					11.2,
					5.6,
					2.8,
					1.4
	    		];
	    		
	    		var maxExtent = new OpenLayers.Bounds(-250000,-250000,750000,750000);
	    		
	    		var restrictedExtent = new OpenLayers.Bounds(-220000,150000,880000,690000);
	    		
	    		var tileWidth = 512;
	    		var tileHeight = 512;
	    		
	    		var map = new OpenLayers.Map('OpenLayersMap', {
					units: 'm',
					projection: new OpenLayers.Projection('EPSG:31287'),
					resolutions: resolutions,
					maxExtent: maxExtent,
					restrictedExtent: restrictedExtent,
					zoom: 4,
					controls: [
					 	new OpenLayers.Control.ScaleLine({ bottomOutUnits: '' }),
					 	new OpenLayers.Control.Zoom()	// zoom control
					],
					tileSize: new OpenLayers.Size(tileWidth, tileHeight)
				});
	    		
	    		var _layer = layers['base'];
	    		var _hosts = [];
	    		for(i = 0; i < hosts.length; i++) {
		    		_hosts.push(hosts[i] + _layer.path);
	    		}
	    		map.addLayer(new OpenLayers.Layer.WMS(
	    			_layer.name,
	    			_hosts,
	    			{
		    			layers: _layer.layers,
		    			tiled: true,
		    			format: (_layer.format != undefined) ? _layer.format : 'image/png',
		    			transparent: (_layer.transparent != undefined) ? _layer.transparent : false
	    			},
	    			{
		    			tileSize: new OpenLayers.Size(tileWidth, tileHeight),
		    			transitionEffect: 'none'
	    			}
	    		));
	    		
	    		
	    		
	    		var source = new Proj4js.Proj('EPSG:4326');		// WGS-84
				var dest = new Proj4js.Proj('EPSG:31287');	// LAMBERT (GEOLOCATION CLASS)

				var pTemp = Proj4js.transform(source, dest, new Proj4js.Point(current.x_wgs84, current.y_wgs84));

	    		



				// add Verkehrmeldung-Icon
				var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
				renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;

				var layer_style = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
				layer_style.fillOpacity = 1;
				layer_style.graphicOpacity = 1;
				
				var icon = 'http://maps.asfinag.at/cache/svg?image=' + current.icon + '&size=24';
				var strassentext = current.road_info + " - " + current.road_name;
				var pointStyle = new OpenLayers.Style({
					graphicWidth : 24,
					graphicHeight : 24,
					externalGraphic : icon,
					graphicTitle: strassentext
				});
				
				var style_cluster = new OpenLayers.StyleMap({
					'default': pointStyle
				});
				
				var type = 'Verkehrsmeldungen';
				var vectorLayer = new OpenLayers.Layer.Vector('layer ' + type, {
					styleMap: style_cluster,
					renderers: renderer
				});
				
				vectorLayer.addFeatures([ new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(pTemp.x, pTemp.y)) ]);
	    		map.addLayer(vectorLayer);
	    		
	    		
	    		//map.zoomToMaxExtent();
	    		// map.zoomTo(6);
				map.moveTo(new OpenLayers.LonLat(pTemp.x, pTemp.y));
	    		
	        },
	        
	        
	        
	        // ====================================================================
	        // ON DESTROY
	        that.onDestroy = function() {
	        	
	        }
		}
	}
);

//***********************************************************************************************
//
// Parent Class (Helper Class) to help initializing some child-classes like Bundesland.class.js,
// Strasse.class.js, Favoriten.class.js, Geolocation.class.js,...
//
//
$.Class('at.asfinag.unterwegs.verkehrsmeldungen.ParentController', {}, {
    
	init: function(controller, subapp) {
	
    	this.controller = controller;
    	this.subapp = subapp;
    	
    },
    
    
    showLoading: function () {
		$('ul.listview.loading').show();
		$('ul.listview.noentries').hide();
		$('div#sticky_wrapper').hide();
	},
	
	
	showNoEntriesFound: function() {
		$('ul.listview.items').html('');
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').show();
		$('ul.listview.items').hide();
		$('div#sticky_wrapper').hide();
	},
	
	showErrorOccured: function() {
		$('ul.listview.items').html('');
		$('ul.listview.loading').hide();
		$('ul.listview.error_occured').show();
		$('ul.listview.strasse_reload').show();
		$('ul.listview.items').hide();
		$('div#sticky_wrapper').hide();
	},
	    	
	    	
	
	showList: function () {
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').hide();
		$('ul.listview.items').show();
        application.refreshPage();
	},
	
	renderList: function (items, i18n, language, path) {
		var view = 'app/Verkehrsmeldungen/view/templates/verkehrsmeldungenitems.ejs';
		var that = this;
		
		
		$('ul.listview.items').html('');	// clear list, this is also important if a user makes fast navigation, navigating into geolocation then navigating back immediately and open a province which would cause 2 ajax requests and causing a list with both nearby-items and province-items... so if we clear the list each time after an ajax request, this should resolve the problem
		
		$('ul.listview.items').append(
            new EJS({
                url: view
            }).render({ 
                data: { 
                    items: items, 
                    i18n: i18n, 
                    language: language,
                    controller: {
                        path: path,
                        type: that.controller.parameters.type,
                        searchParameter: that.controller.parameters.searchParameter
                    }
                }                                        
            })
        );
        
	},
	
	
	
	lazyLoadData : function() {
		var that = this;
		var subapp = application.subapps['verkehrsmeldungen'];
		var controller = that.controller;
		var verkehrsinfo = null;
		var type = controller.parameters.type;
		var backlink = controller.parameters.backlink; //displays if page is accessed by back button necessary for loading purposes
		var searchParameter = controller.parameters.searchParameter;	// this is either a street shortcode (A01, A02, etc) or a province-shortcode (W for Vienna etc) 
		
		if (subapp.verkehrsmeldungenList['verkehrsmeldungenList'] == undefined) {
			subapp.verkehrsmeldungenList['verkehrsmeldungenList'] = new at.asfinag.unterwegs.VerkehrsmeldungenList();					
		}
		
			if (type == 'street') {
				//get Verkehrsmeldungen out of DB
				
				subapp.persistence.getTrafficInfoByStreet(searchParameter, function(verkehrsinfo) {
					subapp.verkehrsmeldungenList['verkehrsmeldungenList'].setList(verkehrsinfo);
					var itemsToRender = verkehrsinfo;
									
					if (itemsToRender.length == 0 || itemsToRender == undefined || itemsToRender == 'undefined' || itemsToRender == null || itemsToRender == 'null') {
						that.showNoEntriesFound();
					} else {
						$('h1 span#num_vkms_in_list').html("("+itemsToRender.length+")");
						// rendering list-items for 'Liste' ('Liste'-tab)
		                that.renderList(
		                    itemsToRender,
		                    application.config.i18n,
		                    application.config.language,                            
		                    that.controller.path
		                );
		                
		                that.showList();
					}
				});
				
				//searchParameter = 'STR:' + searchParameter;
			} else if (type == 'provinces') {
				subapp.persistence.getTrafficInfoByProvince(searchParameter, function(verkehrsinfo) {
					subapp.verkehrsmeldungenList['verkehrsmeldungenList'].setList(verkehrsinfo);
					var itemsToRender = verkehrsinfo;
									
					if (itemsToRender.length == 0 || itemsToRender == undefined || itemsToRender == 'undefined' || itemsToRender == null || itemsToRender == 'null') {
						that.showNoEntriesFound();
					} else {
						$('h1 span#num_vkms_in_list').html("("+itemsToRender.length+")");
						// rendering list-items for 'Liste' ('Liste'-tab)
		                that.renderList(
		                    itemsToRender,
		                    application.config.i18n,
		                    application.config.language,                            
		                    that.controller.path
		                );
		                that.showList();
					}
				});
				//searchParameter = 'BL:' + searchParameter;
			} else if (type == 'geolocation') {
				searchParameter = 'X:' + controller.position.coords.longitude + ';Y:' + controller.position.coords.latitude + ';KM:'+RADIUS_VERKEHRSINFO_GEOLOCATION;
				
				
				subapp.persistence.getTrafficInfoByGeoLocation(searchParameter, backlink, function(verkehrsinfo) {
					subapp.verkehrsmeldungenList['verkehrsmeldungenList'].setList(verkehrsinfo);
					var itemsToRender = verkehrsinfo;
									
					if (itemsToRender.length == 0 || itemsToRender == undefined || itemsToRender == 'undefined' || itemsToRender == null || itemsToRender == 'null') {
						that.showNoEntriesFound();
					} else {
						//set header
						$('h1 span#num_vkms_in_list').html("("+itemsToRender.length+")");
						
						// rendering list-items for 'Liste' ('Liste'-tab)
		                that.renderList(
		                    itemsToRender,
		                    application.config.i18n,
		                    application.config.language,                            
		                    that.controller.path
		                );
		                
		                that.showList();
		                
		                function addSectionHeaderToListView(withinMaxDistance, nextIndex) {                    	
	                    	var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + withinMaxDistance + ' km';
	            			var currentListElement = $('ul.listview.items li:eq(' + nextIndex + ')');
	            			currentListElement.before('<li class="webcams header"><h2>' + sectionHeaderTitle + '</h2></li>');
	            			liCounter++;
	                    }					                
		                
		                var liCounter = 0; 	// just a helper variable for counting the additional li elements (the section headers) we are adding to the nearby list, so that later in the code we fetch the right element by using the jquery selector eq to append the section headers at the correct index
	            
						var listView = $('ul.listview.items');
						var withinMaxDistance = '1';
	                    var distance_out = '0 - 5';
	                	
	                	for(var i in itemsToRender) {
	                		var myDistance = parseFloat(itemsToRender[i].distance);
	                		
	                    	if (i == 0) {
	                    		if (myDistance > 1) {
	                    			withinMaxDistance = '5';
	                    			distance_out = '0 - 5';
	                    		}
	                    		if (myDistance > 5) {
	                    			withinMaxDistance = '10';
	                    			distance_out = '5 - 10';
	                    		}
	                    		if (myDistance > 10) {
	                    			withinMaxDistance = '20';
	                    			distance_out = '10 - 20';
	                    		}
	                    		if (myDistance > 20) {
	                    			withinMaxDistance = '50';
	                    			distance_out = '20 - 50';
	                    		}
	                    		if (myDistance > 50) {
	                    			withinMaxDistance = '100';
	                    			distance_out = '> 50';
	                    		}
	                    		// adding the top section item into our table:
	                    		var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km';
	            				$('ul.listview.items li:eq(0)').before('<li class="webcams header"><h2>' + sectionHeaderTitle + '</h2></li>');
	            				liCounter++;
	      		              	//set first element for sticky divider
	    	    				if($('h2#sticky_headline').length > 0){
	    	    					if($("h2#sticky_headline").text() == ""){
	    	    						$("h2#sticky_headline").text(sectionHeaderTitle);
	    	    					}
	    	    					$('div#sticky_wrapper').show();
	    	    				}
	                    	} else {
	                    		
	                    		var nextIndex = parseInt(i) + liCounter;	// since we added new li elements the eq below is a bit tricky meaning that we have to add +1 here...
	                    		var addNewSectionHeader = false;
	                    		
	                    		if (myDistance > 1 && withinMaxDistance <= 1) {
	                    			withinMaxDistance = '5';
	                    			distance_out = '0 - 5';
	                    			addNewSectionHeader = true;
	                    		}
	                    		if (myDistance > 5 && withinMaxDistance <= 5) {
	                    			withinMaxDistance = '10';
	                    			distance_out = '5 - 10';
	                    			addNewSectionHeader = true;
	                    		}
	                    		if (myDistance > 10 && withinMaxDistance <= 10) {
	                    			withinMaxDistance = '20';
	                    			distance_out = '10 - 20';
	                    			addNewSectionHeader = true;
	                    		}
	                    		if (myDistance > 20 && withinMaxDistance <= 20) {
	                    			withinMaxDistance = '50';
	                    			distance_out = '20 - 50';
	                    			addNewSectionHeader = true;
	                    		}
	                    		if (myDistance > 50 && withinMaxDistance <= 50) {
	                    			withinMaxDistance = '100';
	                    			distance_out = '> 50';
	                    			addNewSectionHeader = true;
	                    		}
	                    		if (addNewSectionHeader) {
	                    			addSectionHeaderToListView(distance_out, nextIndex);                    			
	                    		}
	                    		
	                    	}
	                	}
					}
				});
			}
	}
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.verkehrsmeldungen.controller.VerkehrsmeldungenList',
	{},
	{
		init: function(subapp, path) {
			this._super(
				path,
				'app/Verkehrsmeldungen/view/VerkehrsmeldungenList.ejs'
			);
			
			var that = this;
			var application = subapp.application;


			that.onLoad = function() {
				var d = $.Deferred();
	    		var controller = this;
	            var that = this;
	    		d.controller = controller;
	    		
	    		
	            that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
	            
    			application.loadPage(
					controller.path, {
							 data: { 
								 language: application.config.language,
								 i18n: application.config.i18n,
								 header: controller.parameters.name,
								 type: controller.parameters.type
							 }
					},
					function() {
						d.resolve();
					}
    			);
    			
    			
	    		return d.promise();
			};
			
			
			

			that.onShow = function() {
				
				var that = this;
				var controller = this.controller;
				
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.verkehrsmeldungen.ParentController(controller, subapp);
				parentController.showLoading();
				
				function startLoadingData () {
					
					if (controller.parameters.type == 'geolocation') {
						// get items
						if(use_default_position){
							controller.position = default_position;
							parentController.lazyLoadData();
						} else {
				            controller.geoLocation.getCurrentPosition(
				                function(position) {
				                	
				                	controller.position = position;
				                	//parentController.setupListViewForGeolocation();
				    				parentController.lazyLoadData();
				                },
				                function() {
				                },
				                {}
				            );
						}
					} else {
						parentController.lazyLoadData();					
					}
				}
				
				startLoadingData();
				
				
				// RELOAD BUTTON:
	    		$('ul.listview.strasse_reload').on('click', function() {
	    		
	    			$('ul.listview.vkm_noentries').hide();
					$('ul.listview.strasse_reload').hide();
					$('ul.listview.error_occured').hide();
					$('ul.listview.noentries').hide();
					$('ul.listview.loading').show();
	    			
	    			// clear list:
	    			$('ul.listview.items').empty();
	    			
	    			startLoadingData();
	    			
	    			application.refreshPage();
	    		});
				
			};
			
			
			

			that.onDestroy = function() {
				$('ul.listview.strasse_reload').unbind('click');
				
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.verkehrsmeldungen.controller.Index',
	{},
	{
		init: function(subapp) {
			this._super(
				'/verkehrsmeldungen',
				'app/Verkehrsmeldungen/view/index.ejs'
			);

			var that = this;
			var application = subapp.application;


			that.onLoad = function() {
				var d = $.Deferred();
	    		var controller = this;
	    		d.controller = this;
	    		
	    		this.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
				var backlink = false;
				if(controller != undefined && controller.parameters != undefined && controller.parameters.backlink != undefined && controller.parameters.backlink != null){
					backlink = controller.parameters.backlink;
				}
				
	    		subapp.persistence.getTrafficInfoData(backlink, function(retval){
		    		if(retval == DATA_STATUS_ERROR_WHILE_LOADING){
		    			application.alert(application.config.i18n[application.config.language].network_connectivity_head, application.config.i18n[application.config.language].verkehrsinfos.error_internet_connection, 'OK', 'verkehrsmeldungen', function() {});
		    		}
	    		});
	    		
	    		controller.loadData = function(callback) {
	    			subapp.persistence.getStreets({}, function(strassen) {
	    				controller.strassen = strassen;
	    				subapp.persistence.getProvinces({}, function(bundeslaender) {
	        				controller.bundeslaender = bundeslaender;
	        				callback();
	        			});
	    			});	    			
	    		};
	    		
	    		function onReady() {
	    			application.loadPage(controller.path, { data: { strassen: controller.strassen, bundeslaender: controller.bundeslaender, language: application.config.language, i18n: application.config.i18n } }, function() {
	    				d.resolve();
	    			});
	    		}
				
	    		this.loadData(onReady);
	    		
	    		return d.promise();
			};

			that.onShow = function() {
				var controller = this.controller;
	    		var that = this.controller;
	    		controller.loadingInterval = undefined;

	    		
	    		if(controller.page != undefined) {
	    			$('.footer ul.tabs li.navigation.' + controller.page+' span').trigger('click');
	    		}
	    		
	    		function lazyDataLoading() {
	    			if(subapp.persistence.status == DATA_STATUS_LOADING) {
	    				$('ul.strasse_loading').show();
	    				$('ul.bundesland_loading').show();
	    				$('ul.listview.strasse').hide();
		    			$('ul.listview.bundesland').hide();
		    			controller.loadingInterval = window.setInterval(function() {
		    				if(subapp.persistence.status != DATA_STATUS_LOADING) {
		    					window.clearInterval(controller.loadingInterval);
                                that.loading_time = new Date();
		    					$('ul.strasse_loading').hide();
		    					$('ul.bundesland_loading').hide();
		    					if(subapp.persistence.status == DATA_STATUS_ERROR_WHILE_LOADING) {
		    						showNoEntriesFound();
		    					} else {
		    						var ulStrasse = $('ul.listview.strasse');
		    						var ulBundesland = $('ul.listview.bundesland');
		    						ulStrasse.html('');
		    						ulBundesland.html('');
		    						ulStrasse.append('<li class="header"><h2>'+application.config.i18n[application.config.language].verkehrsinfos.header + '</h2></li>');
		    						ulBundesland.append('<li class="header"><h2>'+application.config.i18n[application.config.language].verkehrsinfos.header + '</h2></li>');
		    						$('div#sticky_wrapper').show();
		    						controller.loadData(function() {
		    							for(var i in controller.strassen) {
		    								ulStrasse.append(
		    										'<li class="link" onclick="window.location=\'#/verkehrsmeldungen/verkehrsmeldungenlist?type=street&searchParameter=' + controller.strassen[i].searchParameter + '&name=' + controller.strassen[i].name + '\'">' + controller.strassen[i].info + ' - ' + controller.strassen[i].autobahn + ' (' + controller.strassen[i].autobahn_num +  ')' + '</li>'
		    								);
		    							}
										
										//ulBundesland.append('<div class="oeamtc_logo list"><span class="text vkm_logo list">in Kooperation mit </span><img src="css/images/verkehrsmeldungen/logo_oeamtc.png" /></div>');
										
		    							for(var i in controller.bundeslaender) {
		    								ulBundesland.append(
		    										'<li class="link" onclick="window.location=\'#/verkehrsmeldungen/verkehrsmeldungenlist?type=provinces&searchParameter=' + controller.bundeslaender[i].searchParameter + '&name=' + controller.bundeslaender[i].name + '\'">' + controller.bundeslaender[i].titel + ' (' + controller.bundeslaender[i].bundesland_num +  ')' +  '</li>'
		    								);
		    							}
		    							
		    							$('ul.listview.strasse_noentries').hide();
			    						$('ul.listview.bundesland_noentries').hide();
			    						if($('ul.listview.strasse li').length == 1){
			    							$('ul.listview.strasse').append("<li style='margin-top: 10px;border: none;text-align: center'>"+application.config.i18n[application.config.language].verkehrsinfos.no_traffic_infos+"</li>");
			    						}
			    						$('ul.listview.strasse').show();
			    						if($('ul.listview.bundesland li').length == 1){
			    							$('ul.listview.bundesland').append("<li style='margin-top: 10px;border: none;text-align: center'>"+application.config.i18n[application.config.language].verkehrsinfos.no_traffic_infos+"</li>");
			    						}
			    						$('ul.listview.bundesland').show();
			    		    			
			    						var update_time = that.loading_time;
			    	                    $('span.last_update[data-id=last_update]').html(returnUpdateTimeValue(update_time, application.config.language));
			    						controller.lastUpdateTimeInterval = setInterval(function(){ 
			    	                    	$('span.last_update[data-id=last_update]').html(returnUpdateTimeValue(update_time, application.config.language));
			    	                    }, 60000);
			    						$('ul.listview.reload_list_button').show();
			    	                    application.refreshPage();
		    						});
		    					}
		    				}
	    				}, 1000);
		    		} else {
		    			var update_time = that.loading_time;
	                    $('span.last_update[data-id=last_update]').html(returnUpdateTimeValue(update_time, application.config.language));
						controller.lastUpdateTimeInterval = setInterval(function(){ 
	                    	$('span.last_update[data-id=last_update]').html(returnUpdateTimeValue(update_time, application.config.language));
	                    }, 60000);
	                    $('ul.listview.reload_list_button').show();
		    			showNoEntriesFound();
		    		}
	    		}
	    		
	    		function showNoEntriesFound() {
                    $('ul.listview.error_occured').hide();
	    			if(controller.strassen.length == 0 && subapp.persistence.status == DATA_STATUS_ERROR_WHILE_LOADING) {
                        $('div#sticky_wrapper').hide();
                        $('ul.strasse_loading').hide();
	    				$('ul.listview.strasse_noentries, ul.listview.strasse_noentries li').show();
	    				$('ul.listview.strasse').hide();
                        $('ul.listview.reload_list_button').hide();
	    			} else {
	    				$('div#sticky_wrapper').show();
	    			}
	    			if(controller.bundeslaender.length == 0 && subapp.persistence.status == DATA_STATUS_ERROR_WHILE_LOADING) {
                        $('div#sticky_wrapper').hide();
                        $('ul.bundesland_loading').hide();
	    				$('ul.listview.bundesland_noentries, ul.listview.bundesland_noentries li').show();
	    				$('ul.listview.bundesland').hide();
                        $('ul.listview.reload_list_button').hide();
	    			}
	    		}
	    		
	    		function showErrorLoadingData() {
		    		$('ul.listview.loading').hide();
		    		$('ul.strasse_loading').hide();
	    			$('ul.bundesland_loading').hide();
		    		$('ul.listview.noentries').hide();
                    $('ul.listview.reload_list_button').hide();
		    		$('ul.listview.error_occured').show();
		    		$('ul.listview.items').hide();	
		    		$('ul.listview.strasse_noentries, ul.listview.strasse_noentries li').hide();
	    			$('ul.listview.bundesland_noentries, ul.listview.bundesland_noentries li').hide();
		    	}
	    		
	    		lazyDataLoading();
	    		
	    		
	    		// update geoLocation button
	    		if(use_default_position){
	    			$('a.imagebutton.location.verkehrsmeldungen').removeClass('off').addClass('on');
					$('a.imagebutton.location.verkehrsmeldungen').removeClass('icon-line-standort');
					$('a.imagebutton.location.verkehrsmeldungen').addClass('icon-filled-standort');
	    		} else {
		    		// update geoLocation button
		    		that.geoLocation.getCurrentPosition(
						function(position) {
							if(position != undefined) {
								$('a.imagebutton.location.verkehrsmeldungen').removeClass('off').addClass('on');
								$('a.imagebutton.location.verkehrsmeldungen').removeClass('icon-line-standort');
								$('a.imagebutton.location.verkehrsmeldungen').addClass('icon-filled-standort');
							}
						},
						function() {
							$('a.imagebutton.location.verkehrsmeldungen').removeClass('on').addClass('off');
							$('a.imagebutton.location.verkehrsmeldungen').addClass('icon-line-standort');
							$('a.imagebutton.location.verkehrsmeldungen').removeClass('icon-filled-standort');
						},
						{}
					);
	    		}
				
				// !======================GEOLOCATION BUTTON
	    		// geoLocation button handling
	    		$('a.imagebutton.location.verkehrsmeldungen').on('click', function() {
	    			
	    			if($(this).hasClass('on')) {
	    				// wenn geo location aktiviert oder verfügbar ist
	    				window.location = '#/verkehrsmeldungen/verkehrsmeldungenlist?type=geolocation&name='+application.config.i18n[application.config.language].verkehrsinfos.geolocation; 
	    			} else if($(this).hasClass('off')) {
	    				// wenn geo location deaktiviert
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.no_geolocation,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"verkehrsmeldungen"
	    	            		);
	    				} else {
		    				application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.no_geolocation, 'OK', 'verkehrsmeldungen', function() {});    				
	    				}
	    			} else {
	    				// wenn geo location status unbekannt
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.geolocation_tracking,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"verkehrsmeldungen"
	    	            		);
	    				} else {
	    					application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.geolocation_tracking, 'OK', 'verkehrsmeldungen', function() {});	
	    				}
	    			}
	    		});

	    		// ==== Reload Button ====
	    		$('ul.listview li.button.reload').on('click', function() {
	    			$('ul.listview.strasse_noentries').hide();
					$('ul.listview.bundesland_noentries').hide();
					$('ul.listview.error_occured').hide();
                    $('ul.listview.reload_list_button').hide();
                    $('div#sticky_wrapper').hide();
	    			
					subapp.persistence.getTrafficInfoData(false, function(status){
					});
					lazyDataLoading();
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.strasse').on('click', function() {
	    			controller.page = 'strasse';
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.bundesland').on('click', function() {
	    			controller.page = 'bundesland';
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.card').on('click', function() {
	        		if(window.PluginNativeCode != undefined) {
	        			//application.loadApp('/verkehrsinfos',
		        			//function() {
	        			var locale = application.config.language;
		        		window.PluginNativeCode.openActivity('hafasmap', locale);
		        			//}
		        		//);
	        			window.location = '#/';
	        		} else {
	                    if(verkehrsinfos != undefined && typeof(verkehrsinfos.startTraffic) == 'function') {
	                    	verkehrsinfos.startTraffic();
	                    	window.location = '#/';
	                    } else {
	                    	console.error('Verkehrsinfos.class.js: Function not available in browser mode!');
	                    }
	        		}
	    		});	    		
			};

			that.onDestroy = function() {
				$('ul.listview li.button.reload').unbind('click');
	    		$('.footer ul.tabs li.navigation.strasse').unbind('click');
	    		$('.footer ul.tabs li.navigation.bundesland').unbind('click');
	    		$('a.imagebutton.location.verkehrsmeldungen').unbind('click');
	    		window.clearInterval(this.loadingInterval);
	    		window.clearInterval(this.lastUpdateTimeInterval);
			};
		}
	}
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.HACONRoute', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.controller.add('/haconroute', '', {
        	onLoad: function() {
        		var locale = application.config.language;
        		
        		//send Statistic
        		application.addStatistics('/haconroute', function() {
	    			var addInfo = application.getAdditionalInfo(null, '/haconroute');
		    		application.sendStatistics(addInfo);
	    		});
        		
        		if(window.PluginNativeCode != undefined) {
	        		window.PluginNativeCode.openActivity('hafasroute', locale);
        			window.location = '#/';
        		}
        	}
        });
    }    
});

config.subapps.haconroute = new at.asfinag.unterwegs.HACONRoute('HACONRoute', 'HACONRoute', '/haconroute');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.ServiceCenter', {}, {
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {String} title
	 * @param {String} path
	 */
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.addController([
            new at.asfinag.unterwegs.servicecenter.controller.Index(this)
        ]);
        
        
        this.addOverlays([
			  new at.asfinag.unterwegs.servicecenter.controller.overlay.Info(this)
        ]);
    }
    
});

config.subapps.serviceCenter= new at.asfinag.unterwegs.ServiceCenter('ServiceCenter', 'Service Center', '/servicecenter');


//***********************************************************************************************
//
// Parent Class (Helper Class) to help initializing some child-controller-classes,
//
//
$.Class('at.asfinag.unterwegs.servicecenter.ParentController', {}, {
    
	/**
	 * init
	 * 
	 * @param {Object} controller
	 * @param {Object} subapp
	 */
	init: function(controller, subapp) {
    	
    	this.controller = controller;
    	this.subapp = subapp;
    },
    
    /**
     * initializeOnShow - this method initializes the child-classes onShow method
     */
	initializeOnShow : function() { 
		
		var that = this;
		
		$('.footer ul.tabs li.navigation.notruf').on('click', function() {
			that.controller.page = 'notruf';
			that.setupInfoButton();
		});
		
		$('.footer ul.tabs li.navigation.asfinag').on('click', function() {
			that.controller.page = 'asfinag';
			that.setupInfoButton();
		});
		
		// this part of code can not be inside the intializeOnShow method of the parentcontroller because it differs in each child-controller
		$('.footer ul.tabs li.navigation.andere').on('click', function() {
			that.controller.page = 'andere';
			that. setupInfoButton();
		});
		
		


		if(that.controller.page != undefined) {
			$('.footer ul.tabs li.navigation.' + that.controller.page +' span').trigger('click');
			that.setupInfoButton();
		}
		
	},
	
	/**
	 * setupInfoButton
	 */
	setupInfoButton : function () {
		
		var that = this;
		
		if (that.controller.page == 'asfinag') {
			$('div.header a.imagebutton.info.servicecenter').show();
		} else {
			$('div.header a.imagebutton.info.servicecenter').hide();
		}
		
	}
    
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.servicecenter.controller.Index',
	{},
	{
	    /**
	     * init
	     * 
	     * @param {Object} subapp
	     */
		init: function(subapp) {
			this._super(
				'/servicecenter',
				'app/ServiceCenter/view/index.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {						
							i18n: application.config.i18n,
							language: application.config.language
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				
				setTimeout(function() {
					
					$('ul.listview').show();
				}, 250);
				
				var controller = this.controller;
				
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.servicecenter.ParentController(controller, subapp);
				parentController.initializeOnShow();
				
				parentController.setupInfoButton();
				
				// set images according to language
				$('ul.listview > li div a img').attr('src', 'css/images/servicecenter/call_to_action_asfinag_phone_number_button_' + application.config.language + '.png');
				
				
				// Info Button:
				$('div.header a.imagebutton.info.servicecenter').on('click', function() {
					subapp.overlay['/servicecenter/info'].setVisible(true);    			
				});
				
				//mail button
				$('a[data-mailadr]').on('click', function() {
					if(window.PluginNativeCode != undefined && window.PluginNativeCode.sendFeedbackMail != undefined 
							&& typeof window.PluginNativeCode.sendFeedbackMail === 'function') {
	    				window.PluginNativeCode.sendFeedbackMail($(this).data('mailadr'));
	    			}
					return false;
				});
				//dial intent
				$('a[data-telnr]').on('click', function() {
					if(window.PluginNativeCode != undefined && window.PluginNativeCode.openDialIntent != undefined 
							&& typeof window.PluginNativeCode.openDialIntent === 'function') {
	    				window.PluginNativeCode.openDialIntent($(this).data('telnr'));
					}
					return false;
				});			
				
			};
			
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('div.header a.imagebutton.info.servicecenter').unbind('click');
				$('a[data-mailadr]').unbind('click');
				$('a[data-telnr]').unbind('click');
			};

		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.servicecenter.controller.overlay.Info',
	{},
	{
		/**
		 * init 
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/servicecenter/info', 
				'app/ServiceCenter/view/overlay/Info.ejs'
			);
			this.data = {};

			var that = this;
			
			/**
			 * onLoad
			 */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };
            /**
             * onShow
             */
            that.onShow = function() {
				var that = this;

                $('div.footer.overlay > ul.buttonlistSingle > li.button.servicecenter.ok').on('click', function() {
                    that.setVisible(false);
                });

                that.refreshOverlay();
            };
            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.News.prototype.addController = function(me, application) {

	this.application.controller.add('/benachrichtigungen', 'app/News/view/index.ejs', {
		/** 
		 * onLoad
		 */
    	onLoad: function() {
    		var d = $.Deferred();
    		var controller = this;
            var DEVICE_ID = 'DEVICE_ID';
    		d.controller = this;
    		
    		function onReady() {
    			me.application.loadPage(controller.path, { data: { language: application.config.language, i18n: application.config.i18n } }, function() {   
    				d.resolve();
    			});
    		};
    		
    		// load data
    		
    		onReady();
    		
    		return d.promise();  
    		          
    	},
    	/**
    	 * onShow
    	 */
    	onShow: function() {
    		
    		var DEVICE_ID = application.getDeviceId();
    		
    		var that = this.controller;
    		var controller = this.controller;
    		var that = this.controller;
    		
        	function showNoEntriesFound(){
        		$('ul.listview.loading').hide();
    			if(isOffline()) {
    				$('ul.listview.no_internet_connection').show();
    				$('ul.listview.noentries').hide();
    				$('ul.listview.noentries.button').show();
    			} else {
    				$('ul.listview.no_internet_connection').hide();
    				$('ul.listview.noentries').show();
    			}
        	}
    		var url = config.serverdata[act_system].account.url + config.serverdata[act_system].account.news + DEVICE_ID;
    		!release_flag && console.debug('NewsController: load Data - URL: '+url);
    		function open() {
    			$.ajax({
    				type: 'POST',
    				url: url,
    				dataType: 'json',
    				timeout: 15000,
    				beforeSend: function(xhr) {
    					xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    				},
    				data: null,
    				success: function(data) {
    					// finished loading data (=news)
    					if(data == null || data.length == 0){
    						showNoEntriesFound();
    						return false;
    					}
    					setTimeout(function(){
    		    			$('ul.loading').hide();
    		    			
    		    			view = 'app/News/view/templates/newsList.ejs';
    		    			
    		    			for(var i in data) {
    		    				if(data[i].link != undefined && data[i].link.length > 0) {
    		    					var theURL = data[i].link;
    		    					if(!(/^http:\/\//.test(theURL))) {				// checking if URL has http:// 
    		    						data[i].link =  'http://' + theURL;		// setting http:// at front of URL-String
    		    					}
    		    				}
    		    			}
    		    			
		    				
		    				$('ul.listview.items').html(new EJS({url: view}).render({ data: data }));
    		    			
		    				
		    				// workaround for empty link property in data object
		    				for(var i in data) {
		    					var theIndex = parseInt(i);
		    					if(data[i].link == undefined || data[i].link == 'undefined' || data[i].link.length == 0) {
		    						$('li.newsitem:eq(' + theIndex + ')').addClass('newsWithEmptyLink');
		    						$('li.newsitem:eq(' + theIndex + ')').removeClass('link');
		    					}
		    				}
	    			        if(application.getNetworkState() != CONNECTION_NONE) {  
								var konto = new at.asfinag.unterwegs.Konto(application);
								konto.getNewsreadIndikator(function(anzahl) {
								 
									for(var i = 0; i < anzahl; i++) {
										var freshNewsColor = '#f5bd50';
										
										var newItemIndicatorLabel = $('ul.listview.news.items li:eq(' + i + ') div div.news_date_div div.news_date_div_inner_wrapper span:eq(2)');
										newItemIndicatorLabel.show();
										newItemIndicatorLabel.css('color', freshNewsColor);
										
										var newsHeader = $('ul.listview.items li:eq(' + i + ') div h2.news_header');
										newsHeader.css('color', freshNewsColor);
										
										var dateBackgroundDiv = $('ul.listview.items li:eq(' + i + ') div div.news_date_div_inner_wrapper');
										dateBackgroundDiv.css('background', freshNewsColor);
									}
									konto.updateNewsreadIndikator(function() {}, function() {});
								 }, function() {}
								);
	    			        }
	    			        
    		    			application.refreshPage();
    		    		},1000);
    			        application.refreshPage();
    					
    				},
    				error : function(XMLHttpRequest, textStatus, errorThrown) {
                        !release_flag && console.error("NewsController: open -  ErrorThrown: "+errorThrown + " TextStatus: "+textStatus+" XMLHttpRequest: "+$.toJSON(XMLHttpRequest));
                                       
    					showNoEntriesFound();
    					application.refreshPage();
    				}
    			});
    		};

    		if(isOffline()) {
				$('ul.listview.no_internet_connection').show();
				$('ul.listview.noentries.button').show();
				$('ul.listview.loading').hide();
    		} else {
    			open();
    			application.refreshPage();
    		}
    		
    		// RELOAD BUTTON:
    		$('ul.listview.noentries.button').on('click', function() {
    			$('ul.listview.no_internet_connection').hide();
    			$('ul.listview.noentries').hide();
    			$('ul.listview.noentries.button').hide();
    			$('ul.listview.loading').show();
    			
    			// clear list:
    			$('ul.listview.items').empty();
    			
    			open();
    			
    			application.refreshPage();
    		});
    		
    	},
    	/**
    	 * onDestroy
    	 */
    	onDestroy: function() {
    		$('ul.listview.noentries.button').unbind('click');
    	}
    	
    });
}


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.News', {}, {
    /**
     * init - initialization of News-Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
    init: function(id, title, path) {
        this._super(id, title, path);    
        this.me = this;
        this.application = undefined;
    },
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        var that = this;
        this.addController(this, application);
        this.modes = [];

        //this.updateIcon();
    },
    /**
     * updateIcon - updates News indicator icon on menu-page
     */
    updateIcon: function() {
        var that = this;
        if(application.getNetworkState() != CONNECTION_NONE) {            
            var konto = new at.asfinag.unterwegs.Konto(application);
            $('.homeCards > .cardview a.App_News').attr('data-count',0); //reset data-count
            konto.getNewsreadIndikator(function(anzahl) {
                                            setTimeout(function() {
                                            	$('.homeCards > .cardview a.App_News').attr('data-count',anzahl);
                                            	/* @deprecated -  delete if cardview homescreen is used*/
                                                if($('ul.homeList > li a.App_News').length == 0) {
                                                	that.icon = 'count_' + anzahl;
                                                } else {
                                                    that.icon = 'count_' + anzahl;
                                                    $('ul.homeList > li a.App_News').attr('class', 'App_News count_' + anzahl);
                                                }
                                                /* end deprecated */
                                            }, 1000);
                                        }, function() {debug_flag && console.info('News.class.js: getNewsreadIndicator - error newsindicator');}
            );
        }
    },
    /**
     * open - opens news page
     */
    open: function() {
    	if(this.application) {
    		this.application.mobileTouch.openPage('app/News/view/index.ejs', { transition: 'slide-left' });
    	}
    }

});

config.subapps.news = new at.asfinag.unterwegs.News('News', 'News', '/benachrichtigungen');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Melden', {}, {
    /**
     * init - initialization of Melden-Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.controller.add('/melden', '', {
        	onLoad: function() {
        		var locale = application.config.language;
        		if(window.PluginNativeCode != undefined) {
        			application.loadApp('/melden',
    	        			function() {
    	        				window.PluginNativeCode.openActivity('melden', locale);
    	        			}
    	        	);
        			window.location = '#/';
        		} else {
        			 if(verkehrsinfos != undefined && typeof(verkehrsinfos.startTraffic) == 'function') {
                     	verkehrsinfos.startTrafficReporter();
                     	window.location = '#/';
                     }
        		} 
        	}
        });
    }
});

config.subapps.melden = new at.asfinag.unterwegs.Melden('Melden', 'Melden', '/melden');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Rasten', {}, {
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {String} title
	 * @param {String} path
	 */
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        
        this.updateOnStartup = true;
        this.modes = [];
        
        this.rastenList = {};
        
        this.webcamViewer = {};
        
        //for description check SubApp.class.js
        /*this.settingsvalues = [
        		{
        			info: "show only trucks with dynamic truck parking information",
        			type: SETTINGS_TYPE_CHECKBOX,
        			text: "rasten.settings_dynamic_lkw.title",		//getPropertyValue(application.config.i18n["de-AT"], "rasten.goTo")
        			icon: "icon-app-rasten",
        			description: "rasten.settings_dynamic_lkw.description",
        			fieldlist: {},
        			db_key: "ra_dynlkw",
        			def_value: CONST_DEACTIVATE,
        			testing: false
        		}
        	 ];*/
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.RastenDAO(application);
        this.stellplatzInfos = new at.asfinag.unterwegs.persistence.StellplatzInfosDAO(application);
        
        var me = this;
        
        this.addOverlays([
                          new at.asfinag.unterwegs.rasten.controller.overlay.AddFavorites(this, '/rasten/strasse/viewer')
                      ]);

        // Adding Controller (kind of ViewController)
        this.application.addController([
            new at.asfinag.unterwegs.rasten.controller.Index(this),
            
            new at.asfinag.unterwegs.rasten.controller.Strasse(this, '/rasten/strasse'),
            new at.asfinag.unterwegs.rasten.controller.RastenViewer(this, '/rasten/strasse'),
            new at.asfinag.unterwegs.rasten.controller.RastenWebcamViewer(this, '/rasten/strasse/viewer', false),
            
            
            new at.asfinag.unterwegs.rasten.controller.Bundesland(this, '/rasten/bundesland'),
            new at.asfinag.unterwegs.rasten.controller.RastenViewer(this, '/rasten/bundesland'),
            new at.asfinag.unterwegs.rasten.controller.RastenWebcamViewer(this, '/rasten/bundesland/viewer', false),
            
            
            new at.asfinag.unterwegs.rasten.controller.GeoLocation(this, '/rasten/geolocation'),
            new at.asfinag.unterwegs.rasten.controller.RastenViewer(this, '/rasten/geolocation'),
            new at.asfinag.unterwegs.rasten.controller.RastenWebcamViewer(this, '/rasten/geolocation/viewer', false),
            
            
            new at.asfinag.unterwegs.rasten.controller.GeoLocation(this)
        ]);
        
    }
});

config.subapps.rasten = new at.asfinag.unterwegs.Rasten('Rasten', 'Rasten', '/rasten');


$.Class('at.asfinag.unterwegs.RastenList',
	/* @static */
	{},
	{
		/* @prototype */
		init: function() {
			
			var that = this;
			var _list;
			var _current;
			
		
			that.setList = function(list) {
				_list = list;
			};

			that.getList = function() {
				return _list;
			};
			
			
			that.setCurrent = function(current) {
				_current = current;
			};

			that.getCurrent = function() {
				return _current;
			};
			
		}
	}
);

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.RastenDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
		
		this.fields = '';
	},
	/**
	 * update - update the current data
	 * 
	 * @param {Object} callback
	 */
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var finishDate;
    	//LOAD TIMESTAMP from Server
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.rasten_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	!release_flag && console.debug('RastenDAO: load Timestamp - URL: '+urlTimestamp);
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			timeout: 20000,
			dataType: 'json',
			success: function(data) {
				if(data == null){
					loadData();
				} else {
					datastore_last_changed = data.aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
			        var year = dateArray[0].split('-');
			        var time = dateArray[1].split(':');
	
			        finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
			        db.transaction(checkTimestamp, function(e) { console.error('RastenDAO: Transaction Error: ' + e.message); }, function(tx) { debug_flag && console.debug('RastenDAO: load timestamp - transaction1 done...'); });				
				}
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				loadData();
			}
    	});
    	
    	/**
    	 * loadData - loads data from server and inserts result into local database
    	 */
    	function loadData() {
    		
    		//use config.language because the config.language is up to date --> language is not available
    		language = config.language;
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[language].rasten_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		!release_flag && console.debug('RastenDAO: load Data - URL: '+url);
    		$.ajax({
    			url: url,
    			cache: false,
    			dataType: 'json',
    			timeout: 25000,
    			success: function(data) {
    				if(data == null || data.length == 0){
    					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    					return false;
    				}
    				if (finishDate != undefined) {
    					data.timestamp = finishDate.getTime();
					} else {
						data.timestamp = new Date();
					}
    				
    				/**
    				 * insertData
    				 * 
    				 * following structure makes sure that the success CB will only be fired once.
    				 * if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
    				 * which you will notice if you add a console.log before data_status_ready
    				 * reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
    				 */
    				function insertData(tx) {
    					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['rasten%'], function (tx, res) {
    						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['rasten_' + language, data.timestamp], function(tx, result) {
    							tx.executeSql('DELETE FROM rasten_de_at', [], function (tx, res) {
    								tx.executeSql('DELETE FROM rasten_en_us', [], function (tx, res) {
    									var sqlInsertData = 'INSERT OR IGNORE INTO ' + getTablenameForCurrentLanguage('rasten') + ' (id, language, autobahn, titel, info, km, richtung, type, name, bundesland, bldshort, anzPkw, anzLkw, webcamurl1, webcamurl2, webcamurl3, webcamurl4, webcamurl5, services, images, x, y, richtungstxt, road_id, on1_rampe_beginn, on2_rampe_beginn) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
    				    	    		for(var i in data.items) {    
    				    	    			var r = data.items[i];
    				    	    			if(r.services.tankstelle != undefined && r.services.tankstelle.length >= 2 && r.services.tankstelle[1] != ""){
    				    	    				r.services.tankstelle[4] = parseOpeningHours(r.services.tankstelle[1]);
    				    	    			}
    				    	    			if(r.services.fastfood != undefined && r.services.fastfood.length >= 2 && r.services.fastfood[1] != ""){
    				    	    				r.services.fastfood[4] = parseOpeningHours(r.services.fastfood[1]);
    				    	    			}
    				    	    			if(r.services.hotel != undefined && r.services.hotel.length >= 2 && r.services.hotel[1] != ""){
    				    	    				r.services.hotel[4] = parseOpeningHours(r.services.hotel[1]);
    				    	    			}
    				    	    			if(r.services.restaurant != undefined && r.services.restaurant.length >= 3 && r.services.restaurant[1] != ""){
    				    	    				r.services.restaurant[4] = parseOpeningHours(r.services.restaurant[1]);
    				    	    			}
    				    	    			var services = JSON.stringify(r.services);
    				    	    			var images = JSON.stringify(r.images);
    				    	    			tx.executeSql(sqlInsertData, [r.id, language, r.autobahn, r.titel, r.info, r.km, r.richtung, r.type, r.name, r.bundesland, r.bldshort, r.anzPkw, r.anzLkw, r.webcamurl1, r.webcamurl2, r.webcamurl3, r.webcamurl4, r.webcamurl5, services, images, r.x, r.y, r.richtungstxt, r.ROAD_ID, r.on1RampeBeginn, r.on2RampeBeginn],
    				    	    					(function(i) {
    				    	    					})(i));
    				    	    		}
    								});
    							});
    						});
    					});
    				}
    				/**
    				 * errorCB - error callback of transaction
    				 * 
    				 * sets actual status to @DATA_STATUS_ERROR_WHILE_LOADING
    				 * 
    				 * @param error 
    				 */
    				function errorCB (error) {
    					console.error('RastenDAO: loadData - Transaction Error: ' + error.message);
						that.status = DATA_STATUS_ERROR_WHILE_LOADING;
					}
    				/**
    				 * successCB - success callback of transaction
    				 * 
    				 * sets actual status to @DATA_STATUS_READY
    				 * 
    				 * @param error 
    				 */					
					function successCB() {
						setTimeout(function () {
							that.status = DATA_STATUS_READY;							
						}, 250);
					}
					
    				db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
    			},
    			error: function(XMLHttpRequest, textStatus, errorThrown) {
    				that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    			}
    		});
    	}
    	/**
    	 * checkTimestamp - checks the local stored timestamp
    	 * 
    	 * if data is older than current timestamp - the function @loadData is called
    	 * 
    	 * @param {Transaction} tx actual transaction
    	 */
    	function checkTimestamp(tx) {
    		language = config.language; //update necessary because of system language changes
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		tx.executeSql(sql, ['rasten_' + language], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == finishDate.getTime()) {
    				// rasten is up to date...
    				that.status = DATA_STATUS_READY;
    				if(callback != undefined && typeof(callback) == 'function') {
    					callback();
    				}
    			} else {
    				loadData();
    			}
    			return false;
    		});
    	}
    },
    
    /**
     * getAllStrasse - loads all streets and additionally the number of resting places for each street
     * 
     * @param {Object} parameters
     * @param {Boolean} with_stellplatzinfo true ... only returns resting places with dynamic parking info
     * @param {function} callback
     */
    getAllStrasse: function(parameters, with_stellplatzinfo, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		if(with_stellplatzinfo){
    			var sql = 'SELECT distinct autobahn, info, titel, count(titel) as "num" FROM stellplaetzeinfo st,' + getTablenameForCurrentLanguage('rasten') + ' r WHERE st.id = r.id AND language LIKE ? GROUP BY autobahn ORDER BY titel';	
    		} else {
    			var sql = 'SELECT distinct autobahn, info, titel, count(titel) as "num" FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ? GROUP BY autobahn ORDER BY titel';
    		}
	    	
			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push({ autobahn: result.rows.item(i).autobahn, info: result.rows.item(i).info, num: result.rows.item(i).num  });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    /**
     * getAllBundesland - loads all provinces and additionally the number of resting places for each province
     * 
     * @param {Object} parameters
     * @param {Boolean} with_stellplatzinfo true ... only returns resting places with dynamic parking info
     * @param {function} callback
     */
    getAllBundesland: function(parameters, with_stellplatzinfo, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		if(with_stellplatzinfo){
    			var sql = 'SELECT distinct(bundesland), count(bundesland) as "num" FROM stellplaetzeinfo st,' + getTablenameForCurrentLanguage('rasten') + ' r WHERE st.id = r.id AND language LIKE ? GROUP BY bundesland ORDER BY bundesland;';
    		} else {
    			var sql = 'SELECT distinct(bundesland), count(bundesland) as "num" FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ? GROUP BY bundesland ORDER BY bundesland;';
    		}
			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push({ titel: result.rows.item(i).bundesland, num: result.rows.item(i).num });
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    /**
     * getAllByStrasse - loads resting places for a special street
     * 
     * @param {Object} parameters - street is stored in parameters.strasse
     * @param {function} callback
     */
    getAllByStrasse: function(parameters, callback) {
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ? AND autobahn LIKE ? ORDER BY titel ASC, km ASC';
			
			tx.executeSql(sql, [config.language, parameters.strasse], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					
					that.getStellplatzInfos(function(stellplatzinfoItems) {
		    			
						for(var i = 0; i < result.rows.length; i++) {
							var rasten = $.extend({}, result.rows.item(i));
							rasten.services = $.parseJSON(rasten.services);
							rasten.images = [] || $.parseJSON(rasten.images);
							
							
							// checking if we have any stellplatz-info for this item:
							if (stellplatzinfoItems != undefined && stellplatzinfoItems.rows.length > 0) {
								for (var j = 0; j < stellplatzinfoItems.rows.length; j++) {
									if (rasten.id == stellplatzinfoItems.rows.item(j).id) {
										rasten.truckstatus = stellplatzinfoItems.rows.item(j).truckstatus;
									}
								}
							}
							data.push(rasten);
						}
						callback(data);
						
		    		});
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    
    /**
     * getAllByBundesland - loads resting places for a special province
     * 
     * @param {Object} parameters - province is stored in parameters.bundesland
     * @param {function} callback 
     */
    getAllByBundesland: function(parameters, callback) {
    	
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ? AND bundesland LIKE ? ORDER BY titel ASC, km ASC';
	    	
			tx.executeSql(sql, [config.language, parameters.bundesland], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					
					that.getStellplatzInfos(function(stellplatzinfoItems) {
						for(var i = 0; i < result.rows.length; i++) {
							var rasten = $.extend({}, result.rows.item(i));
							rasten.services = $.parseJSON(rasten.services);						
							rasten.images = [] || $.parseJSON(rasten.images);
							
							// checking if we have any stellplatz-info for this item:
							if (stellplatzinfoItems != undefined && stellplatzinfoItems.rows.length > 0) {
								for (var j = 0; j < stellplatzinfoItems.rows.length; j++) {
									if (rasten.id == stellplatzinfoItems.rows.item(j).id) {
										rasten.truckstatus = stellplatzinfoItems.rows.item(j).truckstatus;
									}
								}
							}
							
							data.push(rasten);
						}
						callback(data);
					});
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    
    /**
     * getById
     * 
     * @param {Object} parameters 
     * @param {function} callback 
     */
    getById: function(parameters, callback) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		var whereListtype = 'AND ' + (parameters.listtype == 'autobahn' ? ('autobahn LIKE ?') : ('bundesland LIKE ?'));
    		
	    	var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ? AND type LIKE ? ' + whereListtype + ' ORDER BY titel ASC, km ASC';
	    	
	    	
	    	var filterType = '%';
	    	if (parameters.filter == 'rastplaetze') {
	    		filterType = 'Rastplatz';
	    	} else if (parameters.filter == 'raststationen') {
	    		filterType = 'Raststation';
	    	} else if (parameters.filter == 'parkplaetze') {
	    		filterType = 'Parkplatz';
	    	}
	    	
			tx.executeSql(sql, [that.application.config.language, filterType, (parameters.listtype == 'autobahn' ? parameters.autobahn : parameters.bundesland)], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						
						var currentParsedID = result.rows.item(i).id;
						var currentKM = result.rows.item(i).km;
						
						
						var kmAreEqual = true;	// flag to make sure we found the right result-item (see explanation below about the NOT-unique id)
						
						
						// **************************************
						// EXPLANATION NOT-unique id
						//
						// since id is not a unique identifier, we also have to use the km to make sure, that we get a unique result-item to compare.
						// this is only important for bundesland and not for strasse, so the km parameter is only used for bundeslaender
						//
						// ATTENTION: the km parameter is only useful for bundesland. in listtype=autobahn the paraemters.km must not be used, otherwise results will be wrong, so we check here for the listtype
						if (parameters.km != undefined && parameters.listtype == 'bundesland') {
							
							if (parameters.km != currentKM) {
								kmAreEqual = false; // wrong item found, it has the same id, but since the id is not unique we also checked the km and found out, that it is not equal, so we got the wrong result-item 
							}
						}

						if (currentParsedID == parameters.id && kmAreEqual) {
							
							var rasten = $.extend({}, result.rows.item(i));
							rasten.services = $.parseJSON(rasten.services);						
							rasten.images = $.parseJSON(rasten.images);
							data.push(rasten);
							
							if (i > 0) {
								var previousIndex = parseInt(i) - 1;
								data[0].previous = result.rows.item(previousIndex);		// setting previous entry for current item
							}
							
							if (i < result.rows.length-1) {
								var nextIndex = parseInt(i) + 1;
								data[0].next = result.rows.item(nextIndex);				// setting next entry for current item
							}
							
							that.getStellplatzInfoById({ id: parameters.id }, function(items) {
				    			
				    			if (items != undefined && items.truckstatus != undefined) {
				    				data[0].truckstatus = items.truckstatus;
				    			}
				    			
				    			callback(data);
				    		});
						}						
					}
					
					return false;
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    
    /**
     * getAllByGeoLocation - loads resting places in a radius (parameters.radius) around the current geolocation
     * 
     * @param {Object} parameters contains latitude parameters.lat and longitude parameters.lon and search radius parameters.radius
     * @param {Boolean} with_stellplatzinfo true ... only returns resting places with dynamic parking info
     * @param {function} callback
     */
    getAllByGeoLocation: function(parameters, with_stellplatzinfo, callback) {
    	var that = this;
    	var db = that.application.config.db.db;
    	var language = that.application.config.language;
    	
    	var radius = parameters.radius;
    	var lon = parameters.lon;
    	var lat = parameters.lat;
    	
    	
    	function compare(a,b){
    		return a-b;
    	}
    	
    	
    	db.transaction(function(tx) {
    		if(with_stellplatzinfo){
    			var sql = 'SELECT * FROM stellplaetzeinfo st, ' + getTablenameForCurrentLanguage('rasten') + ' r WHERE st.id = r.id AND language LIKE ?';	
    		} else {
    			var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('rasten') + ' WHERE language LIKE ?';
    		}
    		tx.executeSql(sql, [config.language], function(tx, result) {
    			var data = [];
    			var RastenTmp = {};
    			var keys;
    			var dataStrassen = [];
    			
    			if(result.rows.length > 0) {
    				for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
    				
    				for(var i = 0; i < data.length; i++) {
    					var distance =
    						(((Math.acos(Math.sin((lat * Math.PI / 180)) * Math.sin((data[i].y * Math.PI / 180))
    						+ Math.cos((lat * Math.PI / 180)) * Math.cos((data[i].y * Math.PI / 180))
    						* Math.cos((lon - data[i].x) * Math.PI / 180))) * 180 / Math.PI) 
    						* 60 * 1.1515 * 1.609344);

    					// get all dataStrassen within distance
    					if(distance <= radius) {
    						if(RastenTmp[distance] == undefined) {
    							RastenTmp[distance] = [];    							
    						}
    						var rasten = $.extend({}, data[i]);
							rasten.services = $.parseJSON(rasten.services);
							rasten.distance = distance;
    						RastenTmp[distance].push(rasten);
    					}
    				}
    				
    				keys = Object.keys(RastenTmp);
    				var arry = [];
    				
    				for(var i in keys) {
    					arry.push(parseFloat(keys[i]));
    				}
    				
    				keys = arry.sort(compare);
    				
    				
    				var prev = undefined; // previous item
    				var next = undefined; // next item
    				for(var i in keys) {
    					i = parseInt(i);
    					for(var j in RastenTmp[keys[i]]) {
    						j = parseInt(j);
    						RastenTmp[keys[i]][j].previous = prev; // set previous item
    						dataStrassen.push(RastenTmp[keys[i]][j]);

    						prev = RastenTmp[keys[i]][j]; // set this item as previous for the following item

    						if(RastenTmp[keys[i]][j+1] != undefined) {
    							RastenTmp[keys[i]][j].next = RastenTmp[keys[i]][j+1];
    						} else if(RastenTmp[keys[i+1]] != undefined && RastenTmp[keys[i+1]][0] != undefined) {
								RastenTmp[keys[i]][j].next = RastenTmp[keys[i+1]][0];
    						} else {
    							RastenTmp[keys[i]][j].next = undefined;
    						}
    					}
    				}
					
					that.getStellplatzInfos(function(stellplatzinfoItems) {
		    			
						for(var i = 0; i < dataStrassen.length; i++) {
							
							// checking if we have any stellplatz-info for this item:
							if (stellplatzinfoItems != undefined && stellplatzinfoItems.rows.length > 0) {
								for (var j = 0; j < stellplatzinfoItems.rows.length; j++) {
									if (dataStrassen[i].id == stellplatzinfoItems.rows.item(j).id) {
										dataStrassen[i].truckstatus = stellplatzinfoItems.rows.item(j).truckstatus;
									}
								}
							}
						}
						callback(dataStrassen);
						
		    		});
    				
    			}
    			callback([]);
    			return false;
    		});
    	});
    },
 
    /**
     * getStellplatzInfos - loads information about truck parking status
     * 
     * @param {Object} callback
     */
    getStellplatzInfos: function(callback) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		
	    	var sql = 'SELECT * FROM stellplaetzeinfo';
	    	
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result);
					return false;
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    
    /**
     * getStellplatzInfoById - getting a certain id from stellplaetzeinfo table
     * 
     * @param {Object} parameters contains id of a resting place (parameters.id)
     * @param {function} callback
     */
    getStellplatzInfoById: function(parameters, callback) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		
	    	var sql = 'SELECT * FROM stellplaetzeinfo WHERE id LIKE ?';

	    	
			tx.executeSql(sql, [parameters.id], function(tx, result) {
				if(result.rows.length > 0) {
					var data = result.rows.item(0);
					callback(data);
					return false;
				} else {
					callback([]);
				}
				return false;
			});
    	});	   
    },
    /**
     * isWebcamForRestingPlaceAvail - checks if the given Webcam is available in the webcams DB
     * 
     * @param {Object} parameters contains id of a resting place (parameters.id)
     * @param {function} callback
     */
    isWebcamForRestingPlaceAvail: function(camname, callback) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		
	    	var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('webcams') + ' WHERE name LIKE ?';

			tx.executeSql(sql, [camname], function(tx, result) {
				if(result.rows.length > 0) {
					callback(true);
					return false;
				} else {
					callback(false);
				}
				return false;
			});
    	});	   
    },
    
    /**
     * KOMPAGNON
     *	Direction: Richtungsfahrbahn (1,2)
     *  roadID: Straße ( Westautobahn, ...)
     *  kmFrom: in Kilometer, Aktueller Standort
     * 	kmTo: in Kilometer, bis zu welchem Kilometer man sehen möchte
     * 	show: 	0 : gar nichts
     * 			1: alle
     * 			2: nur Raststation und Rastplätze, kein Parkplätze
     * 			3: nur mit Tankstellen
     */
    getRastenFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show == 0){
    		callback([]);
    	}else{
	    	var db = this.application.config.db.db;
	    	var sql;
	    	var showCheck = '';
        	var kmCheck = (currentDirection==1) ? 'rasten_km_rampe >= ? and rasten_km_rampe <= ?' : 'rasten_km_rampe <= ? and rasten_km_rampe >= ?';
        	var rapmeValue = (currentDirection==1) ? 'on1_rampe_beginn' : 'on2_rampe_beginn';
	    	
        	if(show == 2){
	    		showCheck = ' AND (type = \'Rastplatz\' OR type = \'Raststation\') ';
	    	} else if(show == 3){
	    		showCheck = ' AND (services like \'%tankstelle%\') ';
	    	}
        	
	    	sql = 'SELECT * ' +
		  		  'FROM ( ' +
		  		  '		SELECT 	*, ' +
		  		  '				CASE WHEN ' + rapmeValue + ' = 0 THEN km ELSE ' + rapmeValue + ' END AS rasten_km_rampe ' +
		  		  '		FROM '+ getTablenameForCurrentLanguage('rasten') +' ' +
		  		  '		WHERE road_id = ? AND (richtung = ' + currentDirection + ' OR richtung = 0) ' + showCheck + ' ) ' + 
		  		  'WHERE ' + kmCheck + ';';
	    	
	    	db.transaction(function(tx) {
				tx.executeSql(sql, [roadId, kmFrom, kmTo], function(tx, result) {
					if(result.rows.length > 0) {
						callback(result.rows);
					} else {
						callback([]);
					}
				}, function(transaction, error) {
					console.error('error in RastenDAO:getRastenFromKmToKm: ' + error.message);
				});
	    	});	
    	}
    },
    
    /**
     * getAllRasten - get resting place data
     * 
     * @param {function} callback
     */
    getAllRasten: function(callback) {
		var db = this.application.config.db.db;
		var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('rasten');
		
		db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
		});	
	},
	
	getNextRasten: function(currentDirection, fromKm, streetname, callback){
		
		var db = null;
		var sql = null;
		var config = null;
		var language = null;
		var dbName = getTablenameForCurrentLanguage('rasten').toLowerCase();
				
		if(currentDirection != null){
			
			db = this.application.config.db.db;
    		config = this.application.config;
    		language = config.language;
    		
    		var rapmeValue = (currentDirection==1) ? 'on1_rampe_beginn' : 'on2_rampe_beginn';
    		var rampeOrder = (currentDirection==1) ? ' > ? ORDER BY rasten_km_rampe ASC' : ' < ? ORDER BY rasten_km_rampe DESC';
    		
    		sql = 'SELECT info, rasten_km_rampe as km, richtung ' +
		  		  'FROM ( SELECT *, ' +
			  		  '			 CASE WHEN ' + rapmeValue + ' = 0 THEN km ELSE ' + rapmeValue + ' END AS rasten_km_rampe ' +
			  		  '	  FROM '+ dbName +' ' +
			  		  '	  WHERE ((richtung=? OR richtung=0) AND info=?) ) ' + 
		  		  'WHERE rasten_km_rampe ' + rampeOrder;
    		
    		
			db.transaction(function(tx) {
				tx.executeSql(sql, [""+currentDirection ,streetname, parseFloat(""+fromKm)], function(tx, result) {
					if(result.rows.length > 0) {

//						console.log("DAO Result "+result.rows);
						callback(result.rows);
					} else {
						console.log("empty rastenDAO getNextRasten:");
						callback([]);
					}
				}, function(transaction, error) {
					console.error('error in RastenDAO:getNextRasten: ' + error.message);
				});
	    	});	
		}
	},
    
	
	getStellplaetzeInfo: function(successCallback, errorCallback) {

    	var that = this;
    	var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.stellplatzinfo_data+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
			
		$.ajax({
		    url: url, 
		    cache: false,
		    dataType:"json",
		    success: function(data){
		    	if(data != null && data.length > 0){
		    		!release_flag && console.log("RastenDAO.getStellplaetzeInfo: success");
		    		successCallback(data);
		    	}
		    },
		    error: function() {
		    	console.error("RastenDAO.getStellplaetzeInfo: error");
		    	errorCallback();
		    }
		});	
	}
    
});


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.StellplatzInfosDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
	},
	/**
	 * update - update the current data
	 * 
	 * @param {Object} callback
	 */	
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	var finishDate;
    	
    	//LOAD TIMESTAMP from Server
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.stellplatzinfo_timestamp + '?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	
    	!release_flag && console.debug('StellplatzInfosDAO: load Timestamp - URL: '+urlTimestamp);
    	
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
				if(data == null || data.length == 0 || data[0].aktualisierung == null || data[0].aktualisierung == ""){
					loadData();
				} else {
					datastore_last_changed = data[0].aktualisierung;
					
					var dateArray = datastore_last_changed.split(' ');
					if(dateArray.length < 2){
						loadData();
					} else {
				        var year = dateArray[0].split('-');
				        var time = dateArray[1].split(':');
		
				        finishDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
				        db.transaction(checkTimestamp, function(e) { console.error('StellplatzInfosDAO: Transaction Error: ' + e.message); }, function(tx) { debug_flag && console.debug('StellplatzInfosDAO: load timestamp - transaction1 done...'); });				
					}
				}
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				loadData();
			}
    	});
    	
    	/**
    	 * loadData - loads data from server and inserts result into local database
    	 */
    	function loadData() {
    		//LOAD DATA from Server
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.stellplatzinfo_data + '?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		!release_flag && console.debug('StellplatzInfosDAO: load Data - URL: '+url);
    		$.ajax({
    			url: url,
    			cache: false,
    			dataType: 'json',
    			timeout: 25000,
    			success: function(data) {
    				if(data == null){
    					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    					return false;
    				}
    				if (finishDate != undefined) {
    					data.timestamp = finishDate.getTime();
					} else {
						data.timestamp = new Date();
					}
    				
    				
    				db.transaction(insertData, function(e) { }, function(tx) { setTimeout(function() { that.status = DATA_STATUS_READY; }, 250); });
    				
    				function insertData(tx) {
    					
    					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['stellplaetzinfo%']);
	    				tx.executeSql('DELETE FROM stellplaetzeinfo', []);
	    				
	    				
	    				var sqlInsertData = 'INSERT OR IGNORE INTO stellplaetzeinfo (id, truckstatus) VALUES(?, ?)';
	    	    		
	    	    		for(var i in data) {    
	    	    			var r = data[i];
	    	    			var id = r.ID;
	    	    			var truckstatus = r.TRUCK_RESTAREA_STATUS;
	    	    			tx.executeSql(sqlInsertData, [id, truckstatus], function(tx, result) {
	    	    				return false;
	    	    			});
	    	    		}
	    	    		
						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['stellplaetzinfo', data.timestamp], function(tx, result) {
							return false;
						});
    				}
    			},
    			error: function(XMLHttpRequest, textStatus, errorThrown) {
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    			}
    		});
    	}
    	/**
    	 * checkTimestamp - checks the local stored timestamp
    	 * 
    	 * if data is older than current timestamp - the function @loadData is called
    	 * 
    	 * @param {Transaction} tx actual transaction
    	 */
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		tx.executeSql(sql, ['stellplaetzinfo'], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == finishDate.getTime()) {
    				// up to date...
    				that.status = DATA_STATUS_READY;
    				if(callback != undefined && typeof(callback) == 'function') {
    					callback();
    				}
    			} else {
    				// re-load data because a newer timestamp was found
    				loadData();
    			}
    			return false;
    		});
    	}
    }
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.RastenViewer',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */	
		init: function(subapp, path) {
			
			this._super(
				path + '/viewer',
				'app/Rasten/view/RastenViewer.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
	    		d.controller = this;
	    		d.application = subapp;
	    		var controller = this;
	    		var rastenList = undefined;
	    		var list = undefined;
	    		var current = undefined;
	    		
	    		
	    		
	    		function onReady() {
	    			application.controller.list["/rasten/strasse"].parameters = { strasse: controller.items[0].autobahn, strassenInfo: controller.items[0].info }
	    			application.controller.list["/rasten/bundesland"].parameters = { strasse: controller.items[0].autobahn, strassenInfo: controller.items[0].info, bundesland: controller.items[0].bundesland }
	    			
	    			application.loadPage(
	    					controller.path,
	    					{ data: {
	    							items: controller.items,
								    backlink: path,
								    language: application.config.language,
								    i18n: application.config.i18n,
								    addPINButton: true,
								    controller: {
								    			path: path,
								    			listtype: controller.parameters.listtype
								    			}
	    							}
	    					},
	    				    function() { 
			    				application.refreshPage();
			    				d.resolve();
	    			});
	    		}
	    		
	    		if (that.path == '/rasten/geolocation/viewer') {
	    			rastenList = subapp.rastenList['/rasten/geolocation'];
	    			list = rastenList.getList();
	    			for(var i in list) {
	                    if(list[i].name == controller.parameters.name && list[i].km == controller.parameters.km) {
	                        current = list[i];
	                        break;
	                    }
	                }
	                
	                var rasten = $.extend({}, current);
	    			rasten.images = $.parseJSON(rasten.images);
	                
	        		controller.items = [rasten];
	        		onReady();
	    		} else {
	    			subapp.persistence.getById({ id: controller.parameters.id, type: controller.parameters.type, filter: controller.parameters.filter, listtype: controller.parameters.listtype, autobahn: controller.parameters.autobahn, bundesland: controller.parameters.bundesland, km: controller.parameters.km }, function(items) {
		    			controller.items = items;
		    			onReady();
		    		});
	    		}
	    		return d.promise();
	        },
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	var me = this;
	    		
	    		// rearrange feature-items that are shown in the list of features:
	    		setupRastenViewAndReorderListItems();
	    		
	    		/**
	    		 * loadImage
	    		 */
	    		function loadImage() {
	    			if(application.status == APP_STATUS_RUNNING) {    		    		
		    			var img = $('div.pic');
		    			var index = 0;
		    			for(var i in me.controller.items[0].images) {
		    				if('url(http://www.asfinag.at/' + me.controller.items[0].images[i] +')' == img.css('background-image')) {
		    					index++;
		    					break;
		    				}
		    				index++;
		    			}
		    			var src_url = 'http://www.asfinag.at/' + me.controller.items[0].images[index % (me.controller.items[0].images.length)];
		    			var src = 'url(' + src_url + ')';
		    			
		    			//check if file available
		    			$.ajax({
		    			    url: src_url,
		    			    type:'HEAD',
		    			    error: function(XMLHttpRequest, textStatus, errorThrown)
		    			    {
		    			        //file not exists
		    			    	img.css('background-image', 'url(css/images/rasten/rasten_default.jpg)');
			    				application.refreshPage();
		    			    },
		    			    success: function()
		    			    {
		    			        //file exists
		    			    	img.css('background-image', src);
			    				application.refreshPage();
		    			    }
		    			});
		    			
//		    			if(src != undefined && src != 'undefined') {
//		    				img.css('background-image', src);
//		    				this.application.refreshPage();
//		    			}
					}
	    		}
	    		
	    		
	    		if(me.controller.items[0] != undefined && me.controller.items[0] != 'undefined' && me.controller.items[0].images.length > 0) {
	    			
	    			loadImage();
	    			
	    			// if we have more than 1 pic available we start loading the next pic every 7 seconds
	    			if (me.controller.items[0].images.length > 1) {
	    				this.controller.refreshPicId = window.setInterval(function() { loadImage(); }, 7000);
	    			}
	    			
	    		}
	    		
	    		/**
	    		 * getUrlParametersFromURL
	    		 * This function parses the url params and returns the camname url-param:
	    		 * 
	    		 * @param {String} url
	    		 */ 
	    		function getUrlParametersFromURL(url) {
	    			
	    			var params = url.split('?')[1];
		        	if(params != undefined && params != 'undefined') {
		        		var parameters = params.split('&');
		        		
			        	for(var param in parameters) {
			        		var key = parameters[param].split('=')[0];
			        		var value = parameters[param].split('=')[1];
			        		
			        		if (key == "camname") {
			        			return value;
			        		}
			        	}
		        	}
    			}
	    		
	    		// setting up stellplatzinfo, undefined is casted to 'undefined' on some devices so we also have to check for 'undefined'
	    		if(((!me.controller.items[0].webcamurl1) || (me.controller.items[0].webcamurl1 == 'undefined')) &&
    				((!me.controller.items[0].webcamurl2) || (me.controller.items[0].webcamurl2 == 'undefined')) &&
    				((!me.controller.items[0].webcamurl3) || (me.controller.items[0].webcamurl3 == 'undefined')) &&
    				((!me.controller.items[0].webcamurl4) || (me.controller.items[0].webcamurl4 == 'undefined')) &&
    				((!me.controller.items[0].webcamurl5) || (me.controller.items[0].webcamurl5 == 'undefined')) ) {
	    			
	    			
	    			// no webcam-URLs found, so we have to remove the link:
	    			//$('li.link.anzahl_stellplaetze_lkw').removeClass('link');
	    			$('ul.listview.rasten.services').removeClass('with_border_top');
	    		} else {
                    //$('li.rasten.services.webcam').show();
	    			var url1 = me.controller.items[0].webcamurl1;
	    			var camName = getUrlParametersFromURL(url1);
	    			subapp.persistence.isWebcamForRestingPlaceAvail(camName, function(status){
	    				if(status){
	    					$('li.rasten.services.webcam').show();
	    				} else {
	    					$('li.rasten.services.webcam').hide();
	    				}
	    			});
	    			$('li.rasten.services.webcam').on('click', function() {
		            	window.location = '#' +  path + '/viewer/rastenwebcamviewer?name=' + camName + '&stationName=' + me.controller.items[0].name + '&page-transition=next';
		    		});
	    		}
	    		
	    		
	    		// setting up stellplatzinfo
	    		if(me.controller.items[0] != undefined && me.controller.items[0] != 'undefined' && me.controller.items[0].truckstatus != undefined && me.controller.items[0].truckstatus != 'undefined') {
	    			
	    			//chg_dh
	    			//$('li.link.anzahl_stellplaetze_lkw span:first').css('padding-top', '6px');
	    			
	    			var truckstatus = me.controller.items[0].truckstatus;
	    			
	    			if (truckstatus == "rot") {
						$('#stellplatzstatustext').html(application.config.i18n[application.config.language].rasten.besetzt);
						$('#stellplatzstatustext').addClass("red_text");
					} else if (truckstatus == "gruen") {
						$('#stellplatzstatustext').html(application.config.i18n[application.config.language].rasten.frei);
						$('#stellplatzstatustext').addClass("green_text");
					}

	    			$('#stellplatzinfo_label').show();
	    			$('#stellplatzinfo_label_text').show();
		    		
	    		} else {
	    			//$('li.anzahl_stellplaetze_lkw span:first').css('line-height', '51px');
	    			$('#stellplatzinfo_label_text').show();
	    		}
	    		
	    		// quo.js library for gesture events - http://quojs.tapquo.com/
	            $$('div.content').swipeLeft(function() {
	            	
	            	if ($('div a.next').length > 0) {
					   var nextItemURL = $('div a.next').attr('href');
					   if (nextItemURL != undefined && nextItemURL != 'undefined') {
						   window.location = nextItemURL + '&page-transition=next';
					   }
				   }
	            });
	            
	            
	            // quo.js library for gesture events - http://quojs.tapquo.com/
	            $$('div.content').swipeRight(function() {
	            	
	            	if ($('div a.previous').length > 0) {
					   var previousItemURL = $('div a.previous').attr('href');
					   if (previousItemURL != undefined && previousItemURL != 'undefined') {
						   window.location = previousItemURL + '&page-transition=previous';
					   }
				   }
	            });
	            
	            $('div.header a.imagebutton.pin').on('click', function() {	
	    			addShortcut(APP_KEY_RASTEN, location.hash, $(this).data('value'), $(this).data('value'));
	            });
	            
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	        	if(application.currentController.items[0] != undefined && application.currentController.items[0] != 'undefined' && application.currentController.items[0].images.length > 1) {
	    			window.clearInterval(this.refreshPicId);
	    		}
	        }
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.RastenWebcamViewer',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 * @param {Boolean} addFavoriteButton - true if FavButton should be shown, else false
		 */	
		init: function(subapp, path, addFavoriteButton) {
			
			
			this._super(
				path + '/rastenwebcamviewer',
				'app/Rasten/view/RastenWebcamViewer.ejs'
			);

			var that = this;
			var application = subapp.application;

			subapp.webcamViewer[path] = new at.asfinag.unterwegs.WebcamViewer({}, application, null);
            
            var webcamViewer = subapp.webcamViewer[path];
			
			/**
			 * onLoad
			 */
			that.onLoad = function() {
	            var d = $.Deferred();
	            var controller = this;
	            var list;
	            var current;
            	
            	/**
            	 * startLoadingPage
            	 */
            	function startLoadingPage() {
	            	webcamViewer.setCurrentWebcam(controller.parameters.name);	            
		            
		            application.loadPage(
		                that.path, { 
		                    data: { 
		                        current: current,
		                        meldungen: subapp.persistence.meldungen, 
		                        backlink: path,
		                        language: application.config.language, 
		                        i18n: application.config.i18n,
		                        addFavoriteButton: addFavoriteButton,
		                        controller: {
		                            path: path,
		                            stationName: controller.parameters.stationName
		                        }
		                    }
		                }, 
		                function() { 
		                	d.resolve();
		                }
		            );
	            }
            	
            	var webcamPersistenceInstance = application.subapps['webcams'].persistence;
            	
            	// get items
            	webcamPersistenceInstance.getWebcamByName({ name: controller.parameters.name }, function(items) {
	                list = items;
	                
	                for(var i in list) {
	 	                if(list[i].name == controller.parameters.name) {
	 	                    current = list[i];
	 	                    break;
	 	                }
	 	            }
	                
	                startLoadingPage();
	                
	            });
	            
	            return d.promise();
	        },
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	// when a list-item is clicked we start to autorefresh the webcam (the webcam picture):
	            webcamViewer.startAutoRefresh();	    
	            
	            //click event for favorites Star
	            $('a.imagebutton.favorites.rasten').on('click', function() {
	            	subapp.overlay['/rasten/strasse/viewer/favorites'].camlist = [ $(this).data('camname') ];
	            	subapp.overlay['/rasten/strasse/viewer/favorites'].setVisible(true);
	            });
	            
	            /* necessary to bind on tap event, otherwise on different devices it will get triggered twice, so the other looking direction is not shown  */
	            $('span.blickrichtung.button').on('tap', function() {
	            	if(!$('span.blickrichtung.button').hasClass('disabled')){
	            		window.location = "#"+$(this).data('contrpath')+"/rastenwebcamviewer?name="+$(this).data('name')+"&stationName="+$(this).data('stationname')+"&page-transition=enter";
	            	}
	            });            
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	        	$('a.imagebutton.favorites.rasten').unbind('click');
	        	$('span.blickrichtung.button').unbind('tap');
	            webcamViewer.stopAutoRefresh();
	        },
	        
	        /**
	         * onResize
	         */
			that.onResize = function(device_orientation) {
                if(device_orientation == 'landscape') {
                    application.showFooter(false);
                } else if(device_orientation == 'portrait') {
                    application.showFooter(true);
                }
            }
		}
	}
);


//***********************************************************************************************
//
// Parent Class (Helper Class) to help initializing some child-classes like Bundesland.class.js,
// Strasse.class.js, Favoriten.class.js, Geolocation.class.js,...
//
//
$.Class('at.asfinag.unterwegs.rasten.ParentController', {}, {
    
	/**
	 * init
	 * 
	 * @param {Object} controller
	 * @param {Object} subapp
	 */	
	init: function(controller, subapp) {
    	
    	this.controller = controller;
    	this.subapp = subapp;
    	this.items;  // TODO: items are initialized later in render function, which isn't that good and just a workaround that could be refactored ...
    	this.currentListview = undefined;	// this indicates, which list (which tab) is selected: either Alle or only Rastplätze or Raststationen
    	
    },
    
    /**
     * showLoading - shows loading area
     */
    showLoading: function () {
    	
    	var that = this;
    	
		$('ul.listview.loading').show();
		$('ul.listview.noentries').hide();
		if (that.currentListview == undefined) {
			that.currentListview = $('div.page[data-page="beide"] ul.listview.items');
		}
		that.currentListview.hide();
		$('ul.thumbview').hide();
		$('div#sticky_wrapper').hide();
	},
	/**
	 * showList
	 */
	showList: function () {
		var that = this;
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').hide();
		that.currentListview.show();
        application.refreshPage();
	},
	/**
	 * showNoEntriesFound
	 */
	showNoEntriesFound: function (path) {
		var that = this;
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').hide();
		if(path == "/rasten/geolocation"){
    		if(isOffline()){
    			$('ul.listview.noentries li.noentries.error').html(application.config.i18n[application.config.language].no_internet_connection);
    		} else {
    			$('ul.listview.noentries li.noentries.error').html(application.config.i18n[application.config.language].no_entries_found);	    			
    		}
    		$('ul.listview.noentries').show();
		}
		application.refreshPage();
	},
	/**
	 * adds the service info icons to the list
	 * e.g. gas station, restaurant, fastfood...
	 */
	addItemServiceInformation: function (item, position, page){
    	//check if services to display are available
    	if(!isStringEmpty(item.truckstatus) || !isStringEmpty(item.webcamurl1) 
    			|| !isStringEmpty(item.services.tankstelle) || !isStringEmpty(item.services.restaurant)
    			|| !isStringEmpty(item.services.fastfood) /*|| !isStringEmpty(item.services.kinderspielplatz)
    			|| !isStringEmpty(item.services.behindertengerecht) || !isStringEmpty(item.services.hotel)*/){
    		$('div.page[data-page="' + page + '"] ul.listview.items li.link:eq(' + position + ') div.stellplaetze_info').show();
    	} else {
    		$('div.page[data-page="' + page + '"] ul.listview.items li.link:eq(' + position + ') div.stellplaetze_info').hide();
    		$('div.page[data-page="' + page + '"] ul.listview.items li.link:eq(' + position + ') div.rasten_wrapper').css('padding-top','9px');
    	}
    	
    	//handling for small displays
    	//don't display all icons in one row if there is no possibility to display them
    	var num_items = $('div.page[data-page="' + page + '"] ul.listview.items li.link:eq(' + position + ') div.stellplaetze_info span.icon.visible').length;
    	
    	var width = $(window).width() - 45 - 20 - 30*num_items;
    	if(width < 0){
    		var num_del = Math.ceil( width*-1 / 30 ) - 1;
    		for(var i = 0; i < num_del; i++){
    			$('div.page[data-page="' + page + '"] ul.listview.items li.link:eq(' + position + ') div.stellplaetze_info span.icon.visible:last').addClass("hidden").removeClass("visible");
    		}
    	}
    	
	},
	/**
	 * adds a Header to the actual list
	 * 
	 * @param text the text to be displayed as header
	 * @param index position inside the list
	 * @param page the actual type of the page resting place, parking place..
	 */
	addHeaderToNearbyList: function(text, index, page){
		var currentListElement = $('div.page[data-page="' + page + '"] ul.listview.items li:eq(' + index + ')');
		currentListElement.before('<li class="header rasten"><h2>' + text + '</h2></li>');
	},
	/**
	 * adds the header information depending on the type of list (geolocation, province)
	 */
	addSectionHeaderInformation: function(itemsToRender, position, liCounter, that){	
		// In bundesland-tab we add sections in our list, segmented into different "Autobahnen"
        if (that.controller.path == "/rasten/bundesland") {

            var currentAutobahnTitle = "";
            	
        	if (position == 0) {
        		// adding the top section item into our table:
        		var currentAutobahnTitle = itemsToRender[position].info + ' - ' + itemsToRender[position].autobahn;
        		that.addHeaderToNearbyList(currentAutobahnTitle, 0, that.controller.page);
        		$('h2#sticky_headline').text(currentAutobahnTitle);
        		$('div#sticky_wrapper').show();
        	}
        	
        	if (position < (itemsToRender.length-1)) {
        		
        		currentAutobahnTitle = itemsToRender[position].titel;
        		
        		var nextIndex = parseInt(position) + 1;
        		var nextAutobahnTitle = itemsToRender[nextIndex].titel;
        		
        		if (nextAutobahnTitle.length > 0) {
        			
        			if ( currentAutobahnTitle != nextAutobahnTitle) {
        				
        				var numberOfHeaders = $('div.page[data-page="' + that.controller.page + '"] ul.listview.items li.rasten.header').length;	// the number of headers is important to add the next header to the right place
        				var theIndex = parseInt(nextIndex) + parseInt(numberOfHeaders);
        				
        				var nextAutobahnTitle = itemsToRender[nextIndex].info + ' - ' + itemsToRender[nextIndex].autobahn;
        				that.addHeaderToNearbyList(nextAutobahnTitle, theIndex, that.controller.page);
        			}
        		}
        	}
        } else if (that.controller.path == "/rasten/geolocation") { 
            	
        	// adding section headers to our nearby/geolocation list
    		var myDistance = parseFloat(itemsToRender[position].distance);
    		
        	if (position == 0) {
                withinMaxDistance = '5';
                var distance_out = '0 - 5';
           
                if (myDistance > 5) {
        			withinMaxDistance = '10';
                    distance_out = '5 - 10';
        		}
        		
        		if (myDistance > 10) {
        			withinMaxDistance = '20';
                    distance_out = '10 - 20';
        		}
        		
        		if (myDistance > 20) {
        			withinMaxDistance = '50';
                    distance_out = '20 - 50';
        		}
        		
        		if (myDistance > 50) {
        			withinMaxDistance = 'mehr als 50';
                    distance_out = '> 50';
        		}
        		
        		// adding the top section item into our table:
        		var header_out = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km';
        		that.addHeaderToNearbyList(header_out, 0, that.controller.page);
        		liCounter++;
				$('h2#sticky_headline').text(header_out);
        		$('div#sticky_wrapper').show();
        	} else {
        		
        		var nextIndex = parseInt(position) + liCounter;	// since we added new li elements the eq below is a bit tricky meaning that we have to add +1 here...
        		
        		if (myDistance > 5 && withinMaxDistance <= 5) {
        			withinMaxDistance = '10';
                    distance_out = '5 - 10';
                    that.addHeaderToNearbyList(application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km', nextIndex, that.controller.page);
        			liCounter++;
        		}
        		
        		if (myDistance > 10 && withinMaxDistance <= 10) {
        			withinMaxDistance = '20';
                    distance_out = '10 - 20';
                    that.addHeaderToNearbyList(application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km', nextIndex, that.controller.page);
        			liCounter++;
        		}
        		
        		if (myDistance > 20 && withinMaxDistance <= 20) {
        			withinMaxDistance = '50';
                    distance_out = '20 - 50';
                    that.addHeaderToNearbyList(application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km', nextIndex, that.controller.page);
        			liCounter++;
        		}
        		
        		if (myDistance > 50 && withinMaxDistance <= 50) {
        			withinMaxDistance = myDistance;
        			that.addHeaderToNearbyList(application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km', nextIndex, that.controller.page);
        			liCounter++;
        		}
        	}
        }
        return liCounter;
	},
	renderList: function (items, i18n, language, path) {
		var view = 'app/Rasten/view/templates/rastenitems.ejs';
		var that = this;
		currentListview.append(
            new EJS({
                url: view
            }).render({ 
                data: { 
                    items: items, 
                    i18n: i18n, 
                    language: language,
                    controller: {
                        path: path,
                        listtype: that.controller.parameters.listtype,
                        filter: that.controller.page
                    }
                }                                        
            })
        );
	},
	lazyLoadData : function() {
		var that = this;
		var subapp = application.subapps['rasten'];
		var controller = that.controller;
		
		function loadData (callback) {
			var subapp = application.subapps['rasten'];
			var controller = that.controller;
			
			if (controller.path == "/rasten/strasse") {
				subapp.persistence.getAllByStrasse({ strasse: controller.parameters.strasse }, function(items) {
					controller.items = items;
					if(items.length != undefined){
	                	$("span#num_rasten_in_list").html("("+items.length+")");
	                }
					callback(items);
				});
			} else if (controller.path == "/rasten/bundesland"){
				subapp.persistence.getAllByBundesland({ bundesland: controller.parameters.bundesland}, function(items) {
					controller.items = items;
					if(items.length != undefined){
	                	$("span#num_rasten_in_list").html("("+items.length+")");
	                }
					callback(items);
				});
			} else {
				subapp.persistence.getAllByGeoLocation({ lat: controller.position.coords.latitude, lon: controller.position.coords.longitude, radius: RADIUS_RASTEN_GEOLOCATION }, getSettingVal(subapp.settingsvalues, 'ra_dynlkw', true), function(items) {
					controller.items = items;
                    subapp.rastenList[controller.path].setList(items);
					if(items.length != undefined && items.length != 0){
	                	$("span#num_rasten_in_list").html("("+items.length+")");
	                }
                    callback(items);
                });
			}
			
		};
		
		function render (items) {
			var controller = that.controller;
			controller.items = items;
			
			currentListview = $('div.page[data-page="' + that.controller.page + '"] ul.listview.items');
			
			$('ul.listview.items').html('');	// cleaning up all lists that might be shown in the other tabs/views for better scrolling performance in the active tab
			
	    	that.showLoading();
	    	
	    	var filteredItems = [];		// this var is to filter items in case we only want to show the rastplaetze etc.
	    	
	    	// filtering
	    	if (that.controller.page == "rastplaetze") {
				for(var item in items) {
					if(items[item].type == 'Rastplatz') {
						filteredItems.push(items[item]);
					}
				}
			}
	    	
	    	// filtering
	    	if (that.controller.page == "raststationen") {
				for(var item in items) {
					if(items[item].type == 'Raststation') {
						filteredItems.push(items[item]);
					}
				}
			}
	    	
	    	// filtering
	    	if (that.controller.page == "parkplaetze") {
				for(var item in items) {
					if(items[item].type == 'Parkplatz') {
						filteredItems.push(items[item]);
					}
				}
			}
	    	
	    	var itemsToRender = items;
	    	
	    	// in case we are in the mode where we watch both rastplaetze and raststationen (beide)
	    	if (that.controller.page != "beide" && that.controller.page != undefined) {
	    		// if we found zero items for our special view, we have to show a no-items-found-info to the user
	    		if (filteredItems.length == undefined || filteredItems.length < 1) {
	    			itemsToRender = null;	// reset itemsToRender because we didn't find any raststationen or rastplaetze
	    			
	    			if (that.controller.page == "raststationen") {
	    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noServiceStationsInSelection + '</li>');
	    			} else if (that.controller.page == "rastplaetze") {
	    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noRestingPlacesInSelection + '</li>');
	    			} else if (that.controller.page == "parkplaetze") {
	    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noParkingPlacesInSelection + '</li>');
	    			}
	    			
	    		} else {
	    			itemsToRender = filteredItems;
	    		}
	    	}
	    	
	    	// if the config status is set --> display only items with truckstatus
	    	if(getSettingVal(subapp.settingsvalues, 'ra_dynlkw', true)){
		    	var new_list = [];
		    	for(var item in itemsToRender) {
		    		if(itemsToRender[item].truckstatus != undefined && itemsToRender[item].truckstatus != ""){
		    			new_list.push(itemsToRender[item]);
		    		}
		    	}
		    	itemsToRender = new_list;
	    	}
	    	
	    	//set changed number of items
	    	if(itemsToRender != null && itemsToRender.length != undefined){
            	$("span#num_rasten_in_list").html("("+itemsToRender.length+")");
            } else {
            	$("span#num_rasten_in_list").html("(0)");
            }
	    	
	    	if (itemsToRender != undefined && itemsToRender.length > 0) {
	    		
	    		setTimeout(function() {
	            	// rendering list-items for 'Liste' ('Liste'-tab)
	                that.renderList(
	                    itemsToRender,
	                    application.config.i18n,
	                    application.config.language,                            
	                    that.controller.path
	                );
	                
	                var liCounter = 0; 	// just a helper variable for counting the additional li elements (the section headers) we are adding to the nearby list, so that later in the code we fetch the right element by using the jquery selector eq to append the section headers at the correct index
	                
	                var withinMaxDistance = '5';
	                
	                for(var i in itemsToRender) {
	                	that.addItemServiceInformation(itemsToRender[i], i, that.controller.page);
	                	liCounter = that.addSectionHeaderInformation(itemsToRender, i, liCounter, that);
	                }
	                setTimeout(function(){
                        that.showList();
                        application.refreshPage();
                    }, 500);
                           
	            }, 500);
	    		
	    	} else {
	    		// empty list
	    		that.showNoEntriesFound(that.controller.path);
	            application.refreshPage();
	    	}
	        
	    };
	    
		controller.loadStrassenInterval = undefined;
		
		if(subapp.stellplatzInfos.status == DATA_STATUS_LOADING || subapp.persistence.status == DATA_STATUS_LOADING || application.subapps.webcams.persistence.status == DATA_STATUS_LOADING) {
			controller.loadStrassenInterval = window.setInterval(function() {
				if(subapp.stellplatzInfos.status != DATA_STATUS_LOADING && subapp.persistence.status != DATA_STATUS_LOADING && application.subapps.webcams.persistence.status != DATA_STATUS_LOADING) {
					window.clearInterval(controller.loadStrassenInterval);
					if(subapp.stellplatzInfos.status == DATA_STATUS_ERROR_WHILE_LOADING) {
						//no entries found for stellplatzinfos --> loadData
						console.log("Rasten-ParentController: Error while loading Stellplatzinfos");
						loadData(render);
					} else {
						loadData(render);
					}
				}
			}, 1000);
		} else {
			loadData(render);
		}
		
	},
	/**
	 * 
	 */
	render: function(items) {
		
		var that = this;
		that.items = items;
		
		currentListview = $('div.page[data-page="' + that.controller.page + '"] ul.listview.items');
		
		$('ul.listview.items').html('');	// cleaning up all lists that might be shown in the other tabs/views for better scrolling performance in the active tab
		
    	that.showLoading();
    	
    	
    	var filteredItems = [];		// this var is to filter items in case we only want to show the rastplaetze etc.
    	
    	// if the config status is set --> display only items with truckstatus
    	if(getSettingVal(this.subapp.settingsvalues, 'ra_dynlkw', true)){
	    	var new_list = [];
	    	for(var item in items) {
	    		if(items[item].truckstatus != undefined && items[item].truckstatus != ""){
	    			new_list.push(items[item]);
	    		}
	    	}
	    	items = new_list;
    	}
    	
    	// filtering
    	if (that.controller.page == "rastplaetze") {
			for(var item in items) {
				if(items[item].type == 'Rastplatz') {
					filteredItems.push(items[item]);
				}
			}
		}
    	
    	
    	// filtering
    	if (that.controller.page == "raststationen") {
			for(var item in items) {
				if(items[item].type == 'Raststation') {
					filteredItems.push(items[item]);
				}
			}
		}
    	
    	// filtering
    	if (that.controller.page == "parkplaetze") {
			for(var item in items) {
				if(items[item].type == 'Parkplatz') {
					filteredItems.push(items[item]);
				}
			}
		}
    	
    	//necessary if no filtering is done
    	itemsToRender = items
    	// in case we are in the mode where we watch both rastplaetze and raststationen (beide)
    	if (that.controller.page != "beide" ) {
    		
    		// if we found zero items for our special view, we have to show a no-items-found-info to the user
    		if (filteredItems.length == undefined || filteredItems.length < 1) {
    			itemsToRender = null;	// reset itemsToRender because we didn't find any raststationen or rastplaetze
    			
    			if (that.controller.page == "raststationen") {
    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noServiceStationsInSelection + '</li>');
    			} else if (that.controller.page == "rastplaetze") {
    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noRestingPlacesInSelection + '</li>');
    			} else if (that.controller.page == "parkplaetze") {
    				currentListview.append('<li style="line-height: 55px;" class="no_item">' + application.config.i18n[application.config.language].rasten.noParkingPlacesInSelection + '</li>');
    			}
    			
    		} else {
    			itemsToRender = filteredItems;
    		}
    	}
    	
    	//set changed number of items
    	if(itemsToRender != null && itemsToRender.length != undefined){
        	$("span#num_rasten_in_list").html("("+itemsToRender.length+")");
        } else {
        	$("span#num_rasten_in_list").html("(0)");
        }
    	
    	
    	if (itemsToRender != undefined && itemsToRender.length > 0) {
    		
    		setTimeout(function() {
            	// rendering list-items for 'Liste' ('Liste'-tab)
                that.renderList(
                    itemsToRender,
                    application.config.i18n,
                    application.config.language,                            
                    that.controller.path
                );
                
                that.showList();

                var liCounter = 0; 	// just a helper variable for counting the additional li elements (the section headers) we are adding to the nearby list, so that later in the code we fetch the right element by using the jquery selector eq to append the section headers at the correct index
                
                var withinMaxDistance = '5';
                var distance_out = '0 - 5';
                
                for(var i in itemsToRender) {
                	that.addItemServiceInformation(itemsToRender[i], i, that.controller.page);
                	liCounter = that.addSectionHeaderInformation(itemsToRender, i, liCounter, that);
                }
                
                setTimeout(function(){
                    that.showList();
                    application.refreshPage();
                }, 500);
                       
            }, 500);
    		
    	} else {
    		// empty list
    		that.showNoEntriesFound(that.controller.path);
            application.refreshPage();
    	}
        
    },
    
    /**
     * this method initializes the child-classes onShow method
     */
	initializeOnShow : function() {
		
		var that = this;
		
		function setupRastenTabbar () {
			// setting up the tabbar for Rasten in Android for small devices, because the labels are too long otherwise, so we make a <br> linebreak
			if (window.innerWidth <= 320) {
				
				if (application.config.language != "en-US") {
					$('div.footer ul.tabs li.navigation.rastplaetze div.overlay span.text').html('Rast-<br>plätze');
					$('div.footer ul.tabs li.navigation.rastplaetze div.overlay span.text').css('padding-top', '7px');
					$('div.footer ul.tabs li.navigation.raststationen div.overlay span.text').html('Rast-<br>stationen');
					$('div.footer ul.tabs li.navigation.raststationen div.overlay span.text').css('padding-top', '7px');
					$('div.footer ul.tabs li.navigation.parkplaetze div.overlay span.text').html('Park-<br>plätze');
					$('div.footer ul.tabs li.navigation.parkplaetze div.overlay span.text').css('padding-top', '7px');
				} else {
					$('div.footer ul.tabs li.navigation.rastplaetze div.overlay span.text').html('Resting<br>places');
                    $('div.footer ul.tabs li.navigation.rastplaetze div.overlay span.text').css('padding-top', '7px');
					$('div.footer ul.tabs li.navigation.raststationen div.overlay span.text').html('Service-<br>stations');
                    $('div.footer ul.tabs li.navigation.raststationen div.overlay span.text').css('padding-top', '7px');
					$('div.footer ul.tabs li.navigation.parkplaetze div.overlay span.text').html('Parking<br>places');
                    $('div.footer ul.tabs li.navigation.parkplaetze div.overlay span.text').css('padding-top', '7px');
				}
			}
		}
		
		if (that.controller.page == undefined) {
    		currentListview = $('div.page[data-page="beide"] ul.listview.items');
    	} else {
    		currentListview = $('div.page[data-page="' + that.controller.page + '"] ul.listview.items');
    	}
		
		that.showLoading();
		
		
		if(window.device != undefined && window.device.platform != undefined) {
			if(window.device.platform == 'Android') {
				setupRastenTabbar();
			}
		} else {
			setupRastenTabbar();
		}
		
		// manually triggering the selected tab, if a tab was selected before
		if(that.controller.page != undefined) {
			$('.footer ul.tabs li.navigation.' + that.controller.page+' span').trigger('click');
		} else {
			that.controller.page = 'beide';
		}
		
		/* Shortcut */
		$('div.header a.imagebutton.pin').on('click', function() {	
			addShortcut(APP_KEY_RASTEN, location.hash, $(this).data('value'), $(this).data('value'));
        });
		
		// click event for tabbar
		$('div.footer.rasten ul.tabs li.navigation').on('click', function() {
			if($(this).data('page') != undefined) {
				that.controller.page = $(this).data('page');
				that.render(that.controller.items);
			}
		});
		
	},
	
	setupListViewForGeolocation : function () {
		currentListview = $('div.page[data-page="beide"] ul.listview.items');
	}
    
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.Bundesland',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path,
				'app/Rasten/view/RastenList.ejs'
			);

			var that = this;
			var application = subapp.application;


			that.onLoad = function() {
				var d = $.Deferred();
	    		var controller = this;
	    		d.controller = controller;
	    		
	    		// LOADING MECHANISM:
	    		// 1st in onLoad we start loading the stellplatzinfos
	    		// 2nd in onShow we wait until the stellplatzinfos finished loading
	    		// and then start loading the other data that has a dependency on the stellplatzinfos
	    		subapp.stellplatzInfos.update();	// updating stellplatzinfos first
	    		
    			application.loadPage(
					controller.path, {
							 data: { 
								 language: application.config.language,
								 i18n: application.config.i18n,
								 sticky: true, 
								 header: controller.parameters.bundesland,
								 header_optional: '',
								 backtab: 'bundesland',
								 addPINButton: true,
								 controller: {
									 path: path,
						    		 listtype: controller.parameters.listtype
						    	 			 }
							 }
					},
					function() {
						d.resolve();
					}
    			);
    			
    			
	    		return d.promise();
			};
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.rasten.ParentController(controller, subapp);
				parentController.initializeOnShow();
				parentController.lazyLoadData();
			};
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('.footer ul.tabs li.navigation').unbind('click');
				window.clearInterval(this.loadStrassenInterval);
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.GeoLocation',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path,
				'app/Rasten/view/RastenListGeolocation.ejs'
			);

			var that = this;
			var application = subapp.application;
			
			
            /**
             * onLoad
             */
			that.onLoad = function() {
				var d = $.Deferred();
	            var controller = this;
	            var that = this;
                if(controller.items != undefined && controller.items.length > 0){
                    controller.items = [];
                }
	            d.controller = controller;
	            
	            
	            // LOADING MECHANISM:
	    		// 1st in onLoad we start loading the stellplatzinfos
	    		// 2nd in onShow we wait until the stellplatzinfos finished loading
	    		// and then start loading the other data that has a dependency on the stellplatzinfos
	    		//
	    		//
	    		subapp.stellplatzInfos.update();	// updating stellplatzinfos first
	    		
	            that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
				
				// creating our model (model instance) that holds the items-list
				subapp.rastenList[that.path] = new at.asfinag.unterwegs.RastenList();
				
	            
            	application.loadPage(
					controller.path, {
							 data: { 
								 language: application.config.language,
								 i18n: application.config.i18n,
								 sticky: true,
								 header: controller.parameters.strassenInfo,
								 controller: {
									 path: path,
						    		 listtype: controller.parameters.listtype
						    	 			 }
							 }
					},
					function() {
						d.resolve();
					}
    			);
	        
	            return d.promise();
			};
			
            /**
             * onShow
             */
			that.onShow = function() {
				
				var that = this;
				var controller = this.controller;
				
				function loadData(){
					controller.page = "beide";	// the parentController needs a page, even if the geolocation doesn't have pages (tabs) we have to set it here
					
					// initialize on Show through parent class:
					var parentController = new at.asfinag.unterwegs.rasten.ParentController(controller, subapp);
					parentController.showLoading();
					parentController.initializeOnShow();
					 // get items
					if(use_default_position){
	                	controller.position = default_position;
	                	parentController.setupListViewForGeolocation();
	                	application.subapps.webcams.persistence.update();	// updating webcams too because we need em for the rasten-stellplatz-webcams
		    			subapp.persistence.update();	// this is important, because if we first-time-started the app without internet connection and then turn internet connection back on, there is no data if we just tap the geolocation button and not tap the reload button, so we manually reload data here
	    				parentController.lazyLoadData();						
					} else {
			            controller.geoLocation.getCurrentPosition(
			                function(position) {
			                	
			                	controller.position = position;
			                	parentController.setupListViewForGeolocation();
			                	application.subapps.webcams.persistence.update();	// updating webcams too because we need em for the rasten-stellplatz-webcams
				    			subapp.persistence.update();	// this is important, because if we first-time-started the app without internet connection and then turn internet connection back on, there is no data if we just tap the geolocation button and not tap the reload button, so we manually reload data here
			    				parentController.lazyLoadData();
			                },
			                function() {
			                	$('ul.listview.nogeolocation').show();
			                	$('ul.listview.loading').hide();
			                },
			                {}
			            );
					}
				}
				
				loadData();
				
				$('li.button.reload').on('click', function() { 
					$('ul.listview.nogeolocation').hide();
					$('ul.listview.noentries').hide();
                    $('div.page[data-page="beide"] ul.listview.items').html('');
                    $('div.page[data-page="rastplaetze"] ul.listview.items').html('');
                    $('div.page[data-page="raststationen"] ul.listview.items').html('');
                    $('div.page[data-page="parkplaetze"] ul.listview.items').html('');
                    
					loadData();
				});
			};
			
            /**
             * onDestroy
             */
			that.onDestroy = function() {
				$('li.button.reload').unbind('click');
				$('.footer ul.tabs li.navigation.list').unbind('click');
	            $('.footer ul.tabs li.navigation.thumbs').unbind('click');
	            
	            window.clearInterval(this.loadStrassenInterval);
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.Strasse',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */	
		init: function(subapp, path) {
			this._super(
				path,
				'app/Rasten/view/RastenList.ejs'
			);
			
			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
	    		var controller = this;
	    		d.controller = controller;
	    		
	    		// LOADING MECHANISM:
	    		// 1st in onLoad we start loading the stellplatzinfos
	    		// 2nd in onShow we wait until the stellplatzinfos finished loading
	    		// and then start loading the other data that has a dependency on the stellplatzinfos
	    		//
	    		//
	    		subapp.stellplatzInfos.update();	// updating stellplatzinfos first
	    		
    			application.loadPage(
					controller.path, {
							 data: { 
								 language: application.config.language,
								 i18n: application.config.i18n,
								 sticky: false,
								 header: controller.parameters.strassenInfo,
								 header_optional: ' - ' + controller.parameters.strasse,
								 backtab: 'strasse',
								 addPINButton: true,
								 controller: {
									 path: path,
						    		 listtype: controller.parameters.listtype
						    	 			 }
							 }
					},
					function() {
						d.resolve();
					}
    			);
    			
    			
	    		return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				
				var controller = this.controller;
				
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.rasten.ParentController(controller, subapp);
				parentController.initializeOnShow();
				parentController.lazyLoadData();
			};
			
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('.footer ul.tabs li.navigation').unbind('click');
				window.clearInterval(this.loadStrassenInterval);
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.rasten.controller.Index',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/rasten',
				'app/Rasten/view/index.ejs'
			);
			var that = this;
			var application = subapp.application;

			that.onLoad = function() {
				var d = $.Deferred();
	    		var controller = this;
	    		d.controller = this;
	    		
	    		this.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);

	    		controller.loadData = function(callback) {
	    			subapp.persistence.getAllStrasse({}, getSettingVal(subapp.settingsvalues, 'ra_dynlkw', true), function(strassen) {
	    				controller.strassen = strassen;
	    				subapp.persistence.getAllBundesland({}, getSettingVal(subapp.settingsvalues, 'ra_dynlkw', true), function(bundeslaender) {
	        				controller.bundeslaender = bundeslaender;
	        				callback();
	        			});
	    			});
	    		};
	    		
	    		function onReady() {
	    			application.loadPage(controller.path, { data: { strassen: controller.strassen, bundeslaender: controller.bundeslaender, language: application.config.language, i18n: application.config.i18n } }, function() {
	    				d.resolve();
	    			});
	    		}
		
	    		this.loadData(onReady);
	    		
	    		return d.promise();
			};
			/**
			 * showLoading - shows Loading area
			 */
	    	function showLoading() {
				$('ul.strasse_loading').show();
				$('ul.bundesland_loading').show();
				$('ul.listview.strasse').hide();
    			$('ul.listview.bundesland').hide();
	    	}
	    	/**
	    	 * showList - shows list and hides loading area
	    	 */
	    	function showList() {
	    		$('ul.strasse_loading').hide();
				$('ul.bundesland_loading').hide();	    		
				$('ul.listview.strasse_noentries').hide();
				$('ul.listview.bundesland_noentries').hide();
				$('ul.listview.strasse').show();
				$('ul.listview.bundesland').show();	    	
	    	}	    	
	    	/**
	    	 * onShow
	    	 */
			that.onShow = function() {
				var controller = this.controller;
	    		var that = this.controller;

	    		if(controller.page != undefined) {
	    			$('.footer ul.tabs li.navigation.' + controller.page+' span').trigger('click');
	    		}
	    		
	    		function lazyDataLoading() {
	    			//if still loading, then check in intervals of 1 sec if the async task is still loading, else 
	    			if(subapp.persistence.status == DATA_STATUS_LOADING || application.subapps.webcams.persistence.status == DATA_STATUS_LOADING) {
	    				showLoading();
		    			controller.loadStrassenInterval = window.setInterval(function() {
		    				if(subapp.persistence.status != DATA_STATUS_LOADING && application.subapps.webcams.persistence.status != DATA_STATUS_LOADING) {
		    					window.clearInterval(controller.loadStrassenInterval);
		    					//if(subapp.persistence.status == DATA_STATUS_ERROR_WHILE_LOADING) {
		    					//	showNoEntriesFound();
		    					//} else {
		    						var ulStrasse = $('ul.listview.strasse');
		    						var ulBundesland = $('ul.listview.bundesland');
		    						ulStrasse.html('');
		    						ulBundesland.html('');
		    					
		    						controller.loadData(function() {
		    							for(var i in controller.strassen) {
		    								ulStrasse.append(
		    										'<li class="link" onclick="window.location=\'#/rasten/strasse?strasse=' + controller.strassen[i].autobahn + '&strassenInfo=' + controller.strassen[i].info + '&activeTab=list\'">' + controller.strassen[i].info + ' - ' + controller.strassen[i].autobahn + '</li>'
		    								);
		    							}
		    						
		    							for(var i in controller.bundeslaender) {
		    								ulBundesland.append(
		    										'<li class="link" onclick="window.location=\'#/rasten/bundesland?bundesland=' + controller.bundeslaender[i].titel + '\'">' + controller.bundeslaender[i].titel + '</li>'
		    								);
		    							}
		    							showList();
		    							if(controller.strassen.length == 0 || controller.bundeslaender.length == 0){
		    								showNoEntriesFound();
		    							}
			    						application.refreshPage();
		    						});
		    					//}
		    				}
	    				}, 1000);
		    		} else {
		    			showNoEntriesFound();
		    		}
	    		}
	    		
	    		/**
	    		 * showNoEntriesFound - displays result, if no entries were found, then an error message is shown
	    		 */
	    		function showNoEntriesFound() {
	    			//change Error Message
		    		if(isOffline()){
		    			$('ul.listview.strasse_noentries li.noentries.error').html(application.config.i18n[application.config.language].no_internet_connection);
		    			$('ul.listview.bundesland_noentries li.noentries.error').html(application.config.i18n[application.config.language].no_internet_connection);
		    		} else {
		    			$('ul.listview.strasse_noentries li.noentries.error').html(application.config.i18n[application.config.language].no_entries_found);
		    			$('ul.listview.bundesland_noentries li.noentries.error').html(application.config.i18n[application.config.language].no_entries_found);
		    		}
	    			if(controller.strassen.length == 0) {
	    				$('ul.strasse_loading').hide();
	    				//depending on Status, show different error messages
	    				$('ul.listview.strasse_noentries').show();
	    			}
	    			if(controller.bundeslaender.length == 0) {
	    				$('ul.bundesland_loading').hide();
	    				$('ul.listview.bundesland_noentries').show();
	    			}
	    		}
	    		
	    		lazyDataLoading();
	    		
	    		
	    		// update geoLocation button
	    		if(use_default_position){
	    			$('a.imagebutton.location.rasten').removeClass('off').addClass('on');
					$('a.imagebutton.location.rasten').removeClass('icon-line-standort');
					$('a.imagebutton.location.rasten').addClass('icon-filled-standort');
	    		} else {
		    		that.geoLocation.getCurrentPosition(
						function(position) {
							if(position != undefined) {
								$('a.imagebutton.location.rasten').removeClass('off').addClass('on');
								$('a.imagebutton.location.rasten').removeClass('icon-line-standort');
								$('a.imagebutton.location.rasten').addClass('icon-filled-standort');
							}
						},
						function() {
							$('a.imagebutton.location.rasten').removeClass('on').addClass('off');
							$('a.imagebutton.location.rasten').addClass('icon-line-standort');
							$('a.imagebutton.location.rasten').removeClass('icon-filled-standort');
						},
						{}
					);
	    		}
				
				// GEOLOCATION BUTTON
	    		// geoLocation button handling
	    		$('a.imagebutton.location.rasten').on('click', function() {
	    			
	    			if($(this).hasClass('on')) {
	    				// wenn geo location aktiviert oder verfügbar ist
	    				window.location = '#/rasten/geolocation?listtype=geolocation'; 
	    			} else if($(this).hasClass('off')) {
	    				// wenn geo location deaktiviert
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.no_geolocation,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"rasten"
	    	            		);
	    				} else {
	    					application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.no_geolocation, 'OK', "rasten", function() {});    				
	    				}
	    			} else {
	    				// wenn geo location status unbekannt
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.geolocation_tracking,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"rasten"
	    	            		);
	    				} else {
	    					application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.geolocation_tracking, 'OK', "rasten", function() {});
	    				}
	    			}
	    		});

	    		$('ul.listview li.button.reload').on('click', function() {
	    			$('ul.listview.strasse_noentries').hide();
					$('ul.listview.bundesland_noentries').hide();
	    			
					application.subapps.webcams.persistence.update();	// updating webcams too because we need em for the rasten-stellplatz-webcams
	    			subapp.persistence.update();
	    			lazyDataLoading();
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.strasse').on('click', function() {
	    			controller.page = 'strasse';
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.bundesland').on('click', function() {
	    			controller.page = 'bundesland';
	    		});
	    		
                if(getURLParameterByName('backtab') == "bundesland" || getURLParameterByName('backtab') == "strasse") {
                	$('.footer ul.tabs li.navigation.' + getURLParameterByName('backtab') +' span').trigger('click');
                }
			};
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('ul.listview li.button.reload').unbind('click');
	    		$('.footer ul.tabs li.navigation.strasse').unbind('click');
	    		$('.footer ul.tabs li.navigation.bundesland').unbind('click');
	    		window.clearInterval(this.loadStrassenInterval);
			};
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.rasten.controller.overlay.AddFavorites',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */	
		init: function(subapp, path) {
			this._super(
				path + '/favorites', 
				'app/Rasten/view/overlay/AddFavorites.ejs'
			);
			this.data = {};

            var that = this;
            
            /**
             * onLoad
             */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };
            
            /**
             * onShow
             */
            that.onShow = function() {
            	var that = this;
            	
            	var div = $('.content.overlay.favorites.add');
    			div.find('ul.listview.loading').show();
    			div.find('ul.listview.error_empty').hide();
    			div.find('ul.listview.error_not_successful').hide();
    			div.find('ul.listview.error_no_name').hide();
    			div.find('ul.listview.favnames').hide();
    			
    			/**
    			 * favnameRadioGroupInit
    			 */
    			function favnameRadioGroupInit() {
    				$('div.content.overlay ul.listview.favnames li.checkbox').unbind('click');
    				
					$('div.content.overlay ul.listview.favnames li.checkbox').on('click', function() {
						$('div.content.overlay ul.listview.favnames li.checkbox').removeClass('active');
        				$(this).addClass('active');
        			});
    			}
    			
    			var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
    			webcamsFavourites.getList(
					function(data) {
						// success
						var ul = $('div.content.overlay.favorites.add ul.listview.favnames');
						
						setTimeout(function() {
							ul.find('li.placeholder').remove();
							
							if (data.length > 0) {
								for(var i in data) {
									ul.append('<li class="checkbox" data-favname="' + data[i].favname + '"><div class="favname">' + data[i].favname + '</div><span class="checkbox"></span></li>');
								}
							}
							

                            div.find('ul.listview.favnames').show();

                            $('div.footer.overlay > ul').attr('class', 'buttonlist');
                            $('div.footer.overlay > ul > li.button.add').show();

                            div.find('ul.listview.loading').hide();
							
                            setTimeout(function() {
                                that.iScroll.refresh();
                            }, 250);

							favnameRadioGroupInit();
						}, 1000);
					},
					function() {
						debug_flag && console.debug('AddFavorites.class.js: error callback from calling getList in AddFavorites.class.js');

                        setTimeout(function() {
                            div.find('ul.listview.favnames').show();
                            div.find('ul.listview.loading').hide();

                            $('div.footer.overlay > ul').attr('class', 'buttonlist');
                            $('div.footer.overlay > ul > li.button.add').show();
                            
                            setTimeout(function() {
                                that.iScroll.refresh();
                            }, 250);

                            favnameRadioGroupInit();
                        }, 1000);
					}
    			);
        			
    			// send webcams & favoritelist to konto.asfinag.at REST service
    			$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
    				
    				var ul = $('div.content.overlay.favorites.add ul.listview.favnames');
    				
    				var list = ul.find('li.checkbox.active');
    				var favnamelist = [];
    				
    				for(var i = 0; i < list.length; i++) {
    					var favname = $(list[i]).data('favname');
    					if(favname != undefined) {
    						favnamelist.push(favname);
    					} else {
    						if($(list[i]).find('#eingabe_neu').length > 0 && $.trim($(list[i]).find('#eingabe_neu').val()).length > 0) {
    							
    							var inputFavoritesListName = $('#eingabe_neu');
    							inputFavoritesListName.val(inputFavoritesListName.val().replace(/[^A-Za-z0-9]/g, "")); // replacing special characters
    							if($.trim($(list[i]).find('#eingabe_neu').val()) != ""){
                                    favnamelist.push($.trim($(list[i]).find('#eingabe_neu').val()));
                                }
    						}
    					}
    				}
    				
    				//check if application back is necessary
    				//if favorite is added via viewer window --> no application back
    				var appl_back = true;
    				if($("div.header.webcams.viewer").length == 1 || $("div.header.rasten.viewer").length == 1){
    					appl_back = false;
    				}
    				// send selections
    				if(that.camlist != undefined && that.camlist.length > 0 && favnamelist.length > 0) {        					
    					webcamsFavourites.addFavourite(favnamelist[0], that.camlist, function(data) {
    						if(data != undefined && data[0].status == 'ok' && data[0]['affected rows'] > 0) {
    							var text = "";
    							
    							if(data[0]['affected rows'] == 1){
    								text = buildText(application.config.i18n[application.config.language].webcams.added_webcams_single, [ data[0]['affected rows'], favnamelist[0] ]);
	    							application.alert(application.config.i18n[application.config.language].information_head, text, application.config.i18n[application.config.language].ok, "rasten", function() { 
	    								that.setVisible(false);
	    								if(appl_back){application.back();}
	                                });
    							} else {
    								text = buildText(application.config.i18n[application.config.language].webcams.added_webcams, [ data[0]['affected rows'], favnamelist[0] ]);
    								application.alert(application.config.i18n[application.config.language].information_head, text, application.config.i18n[application.config.language].ok, "rasten", function() { 
        								that.setVisible(false);
        								if(appl_back){application.back();}
                                    });
    							}
    						} else {
    							//check if error is becaus of duplicate entry
    							if(data[0] != undefined && data[0] != null && data[0][0] != undefined && data[0][0] != null && data[0][0].message.indexOf("Duplicate") >= 0){
    								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_duplicate_could_not_add_webcam, application.config.i18n[application.config.language].ok, "rasten", function() {
    								});
    							} else {
    								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_could_not_add_webcams, application.config.i18n[application.config.language].ok, "rasten", function() {
    								});
    							}
    						}
    					}, function() {
    						application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_network_add_webcams, application.config.i18n[application.config.language].ok, "rasten", function() {
                            });
    					});
    				} else {
    					application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.choose_add_favlist, application.config.i18n[application.config.language].ok, "rasten", function() {
                        });
    				}
    			});
				// checkbox events -> toggle
        		favnameRadioGroupInit();
        		
        		//handle input in form - only allow A-Za-z0-9
        		$("input#eingabe_neu").keyup(function() {
        			$("span#no_special_char").removeClass('warning_msg');
        			var text_old = $(this).val();
        			var text_new = text_old.replace(/[^A-Za-z0-9]/g, "");
        			if(text_old != text_new){
        				$("span#no_special_char").addClass('warning_msg');
        				$(this).val(text_new); // replacing special characters
        			}
        		});
        		
				// Button event handling
	            $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
	            	that.setVisible(false);
	            });

        		$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
					
				});

            };
            
            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.add').unbind('click');
        		$('div.footer.overlay > ul.buttonlist > li.button.cancel').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Webcams', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
               
        this.updateOnStartup = true;
        this.persistence;
        
        this.modes = [];
        
        this.webcamViewer = {};
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {    	
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.WebcamsDAO(application);
        this.streetDao = new at.asfinag.unterwegs.persistence.StreetDAO(application);
        this.provincesDao = new at.asfinag.unterwegs.persistence.ProvincesDAO(application);
        
        this.addOverlays([
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/strasse'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/bundesland'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/geolocation'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/history'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/strasse/viewer'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/bundesland/viewer'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/geolocation/viewer'),
            new at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites(this, '/webcams/history/viewer')
        ]);

        this.application.addController([
            new at.asfinag.unterwegs.webcams.controller.Index(this),

            new at.asfinag.unterwegs.webcams.controller.Strasse(this),
            new at.asfinag.unterwegs.webcams.controller.WebcamViewer(this, '/webcams/strasse', true),

            new at.asfinag.unterwegs.webcams.controller.Bundesland(this),
            new at.asfinag.unterwegs.webcams.controller.WebcamViewer(this, '/webcams/bundesland', true),

            new at.asfinag.unterwegs.webcams.controller.GeoLocation(this),
            new at.asfinag.unterwegs.webcams.controller.WebcamViewer(this, '/webcams/geolocation', true),

            new at.asfinag.unterwegs.webcams.controller.Favoriten(this),
            new at.asfinag.unterwegs.webcams.controller.WebcamViewer(this, '/webcams/favoriten', false),
            new at.asfinag.unterwegs.webcams.controller.DeleteFavorites(this),
            
            new at.asfinag.unterwegs.webcams.controller.History(this),
            new at.asfinag.unterwegs.webcams.controller.WebcamViewer(this, '/webcams/history', true),

            new at.asfinag.unterwegs.webcams.controller.SelectFavorites(this, '/webcams/strasse'),
            new at.asfinag.unterwegs.webcams.controller.SelectFavorites(this, '/webcams/bundesland'),
            new at.asfinag.unterwegs.webcams.controller.SelectFavorites(this, '/webcams/geolocation'),
            new at.asfinag.unterwegs.webcams.controller.SelectFavorites(this, '/webcams/history')
        ]);
    }
});

config.subapps.webcams = new at.asfinag.unterwegs.Webcams('Webcams', 'Webcams', '/webcams');


/*  
 * @class WebcamList
 * Creates a new simple list of webcams.
 *
 * @author Thomas Hickl
 *
 * @parent index
 * @tag at.asfinag.unterwegs.webcams
 *
 * @constructor
 */
$.Class('at.asfinag.unterwegs.WebcamList',
	/* @static */
	{
		VIEW_SIMPLE: 'app/Webcams/view/templates/webcamitems.ejs',
		VIEW_THUMBS: 'app/Webcams/view/templates/webcamitems_thumbs.ejs'
	},
	{
		/* @prototype */
		init: function(settings) {	
		},

		renderList: function(parent, items, meldungen, i18n, language, path, view_style) {
			var view;
			var thumb_resolution = getPreviewImgResolution();
			if(view_style == undefined || view_style == at.asfinag.unterwegs.WebcamList.VIEW_SIMPLE) {
				view = at.asfinag.unterwegs.WebcamList.VIEW_SIMPLE;
			} else {
				view = at.asfinag.unterwegs.WebcamList.VIEW_THUMBS;
			}

			parent.append(
                new EJS({
                    url: view
                }).render({ 
                    data: { 
                        items: items, 
                        i18n: i18n, 
                        language: language,
                        meldungen: meldungen,
                        thumb_resolution: thumb_resolution,
                        controller: {
                            path: path
                        }
                    }                                        
                })
            );
		}
	}
);


$.Class('at.asfinag.unterwegs.WebcamsFavourites', {}, {
	/**
     * init - initialization of Subapp
     * 
     * @param {Object} application
     */
	init: function(application) {
		this.application = application;
		this.config = application.config;
	},
	
	/** 
	 * getList - requesting favorites list:
	 * 
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	getList: function(successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url + application.config.serverdata[act_system].account.getFavorites + deviceid;	//asfinag-atDE   asfinag-enUS
		!release_flag && console.debug('Webcams - WebcamsFavorites.class.js: get Favorites list - URL: '+url);
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			success: function(data) {
				if(data.length > 0 || data.message == "No Favourites found") {
					successCallback(data);
				}
				else {
					errorCallback();
				}
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				debug_flag && console.error("WebcamsFavourites: getList - ErrorThrown: "+errorThrown + " TextStatus: "+textStatus+" XMLHttpRequest: "+XMLHttpRequest);
				errorCallback();
			}
		});
	},

	/** 
	 * getCameraList - getting (requesting) all cameras for a certain entry in favorites list:
	 * 
	 * @param {String} favoriteName - name of the favorites list that should be loaded
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	getCameraList: function(favoriteName, successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url + application.config.serverdata[act_system].account.getFavoriteList + deviceid + '/' + favoriteName;
		!release_flag && console.debug('Webcams - WebcamsFavorites.class.js: get Cameras list - URL: '+url);
		$.ajax({
			url: url,
			cache: false,
			dataType: 'json',
			beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			success: function(data) {
				successCallback(data);
			},
			error : function() {
				errorCallback();
			}
		});
	},
	
	/** 
	 * deleteCamera - deleting a camera from a certain favourite-list
	 *
	 *
	 * @param {String} favName - name of the favorites list
	 * @param {String} camId - id of the cam that should be deleted
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	deleteCamera: function(favName, camId, successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url;
		
		!release_flag && console.debug('Webcams - WebcamsFavorites.class.js: deleteCamera - URL: '+url);
		$.ajax({
			url: url,
			type: 'POST',
			dataType: 'json',
			beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			data: {
				userid: deviceid,
				action: 'delete',
				type: 'camera',
				format: 'json',
				camid: camId,
				favname: favName
			},
			success: function(data) {
				successCallback(data);
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				errorCallback();
			}			
		});
	},
	
	/** 
	 * deleteList - deleting an entire favorites list
	 * 
	 * @param {String} favName - name of the favorites list that should be deleted
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	deleteList: function(favName, successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url;
		
		$.ajax({
			url: url,
			type: 'POST',
			dataType: 'json',
			beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
			data: {
				userid: deviceid,
				action: 'delete',
				type: 'favourites',
				format: 'json',
				favname: favName
			},
			success: function(data) {
				successCallback(data);
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				errorCallback();
			}
			
			
		});
	},
	
	/** 
	 * addFavourite - deleting an entire favorites list
	 * 
	 * @param {String} favouriteName - name of the favorites list that should be added
	 * @param {Array} cameraList - list of cameras
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	addFavourite: function(favouriteName, cameraList, successCallback, errorCallback) {
		var that = this;
		var deviceid = that.application.getDeviceId();
		var url = application.config.serverdata[act_system].account.url;
		console.debug('Webcams - WebcamsFavorites.class.js: add Favorites list - URL: '+url + ' FavName: ' + favouriteName+ ' CameraList: '+cameraList);
		$.ajax({
			url: url,
			cache: false,
			type: 'POST',
			dataType: 'json',
			beforeSend: function(xhr) {
    			xhr.setRequestHeader('Authorization', 'Basic YXNmaW5hZ21vYmlsZTphc2ZpbmFnI21vYmlsZQ==');
    		},
    		data: {
				userid: deviceid,
				action: 'insert',
				type: 'favourites',
				format: 'json',
				camid: cameraList,
				favname: favouriteName
			},
			success: function(data) {
				successCallback(data);
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) {
				debug_flag && console.error("WebcamsFavourites: addFavorite -  ErrorThrown: "+errorThrown + " TextStatus: "+textStatus+" XMLHttpRequest: "+XMLHttpRequest);
				errorCallback();
			}
		});
	}
});


/*  
 * @class WebcamViewer
 * Creates a new Unterwegs WebcamViewer.
 *
 * @author Thomas Hickl
 *
 * @parent index
 * @tag at.asfinag.unterwegs.webcams
 *
 * @constructor
 * @param {object} settings settings for the application
 */



/*
 *  DOCUMENTATION (KLAUS WAISS)
 *  
 *  Basic (abstract) functionality of this class in context to the webcams subapp is as follows:
 *  This class is some kind of a model class. It holds the list of items to offer this list to the tableview and to the detailview. In the tableview, a list
 *  of camera-items is shown. When tapping on a camera-item the detail view of this item gets loaded and the model/WebcamViewer.class.js holds the list
 *  of all camera-items which the detailview is using to offer a next and back button. The detailview must know to which item the next and back button
 *  is referencing to, and this information is retrieved through the list that is held in the model/WebcamViewer.class.js
 *  
 *  Besides the model/WebcamViewer.class.js also does some autorefreshing magic to show the next pic from the server...
 * 
 */


$.Class('at.asfinag.unterwegs.WebcamViewer',
	/* @static */
	{},
	{
		/**
		 * init
		 * 
		 * @param settings
		 * @param {Object} application
		 * @param favoritesOverlay
		 *  @prototype 
		 */
		init: function(settings, application, favoritesOverlay) {
			
			var that = this;
			
			var _list = [];
			var _current;
			var _refreshId;
			
			// override default settings
			that.settings = $.extend({}, settings);
			settings = undefined;
		
			that.setCurrentWebcam = function(current) {
				_current = current;
			};

			that.getCurrentWebcam = function() {
				return _current;
			};
		
			that.setWebcamObjects = function(list) {
				_list = list;
			};

			that.getWebcamObjects = function() {
				
				if (_list.length == 0) {
					return undefined;
				} else {
					return _list;					
				}
			};
			/**
			 * startAutoRefresh - auto refresh for webcam image
			 */
			that.startAutoRefresh = function() {	
				var that = this;
				var firstImageLoaded = false;
				var newImageLoadedSuccessfully = false;
				var img = $('img.webcampic');
				var image_src = img.attr('src');
				img.attr('src', 'css/images/webcams/webcampic_dummy.png');
				
				var server_error = true;

				setTimeout(function() {
					if(server_error == true) {
						img.css({
							'background': 'url(css/images/webcams/webcampic_servererror_' + application.config.language + '.png) center center no-repeat transparent',
							'background-size': '100%',
							'visibility': 'inherit'
						});
						$('div.refresh_button').show();
                        $('span.blickrichtung.button').addClass('disabled');
						$('a.imagebutton.favorites.webcams').hide(); //hide bookmark star
					}
				}, 12000);
			
				$('a.imagebutton.favorites.webcams').on('click', function() {
					favoritesOverlay.camlist = [ $(this).data('camname') ];
	    			favoritesOverlay.setVisible(true);		
				});
				
				$('div.refresh_button').on('click', function() {
					var controllerpath = $(this).data('contrpath');
					//also used for rasten webcamviewer, therefore we need to change the path
					if(controllerpath.substr(0,7) == "/rasten"){
						window.location = '#'+$(this).data('contrpath')+'/rastenwebcamviewer?name='+$(this).data('camname')+'&stationName='+$(this).data('stationname')+'&page-transition=enter&date='+(new Date().getTime());						
					} else {
						window.location = '#'+$(this).data('contrpath')+'/viewer?name='+$(this).data('camname')+'&page-transition=enter&date='+(new Date().getTime());
					}
				});
					
				var image = new Image();
				
				var window_size = getMaxWindowSize();
				var size_param = '&width=360' + '&height=288';
				if(window_size < 360){
					size_param = '&width=' + window_size + '&height=' + Math.round(window_size / 1.25);
				}
				
				_refreshId = window.setInterval(function() {
	                if(application.status == APP_STATUS_RUNNING) {
	                	if(application.getNetworkState() == CONNECTION_NONE) {
							img.attr('src', 'css/images/webcams/webcampic_offline_' + application.config.language + '.png');
							$('a.next > img').css({ 'height': 0 });
							$('a.previous > img').css({ 'height': 0 });
							$('div.refresh_button').show();
                            $('span.blickrichtung.button').addClass('disabled');
							$('a.imagebutton.favorites.webcams').hide(); //hide bookmark star
	                	} else {
		                    var timestamp = new Date().getTime();
		                    var src = image_src;
			                src = src.split('&time=')[0];
		                    
	                		image.onload = function() {
								if(src != undefined) {
									newImageLoadedSuccessfully = true;	// setting this flag to true so that below we can set the image.src to a new value to load the next image
									server_error = false;
			                        img.attr('src', image.src);
			                        img.css({ 'visibility': 'inherit' });
			                        application.refreshPage();			                        
			                    }
	                		}
	                		
	                		
	                		// Explanation of the following if:
	                		// The value of image.src value must not be set every interval, otherwise the image.onload event above will never be triggered
	                		// on slow internet connections
	                		// so we set the value of image.src only if we haven't yet loaded a firstImage; or the second case where we allow to reset the
	                		// value of image.src is when a new Image was loaded successfully (=newImageLoadedSuccessfully) which means that the onload
	                		// event was triggered... again: if we reset the value of image.src too soon the onload event will never be called and the
	                		// image will never be changed which normally would happen in the onload event...
	                		if (!firstImageLoaded) {
	                			image.src = src + '&time=' + timestamp + size_param;	
	                			firstImageLoaded = true;
	                		}
	                		else if (newImageLoadedSuccessfully) {
	                			image.src = src + '&time=' + timestamp + size_param;
	                			newImageLoadedSuccessfully = false;  // setting it back to false until the new image finished loading and is shown because the onload event gets triggered above
	                			$('div.refresh_button').hide();
                                $('span.blickrichtung.button').removeClass('disabled');
	                			$('a.imagebutton.favorites.webcams').show(); //display bookmark star
	                		}

		                    $('a.next > img').css({ 'height': '' });
							$('a.previous > img').css({ 'height': '' });
		                }
	                }
	            }, 450);
			};

			/**
			 * stopAutoRefresh
			 */
			that.stopAutoRefresh = function() {
				window.clearInterval(_refreshId);
				$('a.imagebutton.favorites.webcams').unbind('click');
				$('div.webcamcontainer > div.info').unbind('click');
			}
		}
	}
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.WebcamsDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
		
		this.fields = 'w.name, w.language, w.id, s.ROAD_INFO || " - " || s.ROAD_NAME AS autobahn, p.PROVINCE_NAME AS bundesland, w.lage, w.blickrichtung, w.km, w.richtung, w.url, w.thumbUrl, s.ROAD_INFO2 AS titel, s.ROAD_CODE_1 || " " || s.ROAD_NAME AS info, s.ROAD_NAME || " | " || p.PROVINCE_SHORTCODE || " | " || w.lage AS camtitel, w.road_id, w.province_id, w.x, w.y';
		
		this.meldungen = {};
		this.meldungen_timestamp = undefined;

		this.updateHierarchy = function(data) {
			for(var i = 0; i < data.length; i++) {
				var nearCam = false;
				if(i > 0) {
					if(data[i].km == data[i-1].km) {						
						data[i].near = data[i-1];
						nearCam = true;
						data[i].previous = data[i-1].previous;
						/* PVIS-1533 change direction for three webcams
						 * if there are three webcams with the same km it is necessary
						 * to read i-2 to be able to jump from Webcam C back to Webcam A
						 */
						if((i>1) && (data[i].km == data[i-2].km)) {
							data[i].near = data[i-2];
						}
					} else {
						if ( (i > 1) && (data[i-1].km == data[i-2].km) ) {		// checking if the previous cam has blickrichtung button (same km) and if yes we have to go back 2 items to have the same blickrichtung when navigating next and back again
							data[i].previous = data[i-2];							
						} else {
							data[i].previous = data[i-1];
						}
					}
				}
				if(i < data.length - 1) {
					if(data[i].km == data[i+1].km) {
						data[i].near = data[i+1];
						
						// searching for the next webcam here:
						for (var currentIndex = (i+2); currentIndex < data.length; currentIndex++) {
							if(data[i].km < data[currentIndex].km) {
								data[i].next = data[currentIndex];
								break;
							}
						}
					} else {
						data[i].next = data[i+1];
						if(nearCam == true) {
							data[i].near.next = data[i].next;
						}
					}
				}
			}

			return data;
		}
	},
	
	/**
	 * updates the webcam information
	 * 
	 * @param {function} callback
	 */
    update: function(callback) {
    	var that = this;
    	this.status = DATA_STATUS_LOADING;
    	
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	var lastDate;
    	
    	var urlTimestamp = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.webcams_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	!release_flag && console.debug('WebcamsDAO: load Timestamp - URL: '+urlTimestamp);
    	$.ajax({
			url: urlTimestamp,
			cache: false,
			dataType: 'json',
			timeout: 20000,
			success: function(data) {
				if(data != null && data.length > 0){
					datastore_last_changed = data[0].aktualisierung;

					var dateArray = datastore_last_changed.split(' ');
					var year = dateArray[0].split('-');
					var time = dateArray[1].split(':');

		        	lastDate = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
		        	db.transaction(checkTimestamp, function(e) { console.error('WebcamsDAO: Transaction Error: ' + e.message); }, function(tx) { debug_flag && console.debug('WebcamsDAO: transaction1 done...'); });				
				} else {
					loadData();
				}
				
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				loadData();
			}
    	});
    	
    	/**
    	 * loadData - loads Webcam data from server
    	 */
    	function loadData() {
    		//LOAD DATA from Server 
    		//use config.language because the config.language is up to date --> language is not available
    		language = config.language;
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[language].webcams_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		!release_flag && console.debug('WebcamsDAO: load Data - URL: '+url);
    		$.ajax({
				url: url,
				cache: false,
				dataType: 'json',
				timeout: 25000,
				success: function(data) {
					if(data == null || data.length == 0){
    					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
    					return false;
    				}
					// following structure makes sure that the success CB will only be fired once.
					// if you don't use this nested structure you will end up with almost hundred success callbacks on the devices (not in browser)
					// which you will notice if you add a console.log before data_status_ready
					// reason: executeSql is async, which means doing several executeSqls wihtout nested structure will lead to unpredictable behavior...
					//
					function insertData(tx) {
						var lcl_timestamp = null;
						if (lastDate != undefined) {
							lcl_timestamp = lastDate.getTime();
						} else {
							lcl_timestamp = new Date();
						}	
			    		tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', ['webcams%'], function (tx, res) {
			    			tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', ['webcams_' + language, lcl_timestamp], function(tx, result) {
			    				tx.executeSql('DELETE FROM webcams_de_at', [], function (tx, res) {
			    					tx.executeSql('DELETE FROM webcams_en_us', [], function (tx, res) {
			    						
			    						//var sqlWebcamliste = 'INSERT OR IGNORE INTO ' + getTablenameForCurrentLanguage('webcams') + ' (name, language, id, autobahn, bundesland, lage, blickrichtung, km, richtung, url, thumbUrl, titel, info, camtitel, x, y, road_id, province_id) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
			    						var sqlWebcamliste = 'INSERT OR IGNORE INTO ' + getTablenameForCurrentLanguage('webcams') + ' (name, language, id, lage, blickrichtung, km, richtung, url, thumbUrl, x, y, road_id, province_id) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
			    			    		for(var name in data) {
			    			    			var webcam = data[name];
			    			    			//tx.executeSql(sqlWebcamliste, [webcam.ID_WEBCAM, language, webcam.ID, webcam.ROAD_INFO + " - " + webcam.ROAD_NAME, webcam.PROVINCE_NAME, webcam.POSITION, (webcam.VIEWING_DIRECTION == '') ? null : webcam.VIEWING_DIRECTION, webcam.KM, webcam.DIRECTION, webcam.URL_CAMPIC, webcam.URL_CAMPIC, webcam.ROAD_CODE, webcam.ROAD_CODE_1 + " " + webcam.ROAD_NAME, webcam.ROAD_NAME + " | " + webcam.PROVINCE_MIDCODE + " | " + webcam.POSITION  + " | " + config.i18n[language].webcams.lookingDirection, webcam.X_WGS84, webcam.Y_WGS84, webcam.ROAD_ID, webcam.PROVINCE_ID], 
			    			    			tx.executeSql(sqlWebcamliste, [webcam.ID_WEBCAM, language, webcam.ID, webcam.POSITION, (webcam.VIEWING_DIRECTION == '') ? null : webcam.VIEWING_DIRECTION, webcam.KM, webcam.DIRECTION, webcam.URL_CAMPIC, webcam.URL_CAMPIC, webcam.X_WGS84, webcam.Y_WGS84, webcam.ROAD_ID, webcam.PROVINCE_ID], 
			    			    			    					(function(name) { 
			    			    					})(name));
			    			    		}
			    					});
			    				});
				    		});
			    		});
					}
					
					
					function errorCB (error) {
						console.error('WebcamsDAO: loadData - Transaction Error: ' + error.message);
						that.status = DATA_STATUS_ERROR_WHILE_LOADING;
					}
					
					
					function successCB() {
						setTimeout(function() {
							that.status = DATA_STATUS_READY;							
						}, 250);
					}

					db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					that.status = DATA_STATUS_ERROR_WHILE_LOADING;
				}
	    	});
    	}
    	/**
    	 * checkTimestamp - compares actual timestamp of data with database timestamp
    	 * 
    	 * if data is older than current timestamp - the function @loadData is called
    	 * 
    	 * @param {Transaction} tx 
    	 */
    	function checkTimestamp(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		language = config.language;
    		tx.executeSql(sql, ['webcams_' + language], function(tx, result) {
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == lastDate.getTime()) {
    				// webcams are up to date...
    				that.status = DATA_STATUS_READY;
    				if(callback != undefined && typeof(callback) == 'function') {
    					callback();
    				}
    			} else {
    				// update webcams:
    				loadData();
    			}
    			
    			return false;
    		});
    	}
    	
    },
    
    
    /**
     * getWebcamsByNames
     * 
     * @param {Object} names array of webcam names
     * @param {function} callback
     */
    getWebcamsByNames: function(names, callback) {
    	
    	var db = this.application.config.db.db;
    	var language = this.application.config.language;
    	var me = this;
    	
    	
    	if(names != undefined && typeof names === 'object' && names.length > 0 && callback != undefined && typeof callback === 'function') {
    	
    		db.transaction(function(tx) {
    	
	    		var sql = 'SELECT ' + me.fields +
	    					' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
	    					' WHERE w.name IN (?';		// dynamically create the beginning of the sql statement
	    		var sql_fallback  = 'SELECT ' + me.fields +
	    								' FROM ' + getTablenameForOtherLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
	    								' WHERE w.name IN (?'; //for WIDGET
	    		for(var i = 1; i < names.length; i++) {
	        	    sql 			= sql + ',?';	// dynamically append parameters to the sql statement
	        	    sql_fallback 	= sql_fallback + ',?';	// for WIDGET
	        	}
	        	
	        	sql 			= sql + ') AND w.language LIKE ?;';
	        	sql_fallback 	= sql_fallback + ')';
	        	var names_fallback = names; //for WIDGET contains names without language
	    		names.push(language);	// push language parameter as last parameter into our array
	    		
	    		tx.executeSql(sql, names, function(tx, result) {
	    			if(result.rows.length > 0) {
	    				var data = [];
						for(var i = 0; i < result.rows.length; i++) {
							data.push(result.rows.item(i));
						}
						
						for(var i = 0; i < data.length; i++) {	// iterate through webcam objects:
							if (data[i+1] != undefined) {
								data[i].next = data[i+1];								
							}
							if(data[i-1] != undefined) {
								data[i].previous = data[i-1];
							}
						}
						
						callback(data);
	    			} else {
	    				/* for App Widget and Language change it is necessary
	    				 * to load the data out of the other language table, otherwise
	    				 * it is not available. As soon as the webcams data is reloaded
	    				 * the above select contains the data.
	    				 */
	    				names_fallback.pop();
	    				tx.executeSql(sql_fallback, names_fallback, function(tx, result) {
	    	    			if(result.rows.length > 0) {
	    	    				var data = [];
	    						for(var i = 0; i < result.rows.length; i++) {
	    							data.push(result.rows.item(i));
	    						}
	    						
	    						for(var i = 0; i < data.length; i++) {	// iterate through webcam objects:
	    							if (data[i+1] != undefined) {
	    								data[i].next = data[i+1];								
	    							}
	    							if(data[i-1] != undefined) {
	    								data[i].previous = data[i-1];
	    							}
	    						}
	    						
	    						callback(data);
	    	    			} else {
	    	    				callback([]);
	    	    			}
	    				});						
					}
	    			
	    			return false;
	    		});
	
	    	}, function(e) { return false; });
	    	
	    	
    	} 
    	else {
    		console.error('WebcamsDAO: getWebcamsByName - names or callback parameters wrong');
    		callback([]);
    	} 
    	
    },
    
    /**
     * getWebcamByName - loads webcam object out of database
     * 
     * @param {Object} parameters contains the webcam name in parameters.name
     * @param {function} callback
     */
    getWebcamByName: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	var me = this;
    	
    	db.transaction(function(tx) {
	    	var sql = 'SELECT ' + me.fields + 
	    				' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
	    				' WHERE w.name LIKE ? AND w.language LIKE ?;';
			
			tx.executeSql(sql, [parameters.name, config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}					
					/**
					 * getNearWebcam
					 * 
					 * @param {Array} data
					 */
					function getNearWebcam(data) {
						var currentCam = data[0];
						
						db.transaction(function(tx) {
					    	var sql = 'SELECT ' + me.fields +
					    				' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
					    				' WHERE w.km = ? AND ' +
					    						's.ROAD_INFO || " - " || s.ROAD_NAME LIKE ? AND ' + //autobahn
					    						'w.name NOT LIKE ? AND ' +
					    						'w.language LIKE ? ' +
					    				' GROUP BY w.id, s.ROAD_INFO || " - " || s.ROAD_NAME ' + //id, autobahn
					    				' ORDER BY km ASC ' +	
					    				' LIMIT 1;';
							
							tx.executeSql(sql, [currentCam.km, currentCam.autobahn, currentCam.name, config.language], function(tx, result) {
								if(result.rows.length > 0) {
									var webcam;
									for(var i = 0; i < result.rows.length; i++) {
										webcam = result.rows.item(i);
									}									
									data[0].near = webcam;				
								}
								getPreviousWebcam(data);
								
								return false;
							});
				    	}, function(error) {
				    		getPreviousWebcam(data);
						});
					
					}
					/**
					 * getPreviousWebcam
					 * 
					 * @param {Array} data
					 */
					function getPreviousWebcam(data) {
						var currentCam = data[0];
						
						db.transaction(function(tx) {
							var sql = 'SELECT ' + me.fields +
					    				'FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
					    				' WHERE w.km < ? AND ' +
					    					(parameters.listtype == 'autobahn'?'s.ROAD_INFO || " - " || s.ROAD_NAME':'p.PROVINCE_NAME') + ' LIKE ? AND ' + 
					    					'w.language LIKE ? ' +
					    				' GROUP BY w.id, s.ROAD_INFO || " - " || s.ROAD_NAME ' +
					    				' ORDER BY s.ROAD_INFO || " - " || s.ROAD_NAME, w.km DESC ' +	
					    				' LIMIT 1;';
							
							tx.executeSql(sql, [currentCam.km, (parameters.listtype == 'autobahn' ? currentCam.autobahn : currentCam.bundesland), /*currentCam.richtung,*/ config.language], function(tx, result) {
								if(result.rows.length > 0) {
									var webcam;
									for(var i = 0; i < result.rows.length; i++) {
										webcam = result.rows.item(i);
									}									
									data[0].previous = webcam;				
								}
								getNextWebcam(data);
								
								return false;
							});
				    	}, function(error) {
				    		getNextWebcam(data);
						});
					
					}
					/**
					 * getNextWebcam
					 * 
					 * @param {Array} data
					 */
					function getNextWebcam(data) {
						var currentCam = data[0];
									
						db.transaction(function(tx) {
					    	var sql = 'SELECT ' + me.fields
					    				'FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
					    				'WHERE w.km > ? AND ' +
					    					(parameters.listtype == 'autobahn'?'s.ROAD_INFO || " - " || s.ROAD_NAME':'p.PROVINCE_NAME') + ' LIKE ? AND ' +
					    					'w.language LIKE ? ' +
					    				'GROUP BY w.id, s.ROAD_INFO || " - " || s.ROAD_NAME ' +
					    				'ORDER BY s.ROAD_INFO || " - " || s.ROAD_NAME, km ASC ' +	
					    				'LIMIT 1;';
							
							tx.executeSql(sql, [currentCam.km, (parameters.listtype == 'autobahn' ? currentCam.autobahn : currentCam.bundesland), /*currentCam.richtung,*/ config.language], function(tx, result) {
								if(result.rows.length > 0) {
									var next;
									for(var i = 0; i < result.rows.length; i++) {
										next = result.rows.item(i);
									}
									
									data[0].next = next;
								}
								callback(data);
								return false;
							});
				    	}, function(error) {
							callback(data);
							return true;
						});
					}
					
					getNearWebcam(data);					
				} else {
					callback({});
				}
				
				return false;
			});
    	});
    },
    /**
     * getAllStrasse - returns all streets that contain webcams
     * 
     * @param {function} callback the Callback that is called after data is loaded (contains the items found or [])
     */
    getAllStrasse: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	var sql = 'SELECT DISTINCT(s.ROAD_INFO || " - " || s.ROAD_NAME) AS autobahn ' +
	    				'FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
	    				'WHERE language LIKE ? ORDER BY s.ROAD_INFO2;';
			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    /**
     * getAllBundesland - returns all provinces that contain webcams
     * 
     * @param {function} callback the Callback that is called after data is loaded (contains the items found or [])
     */
    getAllBundesland: function(parameters, callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		var sql = 'SELECT DISTINCT(p.PROVINCE_NAME) AS bundesland '+
    					'FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID ' + 
    					'WHERE w.language LIKE ? ORDER BY bundesland;';
			
			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						if(result.rows.item(i) != undefined && result.rows.item(i) != null && result.rows.item(i).bundesland != "") {
						data.push(result.rows.item(i));
						}
					}
					callback(data);
				} else {
					callback([]);
				}
				
				return false;
			});
    	});	
    },
    
    /**
     * getStrassenNamenAndCountWebcams - count the number of webcams for each street
     * 
     * @param {function} callback the Callback that is called after data is loaded (contains the items found or [])
     */ 
    getStrassenNamenAndCountWebcams: function(callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		var sql = 'SELECT s.ROAD_CODE_2 AS titel,count(*) AS "numberOfWebcams" '+
    					'FROM '+ getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN streets s ON w.road_id = s.ROAD_ID '+
    					'WHERE w.language LIKE ? GROUP BY s.ROAD_CODE_2;';
    		
			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    
    /**
     * getBundeslandNamenAndCountWebcams - return each province and the number of webcams
     * 
     * @param {function} callback the Callback that is called after data is loaded (contains the items found or [])
     */ 
    getBundeslandNamenAndCountWebcams: function(callback) {
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
    		var sql = 'SELECT p.PROVINCE_NAME AS "bundesland", count(*) AS "numberOfWebcams" '+
    					'FROM '+ getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID '+
    					'WHERE w.language LIKE ? GROUP BY p.PROVINCE_NAME;';

			tx.executeSql(sql, [config.language], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						if(result.rows.item(i) != undefined && result.rows.item(i) != null && result.rows.item(i).bundesland != "") {
						data.push(result.rows.item(i));
						}
					}
					callback(data);
				} else {
					callback([]);
				}
				return false;
			});
    	});	
    },
    
    
    /**
     * getAllByStrasse - loads all webcams of a specific street, defined in the parameters value
     * 
     * @param {Object} parameters object that contains the street (parameters.strasse)
     * @param {function} callback
     */
    getAllByStrasse: function(parameters, callback) {

    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	//var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('webcams') + ' WHERE language LIKE ? AND autobahn LIKE ? ORDER BY autobahn, km';
	    	var sql = 'SELECT ' + that.fields + 
	    				' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +
	    				'WHERE w.language LIKE ? AND s.ROAD_INFO || " - " || s.ROAD_NAME LIKE ? ORDER BY autobahn, km';
			
			tx.executeSql(sql, [config.language, parameters.strasse], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}

					data = that.updateHierarchy(data);

					callback(data);
				} else {
					callback([]);
				}
				
				return false;
			});
    	});	   
    },
    /**
     * getAllByBundesland - loads all webcams of a specific province, defined in the parameters value
     * 
     * @param {Object} parameters object that contains the province (parameters.bundesland)
     * @param {function} callback
     */
    getAllByBundesland: function(parameters, callback) {
    	var that = this;
    	var db = this.application.config.db.db;
    	db.transaction(function(tx) {
	    	//var sql = 'SELECT * ' + ' FROM ' + getTablenameForCurrentLanguage('webcams') + ' WHERE w.language LIKE ? AND bundesland LIKE ? ORDER BY titel, km';
	    	var sql = 'SELECT ' + that.fields +
						' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' + 
						' WHERE w.language LIKE ? AND p.PROVINCE_NAME LIKE ? ORDER BY s.ROAD_CODE_2, w.km';			
			tx.executeSql(sql, [config.language, parameters.bundesland], function(tx, result) {
				if(result.rows.length > 0) {
					var data = [];
					for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}

					data = that.updateHierarchy(data);

					callback(data);
				} else {
					callback([]);
				}
				
				return false;
			});
    	});	    	
    },
    /**
     * getAllByGeoLocation - loads all webcams in the geolocation provided in parameters
     * 
     * @param {Object} parameters object that contains the geolocation (Longitude: parameters.lon, Latitude: parameters.lat)
     * @param {function} callback
     */    
    getAllByGeoLocation: function(parameters, callback) {
    	var that = this;
    	var db = that.application.config.db.db;
    	var radius = parameters.radius;
    	var lon = parameters.lon;
    	var lat = parameters.lat;
    	
    	function compare(a,b){
    		return a-b;
    	}
    	
    	
    	db.transaction(function(tx) {
    		var sql = 'SELECT ' + that.fields + 
    					' FROM ' + getTablenameForCurrentLanguage('webcams') + ' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID ' +  
    					' WHERE w.language LIKE ? ORDER BY s.ROAD_CODE_2';
    		tx.executeSql(sql, [config.language], function(tx, result) {
    			var data = [];
    			var webcamsTmp = {};
    			var keys;
    			var webcams = [];
    			
    			if(result.rows.length > 0) {
    				for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
    				
    				for(var i = 0; i < data.length; i++) {
    					var distance =
    						(((Math.acos(Math.sin((lat * Math.PI / 180)) * Math.sin((data[i].y * Math.PI / 180))
    						+ Math.cos((lat * Math.PI / 180)) * Math.cos((data[i].y * Math.PI / 180))
    						* Math.cos((lon - data[i].x) * Math.PI / 180))) * 180 / Math.PI) 
    						* 60 * 1.1515 * 1.609344);

    					// get all webcams within distance
    					if(distance <= radius) {
    						if(webcamsTmp[distance] == undefined) {
    							webcamsTmp[distance] = [];    							
    						}
    						
    						data[i].distance = distance;
    						webcamsTmp[distance].push(data[i]);
    					}
    				}
    				
    				keys = Object.keys(webcamsTmp);
    				var arry = [];
    				
    				for(var i in keys) {
    					arry.push(parseFloat(keys[i]));
    				}
    				
    				keys = arry.sort(compare);
    				
    				var prev = undefined; // previous cam
    				var next = undefined; // next cam
    				for(var i in keys) {
    					i = parseInt(i);
    					for(var j in webcamsTmp[keys[i]]) {
    						j = parseInt(j);
    						webcamsTmp[keys[i]][j].previous = prev; // set previous cam

    						webcams.push(webcamsTmp[keys[i]][j]);

    						prev = webcamsTmp[keys[i]][j]; // set this cam as previous for the following cam

    						if(webcamsTmp[keys[i]][j+1] != undefined) {
    							webcamsTmp[keys[i]][j].next = webcamsTmp[keys[i]][j+1];
    						} else if(webcamsTmp[keys[i+1]] != undefined && webcamsTmp[keys[i+1]][0] != undefined) {
								webcamsTmp[keys[i]][j].next = webcamsTmp[keys[i+1]][0];
    						} else {
    							webcamsTmp[keys[i]][j].next = undefined;
    						}
    					}
    				}
    				
    				// order webcams
    				callback(webcams);
    				return false;
    			}
    			callback(webcams);
    			return false;
    		});
    	});
    },
    /**
     * updateWebcamsVerkehrsmeldungen
     * 
     * @deprecated won't be used because of PVIS-2424
     * */
    updateWebcamsVerkehrsmeldungen: function() {
    	var that = this;
    	var jetzt = new Date().getTime();
    	var config = this.application.config;
    	
    	if(that.meldungen_timestamp == undefined || ( (jetzt - that.meldungen_timestamp) > that.application.config.webcams.meldungenIntervall) ) {
    		that.meldungen_timestamp = jetzt;
    		    		
    		//LOAD DATA from Server 
    		var url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[config.language].webcams_meldungen+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
			
			$.ajax({
				url: url,
				cache: false,
				dataType: 'json',
				type: 'POST',
				success: function(data) {
					that.meldungen = {};

					for(var i in data) {
						that.meldungen[data[i].name] = data[i];
					}

					that.meldungen_timestamp = jetzt;
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					that.meldungen = {};
					that.meldungen_timestamp = jetzt;
				}
			});
    	}
    },
    
    /**
     * getLastAccessedElementsList - load the top ten out of the access Log
     *
     * @param {function} callback
     */
    getLastAccessedElementsList: function(callback){
        var that = this;
        var db = that.application.config.db.db;
        db.transaction(function(tx) {
                       //LIMIT 15 and LIMIT 10 is necessary, if a webcam is deleted due to an update - therefore only 9 elements would be shown.
                       var sql = 'SELECT ' + that.fields + 
                       				' FROM '+ getTablenameForCurrentLanguage('webcams') +' w INNER JOIN provinces p ON w.province_id = p.PROVINCE_ID INNER JOIN streets s ON w.road_id = s.ROAD_ID  INNER JOIN '+ 
                       					'(SELECT * FROM access_log WHERE type = ? ORDER BY lastaccess DESC LIMIT 15) al ON w.name = al.id '+
                       				'LIMIT 10';
                       var data = [];
                       tx.executeSql(sql, [APP_KEY_WEBCAM], function(tx, result) {
                            if(result.rows.length > 0){
                             for(var i = 0; i < result.rows.length; i++) {
                                 data.push(result.rows.item(i));
                             }
                             
                             for(var i = 0; i < data.length; i++) {	// iterate through webcam objects:
                                 if (data[i+1] != undefined) {
                                     data[i].next = data[i+1];
                                 }
                                 if(data[i-1] != undefined) {
                                     data[i].previous = data[i-1];
                                 }
                             }
                                     
                             callback(data);
                            } else {
                             callback([]);
                            }
                         });
                       },
                       // error callback of transaction
                       function(err) {
                        callback([]);
                        return false;},
                       // success callback of transaction
                       function() {return true;});
                
    },
    /**
     * getWebcamsFromKmToKm - KOMPAGNON
     * @param {int} currentDirection Direction: Richtungsfahrbahn (1,2)
     * @param {int} roadID: Straße ( Westautobahn, ...)
     * @param {int} kmFrom: in Kilometer, Aktueller Standort
     * @param {int}	kmTo: in Kilometer, bis zu welchem Kilometer man sehen möchte
     * @param {function} callback
     */
    getWebcamsFromKmToKm: function(currentDirection, roadId, kmFrom, kmTo, show, callback) {
    	if(show == 0){
    		callback([]);
    	}else{
    		var db = this.application.config.db.db;
	    	var sql;
	    	if(currentDirection == 1){
	    		sql = 'SELECT * FROM '+ getTablenameForCurrentLanguage('webcams') +' WHERE road_id = ? AND km >= ? AND km <= ?';
	    	}else if(currentDirection == 2){
	    		sql = 'SELECT * FROM '+ getTablenameForCurrentLanguage('webcams') +' WHERE road_id = ? AND km <= ? AND km >= ?';
	    	}
	    	
	    	//console.log(sql + " : " + roadId + " : " + kmFrom  + " : " + kmTo);
	    	
	    	if(sql!=undefined) {
		    	db.transaction(function(tx) {
					tx.executeSql(sql, [roadId, kmFrom, kmTo], 
						function(tx, result) {
							if(result.rows.length > 0) {
								callback(result.rows);
							} else {
								callback([]);
							}
						}, function(transaction, error) {
							console.log('error in getWebcamsFromKmToKm: ' +  error.message + ' code: ' + error.code);
							callback([]);
						}
					);
		    	});	
		    } else {
		    	callback([]);
		    }
    	
    	}
    },
    
    getAllWebcams: function(callback) {
		var db = this.application.config.db.db;
		var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage('webcams');
		
		db.transaction(function(tx) {
			tx.executeSql(sql, [], function(tx, result) {
				if(result.rows.length > 0) {
					callback(result.rows);
				} else {
					callback([]);
				}
			});
		});	
    }
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.History',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/history',
				'app/Webcams/view/WebcamsList.ejs'
			);

			var that = this;
			var application = subapp.application;
            subapp.webcamViewer[that.path] = new at.asfinag.unterwegs.WebcamViewer({}, application, subapp.overlay[that.path + '/favorites']);
			
            /**
             * onLoad
             */
			that.onLoad = function() {
                var d = $.Deferred();
				var controller = this;
				d.controller = this;
				return d.promise();
			};
			/**
			 * onShow
			 */
			that.onShow = function() {
            };
            /**
             * onDestroy
             */
			that.onDestroy = function() {
                            
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.Favoriten',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/favoriten',
				'app/Webcams/view/WebcamsList.ejs'
			);

			var that = this;
			var application = subapp.application;

			subapp.webcamViewer[that.path] = new at.asfinag.unterwegs.WebcamViewer({}, application, subapp.overlay['/webcams/bundesland/favorites']);
			
			/**
			 * showLoading
			 */
	    	function showLoading() {
	    		$('ul.listview.loading').show();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('ul.listview.add_shortcut_button').hide();
	    	}

	    	/**
	    	 * onLoad
	    	 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							sticky_list: false,
							sticky_thumb: false,
							language: application.config.language,
							title: controller.parameters.favname,
							title_optional: '',					
							parameters: '?type=favoriten&favname=' + encodeURI(controller.parameters.favname),
							addFavoriteButton: false,
							addDeleteButton: true,
							favname: controller.parameters.favname
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};

			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				/**
				 * loadData
				 */
				function loadData(){
					// initialize on Show through parent class:
					var parentController = new at.asfinag.unterwegs.webcams.ParentController(controller, subapp);
					parentController.initializeOnShow();
					
					// get items
					var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
	    			webcamsFavourites.getCameraList(controller.parameters.favname,
						function(data) {
	    					$('ul.listview.loading').hide();
							// success --- cams received
							
	    					var camIdentifiers = [];
							
							for(var i = 0; i < data.length; i++) {
		    					camIdentifiers.push(data[i].camid);
							}
							if(camIdentifiers.length == 0){
								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['error_list_not_available'], application.config.i18n[application.config.language].ok, "webcams", function() {
									window.location = "#/webcams";
								});
								
								return;
							}
				    		subapp.persistence.getWebcamsByNames(camIdentifiers, function(items) {
				    			that.items = items;
				    			// subapp.favoriteWebcams = items;
				    			subapp.webcamViewer[that.path].setWebcamObjects(that.items);
				    			//if no data is found, favourite can't be deleted
				    			if(items == "" || items == null){
				    				$("a.imagebutton.delete.webcams").hide();
				    				$("ul.listview.no_favourite_found").show();
				    				
				    			} else {
				    				$("a.imagebutton.delete.webcams").show()
				    			}
				    			//ANDROID WIDGET - necessary for widget navigation
				    			if(config.launchparamWidget==true){
				    				config.launchparamWidget = false;
				    				var camid = that.items[0].name;
				    				if(!isStringEmpty(controller.parameters.camid)){
				    					camid = controller.parameters.camid;
				    				}
				    				setTimeout(function(){
				        				window.location = '#/webcams/favoriten/viewer?name='+camid+'&page-transition=next';
									},500);		
				    			} else {
				    				parentController.render(items);		// load detail page with cameras
				    			}
				    			
				    			if(items.length != undefined){
				                	$("span#num_webcams_in_list").html("("+items.length+")");
				                }
				    			//show add shortcut button
				    			$('li.button.add_shortcut').data( "favname", controller.parameters.favname );
								$('ul.listview.add_shortcut_button').show();
				    		});
						},
						function() {
							$('ul.listview.loading').hide();
							if(isOffline()){
								$('ul.no_internet_connection').show();
								$('ul.noentries').hide();
							} else {
								$('ul.noentries').show();
								$('ul.no_internet_connection').hide();
							}
						}
					);
				}
				//load the data
				showLoading();
				loadData();
				
				$('li.button.add_shortcut').on('click', function() {
					addShortcut(APP_KEY_WEBCAM_FAV, location.hash, $(this).data('favname'), $(this).data('favname'));
				});
				
				$('li.button.reload').on('click', function() {
					showLoading();
					loadData();
				});
			};
			
			/** 
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('li.button.add_shortcut').unbind('click');
				$('li.button.reload').unbind('click');
 				$('.footer ul.tabs li.navigation.list').unbind('click');
             	$('.footer ul.tabs li.navigation.thumbs').unbind('click');
			};
		}
	}
);


//***********************************************************************************************
//
// Parent Class (Helper Class) to help initializing some child-classes like Bundesland.class.js,
// Strasse.class.js, Favoriten.class.js, Geolocation.class.js,...
//
//
$.Class('at.asfinag.unterwegs.webcams.ParentController', {}, {
    
	/**
	 * init
	 * 
	 * @param {Object} controller
	 * @param {Object} subapp
	 */
	init: function(controller, subapp) {
    	this.controller = controller;
    	this.subapp = subapp;
    	this.items;  // TODO: items are initialized later in render function, which isn't that good and just a workaround that could be refactored ...
    },
    
    /**
     * showLoading
     */
    showLoading: function () {
		$('ul.listview.noentries').hide();
		$('ul.listview.nogeolocation').hide();
		$('ul.listview.items').hide();
		$('ul.thumbview').hide();
		$('div#sticky_wrapper').hide();
		$('ul.listview.loading').show();
	},
	
	/**
	 * showList
	 */
	showList: function () {
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').hide();
		$('ul.listview.nogeolocation').hide();
		$('ul.listview.items').show();
		$('ul.thumbview').hide();
	},
	
	/**
	 * showThumbs
	 */
	showThumbs: function () {
		$('ul.listview.loading').hide();
		$('ul.listview.noentries').hide();
		$('ul.listview.items').hide();
		$('ul.listview.nogeolocation').hide();
		$('ul.thumbview').show();
	},
	
	/**
	 * render
	 * 
	 * @param {Array} items
	 */
	render: function (items) {
		var that = this;
		var webcamList = new at.asfinag.unterwegs.WebcamList({});
		that.items = items;

		var liCounter = 0; 	// just a helper variable for counting the additional li elements (the section headers) we are adding to the nearby list, so that later in the code we fetch the right element by using the jquery selector eq to append the section headers at the correct index
        
		/**
		 * addSectionHeaderToNearbyList
		 * 
		 * @param {String} withinMaxDistance
		 * @param {int} nextIndex
		 * @param {Boolean} thumbView
		 */
        function addSectionHeaderToNearbyList(withinMaxDistance, nextIndex, thumbView) {
        	
        	var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + withinMaxDistance + ' km';
			if(thumbView){
				var currentListElement = $('ul.thumbview li.webcams:eq(' + nextIndex + ')');
				currentListElement.before('<li class="webcams thumbview header"><h2>' + sectionHeaderTitle + '</h2></li>');				
			} else {
				var currentListElement = $('ul.listview.items li.webcams:eq(' + nextIndex + ')');
				currentListElement.before('<li class="webcams header"><h2>' + sectionHeaderTitle + '</h2></li>');
			}
			liCounter++;
        }
        
        /**
         * addProvinceSectionHeaders
         * 
         * @param {Array} items
         * @param {Boolean} thumbView
         */
        function addProvinceSectionHeaders(items, thumbView){
            var currentAutobahnTitle = "";

            for(var i in items) {
            	
            	if (i == 0) {
            		// adding the top section item into our table:
            		var currentAutobahnTitle = items[i].autobahn;
            		if(thumbView){
            			var currentListElement = $('ul.thumbview li.webcams[data-id="' + items[i].name + '"]');
            			currentListElement.before('<li class="webcams thumbview header '+items[i].titel+' '+ i +'"><h2>' + currentAutobahnTitle + '</h2></li>');
            		} else {
            			var currentListElement = $('ul.listview.items li.webcams[data-id="' + items[i].name + '"]');
            			currentListElement.before('<li class="webcams header '+items[i].titel+' '+ i +'"><h2>' + currentAutobahnTitle + '</h2></li>');
            		}

    				
    				
    				//set first element for sticky divider
    				if($('h2#sticky_headline').length > 0){
    					if($("h2#sticky_headline").text() == ""){
    						$("h2#sticky_headline").text(currentAutobahnTitle);
    					}
    					$('div#sticky_wrapper').show();
    				}
            	}
            	
            	
            	if (i < (items.length-1)) {
            			
            		currentAutobahnTitle = items[i].titel;
            		
            		var nextIndex = parseInt(i) + 1;
            		var nextAutobahnTitle = items[nextIndex].titel;
            		
            		if (nextAutobahnTitle.length > 0) {
            			
            			if ( currentAutobahnTitle != nextAutobahnTitle) {
            				var nextAutobahnTitle = items[nextIndex].autobahn;
            				if(thumbView){
            					var currentListElement = $('ul.thumbview li.webcams[data-id="' + items[i].name + '"]');
                				currentListElement.after('<li class="webcams thumbview header '+items[nextIndex].titel+'"><h2>' + nextAutobahnTitle + '</h2></li>');
            				} else {
            					var currentListElement = $('ul.listview.items li.webcams[data-id="' + items[i].name + '"]');
                				currentListElement.after('<li class="webcams header '+items[nextIndex].titel+'"><h2>' + nextAutobahnTitle + '</h2></li>');
            				}
            			}
            		}
            	}
			}        	
        }
        
        /**
         * addGeoLocationSectionHeaders
         * 
         * @param {Array} items
         * @param {Boolean} thumbView
         */
        function addGeoLocationSectionHeaders(items, thumbView){
        	var withinMaxDistance = '5';
            var distance_out = '0 - 5';
        	
        	for(var i in items) {
            	
        		var myDistance = parseFloat(items[i].distance);
        		
            	if (i == 0) {
            		if (myDistance > 5) {
            			withinMaxDistance = '10';
                        distance_out = '5 - 10';
            		}
            		
            		if (myDistance > 10) {
            			withinMaxDistance = '20';
                        distance_out = '10 - 20';
            		}
            		
            		if (myDistance > 20) {
            			withinMaxDistance = '50';
                        distance_out = '20 - 50';
            		}
            		
            		if (myDistance > 50) {
            			withinMaxDistance = 'mehr als 50';
            		}
            		
            		// adding the top section item into our table:
            		
            		var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km';
            		if (that.controller.path == "/webcams/geolocation") {
	            		if(thumbView){
	            			var theList = $('ul.thumbview');
	            			theList.prepend('<li class="webcams thumbview header"><h2>' + sectionHeaderTitle + '</h2></li>');
	            		} else {
	            			var theList = $('ul.listview.items');
	            			theList.prepend('<li class="webcams header"><h2>' + sectionHeaderTitle + '</h2></li>');
	            		}
	            		if($('h2#sticky_headline').length > 0){
        					$("h2#sticky_headline").text(sectionHeaderTitle);
        					$('div#sticky_wrapper').show();
        				}
            		}
    				liCounter++;
            	
            	} else {
            		
            		var nextIndex = parseInt(i) + liCounter;	// since we added new li elements the eq below is a bit tricky meaning that we have to add +1 here...
            		
            		if (myDistance > 5 && withinMaxDistance <= 5) {
            			withinMaxDistance = '10';
                        distance_out = '5 - 10';
            			addSectionHeaderToNearbyList(distance_out, nextIndex, thumbView);
            		}
            		
            		if (myDistance > 10 && withinMaxDistance <= 10) {
            			withinMaxDistance = '20';
                        distance_out = '10 - 20';
            			addSectionHeaderToNearbyList(distance_out, nextIndex, thumbView);
            		}
            		
            		if (myDistance > 20 && withinMaxDistance <= 20) {
            			withinMaxDistance = '50';
                        distance_out = '20 - 50';
            			addSectionHeaderToNearbyList(distance_out, nextIndex, thumbView);
            		}
            		
            		if (myDistance > 50 && withinMaxDistance <= 50) {
            			withinMaxDistance = myDistance;
            			addSectionHeaderToNearbyList(withinMaxDistance, nextIndex, thumbView);
            		}
            	}
        	}
        }
        
        if(that.controller.page == 'list') {
        	// filter items that have the same km
			function getFilteredItems (items) {
				var result = [];
				
				if (items.length < 2) {
					// not enough items to filter
					return items;
				}
				
				for (var i in items) {
					if (i == 0) {
						result.push(items[i]);
						continue;
					}
					//PVIS-1533
					if (items[i-2] != undefined && items[i-2].km == items[i].km) {
						var lastItem = result[(result.length-1)];
						lastItem.blickrichtung3 = items[i].blickrichtung;	// to be able to show the 3rd blickrichtung we have to add a field blickrichtung3 which we use in our view
						continue;
					} else if (items[i-1].km == items[i].km) {
						var lastItem = result[(result.length-1)];
						lastItem.blickrichtung2 = items[i].blickrichtung;	// to be able to show the 2nd blickrichtung we have to add a field blickrichtung2 which we use in our view
						continue;
					} else {
						result.push(items[i]);
					}
				}
				
				return result;
			}
			
			var itemsToRender = undefined;
			
			if (that.controller.path == "/webcams/geolocation") {
				itemsToRender = items;
			} else {
				itemsToRender = getFilteredItems(items);
			}
			
        	
        	// rendering list-items for 'Liste' ('Liste'-tab)
            webcamList.renderList(
                $('ul.listview.items'),
                itemsToRender,
                that.subapp.persistence.meldungen,
                application.config.i18n,
                application.config.language,                            
                that.controller.path,
                at.asfinag.unterwegs.WebcamList.VIEW_SIMPLE
            );
            
            $('ul.thumbview').html('');
            that.showList();
       
            // In bundesland-tab we add sections in our list, segmented into different "Autobahnen"
            if (that.controller.path == "/webcams/bundesland") {
            	addProvinceSectionHeaders(itemsToRender, false);
            } else if (that.controller.path == "/webcams/geolocation") { 
            	// adding section headers to our nearby/geolocation list
            	addGeoLocationSectionHeaders(itemsToRender, false);
            }
        } else {
        	// rendering thumbnails for 'Vorschau' ('Vorschau'-tab):
            webcamList.renderList(
            	$('ul.thumbview'),
                items,
                that.subapp.persistence.meldungen,
                application.config.i18n,
                application.config.language,                            
                that.controller.path,
                at.asfinag.unterwegs.WebcamList.VIEW_THUMBS
            );
            
        	if(application.getNetworkState() == CONNECTION_NONE) {
        		// setting all images to placeholder-image to indicate missing internet-connection
        		if ($('ul.thumbview img').length != 0) {            			
        			$('ul.thumbview img').attr('src', 'css/images/webcams/webcampic_offline_' + application.config.language + '.png');                	
        		}
        	}
        	
            $('ul.listview.items').html('');
            that.showThumbs();
            
            // In bundesland-tab we add sections in our list, segmented into different "Autobahnen"
            if (that.controller.path == "/webcams/bundesland") {
            	addProvinceSectionHeaders(items, true);
            } else if (that.controller.path == "/webcams/geolocation") { 
            	// adding section headers to our nearby/geolocation list
            	addGeoLocationSectionHeaders(items, true);
            }
        }
        application.refreshPage();
    },
    
   /**
    * initializeOnShow - this method initializes the child-classes onShow method
    */
	initializeOnShow : function() {
		var that = this;
		
		$('.footer ul.tabs li.navigation.thumb').on('click', function() {
			if(that.controller.page != 'thumb') {
               that.controller.page = 'thumb';
               if(that.items != undefined && that.items.length > 0){
            	   that.render(that.items);
               }
            }
        });
		
		$('.footer ul.tabs li.navigation.list').on('click', function() {
            if(that.controller.page != 'list') {
                that.controller.page = 'list';
                if(that.items != undefined && that.items.length > 0){
                	that.render(that.items);
                }
            }
        });

		/* Shortcut (only available for Android Version */
		$('div.header a.imagebutton.pin').on('click', function() {		
			addShortcut(APP_KEY_WEBCAM, location.hash, $(this).data('value'), $(this).data('value'));
        });
		
        if(that.controller.page == undefined) {
            that.controller.page = 'list';                
        } else {
        	$('.footer ul.tabs li.navigation.' + that.controller.page).trigger('click');
        }
		
	}
    
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.WebcamViewer',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 * @param {Boolean} addFavoriteButton
		 */
		init: function(subapp, path, addFavoriteButton) {
			
			this._super(
				path + '/viewer',
				'app/Webcams/view/WebcamViewer.ejs'
			);

			var that = this;
			var application = subapp.application;
			var webcamViewer = subapp.webcamViewer[path];

			/**
			 * onLoad
			 */
			that.onLoad = function() {
	            var d = $.Deferred();
	            var controller = this;

	            var list = webcamViewer.getWebcamObjects();
	            var current;

            	//aktuelle Kamera herausfiltern
	            for(var i in list) {
	                if(list[i].name == controller.parameters.name) {
	                    current = list[i];
	                }
	            }

	            webcamViewer.setCurrentWebcam(controller.parameters.name);	            
                var backlink = path;
                if(path == "/webcams/history"){
                    backlink = "/webcams";
                }
                                
	            application.loadPage(
	                that.path, { 
	                    data: { 
	                        current: current,
	                        //meldungen: subapp.persistence.meldungen, /* PVIS-2424*/
	                        backlink: backlink,
	                        language: application.config.language, 
	                        i18n: application.config.i18n,
	                        addFavoriteButton: addFavoriteButton,
	                        addPINButton: true,
	                        controller: {
	                            path: path
	                        }
	                    }
	                }, 
	                function() { 
	                	d.resolve();
	                }
	            );
	            
	            return d.promise();
	        },
	        
	        
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	// when a list-item is clicked we start to autorefresh the webcam (the webcam picture):
	            webcamViewer.startAutoRefresh();
		    	
	            /* necessary to bind on tap event, otherwise on different devices it will get triggered twice, so the other looking direction is not shown  */
	            $('span.blickrichtung.button').on('tap', function() {
                  if(!$('span.blickrichtung.button').hasClass('disabled')){
	            	window.location = "#"+$(this).data('contrpath')+"/viewer?name="+$(this).data('name');
                  }
	            });
	            $('a.previous.imagebutton').on('tap', function() {
	            	window.location = "#"+$(this).data('contrpath')+"/viewer?name="+$(this).data('name')+"&page-transition=previous";
	            });
	            $('a.next.imagebutton').on('tap', function() {
	            	window.location = "#"+$(this).data('contrpath')+"/viewer?name="+$(this).data('name')+"&page-transition=next";
	            });	            
	            // quo.js library for gesture events - http://quojs.tapquo.com/
	            $$('div.content.webcams.viewer').swipeLeft(function() {
	            	
	            	if ($('div.next a.next').length > 0) {
					   if ($('div.next a.next').data('contrpath') != undefined && $('div.next a.next').data('contrpath') != "") {
						   window.location = "#"+$('div.next a.next').data('contrpath')+"/viewer?name="+$('div.next a.next').data('name')+"&page-transition=next";
					   }
				   }
	            });
	            
	            // quo.js library for gesture events - http://quojs.tapquo.com/
	            $$('div.content.webcams.viewer').swipeRight(function() {
	            	if ($('div.previous a.previous').length > 0) {
					   if ($('div.previous a.previous').data('contrpath') != undefined && $('div.previous a.previous').data('contrpath') != "") {
						   window.location = "#"+$('div.previous a.previous').data('contrpath')+"/viewer?name="+$('div.previous a.previous').data('name')+"&page-transition=previous";
					   }
				   }
	            });
	            
	            $('div.header a.imagebutton.pin').on('click', function() {
	            	var link = "";
	            	if($(this).data('path') == "/webcams/bundesland"){
	            		link = "#/webcams/bundesland?bundesland="+$(this).data('bundesland')+"&activeTab=list&page-transition=next";
	            	} else {
	            		link = "#/webcams/strasse?strasse="+$(this).data('strasse')+"&activeTab=list&page-transition=next";	            		
	            	}
	            	addShortcut(APP_KEY_WEBCAM, link, $(this).data('value'), $(this).data('displayname'));
	            });
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	            webcamViewer.stopAutoRefresh();
	        },
	        
	        /**
	         * onResize
	         * 
	         * @param {ENUM} device_orientation (portrait, landscape)
	         */
			that.onResize = function(device_orientation) {
	        	//fix problem with Galaxy Tab 2 --> device orientation is wrong --> landscape = portrait
	        	if(window.innerWidth < window.innerHeight){
	        		device_orientation = 'portrait';
	        	} else {
	        		device_orientation = 'landscape';
	        	}
	        	//end fix
                if(device_orientation == 'landscape') {
                    application.showFooter(false);
                } else if(device_orientation == 'portrait') {
                    application.showFooter(true);
                }
            }
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.Bundesland',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/bundesland',
				'app/Webcams/view/WebcamsList.ejs'
			);

			var that = this;
			var application = subapp.application;

			subapp.webcamViewer[that.path] = new at.asfinag.unterwegs.WebcamViewer({}, application, subapp.overlay[that.path + '/favorites']);

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							sticky_list: true,
							sticky_thumb: true,
							language: application.config.language,
							title: controller.parameters.bundesland,
							title_optional: '',
							parameters: '?type=bundesland&bundesland=' + encodeURI(controller.parameters.bundesland),
							backtab: 'bundesland',
							addFavoriteButton: true,
							addPINButton: true
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.webcams.ParentController(controller, subapp);
				parentController.initializeOnShow();
				
				if (subapp.webcamViewer[that.path].getWebcamObjects() == undefined || config.launchparamData != "") {
					
					parentController.showLoading();
					
					subapp.persistence.getAllByBundesland({ bundesland: controller.parameters.bundesland }, function(items) {
		                subapp.webcamViewer[that.path].setWebcamObjects(items);
						parentController.render(items);
						if(items.length != undefined){
		                	$("span#num_webcams_in_list").html("("+items.length+")");
		                }
						//forward to next page - in case of shortcut
						if(config.launchparamData != ""){
							var link = '#/webcams/bundesland/viewer?name='+config.launchparamData+'&page-transition=next';
							config.launchparamData = "";
							setTimeout(function(){
								window.location = link;
							},500);	
						}
		            });
					
				} else {
					var itemsToRender = subapp.webcamViewer[that.path].getWebcamObjects();
					parentController.render(itemsToRender);
					if(itemsToRender.length != undefined){
	                	$("span#num_webcams_in_list").html("("+itemsToRender.length+")");
	                }
				}
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
 				$('.footer ul.tabs li.navigation.list').unbind('click');
             	$('.footer ul.tabs li.navigation.thumbs').unbind('click');
             	$('a.back.webcams.list').unbind('click');
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.GeoLocation',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/geolocation',
				'app/Webcams/view/WebcamsList.ejs'
			);

			var that = this;
			var application = subapp.application;

			// load webcamViewer to inject items
			subapp.webcamViewer['/webcams/geolocation'] = new at.asfinag.unterwegs.WebcamViewer({}, application, subapp.overlay[that.path + '/favorites']);
			
			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							sticky_list: true,
							sticky_thumb: true,
							language: application.config.language,
							title: application.config.i18n[application.config.language].webcams.geolocation,
							title_optional: '',
							addFavoriteButton: true
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};

			/**
			 * onShow
			 */
			that.onShow = function() {
				$('div#sticky_wrapper').hide();
	    		var controller = this.controller;
				that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
				
				$('ul.listview.nogeolocation').hide();
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.webcams.ParentController(controller, subapp);	// Master class - helper class
				parentController.showLoading();
				parentController.initializeOnShow();
				
				// get items
				if(use_default_position){
					position = default_position;
                    subapp.persistence.getAllByGeoLocation({ lat: position.coords.latitude, lon: position.coords.longitude, radius: RADIUS_WEBCAMS_GEOLOCATION }, function(items) {
                        if(items.length > 0){
                        	that.items = items;
	                        subapp.webcamViewer['/webcams/geolocation'].setWebcamObjects(items);  
	                        parentController.render(items);		// render items into 
	                        $("span#num_webcams_in_list").html("("+items.length+")");
	                        $('div#sticky_wrapper').show();
                        } else {
                        	$('ul.listview.loading').hide();
                        	$('ul.listview.noentries').show();
                        }
                    });					
				} else {
		            that.geoLocation.getCurrentPosition(
		                function(position) {
		                    subapp.persistence.getAllByGeoLocation({ lat: position.coords.latitude, lon: position.coords.longitude, radius: RADIUS_WEBCAMS_GEOLOCATION }, function(items) {
		                        if(items.length > 0){
		                        	that.items = items;
			                        subapp.webcamViewer['/webcams/geolocation'].setWebcamObjects(items);  
			                        parentController.render(items);		// render items into 
			                        $("span#num_webcams_in_list").html("("+items.length+")");
			                        $('div#sticky_wrapper').show();
		                        } else {
		                        	$('ul.listview.loading').hide();
		                        	$('ul.listview.noentries').show();
		                        }
		                    });
		                },
		                function(error) {
		                	$('ul.listview.nogeolocation').show();
		                	$('ul.listview.loading').hide();
		                },
		                {}
		            );
				}
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
 				$('.footer ul.tabs li.navigation.list').unbind('click');
             	$('.footer ul.tabs li.navigation.thumbs').unbind('click');
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.SelectFavorites',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path + '/favorites',
				'app/Webcams/view/SelectFavorites.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * showLoading
			 */
			function showLoading() {
	    		$('ul.listview.loading').show();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.items').hide();
	    		$('ul.thumbview').hide();
	    	}

			/**
			 * showList
			 */
	    	function showList() {
				$('ul.listview.loading').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.items').show();
	    		$('ul.thumbview').hide();
	    	}

	    	/** 
	    	 * onLoad
	    	 */
			that.onLoad = function() {
	    		var d = $.Deferred();
	    		d.controller = this;
	    		var controller = this;
	    		
	    		// update WebcamsVerkehrsmeldungen in webcam's persistence object
	    		//subapp.persistence.updateWebcamsVerkehrsmeldungen(); /*removed PVIS-2424*/

				var title;
                var data_path = path;
	    		if(controller.parameters != undefined && controller.parameters.strasse != undefined) {
	    			title = controller.parameters.strasse;
	    		} else if(controller.parameters != undefined && controller.parameters.bundesland != undefined) {
	    			title = controller.parameters.bundesland;
	    		} else if(that.path == "/webcams/history/favorites") {
                    title = application.config.i18n[application.config.language].webcams.history;
                    data_path = "/webcams?page-transition=previous";
                } else {
	    		 	title = application.config.i18n[application.config.language].webcams.geolocation;
	    		 }

    			application.loadPage(
                    that.path, { 
                        data: { 
                            title: title,
                            language: application.config.language, 
                            i18n: application.config.i18n,
                            path: data_path
                        }
                    }, function() {
    				    d.resolve();
    	            }
                );
	    		
				return d.promise();
	    	},
	    	
	    	/**
	    	 * onShow
	    	 */
	    	that.onShow = function() {
	    		
	    		var controller = this.controller;

	    		showLoading();
	    		
	    		/**
	    		 * loadItems
	    		 * 
	    		 * @param {Array} items
	    		 */
	    		function loadItems(items) {
	    			var ul = $('ul.listview.items');
	    			ul.html('');

					for(var i in items) {
    					ul.append(new EJS({ url: 'app/Webcams/view/templates/webcamitems_favorites.ejs' }).render({ data: { item: items[i] } }));
    				}

					showList();
    				initEventhandler();

    				application.refreshPage();
	    		}

	    		/**
	    		 * initEventhandler
	    		 */
	    		function initEventhandler() {
		    		$('ul.listview li.webcams.favorite').on('click', function() {   
		    			$(this).toggleClass('toggleon');
		    			var iconContainer = $(this).children('div.icon_section').children('span.icon')
		    			if(iconContainer.hasClass('icon-bookmark-star-favorite')){
		    				iconContainer.removeClass('icon-bookmark-star-favorite');
		    				iconContainer.addClass('icon-bookmark-star-line');
		    			} else {
		    				iconContainer.addClass('icon-bookmark-star-favorite');
		    				iconContainer.removeClass('icon-bookmark-star-line');
		    			}
		    		});
		    		
		    		$('div.footer > ul.buttonlist li.button.add').on('click', function() {
		    			var listDOM = $('ul.listview li.webcams.favorite.toggleon');
		    			var list = [];
		    			for(var i = 0; i < listDOM.length; i++) {
		    				list.push($(listDOM[i]).data('id'));
		    			}
		    			
		    			
		    			if (list.length == 0) {
		    				application.alert(application.config.i18n[application.config.language].webcams.favoriten_hinzufuegen, application.config.i18n[application.config.language].webcams.favorites_no_item_selected, application.config.i18n[application.config.language].ok, "webcams", function() {});
		    			} else {
		    				subapp.overlay[that.path].camlist = list;
		    				subapp.overlay[that.path].setVisible(true);
		    			}
		    		});
		    	}

		    	if(controller.parameters != undefined && controller.parameters.strasse != undefined) {
					subapp.persistence.getAllByStrasse({ strasse: controller.parameters.strasse }, function(items) {
	    				that.items = items;
                        subapp.saveFav_saved_page = "#/webcams/strasse?strasse="+controller.parameters.strasse;
                        subapp.saveFav_canceled_page = "#/webcams/strasse/favorites?type=strasse&strasse="+controller.parameters.strasse;
	    				loadItems(items);
	    			});
				} else if(controller.parameters != undefined && controller.parameters.bundesland != undefined) {
					subapp.persistence.getAllByBundesland({ bundesland: controller.parameters.bundesland }, function(items) {
	    				that.items = items;
                        subapp.saveFav_saved_page = "#/webcams/bundesland?bundesland="+controller.parameters.bundesland;
                        subapp.saveFav_canceled_page = "#/webcams/bundesland/favorites?type=bundesland&bundesland="+controller.parameters.bundesland;
	    				loadItems(items);
	    			});
                } else if(that.path == "/webcams/history/favorites") {
                        that.items = subapp.webcamViewer["/webcams/history"].getWebcamObjects();
                        subapp.saveFav_saved_page = "#/webcams";
                        subapp.saveFav_canceled_page = "#/webcams";
                        loadItems(that.items);
				} else {
					that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
		            that.geoLocation.getCurrentPosition(
		                function(position) {
		                    subapp.persistence.getAllByGeoLocation({ lat: position.coords.latitude, lon: position.coords.longitude, radius: RADIUS_WEBCAMS_GEOLOCATION }, function(items) {
		                        that.items = items;
                                subapp.saveFav_saved_page = "#/webcams/geolocation";
                                subapp.saveFav_canceled_page = "#/webcams/geolocation/favorites";
			                    loadItems(items);
		                    });
		                },
		                function() {},
		                {}
	          	  );  
				}
	    		$('div.footer > ul.buttonlist li.button.cancel').on('click', function() {
                    subapp.saveFav_canceled_page = null;
                    subapp.saveFav_saved_page = null;
                    subapp.selected_cams = null;
                    if(that.path == "/webcams/history/favorites"){
                        window.location = "#/webcams";
                         return;
                    } else {
                        application.back();
                    }
	    		});
	    	},
	    	
	    	/**
	    	 * onDestroy
	    	 */
	    	that.onDestroy = function() {
	    		$('ul.listview li.webcams.favorite').unbind('click');
	    		$('div.footer > ul.buttonlist > li.button.add').unbind('click');
	    		$('div.footer > ul.buttonlist > li.button.cancel').unbind('click');
	    	}
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.Strasse',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/strasse',
				'app/Webcams/view/WebcamsList.ejs'
			);

			var that = this;
			var application = subapp.application;

			subapp.webcamViewer[that.path] = new at.asfinag.unterwegs.WebcamViewer({}, application, subapp.overlay[that.path + '/favorites']);

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							sticky_list: false,
							sticky_thumb: false,
							language: application.config.language,
							title:  controller.parameters.strasse.split(' - ')[0],
							title_optional: ' - ' + controller.parameters.strasse.split(' - ')[1],
							parameters: '?type=strasse&strasse=' + encodeURI(controller.parameters.strasse),
							backtab: 'strasse',
							addFavoriteButton: true,
							addPINButton: true
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				// initialize on Show through parent class:
				var parentController = new at.asfinag.unterwegs.webcams.ParentController(controller, subapp);
				parentController.initializeOnShow();
				
				if (subapp.webcamViewer[that.path].getWebcamObjects() == undefined || config.launchparamData != "") {
					parentController.showLoading();
					subapp.persistence.getAllByStrasse({ strasse: controller.parameters.strasse }, function(items) {
		                subapp.webcamViewer[that.path].setWebcamObjects(items);
						parentController.render(items);
						if(items.length != undefined){
		                	$("span#num_webcams_in_list").html("("+items.length+")");
		                }
						//forward to next page - in case of shortcut
						if(config.launchparamData != ""){
							var link = '#/webcams/strasse/viewer?name='+config.launchparamData+'&page-transition=next';
							config.launchparamData = "";
							setTimeout(function(){
								window.location = link;
							},500);	
						}
		            });
				} else {
					var itemsToRender = subapp.webcamViewer[that.path].getWebcamObjects();
					parentController.render(itemsToRender);
					if(itemsToRender.length != undefined){
	                	$("span#num_webcams_in_list").html("("+itemsToRender.length+")");
	                }
				}
			};
			
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
 				$('.footer ul.tabs li.navigation.list').unbind('click');
             	$('.footer ul.tabs li.navigation.thumbs').unbind('click');
             	$('a.back.webcams.list').unbind('click');
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.Index',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams',
				'app/Webcams/view/Index.ejs'
			);

			var that = this;
			var application = subapp.application;

			var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);

    		/**
    		 * updateGeoLocationButton - update geoLocation button
    		 */
    		function updateGeoLocationButton() {
    			if(use_default_position){
					$('a.imagebutton.location.webcams').removeClass('off').addClass('on');
					$('a.imagebutton.location.webcams').removeClass('icon-line-standort').addClass('icon-filled-standort');
					$('a.imagebutton.location.webcams').removeClass('searching_location');    				
    			} else {
		    		that.geoLocation.getCurrentPosition(
						function(position) {
							if(position != undefined) {
								$('a.imagebutton.location.webcams').removeClass('off').addClass('on');
								$('a.imagebutton.location.webcams').removeClass('icon-line-standort').addClass('icon-filled-standort');
								$('a.imagebutton.location.webcams').removeClass('searching_location');
							}
						},
						function(error) {
							$('a.imagebutton.location.webcams').removeClass('on').addClass('off');
							$('a.imagebutton.location.webcams').removeClass('icon-filled-standort').removeClass('searching_location').addClass('no_location').addClass('icon-line-standort');
						},
						{}
					);
    			}
	    	}
    		
    		/**
    		 * registerGeoLocationButtonEventhandler
    		 */
	    	function registerGeoLocationButtonEventhandler() {
				// geoLocation button handling
	    		$('a.imagebutton.location.webcams').on('click', function() {
	    			if($(this).hasClass('on')) {
	    				// wenn geo location aktiviert oder verfügbar ist
	    				window.location = '#/webcams/geolocation';
	    			} else if($(this).hasClass('off')) {
	    				// wenn geo location deaktiviert
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.no_geolocation,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"webcams"
	    	            		);
	    				} else {
		    				application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.no_geolocation, 'OK', 'webcams', function() {});    				
	    				}
	    			} else {
	    				// wenn geo location status unbekannt
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
								&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    					application.showYesNoDialog(
	    							application.config.i18n[application.config.language].geolocation_head,
	    							application.config.i18n[application.config.language].webcams.no_geolocation,
	    	            			application.config.i18n[application.config.language]['ok'],
	    	            			function() {
	    	            				this.setVisible(false);
	    	            			},
	    	            			application.config.i18n[application.config.language]['jumptogps'],
	    	            			function() {
	    	            				window.PluginNativeCode.jumpToGPSSettings();
	    	            			},
	    	            			"webcams"
	    	            		);
	    				} else {
	    					application.alert(application.config.i18n[application.config.language].geolocation_head, application.config.i18n[application.config.language].webcams.geolocation_tracking, 'OK', 'webcams', function() {});
	    				}
	    			}
	    		});
	    	}

	    	/**
	    	 * loadData
	    	 * 
	    	 * @param {function} callback
	    	 */
	    	function loadData(callback) {
        		subapp.persistence.getAllStrasse({}, function(strassen) {
        			subapp.persistence.getAllBundesland({}, function(bundeslaender) {
        				callback(strassen, bundeslaender);
        			});
        		});
    		};
    		
    		/**
    		 * updateDataUI
    		 * 
    		 * @param {Array} strassen
    		 * @param {Array} bundeslaender
    		 */
    		function updateDataUI(strassen, bundeslaender) {
    			if(strassen.length > 0 && bundeslaender.length > 0) {
    				$('div.page[data-page=strasse] ul.listview.items').html(new EJS({ url: 'app/Webcams/view/templates/strassen.ejs' }).render({ strasse: strassen }));
    				$('div.page[data-page=bundesland] ul.listview.items').html(new EJS({ url: 'app/Webcams/view/templates/bundeslaender.ejs' }).render({ bundesland: bundeslaender }));
    				
    				// getting streets and number of webcams:
        			subapp.persistence.getStrassenNamenAndCountWebcams(function(result) {
        				if (result.length > 0) {
        					for(var i in result) {
        						
        						$('div.page[data-page=strasse] ul.listview.items > li:eq(' + i + ')').append('  	(' + result[i].numberOfWebcams + ')');
        					}
        				}
        				
        				// getting streets and number of webcams:
            			subapp.persistence.getBundeslandNamenAndCountWebcams(function(result) {
            				if (result.length > 0) {
            					for(var i in result) {
            						
            						$('div.page[data-page=bundesland] ul.listview.items > li:eq(' + i + ')').append('  	(' + result[i].numberOfWebcams + ')');
            					}
            				}
            				
            				showList();
            			});
        			});
        			
    				
    			} else {
					showNoEntriesFound();				
    			}
    			
    			application.refreshPage();
    		}

    		/**
    		 * loadStrassen - loads streets out of database
    		 */
	    	function loadStrassen() {
				if(subapp.persistence.status != DATA_STATUS_READY || subapp.streetDao.statusStreets != DATA_STATUS_READY || subapp.provincesDao.statusProvinces != DATA_STATUS_READY) {
	    			that.loadStrassenInterval = window.setInterval(function() {
	    				if(subapp.persistence.status != DATA_STATUS_LOADING && subapp.streetDao.statusStreets != DATA_STATUS_LOADING && subapp.provincesDao.statusProvinces != DATA_STATUS_LOADING) {
	    					window.clearInterval(that.loadStrassenInterval);
		    				loadData(updateDataUI);
	    				}
	    			}, 1000);
	    		} else {
	    			loadData(updateDataUI);
	    		}
	    	}
	    	
	    	/**
	    	 * showLoading
	    	 */
	    	function showLoading() {
	    		$('ul.listview.loading').show();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').hide();
	    		$('ul.listview.items').hide();
	    	}
	    	/** 
	    	 * showList 
	    	 */
	    	function showList() {
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('ul.listview.items').show();	
	    	}
	    	/**
	    	 * showNoEntriesFound
	    	 */
	    	function showNoEntriesFound() {
	    		$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
	    		$('ul.listview.loading').hide();
	    		if(isOffline()){
	    			$('ul.listview.noentries li.noentries.error').html(application.config.i18n[application.config.language].no_internet_connection);
	    		} else {
	    			$('ul.listview.noentries li.noentries.error').html(application.config.i18n[application.config.language].no_entries_found);
	    		}
    			$('ul.listview.noentries').show();
	    		$('ul.listview.items').hide();	
	    	}
	    	/**
	    	 *  resetFavoriteUI - Favorite UI Updates
	    	 */
	    	function resetFavoriteUI() {
	    		$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').hide();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noconnection').hide();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noentries').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_severerror').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_reload').hide();	
				//show
				$('div.page[data-page=favoriten] ul.listview.favorites_loading').show();
    		}
	    	
	    	/**
	    	 * showNoConnectionFavorites
	    	 */
    		function showNoConnectionFavorites() {
    			$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noentries').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_loading').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_severerror').hide();
				//show
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noconnection').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_reload').show();				
    		}
    		
    		/**
    		 * showNoEntriesFavorites
    		 */
    		function showNoEntriesFavorites(){
    			$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noconnection').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_loading').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_severerror').hide();
				//show
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noentries').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_reload').show();
    		}
    		
    		/**
    		 * showServerErrorFavorites
    		 */
    		function showServerErrorFavorites(){
    			$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noconnection').hide();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_noentries').hide();
				$('div.page[data-page=favoriten] ul.listview.favorites_loading').hide();
				//show
				$('div.page[data-page=favoriten] ul.listview.favorites_severerror').show();
	    		$('div.page[data-page=favoriten] ul.listview.favorites_reload').show();    			
    		}
    		
    		/**
    		 * loadFavorites
    		 */
    		function loadFavorites() {
    			resetFavoriteUI();

    			setTimeout(function() {
					var ulFavourites = $('div.page[data-page=favoriten] ul.listview.items');
					
	    			if(isOffline()) {
	    				showNoConnectionFavorites();
	    			} else {
	    				webcamsFavourites.getList(
	    					function(data) {
	    						// success callback
	    						$('div.page[data-page=favoriten] ul.listview.favorites_loading').hide();		// hide loading indicator    						
	    						$('div.page[data-page=favoriten] ul.listview.items li.link').remove();
                                $('div.page[data-page=favoriten] ul.listview.items li.favoriten.header').show();
	    						if(data.length > 0) {
		    						// Creating links for favorites list:
		    						for(var i in data) {
										ulFavourites.append('<li class="link"><a href="#/webcams/favoriten?favname=' + data[i].favname + '">' + data[i].favname + '</a></li>');
		    						}
		    						$('div.page[data-page=favoriten] ul.listview.items').show();
	    						} else {
	    							// no favorites have been safed yet
	    							//ulFavourites.html('<li class="noentries">' + application.config.i18n[application.config.language].webcams.no_favorites_saved + '</li>');
	    							showNoEntriesFavorites();
	    						}
								
	    						application.refreshPage();
	    					},
		    				function() {
	    						// error callback
	    						showServerErrorFavorites();
	    						application.refreshPage();
		    				}
	    				);
                        //==========get TOP Ten List
                        subapp.persistence.getLastAccessedElementsList(function(items){
                           var ulTopTen = $('div.page[data-page=favoriten] ul.listview.topten');
                           ulTopTen.children('li.webcams.link').remove();
                           if(items.length > 0){
                        	   var length_out = "(";
                        	   if(items.length == 10){
                        		   length_out = "(max. ";
                        	   }
                        	   length_out = length_out + items.length + ")";
                        	   $('ul.listview.topten li.favoriten.header > h2 span').text(length_out);
                               $('div.page[data-page=favoriten] ul.listview.topten li.no_access_log_entries').hide();
                               ulTopTen.append(new EJS({
                                                   url: 'app/Webcams/view/templates/webcamitems.ejs'
                                                   }).render({
                                                             data: {
                                                             items: items,
                                                             i18n: this.config.i18n,
                                                             language: this.config.language,
                                                             meldungen: [],
                                                             thumb_resolution: 0,
                                                             controller: {
                                                             path: '/webcams/history'
                                                             }
                                                             }                                        
                                                             }));
                                                                       
                                //add items to webcam object to be able to use webcamViewer
                                
                                subapp.webcamViewer['/webcams/history'].setWebcamObjects(items);                                       
                                                                       
                           } else {
                        	   $('ul.listview.topten li.favoriten.header > h2 span').text("(0)");
                               $('div.page[data-page=favoriten] ul.listview.topten li.no_access_log_entries').show();
                           }
                           ulTopTen.show();
                           application.refreshPage();
                        });
	    			}
	    		}, 500);
    		}
    		
    		/**
    		 * onLoad
    		 */
			that.onLoad = function() {
				var d = $.Deferred();
				!release_flag && console.log("WEBCAM - onLOAD");
				// get GeoLocation
				that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);
				

				// update WebcamsVerkehrsmeldungen in webcam's persistence object
    			//subapp.persistence.updateWebcamsVerkehrsmeldungen(); /*removed PVIS-2424*/

				application.loadPage(
	 				that.path, {
						data: {						
							i18n: application.config.i18n,
							language: application.config.language
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};

			/**
			 * onShow
			 */
			that.onShow = function() {
				showLoading();
				!release_flag && console.log("WEBCAM - onShow");
				// resetting lists - this is done here because using the back button event inside the list to reset the list causes problems with the android hardware device back button whose event we cannot really use inside a view...
				for (var i in subapp.webcamViewer) {
					subapp.webcamViewer[i].setWebcamObjects([]);
				}
				

				$('.footer ul.tabs li.navigation.strasse').on('click', function() {
	    			that.page = 'strasse';
	    		});
	    		
	    		$('.footer ul.tabs li.navigation.bundesland').on('click', function() {
	    			that.page = 'bundesland';
	    		});

	    		$('.footer ul.tabs li.navigation.favoriten').on('click', function() {
	    			that.page = 'favoriten';

	    			loadFavorites();
	    		});
	    		//Refresh Button for Streets
	    		$('li.button.reload').on('click', function() {
	    			showLoading();
	    			subapp.persistence.update();
	    			subapp.provincesDao.update();
	    			subapp.streetDao.update();
	    			loadStrassen();
	    		});
	    		
	    		//Refresh Button for Favorites
	    		$('li.button.favorites_reload').on('click', function() {
	    			$('div.page[data-page=favoriten] ul.listview.favorites_reload').hide(); //hide Reload Button
	    			loadFavorites();
	    		});

                //FAVORITE BUTTON Access Log
                $('span.icon.history.favorite').on('click', function() {
                   //check if history is available
                   if($('ul.listview.topten li.webcams.link').length > 0){
                       window.location = "#/webcams/history/favorites";
                   } else {
                       application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_no_history_avail, application.config.i18n[application.config.language].ok, "webcams", function() {});
                   }
               });
                //DELETE BUTTON Access Log
                $('span.icon.history.delete').on('click', function() {
                	//check if access items are available
                	if($("ul.listview.topten li.webcams.link").length > 0){
	                    application.showYesNoDialog(
	                    application.config.i18n[application.config.language].webcams.delete_history_head,
	                    application.config.i18n[application.config.language].webcams.delete_history,
	                    application.config.i18n[application.config.language]['yes'],
	                    function() {
	                        $('div.page[data-page=favoriten] ul.listview.topten li.multiline.link').remove();
	                        $('div.page[data-page=favoriten] ul.listview.topten li.no_access_log_entries').show();
	                        config.db.clearAccessLog(APP_KEY_WEBCAM);
	                        $('ul.listview.topten li.favoriten.header > h2 span').text("(0)");
	                        this.setVisible(false);
	                    },
	                    application.config.i18n[application.config.language]['no'],
	                    function() {
	                        this.setVisible(false);
	                    },
	                    "webcams"
	                    );
                	}
                });
                if(that.page != undefined) {
	    			$('.footer ul.tabs li.navigation.' + that.page +' span').trigger('click');
	    		}
                if(getURLParameterByName('backtab') == "bundesland" || getURLParameterByName('backtab') == "strasse") {
                	$('.footer ul.tabs li.navigation.' + getURLParameterByName('backtab') +' span').trigger('click');
                }

				updateGeoLocationButton();
				registerGeoLocationButtonEventhandler();

				loadStrassen();
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('.footer ul.tabs li.navigation.strasse').unbind('click');
	    		$('.footer ul.tabs li.navigation.bundesland').unbind('click');
	    		$('.footer ul.tabs li.navigation.favoriten').unbind('click');
	    		$('a.imagebutton.location.webcams').unbind('click');
	    		$('li.button.reload').unbind('click');
                $('li.button.favorites_reload').unbind('click');
                $('span.icon.history.favorite').unbind('click');
                $('span.icon.history.delete').unbind('click');
	    		window.clearInterval(that.loadStrassenInterval);
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.webcams.controller.DeleteFavorites',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/webcams/favorites/deleteCams',
				'app/Webcams/view/DeleteFavorites.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

	    		// update WebcamsVerkehrsmeldungen in webcam's persistence object
	    		//subapp.persistence.updateWebcamsVerkehrsmeldungen(); /*removed PVIS-2424*/
	    		
	    		function onReady() {
	    			subapp.application.loadPage(controller.path, { 
	    				data: { 
	    					items: controller.items, 
	    					meldungen: subapp.persistence.meldungen, 
	    					language: application.config.language, 
	    					i18n: application.config.i18n,
	    					favname: controller.parameters.favname
	    				}
	    			}, function() {
	    				d.resolve();
	    			});
	    		}
	    		
	    		
				var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
	    		webcamsFavourites.getCameraList(controller.parameters.favname,
						function(data) {
							// success --- cams received
							
							var camIdentifiers = [];
	    					
	    					for(var i = 0; i < data.length; i++) {
		    					camIdentifiers.push(data[i].camid);
	    					}
	    					
	    		
				    		subapp.persistence.getWebcamsByNames(camIdentifiers, function(items) {
				    			
				    			controller.items = items;
				    			subapp.favoriteWebcams = items;
				    			
				    			onReady();		// load detail page with cameras
				    		});

						},
	    				function() {
							// TODO: show error message when connection error
							
							/*
							setTimeout(function() {
								ul.find('> li.noConnection').hide();
								ul.find('> li.noFavorites').show();
								ul.find('> li.loading').hide();
								ul.find('> li.empty').hide();
							}, 1000);
							*/
	    				}
					);
	    		
	    		return d.promise();
	    	},
	    	
	    	/**
	    	 * onShow
	    	 */
	    	that.onShow = function() {
	    		var controller = this.controller;
	    		
	    		$('ul.listview li.webcams.favorite').on('click', function() {
	    			$(this).toggleClass('toggleon');
	    			
	    			var iconContainer = $(this).children('div.icon_section').children('span.icon')
	    			if(iconContainer.hasClass('icon-filled-mistkubel')){
	    				iconContainer.removeClass('icon-filled-mistkubel');
	    				iconContainer.addClass('icon-line-mistkubel');
	    			} else {
	    				iconContainer.addClass('icon-filled-mistkubel');
	    				iconContainer.removeClass('icon-line-mistkubel');
	    			}
	    		});

	    		$('div.footer > ul.buttonlist > li.button.cancel').on('click', function() {
	    			application.back();
	    		});
	    		
	    		// ALLE LÖSCHEN BUTTON
	    		$('div.footer > ul.buttonlist li.button.all').on('click', function() {
	    			
					application.showYesNoDialog(
						application.config.i18n[application.config.language].webcams.favorites_delete_head,
            			buildText(application.config.i18n[application.config.language].webcams.delete_all_confirm, [ controller.parameters.favname ]),
            			application.config.i18n[application.config.language]['yes'],
            			function() {
            				// delete all cams:
		    				
		    				var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
		    				webcamsFavourites.deleteList(
		    								
								controller.parameters.favname, // favorite-list-name
								function(data) {	// success-callback
									if(data.status=='ok' && data['affected rows'] > 0) {
										//delete favorites list shortcut
						    			if(window.PluginNativeCode != undefined && window.PluginNativeCode.deleteShortcut != undefined 
												&& typeof window.PluginNativeCode.deleteShortcut === 'function') {
						    				window.PluginNativeCode.deleteShortcut(controller.parameters.favname);
						    			}
										//success message for deletion
			            				application.alert(application.config.i18n[application.config.language].information_head, buildText(application.config.i18n[application.config.language].webcams.delete_all_success, [ controller.parameters.favname ]), application.config.i18n[application.config.language].ok, "webcams", function() {});										
			            				window.location = '#/webcams';
			            			} else {			            				
			            				application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['error_not_deleted'], application.config.i18n[application.config.language].ok, "webcams", function() {});
			            			}
								},
			    				function() {		// errror-callback											
									application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['error_not_deleted'], application.config.i18n[application.config.language].ok, "webcams", function() {});
			    				}
						    );
            				
            			},
            			application.config.i18n[application.config.language]['no'],
            			function() {
            				// nicht löschen
            				this.setVisible(false);
            			},
            			"webcams"
            		);
	    		});
	    		
	    		// LÖSCHEN BUTTON:
	    		$('div.footer > ul.buttonlist li.button.add').on('click', function() {
	    			var totalNumberOfFavoritesListItems = $('ul.listview li.webcams.favorite.remove').length;
	    			var listDOM = $('ul.listview li.webcams.favorite.toggleon');
	    			var list = [];
	    			for(var i = 0; i < listDOM.length; i++) {
	    				list.push($(listDOM[i]).data('id'));
	    				
	    			}
	    			
	    			if(list.length == 0) { // user didn't select any items to delete
	    				application.alert(application.config.i18n[application.config.language].webcams.favorites_delete_head, application.config.i18n[application.config.language].webcams.favorites_no_item_selected, application.config.i18n[application.config.language].ok, "webcams", function() {});
	    			} else {    // user selected some items to delete		
	    				// asking the user, if he really wants to delete the items:
	    				//if number of items to delete is equal to number of items in list, show additional error
	    				var msg_text = buildText(application.config.i18n[application.config.language].webcams.delete_confirm, [ controller.parameters.favname ]);
	    				if (totalNumberOfFavoritesListItems == list.length){
	    					msg_text = msg_text + "<br/><br/>" + buildText(application.config.i18n[application.config.language].webcams.delete_confirm_listempty, [ controller.parameters.favname ]);
	    				}
	    				application.showYesNoDialog(
	    					application.config.i18n[application.config.language].webcams.favorites_delete_head,
	            			msg_text,
	            			application.config.i18n[application.config.language]['yes'],
	            			function() {
	            				// delete cams:
	            				
			    				var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
			    				webcamsFavourites.deleteCamera(
			    								
    								controller.parameters.favname, // favorite-list-name
    								list,//[i],	// camId
    								function(data) {	// success-callback
    									if(data.status=='ok' && data['affected rows'] > 0) {
    										
    										// success deleting
    										
    										var numberOfItemsToDelete = list.length;

				            				// refresh view:
    										if (numberOfItemsToDelete == totalNumberOfFavoritesListItems) {
    											//delete favorites list shortcut
    							    			if(window.PluginNativeCode != undefined && window.PluginNativeCode.deleteShortcut != undefined 
    													&& typeof window.PluginNativeCode.deleteShortcut === 'function') {
    							    				window.PluginNativeCode.deleteShortcut(controller.parameters.favname);
    							    			}
    											application.alert(application.config.i18n[application.config.language].information_head, buildText(application.config.i18n[application.config.language].webcams.delete_all_success, [ controller.parameters.favname ]), application.config.i18n[application.config.language].ok, "webcams", function() {});										
    				            				// all items inside fav-list will be deleted, so the whole list is empty
    											window.location = '#/webcams';
    										} else {
    											// show alert to user that webcams were successfully deleted:
        										application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['webcams_deleteted_successfull_message'], application.config.i18n[application.config.language].ok, "webcams", function() {});
        										
    											// not all items inside the fav-list will be deleted, so we navigate back to the favlist that still contains items
    											window.location = '#/webcams/favoriten?favname=' + controller.parameters.favname;
    										}
				            			} else {
				            				application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['error_not_deleted'], application.config.i18n[application.config.language].ok, "webcams", function() {});
				            			}
									},
				    				function() {		// errror-callback
										application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams['error_not_deleted'], application.config.i18n[application.config.language].ok, "webcams", function() {});
				    				}
							    );
	            			},
	            			application.config.i18n[application.config.language]['no'],
	            			function() {
	            				// nicht löschen
	            				this.setVisible(false);
	            			},
	            			"webcams"
	            		);
	    			}
	    		});    		
	    	},
	    	
	    	/**
	    	 * onDestroy
	    	 */
	    	that.onDestroy = function() {
	    		$('ul.listview li.webcams.favorite').unbind('click');
	    		$('div.footer > ul.buttonlist > li.button.add').unbind('click');
	    		$('div.footer > ul.buttonlist li.button.all').unbind('click');
	    		$('div.footer > ul.buttonlist > li.button.cancel').unbind('click');
	    	}
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.webcams.controller.overlay.AddFavorites',
	{},
	{
		init: function(subapp, path) {
			this._super(
				path + '/favorites', 
				'app/Webcams/view/overlay/AddFavorites.ejs'
			);
			this.data = {};

            var that = this;

            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };

            that.onShow = function() {
            	var that = this;
            	
            	var div = $('.content.overlay.favorites.add');
    			div.find('ul.listview.loading').show();
    			div.find('ul.listview.error_empty').hide();
    			div.find('ul.listview.error_not_successful').hide();
    			div.find('ul.listview.error_no_name').hide();
    			div.find('ul.listview.favnames').hide();
    			
    			
    			function favnameRadioGroupInit() {
    				$('div.content.overlay ul.listview.favnames li.checkbox').unbind('click');
    				
					$('div.content.overlay ul.listview.favnames li.checkbox').on('click', function() {
						$('div.content.overlay ul.listview.favnames li.checkbox').removeClass('active');
        				$(this).addClass('active');
        			});
    			}
    			
    			var webcamsFavourites = new at.asfinag.unterwegs.WebcamsFavourites(application);
    			webcamsFavourites.getList(
					function(data) {
						// success
						var ul = $('div.content.overlay.favorites.add ul.listview.favnames');
						
						setTimeout(function() {
							ul.find('li.placeholder').remove();
							
							if (data.length > 0) {
								for(var i in data) {
									ul.append('<li class="checkbox" data-favname="' + data[i].favname + '" style="clear:both"><div class="favname">' + data[i].favname + '</div><span class="checkbox"></span></li>');
								}
							}
							

                            div.find('ul.listview.favnames').show();

                            $('div.footer.overlay > ul').attr('class', 'buttonlist');
                            $('div.footer.overlay > ul > li.button.add').show();

                            div.find('ul.listview.loading').hide();
							
                            setTimeout(function() {
                            	that.iScroll.refresh();
                            }, 250);

							favnameRadioGroupInit();
						}, 1000);
					},
					function() {
						debug_flag && console.error('AddFavorites: error callback from calling getList in AddFavorites.class.js');

                        setTimeout(function() {
                            div.find('ul.listview.favnames').show();
                            div.find('ul.listview.loading').hide();

                            $('div.footer.overlay > ul').attr('class', 'buttonlist');
                            $('div.footer.overlay > ul > li.button.add').show();
                            
                            setTimeout(function() {
                                that.iScroll.refresh();
                            }, 250);

                            favnameRadioGroupInit();
                        }, 1000);
					}
    			);
    			
    			$('span.legal_notice.checkbox, span.legal_notice_accept').on('click', function(){
    				$('span.legal_notice.checkbox').toggleClass('activated');
    				if($('span.legal_notice.checkbox').hasClass('activated')){
    					$('div.footer.overlay > ul.buttonlist > li.button.add').removeClass('disabled');
    				} else {
    					$('div.footer.overlay > ul.buttonlist > li.button.add').addClass('disabled');
    				}
    			});
    			
    			// send webcams & favoritelist to konto.asfinag.at REST service
    			$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
    				//only allow save if element has no class disabled
    				if($(this).hasClass('disabled')){
    					return;
    				}
    				var ul = $('div.content.overlay.favorites.add ul.listview.favnames');
    				
    				var list = ul.find('li.checkbox.active');
    				var favnamelist = [];
    				
    				for(var i = 0; i < list.length; i++) {
    					var favname = $(list[i]).data('favname');
    					if(favname != undefined) {
    						favnamelist.push(favname);
    					} else {
    						if($(list[i]).find('#eingabe_neu').length > 0 && $.trim($(list[i]).find('#eingabe_neu').val()).length > 0) {
    							
    							var inputFavoritesListName = $('#eingabe_neu');
    							inputFavoritesListName.val(inputFavoritesListName.val().replace(/[^A-Za-z0-9]/g, "")); // replacing special characters
    							if($.trim($(list[i]).find('#eingabe_neu').val()) != ""){
                                    favnamelist.push($.trim($(list[i]).find('#eingabe_neu').val()));
                                }
    						}
    					}
    				}
    				
    				//check if application back is necessary
    				//if favorite is added via viewer window --> no application back
    				var appl_back = true;
    				if($("div.header.webcams.viewer").length == 1 || $("div.header.rasten.viewer").length == 1){
    					appl_back = false;
    				}
    				// send selections
    				if(that.camlist != undefined && that.camlist.length > 0 && favnamelist.length > 0) {        					
    					webcamsFavourites.addFavourite(favnamelist[0], that.camlist, function(data) {
    						if(data != undefined && data[0].status == 'ok' && data[0]['affected rows'] > 0) {
    							var text = "";
    							
    							if(data[0]['affected rows'] == 1){
    								text = buildText(application.config.i18n[application.config.language].webcams.added_webcams_single, [ data[0]['affected rows'], favnamelist[0] ]);
	    							application.alert(application.config.i18n[application.config.language].information_head, text, application.config.i18n[application.config.language].ok, "webcams", function() { 
	    								that.setVisible(false);
	                                    if(appl_back){application.back();}
	                                });
    							} else {
    								text = buildText(application.config.i18n[application.config.language].webcams.added_webcams, [ data[0]['affected rows'], favnamelist[0] ]);
    								application.alert(application.config.i18n[application.config.language].information_head, text, application.config.i18n[application.config.language].ok, "webcams", function() { 
        								that.setVisible(false);
        								if(appl_back){application.back();}
                                    });
    							}
    						} else {
    							//check if error is becaus of duplicate entry
    							if(data[0] != undefined && data[0] != null && data[0][0] != undefined && data[0][0] != null && data[0][0].message.indexOf("Duplicate") >= 0){
    								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_duplicate_could_not_add_webcams, application.config.i18n[application.config.language].ok, "webcams", function() {
    								});
    							} else {
    								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_could_not_add_webcams, application.config.i18n[application.config.language].ok, "webcams", function() {
    								});
    							}
    						}
    					}, function() {
    						application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.error_network_add_webcams, application.config.i18n[application.config.language].ok, "webcams", function() {
                            });
    					});
    				} else {
    					application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].webcams.choose_add_favlist, application.config.i18n[application.config.language].ok, "webcams", function() {
                        });
    				}
    			});
				// checkbox events -> toggle
        		favnameRadioGroupInit();
        		
        		//handle input in form - only allow A-Za-z0-9
        		$("input#eingabe_neu").keyup(function() {
        			$("span#no_special_char").removeClass('warning_msg');
        			var text_old = $(this).val();
        			var text_new = text_old.replace(/[^A-Za-z0-9]/g, "");
        			if(text_old != text_new){
        				$("span#no_special_char").addClass('warning_msg');
        				$(this).val(text_new); // replacing special characters
        			}
        		});

				// Button event handling
	            $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
	            	that.setVisible(false);
	            });

        		$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
					
				});

            };

            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.add').unbind('click');
        		$('div.footer.overlay > ul.buttonlist > li.button.cancel').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Settings.prototype.addOverlays = function(me, application) {
	me.overlay = {
        	'/settings/konto': new at.asfinag.unterwegs.mobile.TouchOverlay(
        		'settings_mein_konto',
        		'app/Settings/view/overlay/overlay_konto.ejs',
        		{ },
        		
        		// onLoad
        		function() {
        			this.data.i18n = application.config.i18n;
        			this.data.language = application.config.language;
        		},
        		
        		// onShow
        		function() {
        			var that = this;
        			
        			var konto = new at.asfinag.unterwegs.Konto(application);
        			that.email = undefined;
        			that.devicename = undefined;
        			
        			that.initInterface = function() {
	        			$('div.content.overlay > div > ul.listview.konto.loading').show();
	        			$('div.content.overlay > div > ul.listview.konto.error').hide();
	        			$('div.content.overlay > div > ul.listview.interface.input').hide();
	        			$('div.content.overlay > div > ul.listview.interface.requested').hide();
	        			$('div.content.overlay > div > ul.listview.interface.confirmed').hide();
	        			
	        			konto.isConfirmed(
	        					
	    					function(status, email, devicename) {
	    						that.email = email;
	    						that.devicename = devicename;
	    						
	    						$('div.content.overlay > div > ul.listview.konto.loading').hide();
	    						$('div.content.overlay > div > ul.listview.konto.error').hide();
	    						
	    						if(status == 1) {
	    							
	    							debug_flag && console.debug('SettingsOverlays: function konto.isConfirmed in SettingsOverlays.js response is Konto wurde aktiviert');
	    							// Konto wurde aktiviert
	    							var ul = $('div.content.overlay > div > ul.listview.interface.confirmed');
	    							ul.find('li.email').html("<b>"+application.config.i18n[application.config.language].settings.email+":</b> "+that.email); //
	    							ul.find('li.devicename').html("<b>"+application.config.i18n[application.config.language].settings.device_name+":</b> "+that.devicename); //
	    							ul.show();
	    						} else if(status == 0) {
	    							// Anfrage wurde noch nicht bestätigt
	    							debug_flag && console.debug('SettingsOverlays: function konto.isConfirmed in SettingsOverlays.js response is Anfrage zur Aktivierung wurde noch nicht bestätitgt E-Mail: '+email);
	    							var ul = $('div.content.overlay > div > ul.listview.interface.requested');
	    							ul.find('li.requested').html("" + application.config.i18n[application.config.language].settings.requested_1 + "");  // in case we re-request an account the html needs to be resetted here to the default value so that in the next line of code we can replace the ###email### entry with the actual email adress that was entered by the user
	    							ul.find('li.requested').html(ul.find('li.requested').html().replace('###EMAIL###', that.email)); // replacing the ###email### entry from the config.js language file with the actual email adress that was entered by the user
	    							ul.show();
	    						} else if(status == -1) {
	    							// Es wurde noch keine Anfrage gestellt
	    							debug_flag && console.debug('SettingsOverlays: function konto.isConfirmed in SettingsOverlays.js response is es wurde noch keine Anfrage gestellt');
	    							$('div.content.overlay > div > ul.listview.interface.input').show();
	    						}
	    						that.refreshOverlay();
//	    						that.iScroll.refresh();
	    					},
	    					function() {
	    					
	    						debug_flag && console.debug('SettingsOverlays: function konto.isConfirmed in SettingsOverlays.js error Callback');
	    						
	    						
	    						$('div.content.overlay > div > ul.listview.konto.loading').hide();
	    						$('div.content.overlay > div > ul.listview.interface.confirmed').hide();
	    						$('div.content.overlay > div > ul.listview.interface.requested').hide();
	    						$('div.content.overlay > div > ul.listview.konto.error').show();
	    						
	    						// that.iScroll.refresh();
                                that.refreshOverlay();
	    					}
	        			);
        			};
        			
        			that.initInterface();
        			
        			
        			
        			// prevent the character blank as user-input on the email-input-field:
        			$('#inputEmail').keydown(function(e) {
        				var ingnore_key_codes = [32];	// ignore character blank which is keycode 32 - check it via alert(e.keyCode)
        				if ($.inArray(e.keyCode, ingnore_key_codes) >= 0){
        					e.preventDefault();
    				   }
        			});
        			
        			
        			function checkEmailInput() {
                          var input = $('#inputEmail');
                          input.val(input.val().replace(/[^-_@.Ã¤Ã¶Ã¼Ã„Ã–ÃœA-Za-z0-9]/g, "")); // replacing special characters
		                  input.val(input.val().replace(/[ ]/g, "")); // replace blanks
		                  input.val(input.val().replace(/^[.]*/g, "")); // replace dot at start
		                    
		                  var pattern = "^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$"; 
		                  var res = input.val().match(pattern);
		                  if(res == null || res === null){
		                	  $('div.content.overlay > div > ul.listview li.konto_error_mail').show();
		                  } else {
		                	  $('div.content.overlay > div > ul.listview li.konto_error_mail').hide();
		                  }
		                  
		                  setTimeout(function() {
                              that.iScroll.refresh();
                          }, 250);
                    }
        			
        			
        			//Bug on SGS 3 --> input is not focused
        			$('input#inputEmail').on('tap', function() {
        				$('#inputEmail').focus();
        			});
        			$('input#inputDevicename').on('tap', function() {
        				$('input#inputDevicename').focus();
        			});        			
        			
        			// EMAIL FIELD -  INPUT VALIDATION:
        			$('input#inputEmail').on('blur', function() {
        				checkEmailInput();
                    });
        			// DEVICE FIELD -  INPUT VALIDATION:
        			$('input#inputDevicename').on('blur', function() {
        				if($(this).val().length == 0){
        					$('li.konto_error_device').show();
        				} else {
        					$('li.konto_error_device').hide();
        				}
                    });                     
                    	
        			// register button event handling
        			$('span.legal_notice.checkbox, span.legal_notice_accept').on('click', function(){
        				$('span.legal_notice.checkbox').toggleClass('activated');
        				if($('span.legal_notice.checkbox').hasClass('activated')){
        					$('ul.listview > li.button.request span.button').removeClass('disabled');
        				} else {
        					$('ul.listview > li.button.request span.button').addClass('disabled');
        				}
        			});
        			
        			$('div.content.overlay > div > ul.listview.interface.input li.button.request').on('click', function() {
        				//only allow save if element has no class disabled
        				if($('ul.listview > li.button.request span.button').hasClass('disabled')){
        					return;
        				}
        				$('li.requested_error_connection').hide();
        				checkEmailInput();
        				var email = $('input#inputEmail').val();
        				var devicename = $('input#inputDevicename').val();
        				var send = true;
        				if(email.length == 0){
        					$('li.konto_error_email').show();
        					send = false;
        				} else {
        					$('li.konto_error_email').hide();
        				}
        				if(devicename.length == 0){
        					$('li.konto_error_device').show();
        					send = false;
        				} else {
        					$('li.konto_error_device').hide();
        				}
        				if(send){
	        				konto.register(
	        						email, 
	        						devicename, 
	        						// success
	        						function() {
	        							that.initInterface();
	        							$('li.requested_error_connection').hide();
	        						},
	        						// error
	        						function() {
	        							$('li.requested_error_connection').show();
	        							that.refreshOverlay();
	        						}
	        				);
        				}
        			});
        			
        			// erneut anfordern
        			$('ul.listview.interface.requested li.button.request_again').on('click', function() {
        				$('div.content.overlay > div > ul.listview.konto.loading').show();
	        			$('div.content.overlay > div > ul.listview.konto.error').hide();
	        			$('div.content.overlay > div > ul.listview.interface.input').hide();
	        			$('div.content.overlay > div > ul.listview.interface.requested').hide();
	        			$('div.content.overlay > div > ul.listview.interface.confirmed').hide();
        				
	        			konto.remove(
        					function(result) {
        						if(result) {
	        						konto.register(
	    								that.email, 
	    								that.devicename, 
	    								// success
	    								function() {
	    									that.initInterface();
	    								},
	    								// error
	    								function() {
	    									$('li.requested_error_connection').show();
	    								}
	        						);
        						} else {
        							debug_flag && console.debug('SettingsOverlays: error deleting account...');
        							that.initInterface();
        						}
        					},
        					function() {
        						that.initInterface();
        					}
        				);
	        			
        			});
        			
        			// entfernen des Kontos
        			$('ul.listview.interface.confirmed li.button.remove, ul.listview.interface.requested li.button.request_anew').on('click', function() {
        				$('div.content.overlay > div > ul.listview.konto.loading').show();
	        			$('div.content.overlay > div > ul.listview.konto.error').hide();
	        			$('div.content.overlay > div > ul.listview.interface.input').hide();
	        			$('div.content.overlay > div > ul.listview.interface.requested').hide();
	        			$('div.content.overlay > div > ul.listview.interface.confirmed').hide();

	        			konto.remove(
        					function(result) {
        						if(result) {
        							that.initInterface();
        						} else {
        							that.initInterface();
        						}
        					},
        					function() {
        						that.initInterface();
        					}
        				);
        			});        			
	        			
	        			$('div.footer.overlay > ul.buttonlistSingle > li.button.close').on('click', function() {
	        				that.setVisible(false);
	        			});
	        			
        		},
        		
        		// onDestroy
        		function() {
        			$('div.content.overlay > div > ul.listview.interface.input > li.button.request').unbind('click');
        			$('div.footer.overlay > div > ul.buttonlist > li.button.close').unbind('click');
        			$('li.button.remove').unbind('click');
        		}
        	)
	};
}


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Settings', {}, {
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {String} title
	 * @param {String} path
	 */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.persistence = undefined;
    },
    
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        var me = this;
        this.persistence = new at.asfinag.unterwegs.persistence.SettingsDAO(this.application);
        //necessary for language updates
        //webcams
        this.webcamPersistence = new at.asfinag.unterwegs.persistence.WebcamsDAO(application);
        this.streetDao = new at.asfinag.unterwegs.persistence.StreetDAO(application);
        this.provincesDao = new at.asfinag.unterwegs.persistence.ProvincesDAO(application);
        //resting places
        this.rastenPersistence = new at.asfinag.unterwegs.persistence.RastenDAO(application);
        this.rastenStellplatzInfos = new at.asfinag.unterwegs.persistence.StellplatzInfosDAO(application);
        
        //this.addController(me, this.application);
        this.application.addController([
                                        new at.asfinag.unterwegs.settings.controller.Index(this, '/settings'),
                        	            new at.asfinag.unterwegs.settings.controller.SettingsDetails(this, '/settings/details'),
                        	        ]);        
        
        this.addOverlays(me, this.application);
    }
});

config.settings = new at.asfinag.unterwegs.Settings('Settings', 'Einstellungen', '/settings');


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.SettingsDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
	},
	/**
	 * update - update the current data
	 * 
	 * @param {Array} apps
	 * @param {Object} callback
	 */
    update: function(apps, callback) {
    	var d = $.Deferred();
    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	
    	db.transaction(insertNewApps, function(e) { console.error('SettingsDAO: insertNewApps - Transaction Error: ' + e.message); return false; }, function(tx) {
    		db.transaction(getAdditionalSettings, function(e) { console.error('SettingsDAO: getAdditionalSettings - Transaction Error: ' + e.message); return false; }, function(tx) {
	    		db.transaction(getLanguage, function(e) { console.error('SettingsDAO: getLanguage - Transaction Error: ' + e.message); return false; }, function(tx) {
	    			d.resolve();
	    		});
    		});
    	});
    	/**
    	 * insertNewApps - inserts new app
    	 * 
    	 * @param {Transaction} tx
    	 */
    	function insertNewApps(tx) {
    		for(var i in apps) {    			
    			doUpdate(tx, apps[i]);    			
    		}
    	}
    	
    	/**
    	 * getAdditionalSettings - loads additional settings out of the database into the subapp.settingvalues variable
    	 * if there is no data stored for specific value, the default value is used
    	 * 
    	 * @param {Transaction} tx
    	 * @returns {Boolean}
    	 */
    	function getAdditionalSettings(tx) {
    		var sql = 'SELECT * FROM settings_additional';
    		var loaded_settings = {};
    		tx.executeSql(sql, [], function(tx, result) {
    			for(var i = 0; i < result.rows.length; i++){
    				var act_item = result.rows.item(i);
    				loaded_settings[act_item.setKey] = act_item.setValue;
    			}
    			//save settings for subapp
    			for(var i in apps) {
    				app = apps[i];
    				if(app.settingsvalues.length > 0){
    					for(var j = 0; j < app.settingsvalues.length; j++){
    						var act_setting = app.settingsvalues[j];
    						if(loaded_settings[act_setting.db_key] == undefined){
    							act_setting.act_value = act_setting.def_value;
    							application.config.settings.persistence.setAdditionalSetting(act_setting.db_key, act_setting.act_value, '', '', function(status){})
    						} else {
    							act_setting.act_value = loaded_settings[act_setting.db_key];
    						}
    						//special enhancement for setting main Menu Text
    						//======== Rasten Enhancement =========/
	    					if(act_setting.db_key == "ra_dynlkw") {
	    						if(act_setting.act_value == CONST_DEACTIVATE){
	    							application.config.i18n["de-AT"].app.Rasten = getPropertyValue(application.config.i18n["de-AT"], "rasten.settings_dynamic_lkw.rasten_deactivated");
	    							application.config.i18n["en-US"].app.Rasten = getPropertyValue(application.config.i18n["en-US"], "rasten.settings_dynamic_lkw.rasten_deactivated");
	    						} else {
	    							application.config.i18n["de-AT"].app.Rasten = getPropertyValue(application.config.i18n["de-AT"], "rasten.settings_dynamic_lkw.rasten_activated");
		    						application.config.i18n["en-US"].app.Rasten = getPropertyValue(application.config.i18n["en-US"], "rasten.settings_dynamic_lkw.rasten_activated");
	    						}
	    					}
	    					//======== Rasten Enhancement =========/
    					}
    				}
        			//doUpdate(tx, apps[i]);    			
        		}
    			
    			return false;
    		});
    		/*for(var i in apps) {    			
    			//doUpdate(tx, apps[i]);    			
    		}*/
    		return false;
    	}
    	
    	/**
    	 * doUpdate - adds App to Settings table
    	 * 
    	 * @param {Transaction} tx
    	 * @param {Object} app
    	 */
    	function doUpdate(tx, app) {
    		var sql = 'SELECT * FROM settings_apps WHERE app LIKE ?';
			
			tx.executeSql(sql, [app.title], function(tx, result) {
    			if(result.rows.length == 1) {
    				app.active = result.rows.item(0).active;
    			} else {
    				var active = 1;
    				var sql = 'INSERT INTO settings_apps(app, active) VALUES(?, ?)';
    				if(app.title == "Kompagnon"){
    					active = 0;
    				}
    				tx.executeSql(sql, [app.title, active], function(tx, result) {
    					app.active = active;
    				});
    			}
    			return false;
			});
    	}
    	
    	/**
    	 * getLanguage - loads current language of app
    	 * 
    	 * @param {Transaction} tx
    	 */
    	function getLanguage(tx) {
    		var sql = 'SELECT language FROM settings_language LIMIT 1';
    		
    		tx.executeSql(sql, [], function(tx, result) {
    			if(result.rows.length == 1) {
    				config.language = result.rows.item(0).language;
    			}
    			
    			return false;
    		});
    	}
    	
    	return d.promise();
    },
	
    /**
     * removeApp - remove app with ID @appId from settings_apps table
     * 
     * @param appId
     * @param {function} callback
     */
	removeApp: function(appId, callback) {
		var db = this.application.config.db.db;
		var remove = function(tx) {
			var sql = 'UPDATE settings_apps SET active = 0 WHERE app LIKE ?';
			tx.executeSql(sql, [appId]);
		}
		
		db.transaction(remove, function(e) { console.error('SettingsDAO: removeApp - Transaction Error : ' + e.message); return false; }, function(tx) {
			callback();
		});
	},
	/**
     * addApp - add app with ID @appId to settings_apps table
     * 
     * @param appId
     * @param {function} callback
     */
	addApp: function(appId, callback) {
		var db = this.application.config.db.db;
		var remove = function(tx) {
			var sql = 'UPDATE settings_apps SET active = 1 WHERE app LIKE ?';
			tx.executeSql(sql, [appId]);
		}
		
		db.transaction(remove, function(e) { console.error('SettingsDAO: addApp - Transaction Error : ' + e.message); return false; }, function(tx) {
			callback();
		});
	},
	/**
	 * setLanguage - stores language in settings_language table
	 * 
	 * @param {ENUM} language (de-AT, en-US)
	 */
	setLanguage: function(language, callback) {
		var db = this.application.config.db.db;
		
		var set = function(tx) {
			var sql = 'UPDATE settings_language SET language = ?';
			tx.executeSql(sql, [language]);
		}
		
		db.transaction(set, function(e) { console.error('SettingsDAO: setLanguage - Transaction Error : ' + e.message); return false; }, function(tx) {
			if(callback != undefined && typeof(callback) == 'function') {
				callback();
			}
		});
	},
	
	/**
	 * setAdditionalSetting - store additional info
	 * 
	 * stores additional settings to database
	 * 
	 * @param {String} key	database key to store values into
	 * @param {String} value
	 * @param {String} value1
	 * @param {String} value2
	 * @param {function} callback callback function with status parameter
	 */
	setAdditionalSetting: function(key, value, value1, value2, callback){
		var db = this.application.config.db.db;
		
		var set = function(tx) {
			var sql = 'INSERT OR REPLACE INTO settings_additional (setKey, setValue, setValue1, setValue2) VALUES (?,?,?,?)';
			tx.executeSql(sql, [key, value, value1, value2]);
		}
		
		db.transaction(set, 
			function(e) { 
				console.error('SettingsDAO: setAdditionalSettings - Transaction Error : ' + e.message); 
				if(typeof(callback) == "function") {callback(e.message);}
				return false; 
			}, function(tx) {
				if(typeof(callback) == "function") {callback(true);}
				return true;
			}, 
			function(error) {
				if(typeof(callback) == "function") {callback(error.message);}
				return false;
			}
		);	
	},
	
	setAdditionalSettingDeferred: function(key, value, value1, value2){
		var dfd = $.Deferred();
		this.setAdditionalSetting(key, value, value1, value2, function(data){
			if(data == true){
				dfd.resolve(data);
			} else {
				dfd.reject(data);
			}
		});
		return dfd.promise();
	},	
	
	/**
	 * getAdditionalSetting - loads DB Row out of database
	 * 
	 * @param {String} key DB Key to be loaded
	 * @param {function} callback callback function with db row as parameter
	 */
	getAdditionalSetting: function(key, callback){
		var db = this.application.config.db.db;
		var sql = 'SELECT setValue, setValue1, setValue2 FROM settings_additional WHERE setKey = ? LIMIT 1';
		db.transaction(function(tx) {
			tx.executeSql(sql, [key], function(tx, result) {
				if(result.rows.length == 1) {
					callback(result.rows.item(0));
					return true;
				}
				callback(undefined);
				return true;
			});
		}, 
		function(e) { 
			callback(undefined); 
			return false;
		}
		);
	},
	
	getAdditionalSettingDeferred: function(key){
		var dfd = $.Deferred();
		this.getAdditionalSetting(key, function(data){
			dfd.resolve(data);
		});
		return dfd.promise();
	},
	
	removeAdditionalSetting: function(key){
		var db = this.application.config.db.db;
		
		var sql = 'DELETE FROM settings_additional WHERE setKey = ?';
		db.transaction(function(tx) {
			tx.executeSql(sql, [key], function(tx, result) {
				//console.log(result);
				return true;
			});
		}, 
		function(e) { 
			//console.log("error", e);
			return false;
		}
		);
	},
	
	/** 
	 * getAnonymizedDeviceID - loads the anonymized Device ID
	 * 
	 * this ID has the following requirements
	 *  - it has to be a hash that is created out of the actual date plus a random value
	 *  - the ID has to be renewed every month
	 */
	getAnonymizedDeviceID: function(){
		var dfd = $.Deferred();
		
		var dat			= new Date();
		var act_month 	= dat.getMonth()+"."+dat.getFullYear();
		
		if(application.config.anonymizedDeviceID != undefined && application.config.anonymizedDeviceMonth != undefined && application.config.anonymizedDeviceMonth == act_month){
			//console.log("GET STORED DEVID"+application.config.anonymizedDeviceID);
			dfd.resolve(application.config.anonymizedDeviceID);
		} else {
			$.when(application.config.settings.persistence.getAdditionalSettingDeferred("stat_dat"),application.config.settings.persistence.getAdditionalSettingDeferred("stat_devid"))
			.done(function(stat_dat,stat_devId){
				
				
				if(stat_devId != undefined && stat_dat != undefined && stat_dat.setValue == act_month){
					//use old device id
					var anonymizedDeviceID = stat_devId.setValue;
				} else {
					var anonymizedDeviceID = generateRandomHash();
					//store the deviceid
					application.config.settings.persistence.setAdditionalSetting("stat_dat", act_month);
					application.config.settings.persistence.setAdditionalSetting("stat_devid", anonymizedDeviceID);
				}
				application.config.anonymizedDeviceMonth = act_month;
				application.config.anonymizedDeviceID = anonymizedDeviceID;
				//console.log("GET OTHER DEVID"+application.config.anonymizedDeviceID);
				dfd.resolve(anonymizedDeviceID);
			});
		}
		
		return dfd.promise();
	}
	
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.settings.controller.SettingsDetails',
	{},
	{
		/**
		 * init 
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path,
				'app/Settings/view/SettingsDetails.ejs'
			);

			var that = this;
			var application = subapp.application;
			var page;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
	    		d.controller = this;
	    		d.application = subapp;
	    		var controller = this;
	    		
	    		//get subapps id
	    		
	    		function onReady() {
	    			controller.page = controller.parameters.page
	    			var subappid = getSubappIdByTitle(controller.parameters.settingsid);
	    			var subapp = {};
	    			if(application.subapps[subappid] != undefined){
	    				subapp = application.subapps[subappid];
	    			}
	    			var title = application.config.i18n[config.language].app.Settings;
	    			title = config.i18n[config.language].app[getSubappConfigKeyByTitle(controller.parameters.settingsid)] + " " + title;
	    			application.loadPage(
	    					controller.path,
	    					{ data: {
	    							title: title,
	    							subapp: subapp,
	    							subappid: subappid,
								    config: application.config
	    							}
	    					},
	    				    function() { 
			    				application.refreshPage();
			    				d.resolve();
	    			});
	    		}
	    		
	    		
	    		onReady();
	    		
	    		return d.promise();
	        },
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	
	        	var that = this;
	        	
	        	//register app toggler
	        	$('li.app.checkbox.general_setting').unbind('click');
	        	$('li.app.checkbox.general_setting').on('click', function() {
		    			var li = $(this);
		    			var appId = $(this).data('app');
		    			function done(status){
		    				li.toggleClass('activated');
		    				//disable other elements
		    				$('li.app.checkbox.detail_setting').toggleClass('disabled');
		    				$('li.app.list.detail_setting').toggleClass('disabled');
		    				if(status == CONST_ACTIVATE){
		    					$('li.app.list.detail_setting select.det_sel').prop('disabled', false);
		    				} else {
		    					$('li.app.list.detail_setting select.det_sel').prop('disabled', 'disabled');
		    				}
		    			}
		    			//store db setting
		    			if($(this).hasClass('activated')) {
		    				subapp.persistence.removeApp(appId, function() {
		    					done(CONST_DEACTIVATE);
		    				});
		    			} else {
		    				subapp.persistence.addApp(appId, function() {
		    					done(CONST_ACTIVATE);
		    				});
		    			}
	        	});
	        	
	        	//register relevant click events for checkboxes
	        	$('li.app.checkbox.detail_setting').unbind('click');
	        	$('li.app.checkbox.detail_setting').on('click', function() {
		            // $('li.settings.header.subapp').on()
	        			var li = $(this);
		    			var config_type = $(this).data('setting_key');
		    			var appId = $(this).data('app');
		    			//if setting is disabled --> no further action
		    			
		    			if(!li.hasClass('disabled')){
			    			function done(status){
				    			//check/uncheck icon
				    			li.toggleClass('activated');
				    			//store value in local object
				    			for(var i = 0; i < application.config.subapps[appId].settingsvalues.length; i++){
				    				if(application.config.subapps[appId].settingsvalues[i].db_key == config_type){
				    					application.config.subapps[appId].settingsvalues[i].act_value = status;
				    					return true;
				    				}
				    			}
			    			}
			    			
			    			//store setting in database
			    			if($(this).hasClass('activated')) { //transformation from activated --> deactivated
			    				subapp.persistence.setAdditionalSetting(config_type, CONST_DEACTIVATE, '', '', function(ret) {
			    					done(CONST_DEACTIVATE);
			    				});
			    			} else {							//transformation from deactivated --> activated
			    				subapp.persistence.setAdditionalSetting(config_type, CONST_ACTIVATE, '', '', function(ret) {
			    					done(CONST_ACTIVATE);
			    				});
			    			}
		    			}
	        	});
	        	
	        	//register change event for selects
	        	$('li.app.list.detail_setting select').unbind('change');
	    		$('li.app.list.detail_setting select').on('change', function(event) {
	    			var value = $(this).val();
	    			var config_type = $(this).data('setting_key');
	    			var appId = $(this).data('app');
	    			
	    			function done(){
	    				//store value in local object
		    			for(var i = 0; i < application.config.subapps[appId].settingsvalues.length; i++){
		    				if(application.config.subapps[appId].settingsvalues[i].db_key == config_type){
		    					application.config.subapps[appId].settingsvalues[i].act_value = value;
		    					return true;
		    				}
		    			}
	    			}
	    			
	    			subapp.persistence.setAdditionalSetting(config_type, value, '', '', function(ret) {
    					done();
    				});

	    		});
	        	
	        	setTimeout(function() {
	        		application.refreshPage();
	    		}, 250);
	        	
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	        	$('li.app.checkbox.general_setting').unbind('click');
	        	$('li.app.checkbox.detail_setting').unbind('click');
	        	$('li.app.list.detail_setting select').unbind('change');
	        }
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.settings.controller.Index',
	{},
	{
		/**
		 * init 
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path,
				'app/Settings/view/index.ejs'
			);

			var that = this;
			var application = subapp.application;
			var page;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
	    		var d = $.Deferred();
	    		var controller = this;
	    		
	    		$.when(subapp.persistence.update(application.subapps)).then(
	    			function() {
	    				controller.parameters = controller.parameters || {}; 
	    				controller.parameters.data = { apps: application.subapps, config: application.config };
	    				subapp.application.loadPage(controller.path, { data: { apps: application.subapps, config: application.config } }, function() { d.resolve(); });
	    			}
	    		);
	    		    		
	    		return d.promise();
	        },
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	    		var controller = application.controller.list['/settings'];
		    	
	    		var deviceplatform = 'UNKNOWN DEVICE PLATFORM';
	    		
	    		if (window.device) {
	    			deviceplatform = device.platform;
	    		}
	    		
	    		$('ul.listview.loading').show();
		    	$('ul.listview.settings').hide();
	    		
	    		var appstoreLink = "https://itunes.apple.com/at/app/unterwegs/id453459323?mt=8";
	    		// set link that per default points to android store to the iOS store if iOS was detected:
	    		if (deviceplatform == "iPhone" || deviceplatform == "iOS") {
	    			$('#storelink_1').attr("href", appstoreLink);
	    			$('#storelink_2').attr("href", appstoreLink);
	    		} else {
	    			$('#storelink_1').removeAttr("href");
	    			$('#storelink_2').removeAttr("href");
                    $('#storelink_1, #storelink_2').on('click', function () {
                                                       window.PluginNativeCode.launchMarket();
                                                       });
	    		}
	    	
                
                $('a.back.settings').on('click', function () {
                                        if($("div.content.settings").find("li.app.checkbox.activated").length == 0){
                                        application.alert(application.config.i18n[application.config.language].settings.error_no_subapp_chosen_head, application.config.i18n[application.config.language].settings.error_no_subapp_chosen, 'OK', 'settings', function() {});
                                        }
                                        });
	    		function updateToggler(toggler) {
	    			var ul = toggler.parent().parent();
	    			var flag = ul.find('li.app.checkbox.activated').length > 0 ? true : false;
	    			if(flag == true) {
	    				toggler.addClass('activated');
	    			} else {
	    				toggler.removeClass('activated');
	    			}
	       		}
	    		$('li.app').unbind('click');
	    		var li_app_clicked = false; 
	    		$('li.app').on('click', function() {
//	    			if(li_app_clicked == false) {
	    				li_app_clicked = true;
		    			var appId = $(this).data('app');
		    			var li = $(this);
		    			
		    			function done() {
		    				for(var i in application.subapps) {
		    					if(application.subapps[i].title == appId) {
		    						application.subapps[i].active = li.hasClass('activated');
		    						//if activated --> subapp_active is changing to inactive (0)
		    						if(li.hasClass('activated')){
		    		    				application.subapps[i].subapp_active = 0;
		    						} else {
		    							application.subapps[i].subapp_active = 1;
		    						}
		    						break;
		    					}
		    				}
		    				li.toggleClass('activated');
		    				if(li.parent().find('span.toggler').length > 0) {
		    					updateToggler(li.parent().find('span.toggler'));
		    				}
		    			}
		    			if($(this).hasClass('link') || $(this).hasClass('link_settings')){
		    				window.location = "#/settings/details?settingsid="+appId+"&page-transition=next";
		    			} else {
			    			if($(this).hasClass('activated')) {
			    				subapp.persistence.removeApp(appId, function() {
			    					done();
			    				});
			    			} else {
			    				subapp.persistence.addApp(appId, function() {
			    					done();
			    				});
			    			}
		    			}
//		    			setTimeout(function() {
//		    				li_app_clicked = false;
//		    			}, 500);
//	    			}
//	    			return false;
	    		});
	    		//Language Switcher (only relevant for Android because of Select Bug in Android 2.2 and 2.3.6
	    		$('li#lang_selector').unbind('click');
	    		$('li#lang_selector').on('click', function(event) {
	    			var value = toggleLanguage(application.config.language); //returns changed language
	    			subapp.persistence.setLanguage(value, function() {
	    				application.config.language = value;
	    				//Start Widget - set Language for Widget
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.setLanguageForWidget != undefined && typeof window.PluginNativeCode.setLanguageForWidget === 'function') {
	    					window.PluginNativeCode.setLanguageForWidget(value);
	    				}
	    				//End Widget
	    				controller.parameters = controller.parameters || {}; 
	    				controller.parameters.data = { apps: application.subapps, config: application.config };
	    				application.loadPage(controller.path, controller.parameters, function() { 
	    					controller.onShow(); 
	    					application.mobileTouch.box.scroll.scrollToElement("#language_area");
	    				});    	
	    			});
	    			
	    			//load Webcams and Rasten for other language
	    			subapp.webcamPersistence.update();
	    			subapp.provincesDao.update();
	    			subapp.streetDao.update();
	    			
	    			subapp.rastenPersistence.update();
	    			subapp.rastenStellplatzInfos.update();
	    			
	    			return false;
	    		});
	    		
	    		$('div.dropdown select').unbind('change');
	    		$('div.dropdown select').on('change', function(event) {
	    			var value = $(this).val();
	    			subapp.persistence.setLanguage(value, function() {
	    				application.config.language = value;
	    				//Start Widget - set Language for Widget
	    				if(window.PluginNativeCode != undefined && window.PluginNativeCode.setLanguageForWidget != undefined && typeof window.PluginNativeCode.setLanguageForWidget === 'function') {
	    					window.PluginNativeCode.setLanguageForWidget(value);
	    				}
	    				//End Widget
	    				controller.parameters = controller.parameters || {}; 
	    				controller.parameters.data = { apps: application.subapps, config: application.config };
	    				application.loadPage(controller.path, controller.parameters, function() { 
	    					controller.onShow(); 
	    					application.mobileTouch.box.scroll.scrollToElement("#language_area");
	    				});    	
	    			});    	
	    			return false;
	    		});
	    		
	    		//TODO remove
	    		//TEST TEXT TO SPEECH
	    		/*$('li#text2speech').on('click', function() {
	    			POI2String(P2S_SCENARIO_ASFINAG_DELAY,P2S_TYPE_BEFORE, null);
	    		});
	    		$('li#text2speech1').on('click', function() {
	    			POI2String(P2S_SCENARIO_WEATHER_WARNING,P2S_TYPE_BEFORE, ["Gewitterwarnung"]);
	    		});*/
	    		// Mein Konto
	    		$('li.account').on('click', function() {
	    			subapp.overlay['/settings/konto'].setVisible(true);
	    			return false;
	    		});
	    		
	    		// Legal Notice
	    		$('li.legal_notice_setting').on('click', function() {
	    			application.showLegalNotice(true);
	    		});
	    	
	    		// LKW und PKW Apps Toggle Button initialisieren
	    		var toggleLKW = $('ul li span.settings.toggler.lkw');
	    		var togglePKW = $('ul li span.settings.toggler.pkw');

	            if(toggleLKW.parent().parent().find('li.app.checkbox').length < 2) {
	                $('ul li span.settings.toggler.lkw').hide();
	            }

	            if(togglePKW.parent().parent().find('li.app.checkbox').length < 2) {
	                $('ul li span.settings.toggler.pkw').hide();
	            }

	    		if(toggleLKW.parent().parent().find('li.app.checkbox.activated').length > 0) {
	    			toggleLKW.addClass('activated');
	    		} else {
	    			toggleLKW.removeClass('activated');
	    		}
	    		if(togglePKW.parent().parent().find('li.app.checkbox.activated').length > 0) {
	    			togglePKW.addClass('activated');
	    		} else {
	    			togglePKW.removeClass('activated');
	    		}
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	    		$('div.dropdown select').unbind('change');
	    		$('a.back.settings').unbind('click');
	    		$('li.email').unbind('click');
	    		$('li.app').unbind('click');
	    		$('li.account').unbind('click');
	    		$('li.legal_notice_setting').unbind('click');
	    		$('ul li span.settings.toggler.lkw, ul li span.settings.toggler.pkw').unbind('click');
	    		$('#storelink_1, #storelink_2').unbind('click');	        	
	        }
		}
	}
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Vertriebsstelle', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        
        this.persistence;
        
        
        this.modes = [];
        
        this.vertriebsstellenList = {};
    },
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.VertriebsstellenDAO(application);
        this.application.addController([
            new at.asfinag.unterwegs.vertriebsstelle.controller.Index(this),
            
            new at.asfinag.unterwegs.vertriebsstelle.controller.VertriebsstelleViewer(this, '/vertriebsstelle/gomaut'),
            new at.asfinag.unterwegs.vertriebsstelle.controller.VertriebsstelleViewer(this, '/vertriebsstelle/vignette')
        ]);
    }
    
});

config.subapps.vertriebsstelle= new at.asfinag.unterwegs.Vertriebsstelle('Vertriebsstelle', 'Vertriebsstelle', '/vertriebsstelle');


$.Class('at.asfinag.unterwegs.VertriebsstellenList',
	/* @static */
	{},
	{
		/* @prototype */
		init: function() {
			
			var that = this;
			
			var _list = {
					govertriebsstellen: [],
					vignettenvertriebsstellen: []
			};
			
		
			that.setGoList = function(list) {
				_list.govertriebsstellen = list;
			};
			
			
			that.setVignettenList = function(list) {
				_list.vignettenvertriebsstellen = list;
			};

			that.getList = function() {
				
				if (_list.vignettenvertriebsstellen.length == 0 || _list.govertriebsstellen.length == 0) {
					return undefined;
				} else {
					return _list;
				}
			};
			
		}
	}
);

at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.persistence.VertriebsstellenDAO', {}, {
	/**
	 * init
	 * 
	 * @param {Object} application
	 */
	init: function(application) {
		this.application = application;
	},
	
	/**
	 * update - update the current data
	 * 
	 * @param {Object} callback
	 */
    update: function(callback) {
    	var that = this;
    	this.statusGo = DATA_STATUS_LOADING;
    	this.statusVignetten = DATA_STATUS_LOADING;

    	var db = this.application.config.db.db;
    	var config = this.application.config;
    	var language = config.language;
    	var data = {};
    	
    	var dateFromTimestampVignetten = 0;
    	var dateFromTimestampGo = 0;
    	
    	//LOAD TIMESTAMP from Server
    	var urlTimestampVignetten 	= encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.vignetten_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	var urlTimestampGoMaut 		= encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.go_timestamp+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    	!release_flag && console.debug('VertriebsstellenDAO: load Vignetten Timestamp - URL: '+urlTimestampVignetten);
    	$.ajax({
			url: urlTimestampVignetten,
			cache: false,
			dataType: 'json',
			timeout: 25000,
			success: function(data) {
               if(data != null && data.length > 0){
				datastore_last_changed = data[0].aktualisierung;
				var dateArray = datastore_last_changed.split(' ');
		        var year = dateArray[0].split('-');
		        var time = dateArray[1].split(':');

		        dateFromTimestampVignetten = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
		        db.transaction(checkTimestampVignetten, function(e) { console.error('VertriebsstellenDAO: Vignette - Transaction Error: ' + e.message); }, function(tx) { debug_flag && console.debug('VertriebsstellenDAO: Vignette transaction1 done...'); });
               } else {
                loadDataForVertriebsstellenType('vignetten');
               }
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				loadDataForVertriebsstellenType('vignetten');
			}
    	});
    	
    	
    	!release_flag && console.debug('VertriebsstellenDAO: load Go Timestamp - URL: '+urlTimestampGoMaut);
    	$.ajax({
			url: urlTimestampGoMaut,
			cache: false,
			dataType: 'json',
			timeout: 25000,
			success: function(data) {
              if(data != null && data.length > 0){
				datastore_last_changed = data[0].aktualisierung;
				
				var dateArray = datastore_last_changed.split(' ');
		        var year = dateArray[0].split('-');
		        var time = dateArray[1].split(':');

		        dateFromTimestampGo = new Date(year[0], (parseInt(year[1])-1), year[2], time[0], time[1], time[2]);
		        db.transaction(checkTimestampGoMaut, function(e) { console.error('VertriebsstellenDAO: Go - Transaction Error: ' + e.message); }, function(tx) { debug_flag && console.debug('VertriebsstellenDAO: Go transaction1 done...'); });
               } else {
                loadDataForVertriebsstellenType('go');
               }
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				loadDataForVertriebsstellenType('go');
			}
    	});
    	
    	/**
    	 * loadDataForVertriebsstellenType - loads data for given @vertriebsstellenType from server
    	 * 
    	 * @param {ENUM} vertriebsstellenType (vignetten, go)
    	 * @returns
    	 */
    	function loadDataForVertriebsstellenType(vertriebsstellenType) {
    		var url;
    		var progressBarValue;
    		var progressBarMaxValue = 200;
    		
    		if (vertriebsstellenType == 'vignetten') {
    			progressBarValue = 0;
    			$('.progressbar_label').css('', progressBarValue+'%');
    		}
    		var progressBarDiv = $('#progressbar');
    		var progressBarDivGo = $('#progressbarGo');
    		
    		
    		// Vignetten Progressbar
    		progressBarDiv.progressbar({ disabled: true });
    		progressBarDiv.progressbar({ max: progressBarMaxValue });
    		
    		progressBarDiv.progressbar({
    			  complete: function( event, ui ) {
    				  progressBarValue = (progressBarValue - 20);
    			  }
    		});
    		
    		// Go Progressbar
    		progressBarDivGo.progressbar({ disabled: true });
    		progressBarDivGo.progressbar({ max: progressBarMaxValue });
    		
    		progressBarDivGo.progressbar({
    			  complete: function( event, ui ) {
    				  progressBarValue = (progressBarValue - 20);
    			  }
    		});
    		
    		progressBarDiv.show();
    		progressBarDivGo.show();
    		$('.progressbar_label').show();
    		
    		//LOAD DATA from Server
    		if(vertriebsstellenType == "vignetten"){
    			url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[language].vignetten_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);
    		} else if(vertriebsstellenType == "go"){
    			url = encodeURI(config.serverdata[act_system].ods.url + config.serverdata[act_system].ods.i18n[language].go_daten+'?username=' + config.serverdata[act_system].ods.user + '&password=' + config.serverdata[act_system].ods.password);    			
    		}
    		// AJAX
    		!release_flag && console.debug('VertriebsstellenDAO: load Data '+vertriebsstellenType+' - URL: '+url);
    		$.ajax({
    			url: url,
    			cache: false,
    			dataType: 'json',
    			timeout: 30000,
    			xhr: function()
    			{
    				var xhr = new window.XMLHttpRequest();
    				xhr.addEventListener("progress", function(evt) {
    					
    					if (vertriebsstellenType == 'vignetten') {
    						progressBarValue++;
        					
    						progressBarDiv.progressbar({
        						  value: progressBarValue
        					});
    						
    						progressBarDivGo.progressbar({
      						  value: progressBarValue
    						});
    						
    						var progressLabelMarginLeftValue = progressBarValue*1.48;
    						var progressLabelValue = parseInt(progressBarValue/2);
    						if (progressLabelValue > 100) {
    							progressLabelValue = 100;
    						}
    						
    						$('.progressbar_label').html(progressLabelValue+'%');
    					}
    					
    					
    				}, false);
    				
    				return xhr;
    			},
    			/**
    			 * success - callback of ajax call
    			 * 
    			 * @param {Object} data
    			 */
    			success: function(data) {
    				if(data == null || data.length == 0){
    					if (vertriebsstellenType == "go") {
							that.statusGo = DATA_STATUS_ERROR_WHILE_LOADING;
						} else {
							that.statusVignetten = DATA_STATUS_ERROR_WHILE_LOADING;
						}
    					return false;
    				}
    				
    				if (vertriebsstellenType == 'vignetten') {
    					
    					// set progress bar to 100% - for user experience
    					progressBarDiv.progressbar({
  						  value: progressBarMaxValue
    					});
    					
    					
    					progressBarDivGo.progressbar({
    						  value: progressBarMaxValue
      					});
    					
    					$('.progressbar_label').html('100%');
    					
    					
    					$('.progressbar_label').hide();
    					progressBarDiv.hide();
        				progressBarDiv.progressbar("destroy");
        				progressBarDivGo.hide();
        				progressBarDivGo.progressbar("destroy");
    				}
				
    				if (vertriebsstellenType == "go") {
        				if (dateFromTimestampGo != undefined && dateFromTimestampGo != 0) {
        					data.timestamp = dateFromTimestampGo.getTime();
    					} else {
    						data.timestamp = new Date();
    					}
    				} else {
        				if (dateFromTimestampVignetten != undefined && dateFromTimestampVignetten != 0) {
        					data.timestamp = dateFromTimestampVignetten.getTime();
    					} else {
    						data.timestamp = new Date();
    					}
    				}
				
    				/**
    				 * insertData - inserts Data to database (deletes data and timestamp and adds new data)
    				 * 
    				 * @param {Transaction} tx
    				 */
    				function insertData(tx) {
    					
    					tx.executeSql('DELETE FROM timestamps WHERE data LIKE ?', [vertriebsstellenType + '%'], function (tx, res) {
    						tx.executeSql('INSERT INTO timestamps (data, last_changed) VALUES (?, ?)', [vertriebsstellenType + '_' + language, data.timestamp], function(tx, result) {
    							tx.executeSql('DELETE FROM ' + vertriebsstellenType + '_de_at', [], function (tx, res) {
    								tx.executeSql('DELETE FROM ' + vertriebsstellenType + '_en_us', [], function (tx, res) {
    									var sqlInsertData = 'INSERT OR IGNORE INTO ' + getTablenameForCurrentLanguage(vertriebsstellenType) + ' (ID, NAME, PICTURE_SINGLE, PICTURE_GROUP, ADDRESS, ZIP, CITY, COUNTRY, PHONE, FAX, COMPANY, SHORTNAME, OPENING_HOURS, X_WGS84, Y_WGS84, IMAGE_ID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
    				    	    		
    									var itemCount = 0;
    									
    									for(var i in data) {
    										itemCount++;
    									}
    									
    									var i = 0;
    									
    									/**
    									 * asyncLoop
    									 */
    									function asyncLoop(iterations, func, callback) {
    									    var index = 0;
    									    var done = false;
    									    var loop = {
    									        next: function() {
    									            if (done) {
    									                return;
    									            }

    									            if (index < iterations) {
    									                index++;
    									                func(loop);
    									            } else {
    									                done = true;
    									                callback();
    									            }
    									        }
    									    };
    									    loop.next();
    									    return loop;
    									}
    									
    									/**
    									 * insertDataToDB
    									 */
    									function insertDataToDB(callback) {
    									    var r = data[i];
    									    if (r != undefined) {
    									    	var id_pos = r.ID_POS;
    									    	if(r.ID_POS == undefined || r.ID_POS == null){
    									    		id_pos = "";
    									    	}
    									    	tx.executeSql(sqlInsertData, [r.ID, r.NAME, r.PICTURE_SINGLE, r.PICTURE_GROUP, r.ADDRESS, r.ZIP, r.CITY, r.COUNTRY, r.PHONE, r.FAX, r.COMPANY, r.SHORTNAME, r.OPENING_HOURS, r.X_WGS84, r.Y_WGS84, id_pos ]);
    									    }
    									    
    									    i++;
    									    callback();
    									}
    									
    									var loopLength = 10;
    									/**
    									 * startAnotherLoop
    									 */
    									function startAnotherLoop() {
    										if (i < itemCount) {
    											asyncLoop(loopLength, function(loop) {
    												insertDataToDB(function(result) {

            									        // Okay, for cycle could continue
            									        loop.next();
            									    })},
            									    startAnotherLoop
            									);
    										}
    									}
    									
    									
    									asyncLoop(loopLength, function(loop) {
    										insertDataToDB(function(result) {

    									        // Okay, for cycle could continue
    									        loop.next();
    									    })},
    									    startAnotherLoop
    									);
    								});
        						});
    						});
    					});
    				}
				
    				/**
    				 * errorCB - error callback of transaction
    				 * 
    				 * @param error
    				 * @returns
    				 */
    				function errorCB (error) {

					}
    				/**
    				 * successCB - success callback of transaction
    				 * 
    				 * @returns
    				 */
					function successCB() {
						setTimeout(function() {
							if (vertriebsstellenType == "go") {
								that.statusGo = DATA_STATUS_READY;
							} else {
								that.statusVignetten = DATA_STATUS_READY;
							}							
						}, 250);
					}
					
    				db.transaction(insertData, errorCB, successCB);		// inserting data, errorCB is our error Callback or errorHandler successCB is the successHandler
    			},
    			
    			/**
    			 * error - callback of transaction
    			 * 
    			 * @param XMLHttpRequest
    			 * @param textStatus
    			 * @param errorThrown
    			 */
    			error: function(XMLHttpRequest, textStatus, errorThrown) {
    				if (vertriebsstellenType == "go") {
						that.statusGo = DATA_STATUS_ERROR_WHILE_LOADING;
						//Hide ProgressBar and Display Error
						$('.progressbar_label').hide();
						progressBarDivGo.hide();
	    				progressBarDivGo.progressbar("destroy");
					} else {
						that.statusVignetten = DATA_STATUS_ERROR_WHILE_LOADING;
						//Hide ProgressBar and Display Error
						$('.progressbar_label').hide();
						progressBarDiv.hide();
	    				progressBarDiv.progressbar("destroy");
					}
    			}
    		});	
    	}
    	
    	/**
    	 * checkTimestampVignetten - checks the timestamp of vignetten
    	 * 
    	 * @param {Transaction} tx
    	 * @returns
    	 */
    	function checkTimestampVignetten(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		var vertriebsstellenType = 'vignetten';
    		
    		tx.executeSql(sql, [vertriebsstellenType + '_' + language], function(tx, result) {
    			
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == dateFromTimestampVignetten.getTime()) {
    				// data is up to date
    				that.statusVignetten = DATA_STATUS_READY;
    				
    				if(callback != undefined && typeof(callback) == 'function') {
    					callback();
    				}
    				
    			} else {
    				// load data
    				loadDataForVertriebsstellenType(vertriebsstellenType);
    			}
    			return false;
    		});
    	}
    	
    	/**
    	 * checkTimestampGoMaut - checks the timestamp of go
    	 * 
    	 * @param {Transaction} tx
    	 * @returns
    	 */
    	function checkTimestampGoMaut(tx) {
    		var sql = 'SELECT data, last_changed FROM timestamps WHERE data LIKE ?;';
    		
    		var vertriebsstellenType = 'go';
    		
    		tx.executeSql(sql, [vertriebsstellenType + '_' + language], function(tx, result) {
    			
    			if(result.rows.length == 1 && result.rows.item(0).last_changed == dateFromTimestampGo.getTime()) {
    				// data is up to date
    				that.statusGo = DATA_STATUS_READY;
    				
    				if(callback != undefined && typeof(callback) == 'function') {
    					callback();
    				}
    				
    			} else {
    				// load data
    				loadDataForVertriebsstellenType(vertriebsstellenType);
    			}
    			return false;
    		});
    	}
    },
    
    /**
     * getVertriebsstellenByGeoLocation - loads geolocation vertriebsstellen 
     * 
     * @param {Object} parameters contains geolocation (latitude parameters.lat, longitude parameters.lon, radius parameters.radius)
     * @param {function} callback
     */
    getVertriebsstellenByGeoLocation: function(parameters, callback) {
    	var that = this;
    	var db = that.application.config.db.db;
    	var language = that.application.config.language;
    	
    	var radius = parameters.radius;
    	var lon = parameters.lon;
    	var lat = parameters.lat;
    	var vertriebsstellenType = parameters.vertriebsstellenType;
    	
    	function compare(a,b){
    		return a-b;
    	}
    	
    	db.transaction(function(tx) {
    		var sql = 'SELECT * FROM ' + getTablenameForCurrentLanguage(vertriebsstellenType) + ' ORDER BY NAME';
    		tx.executeSql(sql, [], function(tx, result) {
    			var data = [];
    			var itemsTmp = {};
    			var keys;
    			var items = [];
    			
    			if(result.rows.length > 0) {
    				for(var i = 0; i < result.rows.length; i++) {
						data.push(result.rows.item(i));
					}
    				for(var i = 0; i < data.length; i++) {
    					var distance =
    						(((Math.acos(Math.sin((lat * Math.PI / 180)) * Math.sin((data[i].Y_WGS84 * Math.PI / 180))
    						+ Math.cos((lat * Math.PI / 180)) * Math.cos((data[i].Y_WGS84 * Math.PI / 180))
    						* Math.cos((lon - data[i].X_WGS84) * Math.PI / 180))) * 180 / Math.PI) 
    						* 60 * 1.1515 * 1.609344);

    					// get all items within distance
    					if(distance <= radius) {
    						if(itemsTmp[distance] == undefined) {
    							itemsTmp[distance] = [];    							
    						}
    						
    						data[i].distance = distance;
    						itemsTmp[distance].push(data[i]);
    					}
    				}
    				
    				// sort according to distance:
    				keys = Object.keys(itemsTmp);
    				
    				var arry = [];
    				
    				for(var i in keys) {
    					arry.push(parseFloat(keys[i]));
    				}
    				
    				keys = arry.sort(compare);
    				
    				
    				for(var i in keys) {
    					i = parseInt(i);
    					for(var j in itemsTmp[keys[i]]) {
    						j = parseInt(j);
    						
    						// ONLY 20 ELEMENTS
    						if (i >= 20) {
    							break;
    						}
    						
    						items.push(itemsTmp[keys[i]][j]);
    					}
    				}
    				
    				callback(items);
    			}
    			
    			return false;
    		});
    	});
    }
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.vertriebsstelle.controller.VertriebsstelleViewer',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 * @param {String} path
		 */
		init: function(subapp, path) {
			this._super(
				path + '/viewer',
				'app/Vertriebsstelle/view/VertriebsstelleViewer.ejs'
			);

			var that = this;
			var application = subapp.application;
			var page;

			
			
			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
	    		d.controller = this;
	    		d.application = subapp;
	    		var controller = this;
	    		
	    		function onReady() {
	    			
	    			controller.page = controller.parameters.page
	    			
	    			application.loadPage(
	    					controller.path,
	    					{ data: {
	    							name: controller.parameters.name,
								    address: controller.parameters.address,
								    zip: controller.parameters.zip,
								    city: controller.parameters.city,
								    openinghours: controller.parameters.openinghours,
								    phone: controller.parameters.phone,
								    language: application.config.language,
								    i18n: application.config.i18n
	    							}
	    					},
	    				    function() { 
//			    				application.statistics[controller.path].addDetail('vertriebsstellenname', controller.items[0].name);
			    				application.refreshPage();
			    				d.resolve();
	    			});
	    		}
	    		
	    		
	    		onReady();
	    		
	    		return d.promise();
	        },
	        
	        
	        
	        /**
	         * onShow
	         */
	        that.onShow = function() {
	        	
	        	var that = this;
	        	
	        	//check if image is available, if yes, set instead of placeholder
	        	//http://maps-test.asfinag.at/cache/images?image=GO_837
	        	if(that.controller.parameters.image_id != ""){
	        	var url = config.serverdata[act_system].ods.vertriebsstellen_image_url + that.controller.parameters.image_id;
	        		//$('.image.vertriebsstellen').css("background-image", "url("+url+")");
	        		$('.image.vertriebsstellen').attr("src", url);
	        	} else {
		        	// setup placeholder image dynamically
		        	$('.image.vertriebsstellen').attr("style", "width: 100%;");
		        	if (that.controller.page == "govertriebsstellen") {
		        		// $('.image.vertriebsstellen').css("background-image", "url(css/images/vertriebsstelle/go_default.jpg)");
		        		 $('.image.vertriebsstellen').attr("src", "css/images/vertriebsstelle/go_default.jpg");
		        	} else {
		        		//$('.image.vertriebsstellen').css("background-image", "url(css/images/vertriebsstelle/vignetten_default.jpg)");
		        		$('.image.vertriebsstellen').attr("src", "css/images/vertriebsstelle/vignetten_default.jpg");
		        	}
	        	}
	        	var openingHoursListItem = $('li.vertriebsstellen.openinghours').show();
	        	
	        	if (that.controller.parameters.openinghours != undefined && that.controller.parameters.openinghours != "") {
	        		openingHoursListItem.show();
	        	} else {
	        		openingHoursListItem.hide();
	        	}
	        	
				//dial intent
				$('a[data-telnr]').on('click', function() {
					if(window.PluginNativeCode != undefined && window.PluginNativeCode.openDialIntent != undefined 
							&& typeof window.PluginNativeCode.openDialIntent === 'function') {
	    				window.PluginNativeCode.openDialIntent($(this).data('telnr'));
					}
					return false;
				});	
	        	
	        	setTimeout(function() {
	        		application.refreshPage();
	    		}, 250);
	        	
	        },
	        
	        /**
	         * onDestroy
	         */
	        that.onDestroy = function() {
	        	
	        }
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.vertriebsstelle.controller.Index',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/vertriebsstelle',
				'app/Vertriebsstelle/view/index.ejs'
			);

			var that = this;
			var application = subapp.application;
			
			
			/**
			 * showLoading - shows Loading area
			 */
			function showLoading() {
	    		$('div.page[data-page=favoriten] ul.listview.items').html('');
	    		$('ul.listview.items').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('ul.listview.nolocationfound').hide();
	    		$('ul.listview.gpsbutton').hide();
	    		$('div#sticky_wrapper').hide();
	    		$('ul.listview.loading').show();
	    	}
			
	    	/**
	    	 * showList - shows list and hides loading area
	    	 */
	    	function showList() {
	    		$('div.page[data-page=favoriten] ul.listview.items').html('');
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.no_internet_connection').hide();
	    		$('ul.listview.nolocationfound').hide();
	    		$('ul.listview.gpsbutton').hide();
	    		$('ul.listview.items').show();
	    		$('div#sticky_wrapper').show();
	    		setTimeout(function() {
	                application.refreshPage();
	            }, 500);
	    	}
	    	
	    	/**
	    	 * showNoEntriesFound - shows error message that no items are found
	    	 */
	    	function showNoEntriesFound() {
	    		$('#progressbar').hide();
	    		$('#progressbarGo').hide();
	    		$('.progressbar_label').hide();
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.items').hide();	
	    		$('ul.listview.nolocationfound').hide();
	    		$('ul.listview.gpsbutton').hide();
	    		$('div#sticky_wrapper').hide();
	    		if(isOffline()){
		    		$('ul.listview.noentries').hide();
		    		$('ul.listview.no_internet_connection').show();
		    		$('ul.listview.noentries.reloadbutton').show();
	    		} else {
		    		$('ul.listview.no_internet_connection').hide();
		    		$('ul.listview.noentries').show(); //contains info and refresh button	    			
	    		}
	    	}
	    	
	    	/**
	    	 * showNoLocationFound - shows error message that no location is found
	    	 */
	    	function showNoLocationFound() {
	    		$('div.page[data-page=favoriten] ul.listview.items').html('');
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.noentries').hide();
	    		$('ul.listview.items').hide();	
	    		$('ul.listview.no_internet_connection').hide();
	    		$('div#sticky_wrapper').hide();
	    		//show
	    		$('ul.listview.nolocationfound').show();
	    		//if plugin available, show GPS Button
	    		if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
						&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
	    			$('ul.listview.gpsbutton').show();
	    		}
	    		$('ul.listview.noentries.reloadbutton').show();
	    	}
	    	
	    	/**
	    	 * showNoInternetConnection - shows error message that no internet connection is available
	    	 */
	    	function showNoInternetConnection() {
	    		$('div.page[data-page=favoriten] ul.listview.items').html('');
	    		$('ul.listview.loading').hide();
	    		$('ul.listview.nolocationfound').hide();
	    		$('ul.listview.gpsbutton').hide();
	    		$('ul.listview.items').hide();
	    		$('div#sticky_wrapper').hide();
	    		//show
	    		$('ul.listview.no_internet_connection').show();
	    		$('ul.listview.noentries.reloadbutton').show();
	    	}
	    	
	    	/**
	    	 * processReceivedDataIntoPage - adds data to page
	    	 * 
	    	 * @param {Array} items
	    	 * @param {String} page
	    	 * @param {Object} controller
	    	 */
	    	function processReceivedDataIntoPage(items, page, controller) {
	    		var that = this;
	    		
	    		// data received, lets push it into our page/view
            	that.items = items;
            	
            	if (items.length > 0) {
            		// selecting our listView
                    var listView = $('div.page[data-page=' + page + '] ul.listview.items');
                    
                    // pushing data into our listView
                    listView.html(new EJS({ url: 'app/Vertriebsstelle/view/templates/index_items.ejs' }).render({ items: items, path: controller.path, page: page }));
                    
                    
                    
                    //********************************************************************
                    // ADDING SECTION HEADERS - "IM UMKREIS VON 5KM" etc:
                    //
                    
                    var liCounter = 0; 	// just a helper variable for counting the additional li elements (the section headers) we are adding to the nearby list, so that later in the code we fetch the right element by using the jquery selector eq to append the section headers at the correct index
                    
                    /**
                     * addSectionHeaderToListView adds header to listview
                     * @param {String} withinMaxDistance text that is displayed
                     * @param {int} nextIndex
                     */
                    function addSectionHeaderToListView(withinMaxDistance, nextIndex) {
                    	
                    	var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + withinMaxDistance + ' km';
            			var currentListElement = $('div.page[data-page="' + page + '"] ul.listview.items li:eq(' + nextIndex + ')');
            			currentListElement.before('<li class="header vertriebsstellen"><h2>' + sectionHeaderTitle + '</h2></li>');
            			liCounter++;
                    }
                    
                    
                    
                    var withinMaxDistance = '5';
                    var distance_out = '0 - 5';
                    var nextZIP;
                    
                	
                	for(var i in items) {
                    	
                		var myDistance = parseFloat(items[i].distance);
                		
                    	if (i == 0) {
                    		if (myDistance > 5) {
                    			withinMaxDistance = '10';
                                distance_out = '5 - 10';
                    		}
                    		
                    		if (myDistance > 10) {
                    			withinMaxDistance = '20';
                                distance_out = '10 - 20';
                    		}
                    		
                    		if (myDistance > 20) {
                    			withinMaxDistance = '50';
                                distance_out = '20 - 50';
                    		}
                    		
                    		if (myDistance > 50) {
                    			withinMaxDistance = '100';
                                distance_out = '> 50';
                    		}

                    		// adding the top section item into our table:
                    		var sectionHeaderTitle = application.config.i18n[application.config.language].rasten.im_umkreis_von + ' ' + distance_out + ' km';
            				listView.prepend('<li class="header vertriebsstellen"><h2>' + sectionHeaderTitle + '</h2></li>');
            				liCounter++;
                    		//set first list headline to sticky wrapper - only for vignetten
            				if(page == 'vignettenvertriebsstellen'){
            					$("h2#sticky_headline").text(sectionHeaderTitle);
            					$('div#sticky_wrapper').show();
            				}
                    	} else {
                    		
                    		var nextIndex = parseInt(i) + liCounter;	// since we added new li elements the eq below is a bit tricky meaning that we have to add +1 here...
                    		
                    		var addNewSectionHeader = false;
                    		
                    		if (myDistance > 1 && withinMaxDistance <= 1) {
                    			withinMaxDistance = '5';
                                distance_out = '0 - 5';
                    			addNewSectionHeader = true;
                    		}
                    		
                    		
                    		if (myDistance > 5 && withinMaxDistance <= 5) {
                    			withinMaxDistance = '10';
                                distance_out = '5 - 10';
                    			addNewSectionHeader = true;
                    		}
                    		
                    		if (myDistance > 10 && withinMaxDistance <= 10) {
                    			withinMaxDistance = '20';
                                distance_out = '10 - 20';
                    			addNewSectionHeader = true;
                    		}
                    		
                    		if (myDistance > 20 && withinMaxDistance <= 20) {
                    			withinMaxDistance = '50';
                                distance_out = '20 - 50';
                    			addNewSectionHeader = true;
                    		}
                    		
                    		if (myDistance > 50 && withinMaxDistance <= 50) {
                    			withinMaxDistance = '100';
                                distance_out = '> 50';
                    			addNewSectionHeader = true;
                    		}
                    		
                    		if (addNewSectionHeader) {
                    			
                    			addSectionHeaderToListView(distance_out, nextIndex);
                    		}
                    	}
                	}
                    
                    // showing the listView
                    showList();
            	} else {
            		showNoEntriesFound();
            	}
	    	}
			
			/**
			 * initializeViewWithData
			 * 
			 * @param controller
			 */
    		function initializeViewWithData(controller) {
    			
    			var searchRadius = RADIUS_VERTRIEBSSTELLEN_GEOLOCATION;
    			
    			/**
    			 * loadData - load Data for special location
    			 * 
    			 * @param {Object} position location object
    			 */
    			function loadData (position) {
    				
    				// loading the data with the geolocation position parameters
                    subapp.persistence.getVertriebsstellenByGeoLocation({ lat: position.coords.latitude, lon: position.coords.longitude, radius: searchRadius, vertriebsstellenType: 'go' }, function(items) {
                    	subapp.vertriebsstellenList[controller.path].setGoList(items);
                    	processReceivedDataIntoPage(items, 'govertriebsstellen', controller);
                    });
                    
                    // loading the data with the geolocation position parameters
                    subapp.persistence.getVertriebsstellenByGeoLocation({ lat: position.coords.latitude, lon: position.coords.longitude, radius: searchRadius, vertriebsstellenType: 'vignetten' }, function(items) {
                    	subapp.vertriebsstellenList[controller.path].setVignettenList(items);
                    	processReceivedDataIntoPage(items, 'vignettenvertriebsstellen', controller);
                    });
    			}
    			
    			
    			
    			if (subapp.vertriebsstellenList[controller.path].getList() == undefined) {
    				// get current geolocation position
                    that.geoLocation.getCurrentPosition(
                        function(position) {
                        	if(subapp.persistence.statusGo == DATA_STATUS_LOADING || subapp.persistence.statusVignetten == DATA_STATUS_LOADING) {
                        		that.loadStrassenInterval = window.setInterval(function() {
            	    				if(subapp.persistence.statusGo != DATA_STATUS_LOADING && subapp.persistence.statusVignetten != DATA_STATUS_LOADING ) {
            	    					window.clearInterval(that.loadStrassenInterval);
            	    					if(subapp.persistence.statusGo == DATA_STATUS_ERROR_WHILE_LOADING || subapp.persistence.statusVignetten == DATA_STATUS_ERROR_WHILE_LOADING) {
            	    						showNoEntriesFound();
            	    					} else {
            		    					loadData(position);
            	    					}
            	    				}
            	    			}, 1000);
            	    		} else {
            	    			if(subapp.persistence.statusGo == DATA_STATUS_ERROR_WHILE_LOADING || subapp.persistence.statusVignetten == DATA_STATUS_ERROR_WHILE_LOADING) {
            	    				showNoEntriesFound();
            	    			} else {
            	    				loadData(position);
            	    			}
            	    		}
                        },
                        function() {
                        	if(use_default_position){
                        		loadData(default_position);
                        	} else {
	                        	if(isOffline()) {
	                        		showNoInternetConnection();
	                        	} else {
		                        	showNoLocationFound();	                        	
	                        	}
                        	}
                        },
                        {}
                    );
    			} else {
    				var items = subapp.vertriebsstellenList[controller.path].getList();
    				processReceivedDataIntoPage(items.vignettenvertriebsstellen, 'vignettenvertriebsstellen', controller);
    				processReceivedDataIntoPage(items.govertriebsstellen, 'govertriebsstellen', controller);
    			}
	    	}
    		
    		/**
    		 * onLoad
    		 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				
				if (subapp.vertriebsstellenList[that.path] == undefined) {
					subapp.vertriebsstellenList[that.path] = new at.asfinag.unterwegs.VertriebsstellenList();					
				}
				
				
				// get GeoLocation
				that.geoLocation = new at.asfinag.unterwegs.GeoLocation(application);

				application.loadPage(
	 				that.path, {
						data: {						
							i18n: application.config.i18n,
							language: application.config.language
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				
				var controller = this.controller;
				
				showLoading();
				
				if(application.getNetworkState() == CONNECTION_NONE) {
					showNoInternetConnection();
				} else if (subapp.vertriebsstellenList[controller.path].getList() == undefined) {
					subapp.persistence.update();
				}
				
				$("#progressbar").progressbar({
					  value: false
				});
				
				$("#progressbarGo").progressbar({
					  value: false
				});
				
				
				// ***********************************************************
				// TAB BAR MAGIC
				$('.footer ul.tabs li.navigation').on('click', function() {
					if($(this).data('page') != undefined) {
						controller.page = $(this).data('page');
					}
		        });
				
				$('li.button.reload').on('click', function() {
	    			showLoading();
	    			subapp.persistence.update();
	    			initializeViewWithData(controller);
	    		});
				
				//GPS Location Button
				$('li.button.gpsbutton').on('click', function() {
					if(window.PluginNativeCode != undefined && window.PluginNativeCode.jumpToGPSSettings != undefined 
							&& typeof window.PluginNativeCode.jumpToGPSSettings === 'function') {
						window.PluginNativeCode.jumpToGPSSettings();
					}
	    		});
				
				// BACK BUTTON: setting our model to undefined so that each time the subapp is (re-)started the location will be freshly (re-)fetched
				$('a.back.vertriebsstellen').on('click', function() {
					subapp.vertriebsstellenList[controller.path].setVignettenList([]);
					subapp.vertriebsstellenList[controller.path].setGoList([]);
		        });
				
		        if(controller.page == undefined) {
		        	var dataPageAttributeFromFirstTabbarItem = $('.footer ul.tabs li.navigation:eq(0)').attr('data-page');
		        	
		        	if (dataPageAttributeFromFirstTabbarItem != undefined && dataPageAttributeFromFirstTabbarItem.length > 0) {
		        		controller.page = dataPageAttributeFromFirstTabbarItem;
		        	}
		        } else {
		        	$('.footer ul.tabs li.navigation.' + controller.page).trigger('click');
		        }

				initializeViewWithData(controller);		// loading our data and pushing it into the view that gets initialized with the data
			};
			
			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('.footer ul.tabs li.navigation').unbind('click');
				$('li.button.reload').unbind('click');
				$('a.back.vertriebsstellen').unbind('click');
				window.clearInterval(that.loadStrassenInterval);
			};

		}
	}
);


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Feedback', {}, {
    /**
     * init - initialization of Feedback-Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
	init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        this.modes = [];
    },
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        
        this.application.controller.add('/feedback', '', {
        	onLoad: function() {
        		if(window.PluginNativeCode != undefined && window.PluginNativeCode.sendFeedbackMail != undefined 
						&& typeof window.PluginNativeCode.sendFeedbackMail === 'function') {
    				window.PluginNativeCode.sendFeedbackMail("app@asfinag.at");
    			}
        		window.location.href = '#/';
        	}
        });
    },
    /**
     * open - opens mail program
     */
    open: function() {
    	 //window.location.href = 'mailto:app@asfinag.at';
    	 window.location.href = '#/';
    }
});

config.subapps.feedback = new at.asfinag.unterwegs.Feedback('Feedback', 'Feedback', '/feedback');


$.Class('at.asfinag.at.unterwegs.VideomautOrder', {}, {
	/**
     * init
     * 
     * @param {Object} options
     * @param {Object} config
     */
	init: function(options, config) {
		this.config = config;
		
		// ticket and track
		this.kartenTyp = options.kartenTyp;
		this.streckenId = options.streckenId;
		this.anzahlFahrten = options.anzahlFahrten;
		
		// kfz
		this.kennzeichen = options.kennzeichen;
		this.nationalitaet = (options.nationalitaet != 'andere' ? options.nationalitaet : 'XX');
		
		// creditcard
		this.kreditkarte = options.kreditkarte;
		this.payment = options.payment;
		this.vignetten_barcode = options.vignetten_barcode;
		this.create_profile = options.create_profile;
		this.pan = options.pan;
		this.expiry = options.expiry;
		this.cvc = options.cvc;
		this.pin = options.pin;
		
		// phone and user
		this.email = options.email;
		this.phoneId = options.phoneId;
		
		
		// abo
		this.abo_email = options.abo_email;
		this.abo_pw = options.abo_pw;
	},
	
	/** 
	 * checkParameters - check parameters and return error codes and messages
	 */
	checkParameters: function() {
		var result = {
			result: 'OK'
		};
		
		return result;
	},
	
	/**
	 * order - order ticket
	 * 
	 * @param {function} successCallback
	 * @param {function} errorCallback
	 */
	order: function(successCallback, errorCallback) {
		var that = this;
		
		var parameters = 
			'?streckenId=' + that.streckenId +
			(that.anzahlFahrten != undefined ? '&anzahlFahrten=' + that.anzahlFahrten : '') +
			'&nationalitaet=' + that.nationalitaet +
			'&kennzeichen=' + that.kennzeichen +
			'&email=' + that.email +
			'&kartenTyp=' + that.kartenTyp +
			'&phoneId=' + that.phoneId;
		
		if(that.payment == VIDEOMAUT_DIRECT_PAYMENT) {
			parameters +=
				'&kreditkarte=' + that.kreditkarte +
				'&pan=' + that.pan +
				'&expiry=' +  that.expiry +
				'&cvc=' + that.cvc +
				'&useDirectPayment=true';
			
			// Karte kaufen (und Profil anlegen)
			if(that.create_profile == true) {
				parameters += 
					'&createProfile=true' +
					(that.pin == undefined ? '' : '&pin=' + that.pin);
			}
		}
		else if(that.payment == VIDEOMAUT_PROFILE_PAYMENT) {
			// Karte kaufen (vorhandenes Profil benutzen)
			parameters +=
				'&useProfile=true' + 
				(that.pin == undefined ? '' : '&pin=' + that.pin);
		}
		
		
		
		// Vignetten-Barcode
		if (that.vignetten_barcode != undefined && that.vignetten_barcode.length > 0) {
			
			parameters += '&vignetteBarcode=' + that.vignetten_barcode.substr(0,12);
		}

		
		// setting createAbo if aboEmail and aboPW exist
		if (that.abo_email != undefined && that.abo_email.length > 0 && that.abo_pw != undefined && that.abo_pw.length > 0) {
			
			parameters +='&createAbo=true' + '&aboEmail=' + that.abo_email + '&aboPassword=' + that.abo_pw;
		}
		
		
		//Create URL
		var url = config.serverdata[act_system].videomaut.url + config.serverdata[act_system].videomaut.orderTicket + parameters;
		!release_flag && console.debug('VideomautOrder: order Ticket - URL: '+url);
		if(that.checkParameters().result == 'OK') {
			$.ajax({
				url: url,
				dataType: 'json',
				success: function(data) {
					if(data.success == true) {		// technisch ok d.h. Server ok
						successCallback(data);
					} else {
						errorCallback(data);
					}
				},
				error: function(XMLHttpRequest, textStatus, errorThrown) {
					var data = {
						'error': 'Server nicht erreichbar'
					};
					
					successCallback(data);
				}
			});
		}
	}
});


at.asfinag.unterwegs.SubApp('at.asfinag.unterwegs.Videomaut', {}, {
    /**
     * init - initialization of Subapp
     * 
     * @param {String} id
     * @param {String} title
     * @param {String} path
     */
    init: function(id, title, path) {
        this._super(id, title, path);
        this.me = this;
        this.application = undefined;
        
        this.modes = [ 'PKW' ];
    },
    /**
     * setupApp
     * 
     * @param {Object} application-object
     */
    setupApp: function(application) {
        this.application = application;
        this.persistence = new at.asfinag.unterwegs.persistence.VideomautDAO(application);

        this.application.addController([
            new at.asfinag.unterwegs.videomaut.controller.Index(this),
          //TODO: remove for release 2.6
            /*new at.asfinag.unterwegs.videomaut.controller.TicketDetails(this),
            new at.asfinag.unterwegs.videomaut.controller.TicketDetailsStreet(this),
            new at.asfinag.unterwegs.videomaut.controller.TicketDetailsType(this),
            new at.asfinag.unterwegs.videomaut.controller.PaymentDetails(this),
            new at.asfinag.unterwegs.videomaut.controller.PaymentDetailsSave(this),
            new at.asfinag.unterwegs.videomaut.controller.TicketInfo(this), 
            new at.asfinag.unterwegs.videomaut.controller.ImportTickets(this)*/
          //TODO: remove for release 2.6
        ]);

        this.addOverlays([
            new at.asfinag.unterwegs.videomaut.controller.overlay.Info(this),
            new at.asfinag.unterwegs.videomaut.controller.overlay.BarcodeInfo(this),
            new at.asfinag.unterwegs.videomaut.controller.overlay.Bezahlung(this),
            new at.asfinag.unterwegs.videomaut.controller.overlay.Bestellung(this),
            new at.asfinag.unterwegs.videomaut.controller.overlay.Kartendetails(this),
            new at.asfinag.unterwegs.videomaut.controller.overlay.Abo(this)
        ]);
    }
});

config.subapps.videomaut = new at.asfinag.unterwegs.Videomaut('Videomaut', 'Videomaut', '/videomaut');


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.TicketDetailsType',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/ticketDetailsType',
				'app/Videomaut/view/TicketDetailsType.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				var act_street = null;
				// find relevant street
				if(this.parameters.street > 0){
					subapp.ticket.selStreetId = this.parameters.street;
					for(var i = 0; i < subapp.streets.length; i++){
						if(subapp.streets[i].nummer == this.parameters.street){
							act_street = subapp.streets[i];
							
							act_street.priceJahreskarte = '';
							act_street.priceJahreskarteErm = '';
							act_street.multipleTicketAvailable = false;
							act_street.jkTicketAvailable = false;
							
							if(act_street.tarifJahreskarteInCent > 0){
								act_street.priceJahreskarte 		= act_street.tarifJahreskarteInCent / 100;
							}
							if(act_street.tarifVignettenJahreskarteInCent > 0){
								act_street.priceJahreskarteErm 		= act_street.tarifVignettenJahreskarteInCent / 100;
							}
							
							act_street.singleTicketAvailable = true;
							if(act_street.maxAnzEinzelfahrten > 1){
								act_street.priceDoubleTicket 		= act_street.tarifEinzel * 2;
								act_street.multipleTicketAvailable 	= true;
							}
							if(act_street.jkVerkauf ){
								act_street.jkTicketAvailable 		= true;
							}
							subapp.act_street = act_street;
							break;
						}
					}
				} else {
					//TODO: error handling
				}
				
				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							language: application.config.language,
							ticket: subapp.ticket,
							street: act_street
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				var parentController = new at.asfinag.unterwegs.videomaut.ParentController(controller, subapp);
				
				/**
				 * showAreaForTicketType
				 * 
				 * @param {String} ticket_type
				 */
				function showAreaForTicketType(ticket_type){
					$('li.info_area').hide();
					if(ticket_type == VIDEOMAUT_TICKET_TYPE_SINGLE){
						$('li.info_area.header h2').html(application.config.i18n[application.config.language].videomaut['1Fahrt']);
						$('li.info_area.ticket_text div.text_section').html(application.config.i18n[application.config.language].videomaut.singleTicket_description + subapp.act_street.bezeichnung);
						$('li.field_singleTicket').show();
					} else if(ticket_type == VIDEOMAUT_TICKET_TYPE_DOUBLE){
						$('li.info_area.header h2').html(application.config.i18n[application.config.language].videomaut['2Fahrten']);
						$('li.info_area.ticket_text div.text_section').html(application.config.i18n[application.config.language].videomaut.doubleTicket_description + subapp.act_street.bezeichnung);
						$('li.field_doubleTicket').show();
					} else if(ticket_type == VIDEOMAUT_TICKET_TYPE_ANNUAL_PASS){
						$('li.field_annualPass').show();
						$('li.info_area.header h2').html(application.config.i18n[application.config.language].videomaut['Jahreskarte']);
						//scroll to relevant area
						application.mobileTouch.box.scroll.scrollToElement("li.info_area.header");
					} else if(ticket_type == VIDEOMAUT_TICKET_TYPE_REDUCED_ANNUAL_PASS){
						$('li.field_reducedAnnualPass').show();
						$('li.info_area.header h2').html(application.config.i18n[application.config.language].videomaut['JKermaessigt']);
						//scroll to relevant area
						application.mobileTouch.box.scroll.scrollToElement("li.info_area.header");
					}
				}

				//====scroll keyboard for bottom elements ====
                $('input#vignettenBarcode').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.info_area.header");
                });
				$('input#input_ap_password1').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.input_ap_password1");
                });				
                $('input#input_ap_password2').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.input_ap_password2");
                });
				
				//====toggle ticket type ====
				$('li.ticket_type').on('click', function() {					
					var act_checkbox = $(this).children('div.checkbox');
					var ticket_type = $(this).data('tickettype');
					//remove active class from all tickets
					if(act_checkbox.hasClass('active')){
						act_checkbox.removeClass('active');
						showAreaForTicketType(null);
					} else {
						$('li.ticket_type div.checkbox').removeClass('active');
						act_checkbox.addClass('active');
						showAreaForTicketType(ticket_type);
					}
					
					application.refreshPage();
				});
				
				//====toggle save payment data ====
				$('li.checkbox_annualPass').on('click', function() {
					var checkbox = $('li.checkbox_annualPass div.checkbox');
					
					if (checkbox.hasClass('active') ) {
						checkbox.removeClass('active');
						$('li.annualPassAbo').addClass('disabled');
						$('li.annualPassAbo div.text_section input').attr('disabled', true);
						$('li.input_ap_password1Error').hide();
						$('li.input_ap_password2Error').hide();
						$('li.annual_pass_equalityError').hide();
					} else {
						checkbox.addClass('active');
						$('li.annualPassAbo').removeClass('disabled');
						$('li.annualPassAbo div.text_section input').removeAttr('disabled');
					}
					
					application.refreshPage();
				});
				
				//==== save event ====
				$('div.footer.videomaut ul.tabs li.save').on('click', function() {
					var validation_success = true;
					
					//depending on checkbox different validation
					if($('li.ticket_type_1fahrt div.checkbox').hasClass('active')){
						//no validation for single double ticket
						if(validation_success){
							subapp.ticket.numTickets 	= 1;
							subapp.ticket.ticketType 	= VIDEOMAUT_TYPE_VMK;
							subapp.ticket.typeOfTicket 	= '1Fahrt';
						}
					} else if($('li.ticket_type_2fahrten div.checkbox').hasClass('active')){
						//no validation for single double ticket
						if(validation_success){
							subapp.ticket.numTickets 	= 2;
							subapp.ticket.ticketType 	= VIDEOMAUT_TYPE_VMK;
							subapp.ticket.typeOfTicket 	= '2Fahrten';
						}
					} else if($('li.ticket_type_jahreskarte div.checkbox').hasClass('active')){
						var check_annualPass = validateAnnualPassAboData();
						if(validation_success && !check_annualPass){
							validation_success = false;
						}
						if(validation_success){
							subapp.ticket.numTickets 	= 1;
							subapp.ticket.ticketType 	= VIDEOMAUT_TYPE_YEAR_TICKET;
							subapp.ticket.typeOfTicket 	= 'Jahreskarte';
						}
					} else if($('li.ticket_type_jahreskarte_erm div.checkbox').hasClass('active')){
						
						//check toll sticker number
						var check_toll_sticker = Validator.validateBarcode($('input#vignettenBarcode').val(),true);
						parentController.showErrorMessage(check_toll_sticker, "vignettenBarcode");
						if(!check_toll_sticker.status){
							validation_success = false;
						} else {
							subapp.ticket.vignetten_barcode = check_toll_sticker.value;
						}
						var check_annualPass = validateAnnualPassAboData();
						if(validation_success && !check_annualPass){
							validation_success = false;
						}
						if(validation_success){
							subapp.ticket.numTickets 	= 1;
							subapp.ticket.ticketType 	= VIDEOMAUT_TYPE_YEAR_TICKET;
							subapp.ticket.typeOfTicket 	= 'JKermaessigt';
						}
					}
					application.refreshPage();
					
					if(validation_success){
						subapp.ticket.street = subapp.act_street;
						
						window.location = '#/videomaut/ticketDetails?page-transition=previous';
					}
				});
				
				//==== back event ====
				$('div.footer.videomaut ul.tabs li.back').on('click', function() {
					window.location = '#/videomaut/ticketDetailsStreet?page-transition=previous';
				});	
				
				/**
				 * checks the relevant data of the annual pass data (passwords)
				 */
				function validateAnnualPassAboData(){
					var validation_success = true;
					if($('li.checkbox_annualPass div.checkbox').hasClass('active')){
						var check_pin = Validator.checkPaymentPIN($('input#input_ap_password1').val(),true);
						parentController.showErrorMessage(check_pin, "input_ap_password1");
						if(!check_pin.status){
							validation_success = false;
						}
						
						var check_pin1 = Validator.checkPaymentPIN($('input#input_ap_password2').val(),true);
						parentController.showErrorMessage(check_pin1, "input_ap_password2");
						if(!check_pin1.status){
							validation_success = false;
						}
						
						if(check_pin.status && check_pin1.status){
							var check_equal = Validator.checkEquality($('input#input_ap_password1').val(),$('input#input_ap_password2').val());
							parentController.showErrorMessage(check_equal, "annual_pass_equality");
							if(!check_equal.status){
								validation_success = false;
							} else {
								subapp.ticket.jkAboPW = check_equal.value;
								subapp.ticket.jkUseAbo = true;
							}
						}
					} else {
						subapp.ticket.jkAboPW = "";
						subapp.ticket.jkUseAbo = false;						
					}
					return validation_success;
				}
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('div.footer.videomaut ul.tabs li.save').unbind('click');
				$('div.footer.videomaut ul.tabs li.back').unbind('click');
				$('li.checkbox_annualPass').unbind('click');
				$('li.ticket_type').unbind('click');				
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.TicketInfo',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/ticketInfo',
				'app/Videomaut/view/TicketInfo.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				/**
				 * loadTicketInfo - get Ticket Info from server
				 * 
				 * @param {function} callback
				 */
				controller.loadSingleTicket = function(barcode, callback) {
					if(barcode != null){
						subapp.persistence.getTicket(barcode, function(ticket){
							callback(ticket);
						});
					} else {
						callback(null);
					}
				}

				/**
				 * lastTicketLoaded - callback for loading last ticket
				 * 
				 * @param {Object} retval Object containing the last ticket
				 */
				function ticketInfoLoaded(ticket) {
					error = false;
					if(ticket == null){
						error = true;
					}
					application.loadPage(
		 				that.path, {
							data: {						
								i18n: application.config.i18n,
								language: application.config.language,
								ticket: ticket,
								error: error
							}
						},
						function() {    			
							d.resolve();
						}
					);
				}
				
				this.loadSingleTicket(controller.parameters.barcode, ticketInfoLoaded);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				console.log("TicketInfo - onShow");
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {

			};
		}
	}
);


$.Class('at.asfinag.unterwegs.videomaut.ParentController', {}, {
	/**
	 * init
	 * 
	 * @param {Object} controller
	 * @param {Object} subapp
	 */	
	init: function(controller, subapp) {
    	
    	this.controller = controller;
    	this.subapp = subapp;    	
    },
    
    /**
     * showErrorMessage - output of field validation
     * 
     * all error messages in the view have to have the same format ul.listview.videomaut li.errorMessage.{@selector} containing a div.text_section
     * 
     * @param {Object} object containing status Information created by @Validator.setReturnVal()
     * @param {String} selector  
     */
    showErrorMessage: function (status, selector) {
    	var that = this;	
    	
    	var errorSelector = selector + 'Error';
		var errorObject = $('ul.listview.videomaut li.errorMessage.'+errorSelector);
		var errorCausingObject = $('ul.listview.videomaut li.'+selector+' div.icon_section span.icon');
		var errMsg = '';
		if(status.status){
			errorObject.hide();
			errorCausingObject.removeClass("red");
		} else {
			switch(status.type){
				case ERROR_TYPE_MANDATORY: 		errMsg = application.config.i18n[application.config.language].videomaut.validator[errorSelector].errMandatory;
												break;
				case ERROR_TYPE_WRONG_FORMAT: 	errMsg = application.config.i18n[application.config.language].videomaut.validator[errorSelector].errWrongFormat;
												break;
				case ERROR_TYPE_MINLENGTH: 		errMsg = application.config.i18n[application.config.language].videomaut.validator[errorSelector].errMinLength;
												break;
				case ERROR_TYPE_MAXLENGTH: 		errMsg = application.config.i18n[application.config.language].videomaut.validator[errorSelector].errMaxLength;
												break;
				case ERROR_TYPE_NOT_EQUAL: 		errMsg = application.config.i18n[application.config.language].videomaut.validator[errorSelector].errNotEqual;
												break;											
			}
			if(errMsg != ""){
				errorObject.children('div.text_section').html(errMsg);
			}
			errorObject.show();
			errorCausingObject.addClass("red");
		}
	}
    
});


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.TicketDetailsStreet',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/ticketDetailsStreet',
				'app/Videomaut/view/TicketDetailsStreet.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;
				
				application.loadPage(
	 				that.path, {
						data: {
							path: that.path,
							i18n: application.config.i18n,
							language: application.config.language,
							ticket: subapp.ticket,
							streets: subapp.streets
						}
					},
					function() {    			
						d.resolve();
					}
				);

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				console.log("TicketDetails - onShow");			
				
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.PaymentDetails',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/paymentDetails',
				'app/Videomaut/view/PaymentDetails.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				

				controller.loadData = function(callback) {
					callback();
				}
				
				function onReady() {
					application.loadPage(
			 				that.path, {
								data: {
									path: that.path,
									i18n: application.config.i18n,
									language: application.config.language,
									ticket: subapp.ticket,
									cardTypes: subapp.cardTypes 
								}
							},
							function() {    			
								d.resolve();
							}
						);
				}
				
				this.loadData(onReady);
				
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				var parentController = new at.asfinag.unterwegs.videomaut.ParentController(controller, subapp);
				
				/**
				 * showInterfaceForPaymentType - depending on the @payment_type, the interface is displayed
				 * 
				 * @param payment_type
				 */
				function showInterfaceForPaymentType(payment_type){
					
					if(payment_type == VIDEOMAUT_PAYMENT_TYPE_CREDITCARD ){
						$('ul.listview.videomaut.payment li').hide();
						$('li.field_creditcard').show();
					} else if(payment_type == VIDEOMAUT_PAYMENT_TYPE_GASCARD){
						$('ul.listview.videomaut.payment li').hide();
						$('li.field_gascard').show();
					} else if(payment_type == VIDEOMAUT_PAYMENT_TYPE_DIRECT) {
						$('ul.listview.videomaut.payment li').hide();
						$('li.field_direct').show();
					} else if(payment_type == VIDEOMAUT_PAYMENT_TYPE_PROSAFE) {
						$('ul.listview.videomaut.payment li').hide();
						$('li.field_prosafe').show();
					}
					
					//only keep the saved profile, if payment type is credit card
					if(payment_type != VIDEOMAUT_PAYMENT_TYPE_CREDITCARD ){
						subapp.ticket.saveNewProfile = false;
						subapp.ticket.newProfilePin = '';
					}
				}
				
				/**
				 * changePaymentIcon - changes the icon of the payment type
				 * 
				 * @param {String} payment_val the value of the selected payment (VISA, MASTERCARD; AMEX; DINERS
				 */
				function changePaymentIcon(payment_val){
					$('li.paymentType div.icon_section span.videomaut.listIcon').removeClass('icon-cardType')
																				.removeClass('VISA')
																				.removeClass('DINERS')
																				.removeClass('AMEX')
																				.removeClass('MASTERCARD')
																				.removeClass('SHELL').removeClass('Shell')
																				.removeClass('OMV')
																				.removeClass('UTA')
																				.removeClass('DKV')
																				.removeClass('SOFORT');

					if(payment_val == "VISA" || payment_val == "DINERS" || payment_val == "AMEX" || payment_val == "MASTERCARD" ||
						payment_val == "SHELL" || payment_val == "Shell" || payment_val == "OMV" || payment_val == "UTA" ||
						payment_val == "DKV" || payment_val == "SOFORT"){
						$('li.paymentType div.icon_section span.videomaut.listIcon').addClass(payment_val);
					} else {
						$('li.paymentType div.icon_section span.videomaut.listIcon').addClass("icon-cardType");
					}
				}
				
				//check ticketType and show/hide specific areas
				var displayType = VIDEOMAUT_PAYMENT_TYPE_CREDITCARD;
				if(subapp.ticket.useProsafe){
					displayType = VIDEOMAUT_PAYMENT_TYPE_PROSAFE;
					$('li.use_prosafe_payment div.checkbox').addClass('active');
				} else {
					if(!isStringEmpty(subapp.ticket.cardType) && subapp.cardTypes != undefined && subapp.cardTypes.length > 0){
						for(var i = 0; i < subapp.cardTypes.length; i++){
							if(subapp.ticket.cardType == subapp.cardTypes[i].brand){
								displayType = subapp.cardTypes[i].paymentType;
								break;
							}
						}
					}
				}
				showInterfaceForPaymentType(displayType);
				
				//==== INFO BUTTON ====
				$('div.header a.imagebutton.info.videomaut').on('click', function() {
					subapp.overlay['/videomaut/info'].setVisible(true);    			
				});
				
				//====scroll keyboard for bottom elements ====
                $('input#creditCardNumber').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.paymentType");
                });
                $('input#creditCardCVC').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.creditCardCVC");
                });
                $('input#paymentMail').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.paymentMail");
                });
				
				//====toggle use prosafe ====
				$('li.enabled.use_prosafe_payment').on('click', function() {
					var active = 'active';
					var checkbox_useProsafe = $('li.use_prosafe_payment div.checkbox');
					
					if (checkbox_useProsafe.hasClass(active) ) {
						checkbox_useProsafe.removeClass(active);
						showInterfaceForPaymentType($('select#paymentType').find('option:selected').data('type'));
					} else {
						checkbox_useProsafe.addClass(active);
						showInterfaceForPaymentType(VIDEOMAUT_PAYMENT_TYPE_PROSAFE);
					}
					
					application.refreshPage();
				});
				
				//====switch input fields according to payment type ====
				$('select#paymentType').on('change', function() {
					var payment_type = $(this).find('option:selected').data('type');
					showInterfaceForPaymentType(payment_type);
					subapp.ticket.cardType = $(this).val();
					changePaymentIcon(subapp.ticket.cardType);
					application.refreshPage();
				});
				
				//====disable month options for special year====
				$('select#creditCardValidToYear').on('change', function() {
					//remove disabled for all values
					$("select#creditCardValidToMonth option").removeAttr('disabled');
					if(new Date().getFullYear() ==  $(this).val()){
						var act_month = new Date().getMonth() + 1;
						for(var i = 1; i < act_month; i++){
							var out_val = i+"";
							if(out_val.length == 1){ out_val = "0"+out_val;}
							$("select#creditCardValidToMonth option[value='"+out_val+"']").attr('disabled','disabled')
						}
						
						//remove selected item, if in disabled range
						if(act_month > $("select#creditCardValidToMonth").val()){
							$("select#creditCardValidToMonth option").removeAttr('selected');
						}
					}
					application.refreshPage();
				});
				
				//==== save event ====
				$('li.save_payment_data').on('click', function() {
					//validate and save credit card data
					if(validateCreditCard()){
						window.location	=	"#/videomaut/paymentDetails/save?page-transition=next";
					}
					application.refreshPage();
				});
				
				//==== save event ====
				$('div.footer.videomaut ul.tabs li.save').on('click', function() {
					//check if prosafe payment is active
					var validation_success = true;
					
					//===== PROSAFE VALIDATION ======
					if($('li.use_prosafe_payment div.checkbox').hasClass('active')){
						var check_prosafePIN = Validator.isPINValid($('input#prosafePin').val(),true);
						parentController.showErrorMessage(check_prosafePIN, "prosafePin");
						if(!check_prosafePIN.status){
							validation_success = false;
						} else {
							subapp.ticket.useProsafe 	= true;
							subapp.ticket.prosafe_pin 	= check_prosafePIN.value;
							subapp.ticket.paymentCardType = VIDEOMAUT_PAYMENT_TYPE_PROSAFE;
						}
					} else {
						subapp.ticket.useProsafe 		= false;
						subapp.ticket.cardType 			= $("select#paymentType").val();
						subapp.ticket.paymentCardType 	= $("select#paymentType").find('option:selected').data('type');
						
						//===== specific payment validation ======
						if(subapp.ticket.paymentCardType == VIDEOMAUT_PAYMENT_TYPE_CREDITCARD){
							validation_success = validateCreditCard();
						} else if(subapp.ticket.paymentCardType == VIDEOMAUT_PAYMENT_TYPE_GASCARD){
							validation_success = validateGasCard();
						} else if(subapp.ticket.paymentCardType == VIDEOMAUT_PAYMENT_TYPE_DIRECT){
							validation_success = validateDirect();
						}
						
						//===== validate E-Mail ======
						var check_paymentMail = Validator.checkMail($('input#paymentMail').val(),true);
						parentController.showErrorMessage(check_paymentMail, "paymentMail");
						if(!check_paymentMail.status){
							validation_success = false;
						} else {
							subapp.ticket.email = check_paymentMail.value;
						}
					}
					
					//===== success --> jump to overview =====
					if(validation_success){
						//set payment details
						subapp.ticket.paymentinfo_completed = true;
						window.location = '#/videomaut?page-transition=previous';
					} else {
						subapp.ticket.paymentinfo_completed = false;
					}
					application.refreshPage();
				});
				
				//==== back event ====
				$('div.footer.videomaut ul.tabs li.back').on('click', function() {
					window.location = '#/videomaut?page-transition=previous'; //TODO change link
				});	
				
				/**
				 * validateCreditCard - validation of all credit card specific fields
				 * 
				 * @returns {Boolean} 
				 */
				function validateCreditCard(){
					var validation_success = true;
					
					//check creditcard number
					var check_creditCardNumber = Validator.checkCreditCard($('input#creditCardNumber').val(),true,12,20);
					parentController.showErrorMessage(check_creditCardNumber, "creditCardNumber");
					if(!check_creditCardNumber.status){
						validation_success = false;
					} else {
						subapp.ticket.card_number = check_creditCardNumber.value;
					}

					//check creditcard number
					var check_creditCardDate = Validator.checkCreditCardDate($('select#creditCardValidToYear').val(), $('select#creditCardValidToMonth').val(),true);
					parentController.showErrorMessage(check_creditCardDate, "creditCardDate");
					if(!check_creditCardDate.status){
						validation_success = false;
					} else {
						subapp.ticket.card_expirationDate = check_creditCardDate.value;
					}
					
					//check cvn
					var check_creditCardCVC = Validator.checkCVC($('input#creditCardCVC').val(),true,3,4);
					parentController.showErrorMessage(check_creditCardCVC, "creditCardCVC");
					if(!check_creditCardCVC.status){
						validation_success = false;
					} else {
						subapp.ticket.card_cvc = check_creditCardCVC.value;
					}
					
					return validation_success;
				}
				
				/**
				 * validatGasCard - validation of all gas card specific fields
				 * 
				 * @returns {Boolean}
				 */
				function validateGasCard(){
					console.error("GasCard Validation not implemented yet");
					return true;
				}
				
				/**
				 * validateDirect - validation of direct payment specific fields
				 * 
				 * @returns {Boolean}
				 */
				function validateDirect(){
					console.error("Direct payment validation not implemented yet");
					return true;
				}				
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('select#paymentType').unbind('change');
				$('select#creditCardValidToYear').unbind('change');
				$('li.use_prosafe_payment').unbind('click');
				$('div.footer.videomaut ul.tabs li.save').unbind('click');
				$('div.footer.videomaut ul.tabs li.back').unbind('click');
			};
		}
	}
);


/**
 * Controller for storing the payment data for next payment
 */
at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.PaymentDetailsSave',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/paymentDetails/save',
				'app/Videomaut/view/PaymentDetailsSave.ejs'
			);

			var that = this;
			var application = subapp.application;

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var d = $.Deferred();
				var controller = this;
				d.controller = this;

				

				controller.loadData = function(callback) {
					callback();
				}
				
				function onReady() {
					application.loadPage(
			 				that.path, {
								data: {
									path: that.path,
									i18n: application.config.i18n,
									language: application.config.language,
									ticket: subapp.ticket,
									cardTypes: subapp.cardTypes,
								}
							},
							function() {    			
								d.resolve();
							}
						);
				}
				
				this.loadData(onReady);
				
				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				var controller = this.controller;
				
				var parentController = new at.asfinag.unterwegs.videomaut.ParentController(controller, subapp);

				//====scroll keyboard for bottom elements ====
                $('input#newProsafePin1').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.newProsafePin1");
                });

                $('input#newProsafePin2').on('focus', function(){
                    application.mobileTouch.box.scroll.scrollToElement("li.newProsafePin2");
                });
                
				//====toggle save payment ====
				$('li.save_payment_data').on('click', function() {
					var checkbox_savePayment = $('li.save_payment_data div.checkbox');
					
					if (checkbox_savePayment.hasClass('active') ) {
						checkbox_savePayment.removeClass('active');
						$('li.field_Payment').addClass('disabled');
						$('li.field_Payment div.text_section input').attr('disabled', true);
					} else {
						checkbox_savePayment.addClass('active');
						$('li.field_Payment').removeClass('disabled');
						$('li.field_Payment div.text_section input').removeAttr('disabled');
					}
					
					application.refreshPage();
				});
				
				//==== save event ====
				$('div.footer.videomaut ul.tabs li.save').on('click', function() {
					var validation_success = true;
					
					if($('li.save_payment_data div.checkbox').hasClass('active')){
						var check_pin = Validator.checkPaymentPIN($('input#newProsafePin1').val(),true);
						parentController.showErrorMessage(check_pin, "newProsafePin1");
						if(!check_pin.status){
							validation_success = false;
						}
						
						var check_pin1 = Validator.checkPaymentPIN($('input#newProsafePin2').val(),true);
						parentController.showErrorMessage(check_pin1, "newProsafePin2");
						if(!check_pin1.status){
							validation_success = false;
						}
						
						if(check_pin.status && check_pin1.status){
							var check_equal = Validator.checkEquality($('input#newProsafePin1').val(),$('input#newProsafePin2').val());
							parentController.showErrorMessage(check_equal, "newProsafePinEquality");
							if(!check_equal.status){
								validation_success = false;
							} else {
								subapp.ticket.newProfilePin = check_equal.value;
								subapp.ticket.saveNewProfile = true;
							}
						}
					} else {
						subapp.ticket.saveNewProfile = false;
						subapp.ticket.newProfilePin = '';
					}
					//===== success --> jump to overview =====
					if(validation_success){
						window.location = '#/videomaut/paymentDetails?page-transition=previous';
					} else {
						subapp.ticket.saveNewProfile = false;
						subapp.ticket.newProfilePin = '';
					}
				});
				
				//==== back event ====
				$('div.footer.videomaut ul.tabs li.back').on('click', function() {
					window.location = '#/videomaut/paymentDetails?page-transition=previous'; //TODO change link
				});	
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				$('div.footer.videomaut ul.tabs li.save').unbind('click');
				$('div.footer.videomaut ul.tabs li.back').unbind('click');
				$('li.save_payment_data').unbind('click');
			};
		}
	}
);


at.asfinag.unterwegs.Controller('at.asfinag.unterwegs.videomaut.controller.Index',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut',
				'app/Videomaut/view/Index.ejs'
			);

			var that = this;
			var application = subapp.application;
			var freeze = new at.asfinag.unterwegs.mobile.Loading('videomaut_freeze_ui');
                                
			var empty_strecke = true;
			var empty_kennzeichen = true;
			var empty_bezahlung = true;
			var empty_abo = true;
			
			var pageLoaded = false;

			var selection = {
				anzahlFahrten: 1,
				email: '',
				abo_email: '',
				abo_pw: '',
				abo_selected: false,
				kartenArt: 'VMK',
				kartenTyp: 'VISA',
				pin: '',
				kfzKennzeichen: '',
				language: 'DE',
				nationalitaet: 'AT',
				streckenId: 10,
				prosafe: false,
				vignette: {
					barcode: ''
				}
			};

			var myTickets = {
				vkm: [],
				jk: []
			};

			var betrag = 0;
			var strecke = undefined;
			var einstellungen_speichern = false;
			var prosafe_kreditkarte = undefined;
			var prosafe_available = false;
			var kartenName = '';

			var bestellung = {

			}

			var strecken = [];
			
			/**
			 * freezeUI - freeze modal
			 */
            function freezeUI() {
                freeze.setVisible(true);
            }
			/**
			 * unfreezeUI - unfreeze modal
			 */
            function unfreezeUI() {
                freeze.setVisible(false);
            }
            /**
             * updateSelectionsEmptyUI
             */
			function updateSelectionsEmptyUI() {
				
				if(empty_strecke == true) {
					// show on UI that some fields are empty
		    		//$('ul.listview.videomaut.strecke > li.overlay >div.empty').show();
		    		$('ul.listview.videomaut.abo').hide();
		    	} else {
		    		$('ul.listview.videomaut.strecke > li.overlay > div.selections').show();
		    		$('ul.listview.videomaut.strecke > li.overlay >div.empty').hide();
		    		
		    		
		    		if (selection.anzahlFahrten == "Jahreskarte") {
		    			$('ul.listview.videomaut.abo').show();
		    			
		    			if(empty_abo == true) {
				    		$('ul.listview.videomaut.abo > li.overlay > div.selections').hide();
				    	} else {
				    		$('ul.listview.videomaut.abo > li.overlay > div.selections').show();
				    	}
		    		} else {
		    			$('ul.listview.videomaut.abo').hide();
		    		}
		    		if (selection.anzahlFahrten == "JKermaessigt") {
		    			var active = 'active';
		    			$('ul.listview.videomaut.abo').hide();
		    			$('div.videomaut.abo.checkbox').removeClass(active);
					    $('ul.listview.videomaut.abo li.overlay.abo div#email').hide();
					    selection.abo_selected = false;
					    selection.abo_pw = "";
					    
					    empty_abo = true;
					    
					    $('ul.listview.videomaut.strecke li.overlay.jk_ermaessigt_barcode').show();
		    		}
		    		else {
			    		$('ul.listview.videomaut.strecke li.overlay.jk_ermaessigt_barcode').hide();
			    		$('input#eingabe_barcode').val('').change();
		    		}
		    	}
				
			
			
		    	if(empty_kennzeichen == true) {
		    		// show on UI that some fields are empty
		    		//$('ul.listview.videomaut.kennzeichen > li.overlay >div.empty').show();
		    	} else {
		    		$('ul.listview.videomaut.kennzeichen > li.overlay > div.selections').show();
		    		$('ul.listview.videomaut.kennzeichen > li.overlay >div.empty').hide();
		    	}

		    	if(empty_bezahlung == true) {
		    		// show on UI that some fields are empty
		    		//$('ul.listview.videomaut.bezahlung > li.overlay >div.empty').show();
		    	} else {
		    		$('ul.listview.videomaut.bezahlung > li.overlay > div.selections').show();
		    		$('ul.listview.videomaut.bezahlung > li.overlay >div.empty').hide();
		    	}

		    	
		    	application.refreshPage();
			}
			/**
			 * showErrorNoConnection - show error message - no connection
			 */
			function showErrorNoConnection() {
				$('div.loading').hide();
				$('div.offline').show();
				$('div.error').hide();
				$('div.interface').hide();

				loadTicketsFromLocalDB();
				application.refreshPage();
			}
			/**
			 * showErrorServerDown - show error message - server not available
			 */
			function showErrorServerDown() {
				$('div.loading').hide();
				$('div.offline').hide();
				$('div.error').show();
				$('div.interface').hide();

				loadTicketsFromLocalDB();
				application.refreshPage();
			}

			/**
			 * showLastTicketFound - shows last ticket found
			 */			
			function showLastTicketFound() {
				
				$('div.loading').hide();
				$('div.offline').hide();
				$('div.error').hide();		

				var page = $('div.content div.page[data-page=kaufen] > div.interface');
				einstellungen_speichern = false;
		    	page.html(new EJS({ url: 'app/Videomaut/view/templates/kaufen.ejs' }).render({
		    		data: {
		    			i18n: application.config.i18n,
		    			language: application.config.language
		    		}
		    	}));

		    	updateSelectionsEmptyUI();
				
				
				$('select#mySelect_Strecke').on('change', function() {
					
					var streckenId = $('select#mySelect_Strecke').val();
					var selectedStrecke;
					
	                $.each(strecken, function (i, item) {
					    if (streckenId == item.nummer) {
						    selectedStrecke = item;
					    }
					});

					updateFahrtenUI(selectedStrecke);
					
					var anzahlFahrten = $('select#mySelect_Fahrten').val();
					
					updateStrecke(selectedStrecke, anzahlFahrten, betrag, selection.vignette.barcode);
					
					setTimeout(function() {
						application.refreshPage();
					}, 50);
				});
				
				$('select#mySelect_Fahrten').on('change', function() {
					
					empty_strecke = false;
					
					var streckenId = $('select#mySelect_Strecke').val();
					var anzahlFahrten = $('select#mySelect_Fahrten').val();
					var selectedStrecke;
					
	                $.each(strecken, function (i, item) {
					    if (streckenId == item.nummer) {
						    selectedStrecke = item;
					    }
					});
					
					if (anzahlFahrten != "JKermaessigt") {
						selection.vignette.barcode = "";
					}
					
					updateStrecke(selectedStrecke, anzahlFahrten, betrag, selection.vignette.barcode);
					
					updateSelectionsEmptyUI();
					
					setTimeout(function() {
						application.refreshPage();
					}, 50);
				});
				
				/*function allowFormsInIscroll(){
					  [].slice.call(document.querySelectorAll('input, select, button')).forEach(function(el){
						  $('input#eingabe_email').addEventListener(('ontouchstart' in window)?'touchstart':'mousedown', function(e){
							  console.log('Videomaut - Index.class.js: Preventing event from bubbling up to iScroll, as it would then remove it.');
							  e.stopPropagation();
						  });
					  });
					} */               
                //necessary because of new keyboard, otherwise the focus is wrong
				$('input#eingabe_email').on('focus', function(){
					application.mobileTouch.box.scroll.scrollToElement("#header_payment");
				});
                $('input#eingabe_kennzeichen').on('focus', function(){
                                        application.mobileTouch.box.scroll.scrollToElement("#header_kennzeichen");
                                             });
                $('input#eingabe_save_pin1').on('focus', function(){
                                        application.mobileTouch.box.scroll.scrollToElement("#li_prosave_pin1");
                                        });
                $('input#eingabe_save_pin2').on('focus', function(){
                                        application.mobileTouch.box.scroll.scrollToElement("#li_prosave_pin2");
                                        });
                 
				$('select#mySelect_Country').on('change', function() {
				
					var kfzKennzeichen = $('input#eingabe_kennzeichen').val();
					var nationalitaet = $('select#mySelect_Country').val();
					
					updateKennzeichen(kfzKennzeichen, nationalitaet);
					updateKennzeichenUI();
					
					setTimeout(function() {
						application.refreshPage();
					}, 50);
				});
				
				// KREDITKARTE
				$('select#mySelect_Creditcard').on('change', function() {
					
					var checkbox_useProsafe = $('span.videomaut.checkbox.use_prosafe');
					checkbox_useProsafe.removeClass('active');		
					$('li.overlay.bezahlung.selectProsafe').hide();
					$('li.overlay.bezahlung.selectSaveCreditcard').show();			
				
					updateBezahlungUI();
					updateSelectionsEmptyUI();
					
					if (selection.kartenArt == $('select#mySelect_Creditcard').val()) {
						$('li.overlay.bezahlung.selectProsafe').show();
						$('li.overlay.bezahlung.selectSaveCreditcard').show();
					}
					
					setTimeout(function() {
						application.refreshPage();
					}, 50);
				});
				
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').bind('touchstart', function() {
					$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').css('opacity', '0.2');
				});
				
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').bind('touchend', function() {
					$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').css('opacity', '1.0');
				});
				
				// INFO BUTTON VIGNETTEN BARCODE
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').on('click', function() {
					// show the overlay:
					subapp.overlay['/videomaut/barcode_info'].setVisible(true);
				});
				
				// CHECKBOX KREDITKARTE SPEICHERN
				$('li.overlay.bezahlung.selectSaveCreditcard').on('click', function() {
					
					var active = 'active';
					var checkboxSaveCreditcard = $('span.videomaut.checkbox.save_credit_card');
					var listItem_prosafe = $('li.overlay.bezahlung.selectProsafe');
					var listItem_Prosafe_PIN1 = $('#li_prosave_pin1');
					var listItem_Prosafe_PIN2 = $('#li_prosave_pin2');
					
					if (checkboxSaveCreditcard.hasClass(active) ) {
						checkboxSaveCreditcard.removeClass(active);
						listItem_prosafe.show();
						listItem_Prosafe_PIN1.hide();
						listItem_Prosafe_PIN2.hide();
					} else {
						checkboxSaveCreditcard.addClass(active);
						listItem_prosafe.hide();
						listItem_Prosafe_PIN1.show();
						listItem_Prosafe_PIN2.show();
					}
					
					application.refreshPage();
				});
				
				// CHECKBOX PROSAFE
				$('li.overlay.bezahlung.selectProsafe').on('click', function() {
					var active = 'active';
					var checkbox_useProsafe = $('span.videomaut.checkbox.use_prosafe');
					var listItem_saveCreditcard = $('li.overlay.bezahlung.selectSaveCreditcard');
					
					if (checkbox_useProsafe.hasClass(active) ) {
						checkbox_useProsafe.removeClass(active);
						listItem_saveCreditcard.show();
					} else {
						checkbox_useProsafe.addClass(active);
						listItem_saveCreditcard.hide();
					}
					
					application.refreshPage();
				});
				
				//! =================== ABO SECTION BUTTON - ABO OVERLAY ANZEIGEN:
				$('ul.listview.videomaut.abo li.overlay.abo').on('click', function() {
				
					var active = 'active';
					
					if ( $('div.videomaut.abo.checkbox').hasClass(active) ) {
						
						// unselecting Abo
						
					    $('div.videomaut.abo.checkbox').removeClass(active);
					    $('ul.listview.videomaut.abo li.overlay.abo div#email').hide();
					    selection.abo_selected = false;
					    selection.abo_pw = "";
					    
					    empty_abo = true;
					    updateSelectionsEmptyUI();
					    
					} else {
						// selecting Abo and showing the Abo overlay
						
						setTimeout(function() {
							subapp.overlay['/videomaut/abo'].data.selection = selection;
							subapp.overlay['/videomaut/abo'].setVisible(true);
							subapp.overlay['/videomaut/abo'].successCallback = function(email, pw) {
								
								empty_abo = false;
								selection.abo_selected = true;	// set abo to selected state
								einstellungen_speichern = false // setting save-payment-settings to false (aka create_profile false)
								updateAbo(email, pw);		// updating selection data
								updateAboUI();
								
								selection.prosafe = false;		// prosafe not allowed with abo
								updateBezahlungUI();
								
								
								updateSelectionsEmptyUI();
								$('div.videomaut.abo.checkbox').addClass(active);
							    $('ul.listview.videomaut.abo li.overlay.abo div#email').show();
							    
								setTimeout(function() {
									application.refreshPage();
								}, 50);
							};
						}, 450);
					}
				});
				
				//! =================== VIGNETTEN BARCODE VERARBEITUNG
				$('input#eingabe_barcode').on('blur', function() {
					if($('select#mySelect_Fahrten').val() == 'JKermaessigt'){
	                    if($(this).val().length == 0){
	                    	$('li#eingabe_barcode_empty').show();
	                    } else {
	                    	if(!validateVignettenBarcode($(this).val().substr(0,12))) {
	                    		$('li#eingabe_barcode_empty').show();
	                    	} else {
	                    		$('li#eingabe_barcode_empty').hide();
	                    	}
	                    }
					}
                });
				//! =================== KENNZEICHEN VERARBEITUNG
				$('input#eingabe_kennzeichen').on('blur', function() {
                    var kennzeichen = $(this).val().replace(/[^0-9a-zA-ZäöüÄÖÜ]/g, '').toUpperCase().substr(0, 12);
                    $(this).val(kennzeichen);
                    if($(this).val().length == 0){
                    	$('li#eingabe_kennzeichen_empty').show();
                    } else {
                    	$('li#eingabe_kennzeichen_empty').hide();
                    }
                });
				
				//! =================== EMAIL VERARBEITUNG/ÜBERPRÜFUNG
				$('input#eingabe_email').on('blur', function() {
					if(!isEmailValid($('input#eingabe_email'))){
						$('li#eingabe_email_error').show();
						application.refreshPage();
					} else {
						$('li#eingabe_email_error').hide();
					}
                });				
				
				//! =================== KAUFEN BUTTON:
				$('li.button.buy_ticket').on('click', function() {
					/**
					 * startPurchasing
					 */
					function startPurchasing() {
						selection.email = $('input#eingabe_email').val()
						selection.kfzKennzeichen = $('input#eingabe_kennzeichen').val().replace(/[^0-9a-zA-ZäöüÄÖÜ]/g, '').toUpperCase().substr(0, 12);
						selection.pin = $('input#eingabe_save_pin1').val();
						selection.prosafe = $('span.videomaut.checkbox.use_prosafe').hasClass('active');
						
						selection.kartenArt = $('select#mySelect_Creditcard').val();
						
						selection.anzahlFahrten = $('select#mySelect_Fahrten').val();
						
						if(selection.anzahlFahrten == '1Fahrt') {
		                    selection.kartenTyp = 'VMK';
		                } else if(selection.anzahlFahrten == '2Fahrten') {
		                    selection.kartenTyp = 'VMK';
		                } else if(selection.anzahlFahrten == 'Jahreskarte') {
		                    selection.kartenTyp = 'JK';
		                } else if(selection.anzahlFahrten == 'JKermaessigt') {
		                    selection.kartenTyp = 'JK';
		                }
						
						einstellungen_speichern = $('span.videomaut.checkbox.save_credit_card').hasClass('active');
						
						setTimeout(function() {
							subapp.overlay['/videomaut/bestellung'].data.selection = selection;
							subapp.overlay['/videomaut/bestellung'].data.bestellung = bestellung;
							subapp.overlay['/videomaut/bestellung'].data.einstellungen_speichern = einstellungen_speichern;
							subapp.overlay['/videomaut/bestellung'].setVisible(true);
							subapp.overlay['/videomaut/bestellung'].successCallback = function() {
								getLastTicketFromServer(showLastTicketFound);
							};
			        	}, 450);
					}
					
					if (selection.abo_selected == true) {
						selection.prosafe = false;			// prosafe not allowed when buying abo/subscription
					}
					
					//Validate Kennzeichen --> Pflichtfeld
					var error = false;
					
					if ($('input#eingabe_kennzeichen').val() == null || $('input#eingabe_kennzeichen').val() == "") {
						application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_kennzeichen, 'OK', "videomaut", function() {});
						error = true;
					} else if ($('input#eingabe_email').val() == null || $('input#eingabe_email').val() == "") {
						application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_email, 'OK', "videomaut", function() {});
						error = true;
					} else if(!isEmailValid($('input#eingabe_email'))){
                        application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_abo_email, 'OK', "videomaut", function() {});
                        error = true;
                    }
                    //validate PIN
                    if($('span.videomaut.checkbox.save_credit_card').hasClass('active')){
                        if($('input#eingabe_save_pin1').val().length < 3){
                            application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.pin_ist_leer, 'OK', "videomaut", function() {});
                            error = true;
                        } else {
                            if($('input#eingabe_save_pin1').val() != $('input#eingabe_save_pin2').val()){
                            	application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_pin_notequal, 'OK', "videomaut", function() {});
                                error = true;
                             }
                        }
                    }
                                          
					if(!error){
						if (selection.anzahlFahrten == "JKermaessigt") {
							
							selection.vignette.barcode = $('input#eingabe_barcode').val().substr(0,12);
							
							if(!validateVignettenBarcode(selection.vignette.barcode)) {
								application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.vignette_barcode_error, 'OK', "videomaut", function() {});
							} else {
								startPurchasing();
							}
						}
						else {
							startPurchasing();
						}
					}
				});
				
		    	$('div.interface').show();
		    	application.initLabels();
		    	
		    	updateKennzeichenUI();
		    	updateBezahlungUI();
		    	
		    	application.refreshPage();
			}
			
			/**
			 * showNoLastTicket
			 */
			function showNoLastTicket() {
				application.refreshPage();
			}

			
			
			/**
			 * updateFahrtenUI
			 * 
			 * updating the value from the "anzahlfahrten" dropdown, because some tracks have only 1 track or 2 
			 * track and don't offer an annual card, so we have to adjust the dropdown here
			 * 
			 * @param {Object} selectedStrecke
			 */
			function updateFahrtenUI (selectedStrecke) {
				
				if(selectedStrecke != undefined) {
			
			        if(selectedStrecke.tarifEinzel == 0) {
			            $('select#mySelect_Fahrten > option.1Fahrt').remove();
			            $('select#mySelect_Fahrten > option.2Fahrten').remove();
			        }
			        
			        if(selectedStrecke.tarifJahreskarteInCent == 0) {
			            $('select#mySelect_Fahrten > option.Jahreskarte').remove();
			            if($('select#mySelect_Fahrten').attr('value') == 'Jahreskarte') {
			                $('select#mySelect_Fahrten').attr('value', $('select#mySelect_Fahrten > option.1Fahrt').attr('value'));
			            }
			        }
			        
			        if(selectedStrecke.tarifVignettenJahreskarteInCent == 0) {
			            $('select#mySelect_Fahrten > option.JKermaessigt').remove();
			            if($('select#mySelect_Fahrten').attr('value') == 'JKermaessigt') {
			                $('select#mySelect_Fahrten').attr('value', $('select#mySelect_Fahrten > option.1Fahrt').attr('value'));
			            }
			        }
			        
			        if(selectedStrecke.tarifEinzel > 0 && $('select#mySelect_Fahrten > option.1Fahrt').length == 0) {
			        	$('select#mySelect_Fahrten').prepend('<option class="1Fahrt" value="1Fahrt">' + application.config.i18n[application.config.language].videomaut['1Fahrt'] + '</option>');
			        }
			        
			        
			        if (selectedStrecke.tarifJahreskarteInCent > 0 && $('select#mySelect_Fahrten > option.Jahreskarte').length == 0) {
			        	$('select#mySelect_Fahrten').append('<option class="Jahreskarte" value="Jahreskarte">' + application.config.i18n[application.config.language].videomaut['Jahreskarte'] + '</option>');
			        }
			
			        if (selectedStrecke.tarifVignettenJahreskarteInCent > 0 && $('select#mySelect_Fahrten > option.JKermaessigt').length == 0) {
			        	$('select#mySelect_Fahrten').append('<option class="JKermaessigt" value="JKermaessigt">' + application.config.i18n[application.config.language].videomaut['JKermaessigt'] + '</option>');
			        }
			        
			        
			        if(selectedStrecke.maxAnzEinzelfahrten < 2) {
			        	$('select#mySelect_Fahrten > option.2Fahrt').remove();
			        }
			        else if (selectedStrecke.maxAnzEinzelfahrten >= 2 && $('select#mySelect_Fahrten > option.2Fahrt').length == 0) {
			        	$('select#mySelect_Fahrten > option:eq(0)').after('<option class="2Fahrt" value="2Fahrten">' + application.config.i18n[application.config.language].videomaut['2Fahrten'] + '</option>');
			        }
			    }
			}

			/**
			 * updateStrecke
			 * 
			 * @param {String} _strecke
			 * @param {ENUM} anzahlFahrten (1Fahrt, 2Fahrten, Jahrekarte, JKermaessigt)
			 * @param {String} _betrag
			 * @param {String} vignettenBarcode
			 */
			function updateStrecke(_strecke, anzahlFahrten, _betrag, vignettenBarcode) {
				selection.anzahlFahrten = anzahlFahrten;
				selection.streckenId = _strecke.nummer;
				strecke = _strecke;

				betrag = 0;

                if(selection.anzahlFahrten == '1Fahrt') {
                    betrag = strecke.tarifEinzel;
                    selection.kartenTyp = 'VMK';
                } else if(selection.anzahlFahrten == '2Fahrten') {
                    betrag = strecke.tarifEinzel * 2;
                    selection.kartenTyp = 'VMK';
                } else if(selection.anzahlFahrten == 'Jahreskarte') {
                    betrag = strecke.tarifJahreskarteInCent / 100;
                    selection.kartenTyp = 'JK';
                } else if(selection.anzahlFahrten == 'JKermaessigt') {
                    betrag = strecke.tarifVignettenJahreskarteInCent / 100;
                    selection.kartenTyp = 'JK';
                }

				selection.vignette.barcode = vignettenBarcode;
				
				// UI update:
				var parent = $('ul.listview > li.overlay.strecke > div');
				parent.find('span.videomaut.betrag').html(parseFloat(betrag).toFixed(2).split('.').join(','));
				
				updateSelectionsEmptyUI();
                
				application.refreshPage();
			}

			/**
			 * updateKennzeichen
			 * 
			 * @param {String} kennzeichen
			 * @param {String} nationalitaet
			 */
			function updateKennzeichen(kennzeichen, nationalitaet) {
				selection.kfzKennzeichen = kennzeichen;
				selection.nationalitaet = nationalitaet;
			}
			/**
			 * updateKennzeichenUI
			 */
			function updateKennzeichenUI() {
				$('input#eingabe_kennzeichen').val(selection.kfzKennzeichen).change();	// the .change() at the end is important to trigger the change event, because it won't be triggered from itself
				
				application.refreshPage();
			}
			
			/**
			 * updateBezahlungUI
			 */
			function updateBezahlungUI() {
				var parent = $('ul.listview > li.overlay.bezahlung > div');
				parent.find('span.videomaut.bezahlung.checkbox').attr('class', 'videomaut bezahlung checkbox' + (einstellungen_speichern ? ' active' : ''));
				
                if(selection.email == "" || ($('input#eingabe_email').val() != "" && $('input#eingabe_email').val() != selection.email)){
                	$('input#eingabe_email').change();
                } else {
                    $('input#eingabe_email').val(selection.email).change(); // the .change() at the end is important to trigger the change event, because it won't be triggered from itself
                }
				application.refreshPage();
			}

			/**
			 * updateAbo
			 */
			function updateAbo(email, pw) {
				selection.abo_email = email;
				selection.abo_pw = pw;
			}
			
			/**
			 * updateAboUI
			 */
			function updateAboUI() {
				var parent = $('ul.listview > li.overlay.abo > div');
				parent.find('div#abo_email').html('<span class="videomaut bezahlung icon icon-app-feedback"></span><span>' + selection.abo_email +'</span>');
			}

			/**
			 * loadTicketsFromLocalDB
			 */
			function loadTicketsFromLocalDB() {
				var reloadCardsButton = $('ul.listview.videomaut_kaufen_noentries_button.karten');
				reloadCardsButton.hide();
				
				subapp.persistence.getAll(myTickets, function() {
					if(myTickets.vmk == undefined) {
						myTickets.vmk = [];
					}

					if(myTickets.jk == undefined) {
						myTickets.jk = [];
					}

					var page = $('div.content div.page[data-page=karten]');
					
					var i18n_valid = application.config.i18n[application.config.language].videomaut.gueltig;
					var i18n_used = application.config.i18n[application.config.language].videomaut.genutzt;
					var i18n_cancelled = application.config.i18n[application.config.language].videomaut.storniert;
					var i18n_expired = application.config.i18n[application.config.language].videomaut.abgelaufen;
					var i18n_blocked = application.config.i18n[application.config.language].videomaut.gesperrt;
					
					var html = '';
					for(var i in myTickets.vmk) {
						var status = i18n_valid;
						
		    			if(myTickets.vmk[i].status == 'G' && myTickets.vmk[i].gueltigkeitEnde != null && new Date().getTime() > new Date(new Date(new Date(new Date(myTickets.vmk[i].gueltigkeitEnde).setHours(0)).setMinutes(0)).setSeconds(0)).setMilliseconds(0)) {
		    				status = i18n_expired;
		    			}
						
						if(myTickets.vmk[i].status == 'S') {
							status = i18n_cancelled;
						} else if(myTickets.vmk[i].status == 'N') {
							status = i18n_used;
						}
						
						html += '<li class="iconlist" data-number="' + i + '"><div class="icon_section"><span class="videomaut kfz flagge ' + myTickets.vmk[i].nationalitaet + '"></span></div><div class="text_section"><span class="kennzeichen">' + myTickets.vmk[i].kfzKennzeichen + '<br />'+ myTickets.vmk[i].streckenName + '</span><span style="float: right;" class="gueltig_span">' + status + '</span></div></li>';
					}
					if(myTickets.vmk.length > 0) {
						page.find('ul.listview.noVmk').hide();
					} else {
						page.find('ul.listview.noVmk').show();
					}
					page.find('ul.listview.videomautkarten').html(html);
	
					page.find('ul.listview.videomautkarten li').on('click', function() {
						var id = $(this).data('number');
						subapp.overlay['/videomaut/kartendetails'].data.kartentyp = 'Einzelkarte';
						subapp.overlay['/videomaut/kartendetails'].data.karte = myTickets.vmk[id];
						subapp.overlay['/videomaut/kartendetails'].setVisible(true);
					});
					
					var html = '';
					for(var i in myTickets.jk) {
						var status = i18n_valid;
						if(myTickets.jk[i].status == 'G' && myTickets.jk[i].gueltigkeitEnde != null && new Date().getTime() > new Date(new Date(new Date(new Date(myTickets.jk[i].gueltigkeitEnde).setHours(0)).setMinutes(0)).setSeconds(0)).setMilliseconds(0)) {
	    					status = i18n_expired;
						}
						
						if(myTickets.jk[i].status == 'S') {
							if(myTickets.jk[i].type == 'vmk') { 
								status = i18n_cancelled;
							} else { 
								status = i18n_blocked;
							}
						} else if(myTickets.jk[i].status == 'N') {
							status = i18n_used;
						}
						
						html += '<li class="iconlist" data-number="' + i + '"><div class="icon_section"><span class="videomaut kfz flagge ' + myTickets.jk[i].nationalitaet + '"></span></div><div class="text_section"><span class="kennzeichen">' + myTickets.jk[i].kfzKennzeichen + '<br />'  + myTickets.jk[i].streckenName + '</span><span style="float: right;" class="gueltig_span">' + status + '</span></div></li>';
					}
					if(myTickets.jk.length > 0) {
						page.find('ul.listview.noJk').hide();
					} else {
						page.find('ul.listview.noJk').show();
					}
					page.find('ul.listview.jahreskarten').html(html);
					
					page.find('ul.listview.jahreskarten li').on('click', function() {
						var id = $(this).data('number');
						subapp.overlay['/videomaut/kartendetails'].data.kartentyp = 'Jahreskarte';
						subapp.overlay['/videomaut/kartendetails'].data.karte = myTickets.jk[id];
						subapp.overlay['/videomaut/kartendetails'].setVisible(true);
					});
					
					
					// show reload button
					if (myTickets.jk.length < 1 && myTickets.vmk.length < 1) {
						reloadCardsButton.show();
					} else {
						reloadCardsButton.hide();
					}
					$('ul.listview.videomaut_ticket_loading').hide();
/* 					unfreezeUI(); */
					
					application.refreshPage();
				});
			}
			
			/**
			 * reloadTickets
			 */
			function reloadTickets() {
			
				var reloadCardsButton = $('ul.listview.videomaut_kaufen_noentries_button.karten');
				if(isOffline()){
					$('ul.listview.noentries.no_internet_connection').show();
					reloadCardsButton.show();
				} else {
					$('ul.listview.noentries.no_internet_connection').hide();
					reloadCardsButton.hide();
				}
				
				// timeout is important here, because the server sometimes was too slow to immediately deliver the newly bought ticket, so without timeout we sometimes received no new ticket from the server
				setTimeout(function() {
					getTicketsFromServer(function() {
						if(that.status === DATA_STATUS_ERROR_WHILE_LOADING || isOffline()) {
							// Karten aus DB lesen
							loadTicketsFromLocalDB();
						} else {
							getTicketsFromServer(loadTicketsFromLocalDB, function() { });						
						}
						
					});						
				}, 1250);
				
			};
			
			/** 
			 * getTicketsFromServer - load tickets from server
			 * 
			 * @param {function} successCallback
			 * @param {function} errorCallback
			 */
			function getTicketsFromServer(successCallback, errorCallback) {
				var that = this;
				
				//LOAD TICKETS from Server
				//OLD var url = application.config.videomaut.url + 'getAllTickets' + '?phoneId=' + application.getDeviceId() + '&email=no.mail@asfinag.at';
				var url =  config.serverdata[act_system].videomaut.url + config.serverdata[act_system].videomaut.allTickets+ '?phoneId=' + application.getDeviceId() + '&email=no.mail@asfinag.at';
				!release_flag && console.debug('Videomaut - Index.class.js: load Ticktes - URL: '+url);
				// Karten vom Server holen
				$.ajax({
					url: url,
					dataType: 'json',
					success: function(data) {
						subapp.persistence.persistVMK(data.vmk, function() {
							subapp.persistence.persistJK(data.jk, function() {
								// that.controller.updateTickets(data);
								if(successCallback != undefined && typeof successCallback === 'function') {
									successCallback();
								}
							});
						});
					},
					error: function(XMLHttpRequest, textStatus, errorThrown) {
						// that.controller.status = DATA_STATUS_ERROR_WHILE_LOADING;	        				
						if(errorCallback != undefined && typeof errorCallback === 'function') {
							errorCallback();
						}
					}
				});
			};


			
			/**
			 * getLastTicketFromServer - this function also gets the Strecken from the server
			 * 
			 * @param {function} callback
			*/
			function getLastTicketFromServer(callback) {
				var that = this;
				//LOAD TICKETS from Server
				//OLD var url = application.config.videomaut.url + 'getLastTicket' + '?phoneId=' + application.getDeviceId() + '&email=no.mail@asfinag.at';
				var url =  config.serverdata[act_system].videomaut.url + config.serverdata[act_system].videomaut.lastTicket+ '?phoneId=' + application.getDeviceId() + '&email=no.mail@asfinag.at';
				!release_flag && console.debug('Videomaut - Index.class.js: load last Ticket - URL: '+url);
				$.ajax({
					url: url,
					dataType: 'json',
					success: function(data) {
						if(data != undefined && typeof data === 'object') {
							if(data.lastticket != undefined) {

								empty_strecke = false;
								empty_kennzeichen = false;
								empty_bezahlung = false;

								selection.email = data.lastticket.email;
								selection.kartenTyp = data.lastticket.kartenTyp;
								selection.kartenArt = data.lastticket.kartenArt != undefined ? data.lastticket.kartenArt : 'VISA';
								selection.kfzKennzeichen = data.lastticket.kfzKennzeichen;
								selection.language = data.lastticket.language;
								selection.nationalitaet = data.lastticket.nationalitaet;
								
								// workaround:
								if (data.lastticket.nationalitaet == 'XX') {
									selection.nationalitaet = application.config.i18n[application.config.language].videomaut.andere;
								}
								
								selection.streckenId = data.lastticket.streckenId;
								
								if(data.lastticket.kartenTyp == 'VMK') {
									if(data.lastticket.anzahlFahrten == 1) {
										selection.anzahlFahrten = '1Fahrt';
									} else {
										selection.anzahlFahrten = '2Fahrten';
									}
								} else if(data.lastticket.kartenTyp == 'JK') {
									selection.anzahlFahrten = 'Jahreskarte';
								}
							}
							if(data.strecken == undefined || data.strecken.length == 0) {
								showErrorServerDown();
							} else {
								strecken = data.strecken;
								showLastTicketFound();
								
								// initialize UI select strecken
								$.each(strecken, function (i, item) {
								    $('#mySelect_Strecke').append($('<option>', { 
								        value: item.nummer,
								        text : item.bezeichnung 
								    }));
								});

								for(var i in strecken) {
				                    if(strecken[i].nummer == selection.streckenId) {
				                        strecke = strecken[i];
				                    }
				                }
				                updateFahrtenUI(strecke);
				                
				                // initialize UI select list in case a ticket already has been bought...
								$('select#mySelect_Fahrten').val(selection.anzahlFahrten);
								$('select#mySelect_Creditcard').val(selection.kartenArt);
								$('select#mySelect_Country').val(selection.nationalitaet);
								$('select#mySelect_Strecke').val(selection.streckenId);
								
								updateStrecke(strecke, selection.anzahlFahrten, betrag, selection.vignette.barcode);
							}

							prosafe_available = data.prosafe;
							if(data.prosafe == true) {
								prosafe_kreditkarte = data.lastticket.kartenArt;
								$('div.videomaut.checkbox.use_prosafe').addClass('active');
								$('li.overlay.bezahlung.selectSaveCreditcard').hide();
								$('li.overlay.bezahlung.selectProsafe').show();
							}
							selection.prosafe = data.prosafe;


						} else {
							showErrorServerDown();
						}	
					},
					error: function(XMLHttpRequest, textStatus, errorThrown) {
						
					}
				});
			};

			/**
			 * onLoad
			 */
			that.onLoad = function() {
				var that = this;
				var d = $.Deferred();
				d.controller = this;

				application.loadPage(
	 				that.path, {
						data: {						
							i18n: application.config.i18n,
							language: application.config.language
						}
					},
					function() {    			
						d.resolve();
						setTimeout(function() {
							application.refreshPage();
						}, 50);
					}
				);	

				$('div.footer > ul.tabs > li.navigation.karten').on('click', function() {
					reloadTickets();
				});

				reloadTickets();

				return d.promise();
			};
			
			/**
			 * onShow
			 */
			that.onShow = function() {
				
				var that = this;
	            
				
				$('div.header a.imagebutton.info.videomaut').on('click', function() {
					subapp.overlay['/videomaut/info'].setVisible(true);    			
				});
				
				if(isOffline()){
					showErrorNoConnection();
					
					
					// check internet connection - if we don't have a connection we switch to the cards-tab (my cards)
					if( isOffline() && !pageLoaded ) {
						
						// NO INTERNET CONNECTION:
						// trigger button at tabbar to change to Tickets-View
						$('div.footer > ul.tabs > li.navigation.karten').click();
						pageLoaded = true;  // setting pageLoaded to true so if the onShow event is called again not sideeffects will happen, like that the reload button triggers a tab-change from Kaufen-Tab to Meine-Karten-Tab...
					}
				} else {
					getLastTicketFromServer(showLastTicketFound);
					getTicketsFromServer(loadTicketsFromLocalDB(), showErrorNoConnection);
				}

				$('li.button.reload').on('click', function() {
					//hide error Messages display loading
					$('div.loading.mautdata').show();
					$('div.offline').hide();
					$('div.error').hide();
					getLastTicketFromServer(showLastTicketFound);
					getTicketsFromServer(loadTicketsFromLocalDB(), showErrorNoConnection);
				});
				
				
				var reloadCardsButton = $('ul.listview.videomaut_kaufen_noentries_button.karten');
				
				reloadCardsButton.on('click', function () {
					$('ul.listview.videomaut_ticket_loading').show();
					$('ul.listview.noentries.no_internet_connection').hide();
					if(isOffline()){
						$('ul.listview.videomaut_ticket_loading').hide();
						$('ul.listview.noentries.no_internet_connection').show();
					} else {
						reloadTickets();
					}
				});
                                
				setTimeout(function() {
					application.refreshPage();
				}, 500);
			};

			/**
			 * onDestroy
			 */
			that.onDestroy = function() {
				
				$('ul.listview.videomaut_kaufen_noentries_button.karten').unbind('click');
				$('li.overlay.strecke').unbind('click');
				$('ul.listview.videomaut.abo li.overlay.abo').unbind('click');
				$('li.button.reload').unbind('click');
				$('li.overlay.kennzeichen').unbind('click');
				$('li.overlay.bezahlung').unbind('click');
				$('div.footer > ul.tabs > li.navigation.karten').unbind('click');
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').unbind('click');
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').unbind('touchstart');
				$('li.overlay.overlay.jk_ermaessigt_barcode div.cell_right_section').unbind('touchend');
				pageLoaded = false;

			};
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.Abo',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/abo',
				'app/Videomaut/view/overlay/Abo.ejs'
			);
			this.data = {};

            var that = this;
            
            var activityIndicator_loadingSpinner = new at.asfinag.unterwegs.mobile.Loading('videomaut_freeze_ui');
            
            /**
             * checkIfAboExistsForEmail - checks if there is a video tolling abo for mail address
             * 
             * @param {function} successCallback
             * @param {function} errorCallback
             */
            function checkIfAboExistsForEmail(successCallback, errorCallback) {
            	
            	$('div.abo.loading').show();
            	activityIndicator_loadingSpinner.setVisible(true);
            	
				var that = this;
				var aboEmailAddress = $('#eingabe_abo_email').val();
				
				var parameters = '?email=' + aboEmailAddress;
				var url = config.serverdata[act_system].videomaut.url + config.serverdata[act_system].videomaut.aboExists + parameters;
				!release_flag && console.debug('Videomaut - Abo.class.js: check if Abo exists - URL: '+url);
				$.ajax({
					url: url,
					dataType: 'json',
					async: true,
					success: function(data) {
						// received response from server
						setTimeout(function() {
							$('div.abo.loading').hide();
							activityIndicator_loadingSpinner.setVisible(false);
							successCallback(data);
		                }, 1250);
					},
					error: function(XMLHttpRequest, textStatus, errorThrown) {
						// server error
						setTimeout(function() {
							$('div.abo.loading').hide();
							activityIndicator_loadingSpinner.setVisible(false);
							errorCallback();
		                }, 1250);
					}
				});
			}
            
            /**
             * validateInput - check email and pw input from user
             */ 
            function validateInput() {
                var emailInput = $.trim($('#eingabe_abo_email').val());
                var pwInput = $.trim($('#eingabe_abo_email_pw').val());
                var pwInputRepeat = $.trim($('#eingabe_abo_email_pw_repeat').val());
                
                var emailInputOK = emailInput.length >= 4 ? true:false;
                var pwInputOK = pwInput.length >= 4 ? true:false;
                var pwRepeatInputOK = pwInputRepeat.length >= 4 ? true:false;
                var passwordsAreEqual = $('#eingabe_abo_email_pw').val() === $('#eingabe_abo_email_pw_repeat').val() ? true:false;
                
                // first we are resetting and hiding all messages
                $('ul.listview.error_email.error.theemail').hide();
                $('#eingabe_abo_email').parent().css('background-color','transparent');
                $('ul.listview.error_email.error.aboexisting').hide();
                $('ul.listview.error_email.error.aboservererror').hide();
                $('ul.listview.error_email.error.pw_value').hide();
                $('#eingabe_abo_email_pw').parent().css('background-color','transparent');
                $('ul.listview.error_email.error.pw_repeat_value').hide();
                $('#eingabe_abo_email_pw_repeat').parent().css('background-color','transparent');
                $('ul.listview.error_email.error.pw').hide();
                
                // check email length
                if(!emailInputOK) {
                    $('ul.listview.error_email.error.theemail').show();
//                    $('#eingabe_abo_email').parent().css('background-color','red');
                    application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_abo_email, 'OK', "videomaut", function() {});
                    return false;
                }
                
                // check pw length
                if(!pwInputOK) {
                    $('ul.listview.error_email.error.pw_value').show();
//                    $('#eingabe_abo_email_pw').parent().css('background-color','red');
//                    $('input#eingabe_abo_email_pw').focus();
                    application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_abo_pw_value_four, 'OK', "videomaut", function() {});
                    return false;
                }
                
                // check pw repeat length
                if(!pwRepeatInputOK) {
                	$('ul.listview.error_email.error.pw_repeat_value').show();
//                	$('#eingabe_abo_email_pw_repeat').parent().css('background-color','red');
//                	$('input#eingabe_abo_email_pw_repeat').focus();
                	application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_abo_pw_repeat_value, 'OK', "videomaut", function() {});
                	return false;
                }
                
                // check if pw and pw-repeat values are equal
	            if (!passwordsAreEqual) {
	            	$('ul.listview.error_email.error.pw').show();
//	            	$('#eingabe_abo_email_pw').parent().css('background-color','red');
//	            	$('#eingabe_abo_email_pw_repeat').parent().css('background-color','red');
	            	application.alert(application.config.i18n[application.config.language].information_head, application.config.i18n[application.config.language].videomaut.error_abo_pw, 'OK', "videomaut", function() {});
	            	return false;
	            }
	            
                return true;
            }
            
            /**
             * onLoad
             */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };
            
            /**
             * onShow
             */
            that.onShow = function() {
                var that = this;

                //! =================== CANCEL BUTTON EVENT
                $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
                    that.setVisible(false);
                });
                
                //Validate PW                
                $('input#eingabe_abo_email_pw').on('blur', function() {
                	if($(this).val().length < 4){
                		$('ul.listview.error_email.error.pw_value').show();
                		$('ul.listview.error_email.error.pw').hide();
                	} else {
                		$('ul.listview.error_email.error.pw_value').hide();
                		$('ul.listview.error_email.error.pw').hide();
                		if($('input#eingabe_abo_email_pw_repeat').val().length >= 4 && $('input#eingabe_abo_email_pw_repeat').val() != $('input#eingabe_abo_email_pw').val()) {
                			$('ul.listview.error_email.error.pw').show();	
                		}
                	}
                	that.refreshOverlay();
                });
                $('input#eingabe_abo_email_pw_repeat').on('blur', function() {
                	if($(this).val().length < 4){
                		$('ul.listview.error_email.error.pw_repeat_value').show();
                		$('ul.listview.error_email.error.pw').hide();
                	} else {
                		$('ul.listview.error_email.error.pw_repeat_value').hide();
                		$('ul.listview.error_email.error.pw').hide();
                		if($('input#eingabe_abo_email_pw').val().length >= 4 && $('input#eingabe_abo_email_pw_repeat').val() != $('input#eingabe_abo_email_pw').val()) {
                			$('ul.listview.error_email.error.pw').show();	
                		}
                	}
                	that.refreshOverlay();
                });                
                
                //Validate E-Mail
				$('input#eingabe_abo_email').on('blur', function() {
					if(!isEmailValid($('input#eingabe_abo_email'))){
						$('ul.listview.error_email.error.theemail').show();
					} else {
						$('ul.listview.error_email.error.theemail').hide();
					}
					that.refreshOverlay();
                });	                

                //! =================== ADD BUTTON EVENT
        		$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
        			
        			if(isOffline()) {
        				application.alert(application.config.i18n[application.config.language].information_head, "<span class='error'>"+application.config.i18n[application.config.language]['connection required']+"</span>", 'OK', "videomaut", function() {});
        			} else {
        				activityIndicator_loadingSpinner.setVisible(true);
            			
            			var theCheckbox = $('ul.listview.abo.email li#abojkcheckbox div.videomaut.abo.overlay.checkbox');
            			var active = 'active';
    					
    					if ( theCheckbox.hasClass(active) ) {
    						if(validateInput()) {
    	                    	
    	                    	 // checking if email was already used for another abo which is not allowed
    	                        checkIfAboExistsForEmail( function(data) {
    	        	                	// success callback
    	        	                	if(data == true) {
    	        	                		// abo already exists - not ok
    	        	                		$('ul.listview.error_email.error.aboexisting').show();
    	        	                		application.alert(application.config.i18n[application.config.language].information_head, "<span class='error'>"+application.config.i18n[application.config.language].videomaut.error_abo_email_already_exists+"</span>", 'OK', "videomaut", function() {});
    	        						} else {
    	        							if(that.successCallback != undefined && typeof that.successCallback === 'function') {
    	        	                            var email = $('input#eingabe_abo_email').val();
    	        	                            var pw = $('input#eingabe_abo_email_pw').val();

    	        	                            that.successCallback(email, pw);
    	        	                            that.setVisible(false);
    	        	                            that.iScroll.refresh();
    	        	                        }
    	        						}
    	                        	},
    	                        	function() {
    	                        		// error callback - server problem
    	                        		$('ul.listview.error_email.error.aboservererror').show();
    	                        });
    	                    	
    	                        
    	                        that.iScroll.refresh();
    	                    } else {
    	                    	activityIndicator_loadingSpinner.setVisible(false);
    	                    }
    					} else {
    						that.setVisible(false);
    						activityIndicator_loadingSpinner.setVisible(false);
    					}
                        
                        that.iScroll.refresh();
        			}
				});
        		
        		//! =================== CHECKBOX EVENT
        		$('ul.listview.abo.email li#abojkcheckbox').on('click', function() {
					
					var active = 'active';
					
					var theCheckbox = $('ul.listview.abo.email li#abojkcheckbox div.videomaut.abo.overlay.checkbox');
					var emailInputField = $('ul.listview.abo.email li#abo_email_input');
					var pwInputField = $('ul.listview.abo.email li#abo_email_pw_input');
					var pwRepeatInputField = $('ul.listview.abo.email li#abo_email_pw_input_repeat');
					
					if ( theCheckbox.hasClass(active) ) {
					    theCheckbox.removeClass(active);
					    emailInputField.hide();
					    pwInputField.hide();
					    pwRepeatInputField.hide();
					} else {
						theCheckbox.addClass(active);
						emailInputField.show();
						pwInputField.show();
						pwRepeatInputField.show();
					}
					
					
					that.iScroll.refresh();
					
				});
        		
        		//! =================== CHECKBOX EVENT
        		$('div#jkaboinfotext').on('click', function() {
					
        			var active = 'active';
					
					var theCheckbox = $('ul.listview.abo.email li#abojkcheckbox div.videomaut.abo.overlay.checkbox');
					var emailInputField = $('ul.listview.abo.email li#abo_email_input');
					var pwInputField = $('ul.listview.abo.email li#abo_email_pw_input');
					var pwRepeatInputField = $('ul.listview.abo.email li#abo_email_pw_input_repeat');
					
					
					if ( !theCheckbox.hasClass(active) ) {
						theCheckbox.addClass(active);
						emailInputField.show();
						pwInputField.show();
						pwRepeatInputField.show();
					}
				});
        		
                that.iScroll.refresh();
            };

            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.add').unbind('click');
        		$('div.footer.overlay > ul.buttonlist > li.button.cancel').unbind('click');
        		$('ul.listview.abo.email li#abojkcheckbox').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.Bestellung',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/bestellung', 
				'app/Videomaut/view/overlay/Bestellung.ejs'
			);
			this.data = {};

            var that = this;
            var application = subapp.application;

            var freeze = new at.asfinag.unterwegs.mobile.Loading('videomaut_freeze_ui');

            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };

            var payment = VIDEOMAUT_DIRECT_PAYMENT; //VIDEOMAUT_PROFILE_PAYMENT

            /**
             * showKreditkarteUI
             */
            function showKreditkarteUI() {
                $('div.content.overlay ul.listview.kreditkarte').show();
            }
            
            /**
             * setupPaymentOptions
             */
            function setupPaymentOptions() {
            	// gespeicherte Zahlungsdaten verwenden
            	if(that.data.selection.prosafe) {
            		payment = VIDEOMAUT_PROFILE_PAYMENT;
            		showUseSettingsUI();
            	} else {
            		payment = VIDEOMAUT_DIRECT_PAYMENT;
            		showKreditkarteUI();
            	}
            }

            /**
             * showUseSettingsUI
             */
            function showUseSettingsUI() {
                payment = VIDEOMAUT_PROFILE_PAYMENT;
                $('div.content.overlay ul.listview.use_settings').show();
            }

            /**
             * setupUI
             */
            function setupUI() {
            	setupPaymentOptions();            	
            	
//            	if(that.data.selection.prosafe == true) {
//                    showUseSettingsUI();
//                    that.data.einstellungen_speichern = false;
//                } else {
//                    showKreditkarteUI();
//                }
//            	
            	
//            	if(that.data.einstellungen_speichern == false) {
//            		payment = VIDEOMAUT_DIRECT_PAYMENT;
//                }
            	
            }

            
            /**
             * freezeUI - freeze modal
             */
            function freezeUI() {
                freeze.setVisible(true);
            }
            /** 
             * unfreezeUI - unfreeze modal
             */
            function unfreezeUI() {
                freeze.setVisible(false);
            }
            /**
             * validateInput
             */
            function validateInput() {
            	var selection = that.data.selection;
                var result = true;

                if(selection.prosafe == false) {
                    // check creditcardnumber
	                if($('input#eingabe_kreditkarte_pan').val().length == 0 ) {
	                    $('li.error.creditcardnumber').show();
                        $('li.error.creditcardnumber_wrong').hide();
	                    result = false;
	                } else {
                        //check if min 12 stellen
                        if($('input#eingabe_kreditkarte_pan').val().length < 11 ) {
                             $('li.error.creditcardnumber').hide();
                             $('li.error.creditcardnumber_wrong').show();
                             result = false;                            
                        } else {
                             $('li.error.creditcardnumber').hide();
                             $('li.error.creditcardnumber_wrong').hide();
                        }
	                }
                    
                    // check CVN
                    if($('input#eingabe_kreditkarte_cvc').val().length == 0 ) {
                        $('li.error.cvnnumber').show();
                        $('li.error.cvnnumber_wrong').hide();
                        result = false;
                    } else {
                        //check if number
                        if(isNumber($('input#eingabe_kreditkarte_cvc').val())){
                             $('li.error.cvnnumber').hide();
                             $('li.error.cvnnumber_wrong').hide();
                             
                        } else {
                             $('li.error.cvnnumber').hide();
                             $('li.error.cvnnumber_wrong').show(); 
                             result = false;
                        }
                    }
                    
	                // check expiry
	                if($('input#eingabe_kreditkarte_expiry').val().length == 0 ) {  
	                    $('li.error.expiry').show();
                        $('li.error.wrong_expiry').hide();
	                    result = false;
	                } else {
                        //check if expiry date is in the past
                        if($('select.year').val() == (new Date().getFullYear()) && ($('select.month').val() < (new Date().getMonth() + 1))){
                             $('li.error.expiry').hide();
                             $('li.error.wrong_expiry').show();
                             result = false;
                        } else {
                             $('li.error.expiry').hide();
                             $('li.error.wrong_expiry').hide();
                        }
	                    
	                }
                }

                setTimeout(function() {
                    that.overlay.iScroll.refresh();
                }, 250);

                return result;
            }
            
            /**
             * kaufen - buy ticket
             */
            function kaufen() {
                freezeUI();

                if(validateInput() == true) {
                    var selection = that.data.selection;
                    var pin;
                    
                    // setting pin:
                    if(selection.prosafe == true) {
                        pin = $('#eingabe_use_pin1').val();	// if user chose to use his saved payment
                    }
                    else {
                        pin = selection.pin;	// selection.pin is either undefined if the user didn't choose to save his payment settings or otherwise selection.pin is the pin that the user entered to save his payment settings
                    }
                    
                    var anzahlFahrten;
                    if(selection.anzahlFahrten == '1Fahrt') {
                        anzahlFahrten = 1;
                    } else if(selection.anzahlFahrten == '2Fahrten') {
                        anzahlFahrten = 2;
                    }

                    var order = new at.asfinag.at.unterwegs.VideomautOrder({
                    		abo_email: selection.abo_email,
                    		abo_pw: selection.abo_pw,
                            streckenId: selection.streckenId,
                            kartenTyp: selection.kartenTyp,
                            anzahlFahrten: anzahlFahrten,
                            email: selection.email,
                            payment: payment,
                            vignetten_barcode: selection.vignette.barcode,
                            kennzeichen: selection.kfzKennzeichen,
                            nationalitaet: selection.nationalitaet,
                            kreditkarte: selection.kartenArt,
                            pan: $('#eingabe_kreditkarte_pan').val(),
                            expiry: $('#eingabe_kreditkarte_expiry').val(),
                            cvc: $('#eingabe_kreditkarte_cvc').val(),
                            pin: pin,
                            phoneId: application.getDeviceId(),
                            email: selection.email,
                            create_profile: that.data.einstellungen_speichern
                        },
                        application.config
                    );
                    
                    order.order(
                        // success
                        function(data) {
                            // reloadTickets();
                            
                            if(data.success != undefined && data.success == true) {
                            	
                            	// WAITING FOR SERVER
                            	setTimeout(function() {
                            		if(that.overlay.successCallback != undefined && typeof that.overlay.successCallback == 'function') {
	                            		that.overlay.successCallback();                            		
	                            	}
	                                unfreezeUI();
	                                that.overlay.setVisible(false);
	                                $('div.footer > ul.tabs > li.navigation.karten').trigger('click');						
	                            }, 5000);                   
                            } else {
                                unfreezeUI();
                                if(isOffline()){
	                                application.alert(                        
	                                		application.config.i18n[application.config.language].information_head, "<span class='error'>"+that.data.i18n[that.data.language].videomaut.kauf_nicht_erfolgreich_network+"<span>", 'OK', "videomaut", function() {
	                                        that.overlay.setVisible(false);
	                                    }
	                                );                                	
                                } else {
	                                application.alert(                        
	                                		application.config.i18n[application.config.language].information_head, "<span class='error'>"+that.data.i18n[that.data.language].videomaut.kauf_nicht_erfolgreich+"<span>", 'OK', "videomaut", function() {
	                                        that.overlay.setVisible(false);
	                                    }
	                                );
                                }
                            }
                        },
                        // error
                        function(data) {
                            debug_flag && console.debug("Videomaut - Bestellung.class.js: Order Error: "+data);
                            
                            var html = '';
                            for(var i in data.errorMessages) {
                                html += data.errorMessages[i] + '<br />';
                            }
                                
                            unfreezeUI();
                            application.alert(
                            		application.config.i18n[application.config.language].information_head, html, 'OK', "videomaut", function() {                                
                                    // reloadTickets();
                                }
                            );
                        }
                    );

                } else {
                   unfreezeUI();
                }
            }
            
            /**
             * onShow
             */
            that.onShow = function() {
                var that = this;

                $('div.content.overlay ul.listview.kreditkarte').hide();
                $('div.content.overlay ul.listview.save_settings').hide();
                $('div.content.overlay ul.listview.use_settings').hide();

				// Button event handling
                $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
                    that.setVisible(false);
                });

        		$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
					kaufen();
				});

                function setExpiry() {
                    if($('select.month').val() == '--' || $('select.year').val() == '--') {
                        $('input#eingabe_kreditkarte_expiry').val('');                        
                    } else {
                        $('input#eingabe_kreditkarte_expiry').val($('select.year').val().substr(2) + $('select.month').val());
                    }
                }

                $('select.month').on('change', function() {
                    setExpiry();
                });

                $('select.year').on('change', function() {
                    setExpiry();
                });
                
                setupUI();
                setTimeout(function() {
                	that.iScroll.refresh();
                }, 250);
                
            };
            
            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.add').unbind('click');
        		$('div.footer.overlay > ul.buttonlist > li.button.cancel').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.Bezahlung',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/bezahlung',
				'app/Videomaut/view/overlay/Bezahlung.ejs'
			);
			this.data = {};

            var that = this;

            /**
             * validateInput
             * 
             * @returns {Boolean}
             */
            function validateInput() {
                var emailInput = $.trim($('#eingabe_email').val());
                if(emailInput.length < 4) {
                    $('ul.listview.error_email').show();
                    
                    $(window).scrollTop(0);
                    
                    
                    return false;
                } else {
                    $('ul.listview.error_email').hide();
                }

                return true;
            }
            
            
            /**
             * onLoad
             */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };
            
            /**
             * onShow
             */
            that.onShow = function() {
                var that = this;

                /**
                 * disableSavePaymentSettings - disable the option to save payment settings
                 */
                function disableSavePaymentSettings () {
                	$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').removeClass('active');
                	$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').hide();
                	$('div.content.overlay ul.listview.save_settings').hide();
                }
                
                /**
                 * showMastercardListItem - show listItems
                 * 
                 * this sets up the visibilty of the mastercard list item via the boolean parameter showMastercard
                 * 
                 * @param {Boolean} showMastercard
                 */
                function showMastercardListItem (showMastercard) {
                	var listItemMastercard = $('li.MASTERCARD');

                	if (showMastercard) {
                		listItemMastercard.show();
                	} else {
                		listItemMastercard.hide();
                		$('li.MASTERCARD > a').removeClass('active');
                	}
                }
                
                
                
                // hide checkbox to save settings when mastercard is selected
//                if ($('li.MASTERCARD > a').hasClass('active')) {
//                	disableSavePaymentSettings();	// if mastercard is selected payment settings can not be saved
//                }
                
                
                // hide checkbox to save settings when abo is selected
                if (subapp.overlay['/videomaut/bezahlung'].data.selection.abo_selected) {
                	disableSavePaymentSettings();	// if abo is selected payment settings can not be saved
                }
                
                /**
                 * updateUI
                 */
                function updateUI() {
                	
                    if($('ul.listview.bezahlung.gespeicherte_einstellungen > li.checkbox').hasClass('active')) {	
                    	// use saved payment settings is CHECKED
                    	
                    	// hide payment fields
                        $('ul.listview.bezahlung.neu').hide();
                        $('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').removeClass('active');
                        $('div.content.overlay ul.listview.save_settings').hide();
                    } else {
                    	// use saved payment settings is NOT CHECKED
                    	
                    	// show payment fields to the user so he can enter his payment data
                        $('ul.listview.bezahlung.neu').show();
                        
                        
                        if ($('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').hasClass('active')) {
                        	
                        	// save credit card checkbox is checked (= user wants to save his payment settings)
                        	
                        	
                        	// show PIN-entry fields
                        	$('div.content.overlay ul.listview.save_settings').show();
                        	
                        } else {
                        	
                        	// saved credit card checkbox is not checked
                        	
                        	
                        	// we have to hide the PIN-entry fields
                        	$('div.content.overlay ul.listview.save_settings').hide();
                        	
                        }
                        
                    }

                    that.iScroll.refresh();
                }

                $('li.checkbox').on('click', function() {
                    $(this).toggleClass('active');
                    updateUI();
                });

                
                // hide checkbox to save settings because mastercard settings cannot be saved by MPAY24 so the checkbox for saving the settings is unchecked:
                $('ul.listview.controlgroup.bezahlung.card > li').on('click', function () {
                	
//                	if ($(this).hasClass('MASTERCARD')) {
//                		$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').removeClass('active');
//                    	$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').hide();
//                	} else
                	if (!subapp.overlay['/videomaut/bezahlung'].data.selection.abo_selected)	// only show save settings checkbox if the user didnt select JK Abo before
                	{
                		// show save settings
                    	$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').show();
                	}
                	
                	updateUI();
                	that.iScroll.refresh();
                });

				// Button event handling
                $('div.footer.overlay > ul.buttonlist > li.button.cancel').on('click', function() {
                    that.setVisible(false);
                });

        		$('div.footer.overlay > ul.buttonlist > li.button.add').on('click', function() {
        			// PIN Validation:
        			if( ($('ul.listview.bezahlung.gespeicherte_einstellungen > li.checkbox').hasClass('active') == false) &&
                        	$('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').hasClass('active') ) {        				
        				// validate PIN:
            			if($('#eingabe_save_pin1').val() != $('#eingabe_save_pin2').val()) {
                    		$('li.error.pin_nicht_ident').show();
                    		$('li.error.pin_ist_leer').hide();
                    		that.iScroll.refresh();
                    		return;
                    	} else if($('#eingabe_save_pin1').val().length < 3) {
                    		$('li.error.pin_nicht_ident').hide();
                    		$('li.error.pin_ist_leer').show();
                    		that.iScroll.refresh();
                    		return;
                    	}
            			
        			}

                    if(validateInput()) {
                        if(that.successCallback != undefined && typeof that.successCallback === 'function') {
                            var email = $('input#eingabe_email').val();                            
                            var prosafe = $('ul.listview.bezahlung.gespeicherte_einstellungen > li.checkbox').hasClass('active');
                            var kartenArt = $('ul.listview.bezahlung.neu.kreditkarte > li > ul.controlgroup a.active').parent().attr('class');
                            var kartenName = $('ul.listview.bezahlung.neu.kreditkarte > li > ul.controlgroup a.active > span.cardName').html()
                            var save_settings = $('ul.listview.bezahlung.neu.einstellungen_speichern > li').hasClass('active');
                            var pin;
                            
                            if ($('ul.listview.bezahlung.neu.einstellungen_speichern > li.checkbox').hasClass('active'))
                            {
                            	pin = $('#eingabe_save_pin1').val();
                            }

                            that.successCallback(email, prosafe, kartenArt, kartenName, save_settings, pin);
                            that.setVisible(false);
                            that.iScroll.refresh();
                        }
                        that.iScroll.refresh();
                    }
                    that.iScroll.refresh();
				});

                updateUI();
                that.iScroll.refresh();
            };
            
            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.add').unbind('click');
        		$('div.footer.overlay > ul.buttonlist > li.button.cancel').unbind('click');
        		$('li.MASTERCARD').unbind('click');
        		$('li.checkbox').unbind('click');
        		$('ul.listview.controlgroup.bezahlung.card > li').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.BarcodeInfo',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/barcode_info', 
				// 'videomaut_strecke', 
				'app/Videomaut/view/overlay/BarcodeInfo.ejs'
			);
			
			this.data = {};

			var that = this;        

            /**
             * onLoad
             */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };

            /**
             * onShow
             */
            that.onShow = function() {
            
                that.overlay.iScroll.refresh();
                
                $('div.footer.overlay > ul.buttonlistSingle > li.button.ok').on('click', function() {
                    that.overlay.setVisible(false);
                });

            };

            /**
             * onDestroy
             */
            that.onDestroy = function() {
        		$('div.footer.overlay > ul.buttonlistSingle > li.button.ok').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.Info',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/info', 
				'app/Videomaut/view/overlay/Info.ejs'
			);
			this.data = {};

			var that = this;
			
			/**
			 * onLoad
			 */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
            };
            
            /**
             * onShow
             */
            that.onShow = function() {
				var that = this;

                $('div.footer.overlay > ul.buttonlistSingle > li.button.ok').on('click', function() {
                    that.setVisible(false);
                });

                that.refreshOverlay();
            };

            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.ok').unbind('click');
            };
		}
	}
);


at.asfinag.unterwegs.Overlay('at.asfinag.unterwegs.videomaut.controller.overlay.Kartendetails',
	{},
	{
		/**
		 * init
		 * 
		 * @param {Object} subapp
		 */
		init: function(subapp) {
			this._super(
				'/videomaut/kartendetails', 
				'app/Videomaut/view/overlay/Kartendetails.ejs'
			);
			this.data = {};

			var that = this;
			
			/**
			 * onLoad
			 */
            that.onLoad = function() {
				that.data = this.data || {};
    			that.data.language = application.config.language; 
    			that.data.i18n = application.config.i18n;
    			that.data.dateTimeFormat = that.data.i18n[that.data.language].dateTimeFormat;    			
            };
            /**
             * onShow
             */
            that.onShow = function() {
				var that = this;

                $('div.footer.overlay > ul.buttonlistSingle > li.button.ok').on('click', function() {
                    that.setVisible(false);
                });

                that.refreshOverlay();
            };
            /**
             * onDestroy
             */
            that.onDestroy = function() {
				$('div.footer.overlay > ul.buttonlist > li.button.ok').unbind('click');
            };
		}
	}
);


/*
	This part calls the native implementation of the "Verkehrsinfos" Subapp
*/

window.verkehrsinfos = {
    startTraffic: function() {
        cordova.exec(function(){}, function(err) {
            callback('startTraffic failed to exec');
        }, "Verkehrsinfos", "startTraffic", []);
    },
    
    
    startTrafficReporter: function(){        
        cordova.exec(function(){}, function(err) {
            alert("error: " + err);
            callback('startTrafficRepoter failed to exec');
        }, "Verkehrsinfos", "startTrafficReporter", []);
    },
};

window.uuid = function(callback) {
    if(cordova != undefined && cordova.exec != undefined) {
	    cordova.exec(callback, function(err) {
	        callback('Nothing to echo.');
	    }, "Verkehrsinfos", "uuid", ['']);
	}
}


﻿Proj4js.defs["EPSG:31287"] = "+proj=lcc +lat_1=49 +lat_2=46 +lat_0=47.5 +lon_0=13.33333333333333 +x_0=400000 +y_0=400000 +ellps=bessel +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232 +units=m +no_defs";


(function(i){var e={undHash:/_|-/,colons:/::/,words:/([A-Z]+)([A-Z][a-z])/g,lowUp:/([a-z\d])([A-Z])/g,dash:/([a-z\d])([A-Z])/g,replacer:/\{([^\}]+)\}/g,dot:/\./},l=function(a,b,c){return a[b]!==undefined?a[b]:c&&(a[b]={})},j=function(a){var b=typeof a;return a&&(b=="function"||b=="object")},m,k=i.String=i.extend(i.String||{},{getObject:m=function(a,b,c){a=a?a.split(e.dot):[];var f=a.length,d,h,g,n=0;b=i.isArray(b)?b:[b||window];if(f==0)return b[0];for(;d=b[n++];){for(g=0;g<f-1&&j(d);g++)d=l(d,a[g],
c);if(j(d)){h=l(d,a[g],c);if(h!==undefined){c===false&&delete d[a[g]];return h}}}},capitalize:function(a){return a.charAt(0).toUpperCase()+a.substr(1)},camelize:function(a){a=k.classize(a);return a.charAt(0).toLowerCase()+a.substr(1)},classize:function(a,b){a=a.split(e.undHash);for(var c=0;c<a.length;c++)a[c]=k.capitalize(a[c]);return a.join(b||"")},niceName:function(a){return k.classize(a," ")},underscore:function(a){return a.replace(e.colons,"/").replace(e.words,"$1_$2").replace(e.lowUp,"$1_$2").replace(e.dash,
"_").toLowerCase()},sub:function(a,b,c){var f=[];c=typeof c=="boolean"?!c:c;f.push(a.replace(e.replacer,function(d,h){d=m(h,b,c);if(j(d)){f.push(d);return""}else return""+d}));return f.length<=1?f[0]:f},_regs:e})})(jQuery);
(function(i){var j=false,p=i.makeArray,q=i.isFunction,l=i.isArray,m=i.extend,s=i.String.getObject,n=function(a,c){return a.concat(p(c))},t=/xyz/.test(function(){})?/\b_super\b/:/.*/,r=function(a,c,d){d=d||a;for(var b in a)d[b]=q(a[b])&&q(c[b])&&t.test(a[b])?function(h,g){return function(){var f=this._super,e;this._super=c[h];e=g.apply(this,arguments);this._super=f;return e}}(b,a[b]):a[b]};clss=i.Class=function(){arguments.length&&clss.extend.apply(clss,arguments)};m(clss,{proxy:function(a){var c=
p(arguments),d;a=c.shift();l(a)||(a=[a]);d=this;return function(){for(var b=n(c,arguments),h,g=a.length,f=0,e;f<g;f++)if(e=a[f]){if((h=typeof e=="string")&&d._set_called)d.called=e;b=(h?d[e]:e).apply(d,b||[]);if(f<g-1)b=!l(b)||b._use_call?[b]:b}return b}},newInstance:function(){var a=this.rawInstance(),c;if(a.setup)c=a.setup.apply(a,arguments);if(a.init)a.init.apply(a,l(c)?c:arguments);return a},setup:function(a){this.defaults=m(true,{},a.defaults,this.defaults);return arguments},rawInstance:function(){j=
true;var a=new this;j=false;return a},extend:function(a,c,d){function b(){if(!j)return this.constructor!==b&&arguments.length?arguments.callee.extend.apply(arguments.callee,arguments):this.Class.newInstance.apply(this.Class,arguments)}if(typeof a!="string"){d=c;c=a;a=null}if(!d){d=c;c=null}d=d||{};var h=this,g=this.prototype,f,e,k,o;j=true;o=new this;j=false;r(d,g,o);for(f in this)if(this.hasOwnProperty(f))b[f]=this[f];r(c,this,b);if(a){k=a.split(/\./);e=k.pop();k=g=s(k.join("."),window,true);g[e]=
b}m(b,{prototype:o,namespace:k,shortName:e,constructor:b,fullName:a});b.prototype.Class=b.prototype.constructor=b;e=b.setup.apply(b,n([h],arguments));if(b.init)b.init.apply(b,e||n([h],arguments));return b}});clss.callback=clss.prototype.callback=clss.prototype.proxy=clss.proxy})(jQuery);

(function(a){var e=jQuery.cleanData;a.cleanData=function(b){for(var c=0,d;(d=b[c])!==undefined;c++)a(d).triggerHandler("destroyed");e(b)}})(jQuery);
(function(e){var v=function(a,b,c){var d,f=a.bind&&a.unbind?a:e(j(a)?[a]:a);if(b.indexOf(">")===0){b=b.substr(1);d=function(i){i.target===a&&c.apply(this,arguments)}}f.bind(b,d||c);return function(){f.unbind(b,d||c);a=b=c=d=null}},k=e.makeArray,w=e.isArray,j=e.isFunction,l=e.extend,q=e.String,r=e.each,x=Array.prototype.slice,y=function(a,b,c,d){var f=a.delegate&&a.undelegate?a:e(j(a)?[a]:a);f.delegate(b,c,d);return function(){f.undelegate(b,c,d);f=a=c=d=b=null}},s=function(a,b,c,d){return d?y(a,d,
b,c):v(a,b,c)},m=function(a,b){var c=typeof b=="string"?a[b]:b;return function(){a.called=b;return c.apply(a,[this.nodeName?e(this):this].concat(x.call(arguments,0)))}},z=/\./g,A=/_?controllers?/ig,t=function(a){return q.underscore(a.replace("jQuery.","").replace(z,"_").replace(A,""))},B=/[^\w]/,u=/\{([^\}]+)\}/g,C=/^(?:(.*?)\s)?([\w\.\:>]+)$/,n,o=function(a,b){return e.data(a,"controllers",b)};e.Class("jQuery.Controller",{setup:function(){this._super.apply(this,arguments);if(!(!this.shortName||this.fullName==
"jQuery.Controller")){this._fullName=t(this.fullName);this._shortName=t(this.shortName);var a=this,b=this.pluginName||this._fullName,c;e.fn[b]||(e.fn[b]=function(d){var f=k(arguments),i=typeof d=="string"&&j(a.prototype[d]),D=f[0];return this.each(function(){var g=o(this);if(g=g&&g[b])i?g[D].apply(g,f.slice(1)):g.update.apply(g,f);else a.newInstance.apply(a,[this].concat(f))})});this.actions={};for(c in this.prototype)if(!(c=="constructor"||!j(this.prototype[c])))if(this._isAction(c))this.actions[c]=
this._action(c)}},hookup:function(a){return new this(a)},_isAction:function(a){return B.test(a)?true:e.inArray(a,this.listensTo)>-1||e.event.special[a]||p[a]},_action:function(a,b){u.lastIndex=0;if(!b&&u.test(a))return null;a=b?q.sub(a,[b,window]):a;b=w(a);var c=(b?a[1]:a).match(C);return{processor:p[c[2]]||n,parts:c,delegate:b?a[0]:undefined}},processors:{},listensTo:[],defaults:{}},{setup:function(a,b){var c=this.constructor;a=(typeof a=="string"?e(a):a.jquery?a:[a])[0];var d=c.pluginName||c._fullName;
this.element=e(a).addClass(d);(o(a)||o(a,{}))[d]=this;this.options=l(l(true,{},c.defaults),b);this.called="init";this.bind();return[this.element,this.options].concat(k(arguments).slice(2))},bind:function(a,b,c){if(a===undefined){this._bindings=[];a=this.constructor;b=this._bindings;c=a.actions;var d=this.element;for(funcName in c)if(c.hasOwnProperty(funcName)){ready=c[funcName]||a._action(funcName,this.options);b.push(ready.processor(ready.delegate||d,ready.parts[2],ready.parts[1],funcName,this))}var f=
m(this,"destroy");d.bind("destroyed",f);b.push(function(i){e(i).unbind("destroyed",f)});return b.length}if(typeof a=="string"){c=b;b=a;a=this.element}return this._binder(a,b,c)},_binder:function(a,b,c,d){if(typeof c=="string")c=m(this,c);this._bindings.push(s(a,b,c,d));return this._bindings.length},_unbind:function(){var a=this.element[0];r(this._bindings,function(b,c){c(a)});this._bindings=[]},delegate:function(a,b,c,d){if(typeof a=="string"){d=c;c=b;b=a;a=this.element}return this._binder(a,c,d,
b)},update:function(a){l(this.options,a);this._unbind();this.bind()},destroy:function(){if(this._destroyed)throw this.constructor.shortName+" controller already deleted";var a=this.constructor.pluginName||this.constructor._fullName;this._destroyed=true;this.element.removeClass(a);this._unbind();delete this._actions;delete this.element.data("controllers")[a];e(this).triggerHandler("destroyed");this.element=null},find:function(a){return this.element.find(a)},_set_called:true});var p=e.Controller.processors;
n=function(a,b,c,d,f){return s(a,b,m(f,d),c)};r("change click contextmenu dblclick keydown keyup keypress mousedown mousemove mouseout mouseover mouseup reset resize scroll select submit focusin focusout mouseenter mouseleave".split(" "),function(a,b){p[b]=n});var h,E=function(a,b){for(h=0;h<b.length;h++)if(typeof b[h]=="string"?a.constructor._shortName==b[h]:a instanceof b[h])return true;return false};e.fn.extend({controllers:function(){var a=k(arguments),b=[],c,d,f;this.each(function(){c=e.data(this,
"controllers");for(f in c)if(c.hasOwnProperty(f)){d=c[f];if(!a.length||E(d,a))b.push(d)}});return b},controller:function(){return this.controllers.apply(this,arguments)[0]}})})(jQuery);
(function(){var n=$.String,x=n.getObject,r=n.underscore,C=n.classize,w=$.isArray,y=$.makeArray,s=$.extend,j=$.each,l=function(a,b,c){$.event.trigger(b,c,a,true)},m=function(a,b,c,d,f,e,g){if(typeof a=="string"){var h=a.indexOf(" ");a=h>-1?{url:a.substr(h+1),type:a.substr(0,h)}:{url:a}}a.data=typeof b=="object"&&!w(b)?s(a.data||{},b):b;a.url=n.sub(a.url,a.data,true);return $.ajax(s({type:e||"post",dataType:g||"json",fixture:f,success:c,error:d},a))},o=function(a,b,c){var d=r(a.shortName),f="-"+d+(b||
"");return $.fixture&&$.fixture[f]?f:c||"//"+r(a.fullName).replace(/\.models\..*/,"").replace(/\./g,"/")+"/fixtures/"+d+(b||"")+".json"},D=function(a,b,c){b=b||{};a=a.id;if(b[a]&&b[a]!==c){b["new"+n.capitalize(c)]=b[a];delete b[a]}b[a]=c;return b},z=function(a){return new (a||$.Model.List||Array)},t=function(a){return a[a.constructor.id]},E=function(a){var b=[];j(a,function(c,d){if(!d["__u Nique"]){b.push(d);d["__u Nique"]=1}});return j(b,function(c,d){delete d["__u Nique"]})},A=function(a,b,c,d,
f){var e=$.Deferred(),g=[a.serialize(),function(k){a[f||b+"d"](k);e.resolveWith(a,[a,k,b])},function(k){e.rejectWith(a,[k])}],h=a.constructor,i,p=e.promise();b=="destroy"&&g.shift();b!=="create"&&g.unshift(t(a));e.then(c);e.fail(d);if((i=h[b].apply(h,g))&&i.abort)p.abort=function(){i.abort()};return p},u=function(a){return typeof a==="object"&&a!==null&&a},q=function(a){return function(){return $.fn[a].apply($([this]),arguments)}},B=q("bind");q=q("unbind");ajaxMethods={create:function(a){return function(b,
c,d){return m(a||this._shortName,b,c,d,o(this,"Create","-restCreate"))}},update:function(a){return function(b,c,d,f){return m(a||this._shortName+"/{"+this.id+"}",D(this,c,b),d,f,o(this,"Update","-restUpdate"),"put")}},destroy:function(a){return function(b,c,d){var f={};f[this.id]=b;return m(a||this._shortName+"/{"+this.id+"}",f,c,d,o(this,"Destroy","-restDestroy"),"delete")}},findAll:function(a){return function(b,c,d){return m(a||this._shortName,b,c,d,o(this,"s"),"get","json "+this._shortName+".models")}},
findOne:function(a){return function(b,c,d){return m(a||this._shortName+"/{"+this.id+"}",b,c,d,o(this),"get","json "+this._shortName+".model")}}};jQuery.Class("jQuery.Model",{setup:function(a){var b=this,c=this.fullName;j(["attributes","validations"],function(f,e){if(!b[e]||a[e]===b[e])b[e]={}});j(["convert","serialize"],function(f,e){if(a[e]!=b[e])b[e]=s({},a[e],b[e])});this._fullName=r(c.replace(/\./g,"_"));this._shortName=r(this.shortName);if(c.indexOf("jQuery")!=0){if(this.listType)this.list=new this.listType([]);
j(ajaxMethods,function(f,e){var g=b[f];if(typeof g!=="function")b[f]=e(g)});c={};var d="* "+this._shortName+".model";c[d+"s"]=this.proxy("models");c[d]=this.proxy("model");$.ajaxSetup({converters:c})}},attributes:{},model:function(a){if(!a)return null;if(a instanceof this)a=a.serialize();return new this(u(a[this._shortName])||u(a.data)||u(a.attributes)||a)},models:function(a){if(!a)return null;var b=z(this.List),c=w(a),d=$.Model.List;d=d&&a instanceof d;for(var f=(d=c?a:d?a.serialize():a.data)?d.length:
null,e=0;e<f;e++)b.push(this.model(d[e]));c||j(a,function(g,h){if(g!=="data")b[g]=h});return b},id:"id",addAttr:function(a,b){var c=this.attributes;c[a]||(c[a]=b);return b},convert:{date:function(a){var b=typeof a;return b==="string"?isNaN(Date.parse(a))?null:Date.parse(a):b==="number"?new Date(a):a},number:function(a){return parseFloat(a)},"boolean":function(a){return Boolean(a==="false"?0:a)},"default":function(a,b,c){b=x(c);var d=window;if(c.indexOf(".")>=0){c=c.substring(0,c.lastIndexOf("."));
d=x(c)}return typeof b=="function"?b.call(d,a):a}},serialize:{"default":function(a){return u(a)&&a.serialize?a.serialize():a},date:function(a){return a&&a.getTime()}},bind:B,unbind:q,_ajax:m},{setup:function(a){this._init=true;this.attrs(s({},this.constructor.defaults,a));delete this._init},update:function(a,b,c){this.attrs(a);return this.save(b,c)},errors:function(a){if(a)a=w(a)?a:y(arguments);var b={},c=this,d=function(e,g){j(g,function(h,i){if(h=i.call(c)){b[e]||(b[e]=[]);b[e].push(h)}})},f=this.constructor.validations;
j(a||f||{},function(e,g){if(typeof e=="number"){e=g;g=f[e]}d(e,g||[])});return $.isEmptyObject(b)?null:b},attr:function(a,b,c,d){var f=C(a),e="get"+f;if(b!==undefined){f="set"+f;e=this[a];var g=this,h=function(i){d&&d.call(g,i);l(g,"error."+a,i)};if(this[f]&&(b=this[f](b,this.proxy("_updateProperty",a,b,e,c,h),h))===undefined)return;this._updateProperty(a,b,e,c,h);return this}return this[e]?this[e]():this[a]},bind:B,unbind:q,_updateProperty:function(a,b,c,d,f){var e=this.constructor,g=e.attributes[a]||
e.addAttr(a,"string"),h=e.convert[g]||e.convert["default"],i=null,p="",k="updated.";d=d;var v=e.list;b=this[a]=b===null?null:h.call(e,b,function(){},g);this._init||(i=this.errors(a));g=[b];h=[a,b,c];if(i){p=k="error.";d=f;h.splice(1,0,i);g.unshift(i)}if(c!==b&&!this._init){!i&&l(this,p+a,g);l(this,k+"attr",h)}d&&d.apply(this,g);if(a===e.id&&b!==null&&v)if(c){if(c!=b){v.remove(c);v.push(this)}}else v.push(this)},removeAttr:function(a){var b=this[a],c=false,d=this.constructor.attributes;this[a]&&delete this[a];
if(d[a]){delete d[a];c=true}!this._init&&c&&b&&l(this,"updated.attr",[a,null,b])},attrs:function(a){var b,c=this.constructor,d=c.attributes;if(a){c=c.id;for(b in a)b!=c&&this.attr(b,a[b]);c in a&&this.attr(c,a[c])}else{a={};for(b in d)if(d.hasOwnProperty(b))a[b]=this.attr(b)}return a},serialize:function(){var a=this.constructor,b=a.attributes,c,d,f={},e;attributes={};for(e in b)if(b.hasOwnProperty(e)){c=b[e];d=a.serialize[c]||a.serialize["default"];f[e]=d.call(a,this[e],c)}return f},isNew:function(){var a=
t(this);return a===undefined||a===null||a===""},save:function(a,b){return A(this,this.isNew()?"create":"update",a,b)},destroy:function(a,b){return A(this,"destroy",a,b,"destroyed")},identity:function(){var a=t(this),b=this.constructor;return(b._fullName+"_"+(b.escapeIdentity?encodeURIComponent(a):a)).replace(/ /g,"_")},elements:function(a){var b=this.identity();if(this.constructor.escapeIdentity)b=b.replace(/([ #;&,.+*~\'%:"!^$[\]()=>|\/])/g,"\\$1");return $("."+b,a)},hookup:function(a){var b=this.constructor._shortName,
c=$.data(a,"models")||$.data(a,"models",{});$(a).addClass(b+" "+this.identity());c[b]=this}});j(["created","updated","destroyed"],function(a,b){$.Model.prototype[b]=function(c){var d=this.constructor;b==="destroyed"&&d.list&&d.list.remove(t(this));c&&typeof c=="object"&&this.attrs(c.attrs?c.attrs():c);l(this,b);l(d,b,this);return[this].concat(y(arguments))}});$.fn.models=function(){var a=[],b,c;this.each(function(){j($.data(this,"models")||{},function(d,f){b=b===undefined?f.constructor.List||null:
f.constructor.List===b?b:null;a.push(f)})});c=z(b);c.push.apply(c,E(a));return c};$.fn.model=function(a){if(a&&a instanceof $.Model){a.hookup(this[0]);return this}else return this.models.apply(this,arguments)[0]}})(jQuery);
(function(e){var g=e.isArray,j=function(a){var b=0;for(var c in a)b++;return b},f=function(a,b,c){var d=typeof a,h=g(a);if(c===-1)return d==="object"||a===b;if(d!==typeof b||h!==g(b))return false;if(a===b)return true;if(h){if(a.length!==b.length)return false;for(c=0;c<a.length;c++)if(!f(a[c],b[c]))return false;return true}else if(d==="object"||d==="function"){d=0;for(var i in a){if(!f(a[i],b[i],c===false?-1:undefined))return false;d++}return d===j(b)}return false},k=function(a){var b={};for(var c in a)if(typeof a[c]!==
"object"||a[c]===null)b[c]=a[c];return b};e.extend(e.Model.prototype,{backup:function(){this._backupStore=this.serialize();return this},isDirty:function(a){return this._backupStore?!f(this.serialize(),this._backupStore,!!a):false},restore:function(a){this.attrs(a?this._backupStore:k(this._backupStore));return this}})})(jQuery);
(function(d){var l=function(a){return a[0]&&d.isArray(a[0])?a[0]:a[0]instanceof d.Model.List?d.makeArray(a[0]):d.makeArray(a)},q=0,m=function(a){return a[a.constructor.id]},j=jQuery.expando,k=d.each,n=d.Model._ajax,o={update:function(a){return function(b,c,e,g){return n(a,{ids:b,attrs:c},e,g,"-updateAll","put")}},destroy:function(a){return function(b,c,e){return n(a,b,c,e,"-destroyAll","post")}}};d.Class("jQuery.Model.List",{setup:function(){for(var a in o)if(typeof this[a]!=="function")this[a]=o[a](this[a])}},
{init:function(a){this.length=0;this._data={};this._namespace=".list"+ ++q;this.push.apply(this,d.makeArray(a||[]))},slice:function(){return new this.Class(Array.prototype.slice.apply(this,arguments))},match:function(a,b){return this.grep(function(c){return c[a]==b})},grep:function(a,b){return new this.Class(d.grep(this,a,b))},_makeData:function(){var a=this._data={};this.each(function(b,c){a[c[c.constructor.id]]=c})},get:function(){if(!this.length)return new this.Class([]);this._changed&&this._makeData();
var a=[],b=this[0].constructor,c=b.id;b=new RegExp(b._fullName+"_([^ ]+)");for(var e,g,f=l(arguments),h=0;h<f.length;h++)(g=f[h].nodeName&&(e=f[h].className.match(b))?this._data[e[1]]:this._data[typeof f[h]=="string"||typeof f[h]=="number"?f[h]:f[h][c]])&&a.push(g);return new this.Class(a)},remove:function(a){if(!this.length)return[];var b=[],c=this[0].constructor,e=c.id;c=new RegExp(c._fullName+"_([^ ]+)");var g;a=l(arguments);for(var f=0;f<this.length;){for(var h=this[f],p=false,i=0;i<a.length;i++){var r=
a[i].nodeName&&(g=a[i].className.match(c))&&g[1]||(typeof a[i]=="string"||typeof a[i]=="number"?a[i]:a[i][e]);if(h[e]==r){b.push.apply(b,this.splice(f,1));a.splice(i,1);p=true;break}}p||f++}b=new this.Class(b);b.length&&d([this]).trigger("remove",[b]);return b},elements:function(a){return d(this.map(function(b){return"."+b.identity()}).join(","),a)},model:function(){return this.constructor.namespace},findAll:function(a,b,c){var e=this;this.model().findAll(a,function(g){e.push(g);b&&b(e)},c)},destroy:function(a,
b){var c=this.map(m),e=this.slice(0,this.length);if(c.length)this.constructor.destroy(c,function(){k(e,function(){this.destroyed()});a&&a(e)},b);else a&&a(this);return this},update:function(a,b,c){var e=this.map(m),g=this.slice(0,this.length);if(e.length)this.constructor.update(e,a,function(f){var h=d.extend(a,f||{});k(g,function(){this.updated(h)});b&&b(g)},c);else b&&b(this);return this},bind:function(){this[j]===undefined&&this.bindings(this);d.fn.bind.apply(d([this]),arguments);return this},unbind:function(){d.fn.unbind.apply(d([this]),
arguments);this[j]===undefined&&d(this).unbind(this._namespace);return this},bindings:function(a){var b=this;d(a).bind("destroyed"+this._namespace,function(){b.remove(this)}).bind("updated"+this._namespace,function(){d([b]).trigger("updated",this)})},push:function(){var a=l(arguments);this[j]!==undefined&&this.bindings(a);this._changed=true;var b=s.apply(this,a);this[j]&&a.length&&d([this]).trigger("add",[a]);return b},serialize:function(){return this.map(function(a){return a.serialize()})}});var s=
[].push;k({pop:[].pop,shift:[].shift,unshift:[].unshift,splice:[].splice,sort:[].sort,reverse:[].reverse},function(a,b){d.Model.List.prototype[a]=function(){this._changed=true;return b.apply(this,arguments)}});k(["each","map"],function(a,b){d.Model.List.prototype[b]=function(c,e){return d[b](this,c,e)}})})(jQuery);
(function(g){var f=function(d,a,b){if(!b){b=a;a={}}a=a||{};d=g.makeArray(d);if(!(a.testIf&&!a.testIf.call(this))){var c=this;g.each(d,function(e,h){c.validations[h]||(c.validations[h]=[]);c.validations[h].push(function(){var i=b.call(this,this[h]);return i===undefined?undefined:a.message||i})})}};g.extend(g.Model,{validate:f,validationMessages:{format:"is invalid",inclusion:"is not a valid option (perhaps out of range)",lengthShort:"is too short",lengthLong:"is too long",presence:"can't be empty",
range:"is out of range"},validateFormatOf:function(d,a,b){f.call(this,d,b,function(c){if(typeof c!="undefined"&&c!=""&&String(c).match(a)==null)return this.Class.validationMessages.format})},validateInclusionOf:function(d,a,b){f.call(this,d,b,function(c){if(typeof c!="undefined")if(g.grep(a,function(e){return e==c}).length==0)return this.Class.validationMessages.inclusion})},validateLengthOf:function(d,a,b,c){f.call(this,d,c,function(e){if(typeof e=="undefined"&&a>0||e.length<a)return this.Class.validationMessages.lengthShort+
" (min="+a+")";else if(typeof e!="undefined"&&e.length>b)return this.Class.validationMessages.lengthLong+" (max="+b+")"})},validatePresenceOf:function(d,a){f.call(this,d,a,function(b){if(typeof b=="undefined"||b==""||b===null)return this.Class.validationMessages.presence})},validateRangeOf:function(d,a,b,c){f.call(this,d,c,function(e){if(typeof e!="undefined"&&e<a||e>b)return this.Class.validationMessages.range+" ["+a+","+b+"]"})}})})(jQuery);
(function(a){function h(d){d=d||window[e][i];return d.replace(/^[^#]*#?(.*)$/,"$1")}var k,o=a.event.special,e="location",i="href",p=document.documentMode,q=a.browser.msie&&(p===undefined||p<8),r="onhashchange"in window&&!q;a.hashchangeDelay=100;o.hashchange=a.extend(o.hashchange,{setup:function(){if(r)return false;a(k.start)},teardown:function(){if(r)return false;a(k.stop)}});k=function(){function d(){f=l=function(b){return b};if(q){j=a('<iframe src="javascript:0"/>').hide().insertAfter("body")[0].contentWindow;
l=function(){return h(j.document[e][i])};f=function(b,c){if(b!==c){c=j.document;c.open().close();c[e].hash="#"+b}};f(h())}}var m={},g,j,f,l;m.start=function(){if(!g){var b=h();f||d();navigator.userAgent.match(/Rhino/)||function c(){var s=h(),n=l(b);if(s!==b){f(b=s,n);a(window).trigger("hashchange")}else if(n!==b)window[e][i]=window[e][i].replace(/#.*/,"")+"#"+n;g=setTimeout(c,a.hashchangeDelay)}()}};m.stop=function(){if(!j){g&&clearTimeout(g);g=0}};return m}()})(jQuery);
(function(f){f.fn.triggerAsync=function(a,b,d,e){if(typeof b=="function"){d=b;b=undefined}if(this[0]){var c=f.Event(a),i=c.preventDefault;c.preventDefault=function(){i.apply(this,arguments);e&&e(this)};jQuery.event.trigger({type:a,_success:d},b,this[0])}else d.call(this);return this};var j={},k=/\.(.*)$/,g=f.event;g.special["default"]={add:function(a){j[a.namespace.replace(k,"")]=true},setup:function(){return true}};var h=g.trigger;g.trigger=function(a,b,d,e){var c=a.type||a;a=typeof a==="object"?
a[jQuery.expando]?a:new jQuery.Event(c,a):new jQuery.Event(c);c=h.call(f.event,a,b,d,e);if(!e&&!a.isDefaultPrevented()&&a.type.indexOf("default")!==0){h("default."+a.type,b,d);a._success&&a._success(a)}if(a.isPaused&&a.isPaused()){a.isDefaultPrevented=a.pausedState.isDefaultPrevented;a.isPropagationStopped=a.pausedState.isPropagationStopped}return c}})(jQuery);
(function(c){var f=function(a){return a!==undefined?(this.array[0]=a):this.array[0]},g=function(a){return a!==undefined?(this.array[1]=a):this.array[1]};c.Vector=function(){this.update(c.makeArray(arguments))};c.Vector.prototype={app:function(a){var b,d=[];for(b=0;b<this.array.length;b++)d.push(a(this.array[b]));return(new c.Vector).update(d)},plus:function(){var a,b=arguments[0]instanceof c.Vector?arguments[0].array:c.makeArray(arguments),d=this.array.slice(0),e=new c.Vector;for(a=0;a<b.length;a++)d[a]=
(d[a]?d[a]:0)+b[a];return e.update(d)},minus:function(){var a,b=arguments[0]instanceof c.Vector?arguments[0].array:c.makeArray(arguments),d=this.array.slice(0),e=new c.Vector;for(a=0;a<b.length;a++)d[a]=(d[a]?d[a]:0)-b[a];return e.update(d)},equals:function(){var a,b=arguments[0]instanceof c.Vector?arguments[0].array:c.makeArray(arguments),d=this.array.slice(0),e=new c.Vector;for(a=0;a<b.length;a++)if(d[a]!=b[a])return null;return e.update(d)},x:f,left:f,width:f,y:g,top:g,height:g,toString:function(){return"("+
this.array[0]+","+this.array[1]+")"},update:function(a){var b;if(this.array)for(b=0;b<this.array.length;b++)delete this.array[b];this.array=a;for(b=0;b<a.length;b++)this[b]=this.array[b];return this}};c.Event.prototype.vector=function(){if(this.originalEvent.synthetic){var a=document.documentElement,b=document.body;return new c.Vector(this.clientX+(a&&a.scrollLeft||b&&b.scrollLeft||0)-(a.clientLeft||0),this.clientY+(a&&a.scrollTop||b&&b.scrollTop||0)-(a.clientTop||0))}else return new c.Vector(this.pageX,
this.pageY)};c.fn.offsetv=function(){if(this[0]==window)return new c.Vector(window.pageXOffset?window.pageXOffset:document.documentElement.scrollLeft,window.pageYOffset?window.pageYOffset:document.documentElement.scrollTop);else{var a=this.offset();return new c.Vector(a.left,a.top)}};c.fn.dimensionsv=function(a){return this[0]==window||!a?new c.Vector(this.width(),this.height()):new c.Vector(this[a+"Width"](),this[a+"Height"]())}})(jQuery);
(function(){var g=jQuery.event,m=function(a,e,d,h){var f,b,c,k,j,i,l,n;for(f=0;f<e.length;f++){b=e[f];k=b.indexOf(".")<0;if(!k){c=b.split(".");b=c.shift();l=new RegExp("(^|\\.)"+c.slice(0).sort().join("\\.(?:.*\\.)?")+"(\\.|$)")}c=(a[b]||[]).slice(0);for(j=0;j<c.length;j++){i=c[j];if(n=k||l.test(i.namespace))if(h){if(i.selector===h)d(b,i.origHandler||i.handler)}else if(h===null)d(b,i.origHandler||i.handler,i.selector);else i.selector||d(b,i.origHandler||i.handler)}}};g.find=function(a,e,d){a=($._data(a)||
{}).events;var h=[];if(!a)return h;m(a,e,function(f,b){h.push(b)},d);return h};g.findBySelector=function(a,e){a=$._data(a).events;var d={},h=function(f,b,c){f=d[f]||(d[f]={});(f[b]||(f[b]=[])).push(c)};if(!a)return d;m(a,e,function(f,b,c){h(c||"",f,b)},null);return d};g.supportTouch="ontouchend"in document;$.fn.respondsTo=function(a){return this.length?g.find(this[0],$.isArray(a)?a:[a]).length>0:false};$.fn.triggerHandled=function(a,e){a=typeof a=="string"?$.Event(a):a;this.trigger(a,e);return a.handled};
g.setupHelper=function(a,e,d){if(!d){d=e;e=null}var h=function(b){var c=b.selector||"";if(c){b=g.find(this,a,c);b.length||$(this).delegate(c,e,d)}else g.find(this,a,c).length||g.add(this,e,d,{selector:c,delegate:this})},f=function(b){var c=b.selector||"";if(c){b=g.find(this,a,c);b.length||$(this).undelegate(c,e,d)}else g.find(this,a,c).length||g.remove(this,e,d,{selector:c,delegate:this})};$.each(a,function(){g.special[this]={add:h,remove:f,setup:function(){},teardown:function(){}}})}})(jQuery);
(function(c){var h=function(a,b){var d=Array.prototype.slice.call(arguments,2);return function(){var e=[this].concat(d,c.makeArray(arguments));return b.apply(a,e)}},g=c.event,i=window.getSelection?function(){window.getSelection().removeAllRanges()}:function(){};c.Drag=function(){};c.extend(c.Drag,{lowerName:"drag",current:null,distance:0,mousedown:function(a,b){if(!(!(a.button===0||a.button==1)||this.current)){var d=new c.Drag,e=a.delegateTarget||b,f=a.handleObj.selector,j=this;this.current=d;d.setup({element:b,
delegate:a.delegateTarget||b,selector:a.handleObj.selector,moved:false,_distance:this.distance,callbacks:{dragdown:g.find(e,["dragdown"],f),draginit:g.find(e,["draginit"],f),dragover:g.find(e,["dragover"],f),dragmove:g.find(e,["dragmove"],f),dragout:g.find(e,["dragout"],f),dragend:g.find(e,["dragend"],f)},destroyed:function(){j.current=null}},a)}}});c.extend(c.Drag.prototype,{setup:function(a,b){c.extend(this,a);this.element=c(this.element);this.event=b;this.allowOtherDrags=this.moved=false;var d=
h(this,this.mousemove),e=h(this,this.mouseup);this._mousemove=d;this._mouseup=e;this._distance=a.distance?a.distance:0;this.mouseStartPosition=b.vector();c(document).bind("mousemove",d);c(document).bind("mouseup",e);if(!this.callEvents("down",this.element,b)){this.noSelection(this.delegate);i()}},destroy:function(){c(document).unbind("mousemove",this._mousemove);c(document).unbind("mouseup",this._mouseup);if(!this.moved)this.event=this.element=null;this.selection(this.delegate);this.destroyed()},
mousemove:function(a,b){if(!this.moved){if(Math.sqrt(Math.pow(b.pageX-this.event.pageX,2)+Math.pow(b.pageY-this.event.pageY,2))<this._distance)return false;this.init(this.element,b);this.moved=true}a=b.vector();this._start_position&&this._start_position.equals(a)||this.draw(a,b)},mouseup:function(a,b){this.moved&&this.end(b);this.destroy()},noSelection:function(a){a=a||this.delegate;document.documentElement.onselectstart=function(){return false};document.documentElement.unselectable="on";this.selectionDisabled=
this.selectionDisabled?this.selectionDisabled.add(a):c(a);this.selectionDisabled.css("-moz-user-select","-moz-none")},selection:function(){if(this.selectionDisabled){document.documentElement.onselectstart=function(){};document.documentElement.unselectable="off";this.selectionDisabled.css("-moz-user-select","")}},init:function(a,b){a=c(a);var d=this.movingElement=this.element=c(a);this._cancelled=false;this.event=b;this.mouseElementPosition=this.mouseStartPosition.minus(this.element.offsetv());this.callEvents("init",
a,b);if(this._cancelled!==true){this.startPosition=d!=this.movingElement?this.movingElement.offsetv():this.currentDelta();this.makePositioned(this.movingElement);this.oldZIndex=this.movingElement.css("zIndex");this.movingElement.css("zIndex",1E3);!this._only&&this.constructor.responder&&this.constructor.responder.compile(b,this)}},makePositioned:function(a){var b;b=a.css("position");if(!b||b=="static"){b={position:"relative"};if(window.opera){b.top="0px";b.left="0px"}a.css(b)}},callEvents:function(a,
b,d,e){var f=this.callbacks[this.constructor.lowerName+a];for(a=0;a<f.length;a++)f[a].call(b,d,this,e);return f.length},currentDelta:function(){return new c.Vector(parseInt(this.movingElement.css("left"),10)||0,parseInt(this.movingElement.css("top"),10)||0)},draw:function(a,b){if(!this._cancelled){i();this.location=a.minus(this.mouseElementPosition);this.move(b);if(!this._cancelled){b.isDefaultPrevented()||this.position(this.location);!this._only&&this.constructor.responder&&this.constructor.responder.show(a,
this,b)}}},position:function(a){var b=this.currentDelta();b=this.movingElement.offsetv().minus(b);this.required_css_position=a.minus(b);this.offsetv=a;a=this.movingElement[0].style;if(!this._cancelled&&!this._horizontal)a.top=this.required_css_position.top()+"px";if(!this._cancelled&&!this._vertical)a.left=this.required_css_position.left()+"px"},move:function(a){this.callEvents("move",this.element,a)},over:function(a,b){this.callEvents("over",this.element,a,b)},out:function(a,b){this.callEvents("out",
this.element,a,b)},end:function(a){if(!this._cancelled){!this._only&&this.constructor.responder&&this.constructor.responder.end(a,this);this.callEvents("end",this.element,a);if(this._revert){var b=this;this.movingElement.animate({top:this.startPosition.top()+"px",left:this.startPosition.left()+"px"},function(){b.cleanup.apply(b,arguments)})}else this.cleanup();this.event=null}},cleanup:function(){this.movingElement.css({zIndex:this.oldZIndex});this.movingElement[0]!==this.element[0]&&!this.movingElement.has(this.element[0]).length&&
!this.element.has(this.movingElement[0]).length&&this.movingElement.css({display:"none"});this._removeMovingElement&&this.movingElement.remove();this.movingElement=this.element=this.event=null},cancel:function(){this._cancelled=true;!this._only&&this.constructor.responder&&this.constructor.responder.clear(this.event.vector(),this,this.event);this.destroy()},ghost:function(a){var b=this.movingElement.clone().css("position","absolute");(a?c(a):this.movingElement).after(b);b.width(this.movingElement.width()).height(this.movingElement.height());
b.offset(this.movingElement.offset());this.movingElement=b;this.noSelection(b);this._removeMovingElement=true;return b},representative:function(a,b,d){this._offsetX=b||0;this._offsetY=d||0;b=this.mouseStartPosition;this.movingElement=c(a);this.movingElement.css({top:b.y()-this._offsetY+"px",left:b.x()-this._offsetX+"px",display:"block",position:"absolute"}).show();this.noSelection(this.movingElement);this.mouseElementPosition=new c.Vector(this._offsetX,this._offsetY)},revert:function(a){this._revert=
a===undefined?true:a;return this},vertical:function(){this._vertical=true;return this},horizontal:function(){return this._horizontal=true},only:function(a){return this._only=a===undefined?true:a},distance:function(a){if(a!==undefined){this._distance=a;return this}else return this._distance}});g.setupHelper(["dragdown","draginit","dragover","dragmove","dragout","dragend"],"mousedown",function(a){c.Drag.mousedown.call(c.Drag,a,this)})})(jQuery);

(function(f){var i=document.defaultView&&document.defaultView.getComputedStyle,o=/([A-Z])/g,l=/-([a-z])/ig,m=function(a,g){return g.toUpperCase()},p=function(a){if(i)return i(a,null);else if(a.currentStyle)return a.currentStyle},q=/float/i,r=/^-?\d+(?:px)?$/i,s=/^-?\d/;f.curStyles=function(a,g){if(!a)return null;for(var j=p(a),c,d,h=a.style,e={},k=0,b,n;k<g.length;k++){b=g[k];c=b.replace(l,m);if(q.test(b)){b=jQuery.support.cssFloat?"float":"styleFloat";c="cssFloat"}if(i){b=b.replace(o,"-$1").toLowerCase();
d=j.getPropertyValue(b);if(b==="opacity"&&d==="")d="1";e[c]=d}else{d=b.replace(l,m);e[c]=j[b]||j[d];if(!r.test(e[c])&&s.test(e[c])){b=h.left;n=a.runtimeStyle.left;a.runtimeStyle.left=a.currentStyle.left;h.left=d==="fontSize"?"1em":e[c]||0;e[c]=h.pixelLeft+"px";h.left=b;a.runtimeStyle.left=n}}}return e};f.fn.curStyles=function(){return f.curStyles(this[0],f.makeArray(arguments))}})(jQuery);
(function(e){e.Drag.prototype.limit=function(b,c){var a=b.curStyles("borderTopWidth","paddingTop","borderLeftWidth","paddingLeft");a=new e.Vector(parseInt(a.borderLeftWidth,10)+parseInt(a.paddingLeft,10)||0,parseInt(a.borderTopWidth,10)+parseInt(a.paddingTop,10)||0);this._limit={offset:b.offsetv().plus(a),size:b.dimensionsv(),center:c===true?"both":c};return this};var j=e.Drag.prototype.position;e.Drag.prototype.position=function(b){if(this._limit){var c=this._limit,a=c.center&&c.center.toLowerCase(),
d=this.movingElement.dimensionsv("outer"),f=a&&a!="x"?d.height()/2:0;a=a&&a!="y"?d.width()/2:0;var g=c.offset.top(),h=c.offset.left(),i=c.size.height();c=c.size.width();b.top()+f<g&&b.top(g-f);b.top()+d.height()-f>g+i&&b.top(g+i-d.height()+f);b.left()+a<h&&b.left(h-a);b.left()+d.width()-a>h+c&&b.left(h+c-d.left()+a)}j.call(this,b)}})(jQuery);
(function(i){var j=function(b,c,e,d,a,g){return c>=d&&c<d+g&&b>=e&&b<e+a};i.fn.within=function(b,c,e){var d=[];this.each(function(){var a=jQuery(this);if(this==document.documentElement)return d.push(this);a=e?jQuery.data(this,"offsetCache")||jQuery.data(this,"offsetCache",a.offset()):a.offset();j(b,c,a.left,a.top,this.offsetWidth,this.offsetHeight)&&d.push(this)});return this.pushStack(jQuery.unique(d),"within",b+","+c)};i.fn.withinBox=function(b,c,e,d,a){var g=[];this.each(function(){var f=jQuery(this);
if(this==document.documentElement)return this.ret.push(this);var h=a?jQuery.data(this,"offset")||jQuery.data(this,"offset",f.offset()):f.offset(),k=f.width();f=f.height();(res=!(h.top>c+d||h.top+f<c||h.left>b+e||h.left+k<b))&&g.push(this)});return this.pushStack(jQuery.unique(g),"withinBox",jQuery.makeArray(arguments).join(","))}})(jQuery);
(function(){jQuery.fn.compare=function(a){try{a=a.jquery?a[0]:a}catch(e){return null}if(window.HTMLElement){var b=HTMLElement.prototype.toString.call(a);if(b=="[xpconnect wrapped native prototype]"||b=="[object XULElement]"||b==="[object Window]")return null}if(this[0].compareDocumentPosition)return this[0].compareDocumentPosition(a);if(this[0]==document&&a!=document)return 8;b=(this[0]!==a&&this[0].contains(a)&&16)+(this[0]!=a&&a.contains(this[0])&&8);var c=document.documentElement;if(this[0].sourceIndex){b+=
this[0].sourceIndex<a.sourceIndex&&4;b+=this[0].sourceIndex>a.sourceIndex&&2;b+=(this[0].ownerDocument!==a.ownerDocument||this[0]!=c&&this[0].sourceIndex<=0||a!=c&&a.sourceIndex<=0)&&1}else{c=document.createRange();var d=document.createRange();c.selectNode(this[0]);d.selectNode(a);c.compareBoundaryPoints(Range.START_TO_START,d)}return b}})(jQuery);
(function(f){var m=f.event,k=["dropover","dropon","dropout","dropinit","dropmove","dropend"];f.Drop=function(a,b){jQuery.extend(this,a);this.element=f(b)};f.each(k,function(){m.special[this]={add:function(){var a=f(this),b=a.data("dropEventCount")||0;a.data("dropEventCount",b+1);b==0&&f.Drop.addElement(this)},remove:function(){var a=f(this),b=a.data("dropEventCount")||0;a.data("dropEventCount",b-1);b<=1&&f.Drop.removeElement(this)}}});f.extend(f.Drop,{lowerName:"drop",_rootElements:[],_elements:f(),
last_active:[],endName:"dropon",addElement:function(a){for(var b=0;b<this._rootElements.length;b++)if(a==this._rootElements[b])return;this._rootElements.push(a)},removeElement:function(a){for(var b=0;b<this._rootElements.length;b++)if(a==this._rootElements[b]){this._rootElements.splice(b,1);return}},sortByDeepestChild:function(a,b){a=a.element.compare(b.element);if(a&16||a&4)return 1;if(a&8||a&2)return-1;return 0},isAffected:function(a,b,c){return c.element!=b.element&&c.element.within(a[0],a[1],
c._cache).length==1},deactivate:function(a,b,c){b.out(c,a);a.callHandlers(this.lowerName+"out",a.element[0],c,b)},activate:function(a,b,c){b.over(c,a);a.callHandlers(this.lowerName+"over",a.element[0],c,b)},move:function(a,b,c){a.callHandlers(this.lowerName+"move",a.element[0],c,b)},compile:function(a,b){if(this.dragging||b){if(!this.dragging){this.dragging=b;this.last_active=[]}for(var c,e,d,g=[],i=this.dragging,h=0;h<this._rootElements.length;h++){b=this._rootElements[h];c=f.event.findBySelector(b,
k);for(e in c){d=e?jQuery(e,b):[b];for(var j=0;j<d.length;j++)this.addCallbacks(d[j],c[e],i)&&g.push(d[j])}}this.add(g,a,i)}},addCallbacks:function(a,b,c){var e=f.data(a,"_dropData");if(e){if(!c){for(var d in b)e[d]=e[d]?e[d].concat(b[d]):b[d];return false}}else{f.data(a,"_dropData",new f.Drop(b,a));return true}},add:function(a,b,c){for(var e=0,d;e<a.length;){d=f.data(a[e],"_dropData");d.callHandlers(this.lowerName+"init",a[e],b,c);if(d._canceled)a.splice(e,1);else e++}this._elements.push.apply(this._elements,
a)},show:function(a,b,c){if(this._elements.length){var e=[],d=true,g=0,i,h,j,l=this.last_active;for(i=this;g<this._elements.length;)if(h=f.data(this._elements[g],"_dropData")){g++;i.isAffected(a,b,h)&&e.push(h)}else this._elements.splice(g,1);e.sort(this.sortByDeepestChild);c.stopRespondPropagate=function(){d=false};h=e.slice();this.last_active=e;for(a=0;a<l.length;a++){i=l[a];for(g=0;j=h[g];)if(i==j){h.splice(g,1);break}else g++;j||this.deactivate(i,b,c);if(!d)return}for(g=0;g<h.length;g++){this.activate(h[g],
b,c);if(!d)return}for(g=0;g<e.length;g++){this.move(e[g],b,c);if(!d)return}}},end:function(a,b){for(var c,e=this.lowerName+"end",d=0;d<this.last_active.length;d++){c=this.last_active[d];this.isAffected(a.vector(),b,c)&&c[this.endName]&&c.callHandlers(this.endName,null,a,b)}for(d=0;d<this._elements.length;d++)(c=f.data(this._elements[d],"_dropData"))&&c.callHandlers(e,null,a,b);this.clear()},clear:function(){this._elements.each(function(){f.removeData(this,"_dropData")});this._elements=f();delete this.dragging}});
f.Drag.responder=f.Drop;f.extend(f.Drop.prototype,{callHandlers:function(a,b,c,e){for(var d=this[a]?this[a].length:0,g=0;g<d;g++)this[a][g].call(b||this.element[0],c,this,e)},cache:function(a){this._cache=a!=null?a:true},cancel:function(){this._canceled=true}})})(jQuery);
(function(f){f.Drag.prototype.scrolls=function(a,c){a=f(a);for(var b=0;b<a.length;b++)this.constructor.responder._elements.push(a.eq(b).data("_dropData",new f.Scrollable(a[b],c))[0])};f.Scrollable=function(a,c){this.element=jQuery(a);this.options=f.extend({distance:30,delta:function(b,g){return(g-b)/2},direction:"xy"},c);this.x=this.options.direction.indexOf("x")!=-1;this.y=this.options.direction.indexOf("y")!=-1};f.extend(f.Scrollable.prototype,{init:function(a){this.element=jQuery(a)},callHandlers:function(a,
c,b,g){this[a](c||this.element[0],b,this,g)},dropover:function(){},dropon:function(){this.clear_timeout()},dropout:function(){this.clear_timeout()},dropinit:function(){},dropend:function(){},clear_timeout:function(){if(this.interval){clearTimeout(this.interval);this.interval=null}},distance:function(a){return(30-a)/2},dropmove:function(a,c,b,g){this.clear_timeout();var d=c.vector();b=f(a==document.documentElement?window:a);var h=b.dimensionsv("outer"),e=b.offsetv();b=e.y()+h.y()-d.y();var k=d.y()-
e.y();h=e.x()+h.x()-d.x();d=d.x()-e.x();var i=0,j=0;e=this.options.distance;if(b<e&&this.y)j=this.options.delta(b,e);else if(k<e&&this.y)j=-this.options.delta(k,e);if(h<e&&this.options&&this.x)i=this.options.delta(h,e);else if(d<e&&this.x)i=-this.options.delta(d,e);if(i||j){var l=this;this.interval=setTimeout(function(){l.move(f(a),g.movingElement,i,j,c,c.clientX,c.clientY,c.screenX,c.screenY)},15)}},move:function(a,c,b,g,d){a.scrollTop(a.scrollTop()+g);a.scrollLeft(a.scrollLeft()+b);c.trigger(f.event.fix({type:"mousemove",
clientX:d.clientX,clientY:d.clientY,screenX:d.screenX,screenY:d.screenY,pageX:d.pageX,pageY:d.pageY}))}})})(jQuery);
(function(e){var f=function(a,b){return Math.round(a/b)*b};e.Drag.prototype.step=function(a,b,d){if(typeof a=="number")a={x:a,y:a};b=b||e(document.body);this._step=a;var c=b.curStyles("borderTopWidth","paddingTop","borderLeftWidth","paddingLeft");a=parseInt(c.borderTopWidth)+parseInt(c.paddingTop);c=parseInt(c.borderLeftWidth)+parseInt(c.paddingLeft);this._step.offset=b.offsetv().plus(c,a);this._step.center=d;return this};var h=e.Drag.prototype.position;e.Drag.prototype.position=function(a){if(this._step){var b=
this._step,d=b.center&&b.center.toLowerCase(),c=this.movingElement.dimensionsv("outer"),g=b.offset.top()-(d&&d!="x"?c.height()/2:0);b=b.offset.left()-(d&&d!="y"?c.width()/2:0);this._step.x&&a.left(Math.round(b+f(a.left()-b,this._step.x)));this._step.y&&a.top(Math.round(g+f(a.top()-g,this._step.y)))}h.call(this,a)}})(jQuery);
(function(a){a.Hover=function(){this._delay=a.Hover.delay;this._distance=a.Hover.distance;this._leave=a.Hover.leave};a.extend(a.Hover,{delay:100,distance:10,leave:0});a.extend(a.Hover.prototype,{delay:function(b){this._delay=b;return this},distance:function(b){this._distance=b;return this},leave:function(b){this._leave=b;return this}});var h=a.event;h.setupHelper(["hoverinit","hoverenter","hoverleave","hovermove"],"mouseenter",function(b){var e=b.delegateTarget||b.currentTarget,f=b.handleObj.selector;
if(!a.data(e,"_hover"+f)){a.data(e,"_hover"+f,true);var i={pageX:b.pageX,pageY:b.pageY},j=0,k,d=this,m=false,n=b,c=new a.Hover,l,p=function(){a.each(h.find(e,["hoverleave"],f),function(){this.call(d,b,c)});o()},q=function(g){clearTimeout(l);j+=Math.pow(g.pageX-i.pageX,2)+Math.pow(g.pageY-i.pageY,2);i={pageX:g.pageX,pageY:g.pageY};n=g},r=function(){clearTimeout(k);if(m)if(c._leave===0)p();else{clearTimeout(l);l=setTimeout(function(){p()},c._leave)}else o()},o=function(){a(d).unbind("mouseleave",r);
a(d).unbind("mousemove",q);a.removeData(e,"_hover"+f)};a(d).bind("mousemove",q).bind("mouseleave",r);a.each(h.find(e,["hoverinit"],f),function(){this.call(d,b,c)});k=setTimeout(function(){if(j<c._distance&&a(d).queue().length==0){a.each(h.find(e,["hoverenter"],f),function(){this.call(d,n,c)});m=true}else{j=0;k=setTimeout(arguments.callee,c._delay)}},c._delay)}})})(jQuery);
(function(b){var c=b(),j=0,d=b(window),k=0,l=0,m;b(function(){k=d.width();l=d.height()});b.event.special.resize={setup:function(){if(this!==window){c.push(this);b.unique(c)}return this!==window},teardown:function(){c=c.not(this);return this!==window},add:function(h){h.origHandler=h.handler;h.handler=function(a,e){var f=this===window;if(f&&a.originalEvent){a=d.width();f=d.height();if(a!=k||f!=l){k=a;l=f;clearTimeout(m);m=setTimeout(function(){d.trigger("resize")},1)}}else if(j===0){j++;e=e===false?
a.target:this;b.event.handle.call(e,a);if(!a.isPropagationStopped()){for(var g=c.index(this),n=c.length,i,o;++g<n&&(i=c[g])&&(f||b.contains(e,i));){b.event.handle.call(i,a);if(a.isPropagationStopped())for(;++g<n&&(o=c[g]);)if(!b.contains(i,o)){g--;break}}a.stopImmediatePropagation()}j--}else h.origHandler.call(this,a,e)}}};b([document,window]).bind("resize",function(){})})(jQuery);
(function(b){var c=function(){return false},e=function(){return true};b.Event.prototype.isPaused=c;b.Event.prototype.pause=function(){this.pausedState={isDefaultPrevented:this.isDefaultPrevented()?e:c,isPropagationStopped:this.isPropagationStopped()?e:c};this.stopImmediatePropagation();this.preventDefault();this.isPaused=e};b.Event.prototype.resume=function(){var a=this.handleObj,g=this.currentTarget,d=jQuery.event.special[a.origType],h=d&&d.handle;d||(jQuery.event.special[a.origType]={});jQuery.event.special[a.origType].handle=
function(f){if(f.handleObj===a&&f.currentTarget===g)if(d)jQuery.event.special[a.origType].handle=h;else delete jQuery.event.special[a.origType]};delete this.pausedState;this.isPaused=this.isImmediatePropagationStopped=c;this.isPropagationStopped()||b.event.trigger(this,[],this.target)}})(jQuery);
(function(h){var p=function(a){return a.replace(/^\/\//,"").replace(/[\/\.]/g,"_")},s=h.makeArray,B=1,e=h.View=function(a,b,c,d){if(typeof c==="function"){d=c;c=undefined}var f=C(b);if(f.length){var g=h.Deferred();f.push(t(a,true));h.when.apply(h,f).then(function(j){var k=s(arguments),l=k.pop()[0];if(n(b))b=u(j);else for(var m in b)if(n(b[m]))b[m]=u(k.shift());k=l(b,c);g.resolve(k);d&&d(k)});return g.promise()}else{var i;f=typeof d==="function";g=t(a,f);if(f){i=g;g.done(function(j){d(j(b,c))})}else g.done(function(j){i=
j(b,c)});return i}},v=function(a,b){if(!a.match(/[^\s]/))throw"$.View ERROR: There is no template or an empty template at "+b;},t=function(a,b){return h.ajax({url:a,dataType:"view",async:b})},n=function(a){return a&&h.isFunction(a.always)},C=function(a){var b=[];if(n(a))return[a];else for(var c in a)n(a[c])&&b.push(a[c]);return b},u=function(a){return h.isArray(a)&&a.length===3&&a[1]==="success"?a[0]:a};h.ajaxTransport("view",function(a,b){var c=b.url;a=c.match(/\.[\w\d]+$/);var d,f,g,i,j=function(l){l=
d.renderer(g,l);if(e.cache)e.cached[g]=l;return{view:l}};if(f=document.getElementById(c))a="."+f.type.match(/\/(x\-)?(.+)/)[2];if(!a){a=e.ext;c+=e.ext}g=p(c);if(c.match(/^\/\//)){var k=c.substr(2);c=typeof steal==="undefined"?(c="/"+k):steal.root.mapJoin(k)+""}d=e.types[a];return{send:function(l,m){if(e.cached[g])return m(200,"success",{view:e.cached[g]});else if(f)m(200,"success",j(f.innerHTML));else i=h.ajax({async:b.async,url:c,dataType:"text",error:function(){v("",c);m(404)},success:function(w){v(w,
c);m(200,"success",j(w))}})},abort:function(){i&&i.abort()}}});h.extend(e,{hookups:{},hookup:function(a){var b=++B;e.hookups[b]=a;return b},cached:{},cache:true,register:function(a){this.types["."+a.suffix]=a;window.steal&&steal.type(a.suffix+" view js",function(b,c){var d=e.types["."+b.type],f=p(b.rootSrc+"");b.text=d.script(f,b.text);c()})},types:{},ext:".ejs",registerScript:function(a,b,c){return"$.View.preload('"+b+"',"+e.types["."+a].script(b,c)+");"},preload:function(a,b){e.cached[a]=function(c,
d){return b.call(c,c,d)}}});window.steal&&steal.type("view js",function(a,b){var c=e.types["."+a.type],d=p(a.rootSrc+"");a.text="steal('"+(c.plugin||"jquery/view/"+a.type)+"').then(function($){$.View.preload('"+d+"',"+a.text+");\n})";b()});var x,o,y,z,q,A,r,D={val:true,text:true};x=function(a){var b=h.fn[a];h.fn[a]=function(){var c=s(arguments),d,f,g=this;if(n(c[0])){c[0].done(function(i){o.call(g,[i],b)});return this}else if(y(c)){if(d=A(c)){f=c[d];c[d]=function(i){o.call(g,[i],b);f.call(g,i)};e.apply(e,
c);return this}c=e.apply(e,c);if(n(c)){c.done(function(i){o.call(g,[i],b)});return this}else c=[c]}return D[a]?b.apply(this,c):o.call(this,c,b)}};o=function(a,b){var c;for(var d in e.hookups)break;if(d&&a[0]&&z(a[0])){c=e.hookups;e.hookups={};a[0]=h(a[0])}b=b.apply(this,a);c&&r(a[0],c);return b};y=function(a){var b=typeof a[1];return typeof a[0]=="string"&&(b=="object"||b=="function")&&!q(a[1])};q=function(a){return a.nodeType||a.jquery};z=function(a){if(q(a))return true;else if(typeof a==="string"){a=
h.trim(a);return a.substr(0,1)==="<"&&a.substr(a.length-1,1)===">"&&a.length>=3}else return false};A=function(a){return typeof a[3]==="function"?3:typeof a[2]==="function"&&2};r=function(a,b){var c,d=0,f,g;a=a.filter(function(){return this.nodeType!=3});a=a.add("[data-view-id]",a);for(c=a.length;d<c;d++)if(a[d].getAttribute&&(f=a[d].getAttribute("data-view-id"))&&(g=b[f])){g(a[d],f);delete b[f];a[d].removeAttribute("data-view-id")}h.extend(e.hookups,b)};h.fn.hookup=function(){var a=e.hookups;e.hookups=
{};r(this,a);return this};h.each(["prepend","append","after","before","text","html","replaceWith","val"],function(a,b){x(b)})})(jQuery);
(function(f){f.String.rsplit=function(a,e){for(var b=e.exec(a),c=[],d;b!==null;){d=b.index;if(d!==0){c.push(a.substring(0,d));a=a.slice(d)}c.push(b[0]);a=a.slice(b[0].length);b=e.exec(a)}a!==""&&c.push(a);return c}})(jQuery);
(function(i){var v=function(a){eval(a)},p=i.String.rsplit,k=i.extend,w=i.isArray,x=/\r\n/g,y=/\r/g,z=/\n/g,A=/\n/,B=/\\/g,q=/"/g,C=/'/g,D=/\t/g,E=/\{/g,F=/\}/g,r=/\s*\(([\$\w]+)\)\s*->([^\n]*)/,s=function(a){return a.replace(B,"\\\\").replace(z,"\\n").replace(q,'\\"').replace(D,"\\t")},G=function(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(q,"&#34;").replace(C,"&#39;")},m=i.View,n=function(a){var b=a.match(E);a=a.match(F);return(b?b.length:0)-(a?a.length:0)},
g=function(a){if(this.constructor!=g){var b=new g(a);return function(c,e){return b.render(c,e)}}if(typeof a=="function")this.template={fn:a};else{k(this,g.options,a);this.template=H(this.text,this.type,this.name)}};window.jQuery&&(jQuery.EJS=g);g.prototype.render=function(a,b){a=a||{};this._extra_helpers=b;b=new g.Helpers(a,b||{});return this.template.fn.call(a,a,b)};k(g,{text:function(a){if(typeof a=="string")return a;if(a===null||a===undefined)return"";var b=a.hookup&&function(c,e){a.hookup.call(a,
c,e)}||typeof a=="function"&&a||w(a)&&function(c,e){for(var d=0;d<a.length;d++)a[d].hookup?a[d].hookup(c,e):a[d](c,e)};if(b)return"data-view-id='"+m.hookup(b)+"'";return a.toString?a.toString():""},clean:function(a){return typeof a=="string"?G(a):typeof a=="number"?a:g.text(a)},options:{type:"<",ext:".ejs"}});var t=function(a,b,c){b=p(b,A);for(var e=0;e<b.length;e++)I(a,b[e],c)},I=function(a,b,c){a.lines++;b=p(b,a.splitter);for(var e,d=0;d<b.length;d++){e=b[d];e!==null&&c(e,a)}},J=function(a,b){var c=
{};k(c,{left:a+"%",right:"%"+b,dLeft:a+"%%",dRight:"%%"+b,eeLeft:a+"%==",eLeft:a+"%=",cmnt:a+"%#",scan:t,lines:0});c.splitter=new RegExp("("+[c.dLeft,c.dRight,c.eeLeft,c.eLeft,c.cmnt,c.left,c.right+"\n",c.right,"\n"].join(")|(").replace(/\[/g,"\\[").replace(/\]/g,"\\]")+")");return c},H=function(a,b,c){a=a.replace(x,"\n").replace(y,"\n");b=b||"<";var e=new g.Buffer(["var ___v1ew = [];"],[]),d="",u=function(h){e.push("___v1ew.push(",'"',s(h),'");')},l=null,o=function(){d=""},j=[];t(J(b,b==="["?"]":
">"),a||"",function(h,f){if(l===null)switch(h){case "\n":d+="\n";u(d);e.cr();o();break;case f.left:case f.eLeft:case f.eeLeft:case f.cmnt:l=h;d.length>0&&u(d);o();break;case f.dLeft:d+=f.left;break;default:d+=h;break}else switch(h){case f.right:switch(l){case f.left:h=n(d);f=j.length&&h==-1?j.pop():";";f==="));"&&e.push("return ___v1ew.join('')");e.push(d,f);h===1&&j.push(";");break;case f.eLeft:(h=n(d))&&j.push("));");if(r.test(d)){f=d.match(r);d="function(__){var "+f[1]+"=$(__);"+f[2]+"}"}e.push("___v1ew.push(",
"jQuery.EJS.clean(",d,h?"var ___v1ew = [];":"));");break;case f.eeLeft:(h=n(d))&&j.push("));");e.push("___v1ew.push(","jQuery.EJS.text(",d,h?"var ___v1ew = [];":"));");break}l=null;o();break;case f.dRight:d+=f.right;break;default:d+=h;break}});d.length>0&&e.push("___v1ew.push(",'"',s(d)+'");');a={out:"try { with(_VIEW) { with (_CONTEXT) {"+e.close()+" return ___v1ew.join('')}}}catch(e){e.lineNumber=null;throw e;}"};v.call(a,"this.fn = (function(_CONTEXT,_VIEW){"+a.out+"});\r\n//@ sourceURL="+c+".js");
return a};g.Buffer=function(a,b){this.line=[];this.script=[];this.post=b;this.push.apply(this,a)};g.Buffer.prototype={push:function(){this.line.push.apply(this.line,arguments)},cr:function(){this.script.push(this.line.join(""),"\n");this.line=[]},close:function(){if(this.line.length>0){this.script.push(this.line.join(""));this.line=[]}this.post.length&&this.push.apply(this,this.post);this.script.push(";");return this.script.join("")}};g.Helpers=function(a,b){this._data=a;this._extras=b;k(this,b)};
g.Helpers.prototype={plugin:function(){var a=i.makeArray(arguments),b=a.shift();return function(c){c=i(c);c[b].apply(c,a)}},view:function(a,b,c){c=c||this._extras;b=b||this._data;return m(a,b,c)}};m.register({suffix:"ejs",script:function(a,b){return"jQuery.EJS(function(_CONTEXT,_VIEW) { "+(new g({text:b,name:a})).template.out+" })"},renderer:function(a,b){return g({text:b,name:a})}})})(jQuery);
(function(){Jaml=function(){return{templates:{},helpers:{},register:function(a,b){this.templates[a]=b},render:function(a,b){return(new Jaml.Template(this.templates[a])).render(b)},registerHelper:function(a,b){this.helpers[a]=b}}}();Jaml.Node=function(a){this.tagName=a;this.attributes={};this.children=[]};Jaml.Node.prototype={setAttributes:function(a){for(var b in a)this.attributes[b=="cls"?"class":b]=a[b]},addChild:function(a){this.children.push(a)},render:function(a){a=a||0;var b=[],c=[],h=this instanceof
Jaml.TextNode,f=this.multiLineTag();for(var d in this.attributes)c.push(d+"="+this.attributes[d]);h||b.push(this.getPadding(a));b.push("<"+this.tagName);for(d in this.attributes)b.push(" "+d+'="'+this.attributes[d]+'"');if(this.isSelfClosing())b.push(" />\n");else{b.push(">");f&&b.push("\n");for(c=0;c<this.children.length;c++)b.push(this.children[c].render(a+2));f&&b.push(this.getPadding(a));b.push("</",this.tagName,">\n")}return b.join("")},multiLineTag:function(){var a=this.children.length,b=a>
0;if(a==1&&this.children[0]instanceof Jaml.TextNode)b=false;return b},getPadding:function(a){return(new Array(a+1)).join(" ")},isSelfClosing:function(){for(var a=false,b=this.selfClosingTags.length-1;b>=0;b--)if(this.tagName==this.selfClosingTags[b])a=true;return a},selfClosingTags:["img","meta","br","hr"]};Jaml.TextNode=function(a){this.text=a};Jaml.TextNode.prototype={render:function(){return this.text}};Jaml.Template=function(a){this.tpl=a;this.nodes=[]};Jaml.Template.prototype={render:function(a){a=
a||{};if(a.constructor.toString().indexOf("Array")==-1)a=[a];with(this)for(var b=0;b<a.length;b++)eval("("+this.tpl.toString()+")(data[i])");a=this.getRoots();var c="";for(b=0;b<a.length;b++)c+=a[b].render();return c},getRoots:function(){for(var a=[],b=0;b<this.nodes.length;b++){var c=this.nodes[b];c.parent==undefined&&a.push(c)}return a},tags:["html","head","body","script","meta","title","link","script","div","p","span","a","img","br","hr","table","tr","th","td","thead","tbody","ul","ol","li","dl",
"dt","dd","h1","h2","h3","h4","h5","h6","h7","form","input","label"]};(function(){for(var a=Jaml.Template.prototype.tags,b=a.length-1;b>=0;b--){var c=a[b];Jaml.Template.prototype[c]=function(h){return function(f){var d=new Jaml.Node(h),g=typeof f=="object"&&!(f instanceof Jaml.Node)&&!(f instanceof Jaml.TextNode);g&&d.setAttributes(f);for(g=g?1:0;g<arguments.length;g++){var e=arguments[g];if(typeof e=="string"||e==undefined)e=new Jaml.TextNode(e||"");if(e instanceof Jaml.Node||e instanceof Jaml.TextNode)e.parent=
d;d.addChild(e)}this.nodes.push(d);return d}}(c)}})();$.View.register({suffix:"jaml",script:function(a,b){return"((function(){ Jaml.register("+a+", "+b+"); return function(data){return Jaml.render("+a+", data)} })())"},renderer:function(a,b){var c;eval("func = ("+b+")");Jaml.register(a,c);return function(h){return Jaml.render(a,h)}}})})(jQuery);
(function(){function d(a,b){a="var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+a.replace(/[\r\t\n]/g," ").replace(/'(?=[^%]*%})/g,"\t").split("'").join("\\'").split("\t").join("'").replace(/{%=(.+?)%}/g,"',$1,'").split("{%").join("');").split("%}").join("p.push('")+"');}return p.join('');";var c=new Function("obj",a);c.body=a;return b?c(b):c}$.View.register({suffix:"micro",renderer:function(a,b){var c=d(b);return function(e){return c(e)}},script:function(a,b){return"function(obj){"+
d(b).body+"}"}});jQuery.View.ext=".micro"})(jQuery);
(function(){function r(a,b,d,c){c={data:c||(b?b.data:{}),_wrap:b?b._wrap:null,tmpl:null,parent:b||null,nodes:[],calls:H,nest:I,wrap:J,html:K,update:L};a&&jQuery.extend(c,a,{nodes:[],parent:b});if(d){c.tmpl=d;c._ctnt=c._ctnt||c.tmpl(jQuery,c);c.key=++s;(x.length?t:l)[s]=c}return c}function u(a,b,d){var c;d=d?jQuery.map(d,function(f){return typeof f==="string"?a.key?f.replace(/(<\w+)(?=[\s>])(?![^>]*_tmplitem)([^>]*)/g,"$1 "+p+'="'+a.key+'" $2'):f:u(f,a,f._ctnt)}):a;if(b)return d;d=d.join("");d.replace(/^\s*([^<\s][^<]*)?(<[\w\W]+>)([^>]*[^>\s])?\s*$/,
function(f,e,g,i){c=jQuery(g).get();B(c);if(e)c=y(e).concat(c);if(i)c=c.concat(y(i))});return c?c:y(d)}function y(a){var b=document.createElement("div");b.innerHTML=a;return jQuery.makeArray(b.childNodes)}function C(a){return new Function("jQuery","$item","var $=jQuery,call,_=[],$data=$item.data;with($data){_.push('"+jQuery.trim(a).replace(/([\\'])/g,"\\$1").replace(/[\r\t\n]/g," ").replace(/\$\{([^\}]*)\}/g,"{{= $1}}").replace(/\{\{(\/?)(\w+|.)(?:\(((?:[^\}]|\}(?!\}))*?)?\))?(?:\s+(.*?)?)?(\(((?:[^\}]|\}(?!\}))*?)\))?\s*\}\}/g,
function(b,d,c,f,e,g,i){b=jQuery.tmpl.tag[c];if(!b)throw"Template command not found: "+c;c=b._default||[];if(g&&!/\w$/.test(e)){e+=g;g=""}if(e){e=z(e);i=i?","+z(i)+")":g?")":"";i=g?e.indexOf(".")>-1?e+g:"("+e+").call($item"+i:e;g=g?i:"(typeof("+e+")==='function'?("+e+").call($item):("+e+"))"}else g=i=c.$1||"null";f=z(f);return"');"+b[d?"close":"open"].split("$notnull_1").join(e?"typeof("+e+")!=='undefined' && ("+e+")!=null":"true").split("$1a").join(g).split("$1").join(i).split("$2").join(f?f.replace(/\s*([^\(]+)\s*(\((.*?)\))?/g,
function(o,m,v,k){return(k=k?","+k+")":v?")":"")?"("+m+").call($item"+k:o}):c.$2||"")+"_.push('"})+"');}return _;")}function D(a,b){a._wrap=u(a,true,jQuery.isArray(b)?b:[E.test(b)?b:jQuery(b).html()]).join("")}function z(a){return a?a.replace(/\\'/g,"'").replace(/\\\\/g,"\\"):null}function M(a){var b=document.createElement("div");b.appendChild(a.cloneNode(true));return b.innerHTML}function B(a){function b(m){function v(A){A+=d;h=e[A]=e[A]||r(h,l[h.parent.key+d]||h.parent,null,true)}var k,j=m,h,q;
if(q=m.getAttribute(p)){for(;j.parentNode&&(j=j.parentNode).nodeType===1&&!(k=j.getAttribute(p)););if(k!==q){j=j.parentNode?j.nodeType===11?0:j.getAttribute(p)||0:0;if(!(h=l[q])){h=t[q];h=r(h,l[j]||t[j],null,true);h.key=++s;l[s]=h}n&&v(q)}m.removeAttribute(p)}else if(n&&(h=jQuery.data(m,"tmplItem"))){v(h.key);l[h.key]=h;j=(j=jQuery.data(m.parentNode,"tmplItem"))?j.key:0}if(h){for(k=h;k&&k.key!=j;){k.nodes.push(m);k=k.parent}delete h._ctnt;delete h._wrap;jQuery.data(m,"tmplItem",h)}}var d="_"+n,c,
f,e={},g,i,o;g=0;for(i=a.length;g<i;g++)if((c=a[g]).nodeType===1){f=c.getElementsByTagName("*");for(o=f.length-1;o>=0;o--)b(f[o]);b(c)}}function H(a,b,d,c){if(!a)return x.pop();x.push({_:a,tmpl:b,item:this,data:d,options:c})}function I(a,b,d){return jQuery.tmpl(jQuery.template(a),b,d,this)}function J(a,b){var d=a.options||{};d.wrapped=b;return jQuery.tmpl(jQuery.template(a.tmpl),a.data,d,a.item)}function K(a,b){var d=this._wrap;return jQuery.map(jQuery(jQuery.isArray(d)?d.join(""):d).filter(a||"*"),
function(c){return b?c.innerText||c.textContent:c.outerHTML||M(c)})}function L(){var a=this.nodes;jQuery.tmpl(null,null,null,this).insertBefore(a[0]);jQuery(a).remove()}var F=jQuery.fn.domManip,p="_tmplitem",E=/^[^<]*(<[\w\W]+>)[^>]*$|\{\{\! /,l={},t={},w,G={key:0,data:{}},s=0,n=0,x=[];jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){jQuery.fn[a]=function(d){var c=[];d=jQuery(d);var f,e,g;f=this.length===1&&this[0].parentNode;
w=l||{};if(f&&f.nodeType===11&&f.childNodes.length===1&&d.length===1){d[b](this[0]);c=this}else{e=0;for(g=d.length;e<g;e++){n=e;f=(e>0?this.clone(true):this).get();jQuery.fn[b].apply(jQuery(d[e]),f);c=c.concat(f)}n=0;c=this.pushStack(c,a,d.selector)}d=w;w=null;jQuery.tmpl.complete(d);return c}});jQuery.fn.extend({tmpl:function(a,b,d){return jQuery.tmpl(this[0],a,b,d)},tmplItem:function(){return jQuery.tmplItem(this[0])},template:function(a){return jQuery.template(a,this[0])},domManip:function(a,b,
d){if(a[0]&&a[0].nodeType){for(var c=jQuery.makeArray(arguments),f=a.length,e=0,g;e<f&&!(g=jQuery.data(a[e++],"tmplItem")););if(f>1)c[0]=[jQuery.makeArray(a)];if(g&&n)c[2]=function(i){jQuery.tmpl.afterManip(this,i,d)};F.apply(this,c)}else F.apply(this,arguments);n=0;w||jQuery.tmpl.complete(l);return this}});jQuery.extend({tmpl:function(a,b,d,c){var f=!c;if(f){c=G;a=jQuery.template[a]||jQuery.template(null,a);t={}}else if(!a){a=c.tmpl;l[c.key]=c;c.nodes=[];c.wrapped&&D(c,c.wrapped);return jQuery(u(c,
null,c.tmpl(jQuery,c)))}if(!a)return[];if(typeof b==="function")b=b.call(c||{});d&&d.wrapped&&D(d,d.wrapped);b=jQuery.isArray(b)?jQuery.map(b,function(e){return e?r(d,c,a,e):null}):[r(d,c,a,b)];return f?jQuery(u(c,null,b)):b},tmplItem:function(a){var b;if(a instanceof jQuery)a=a[0];for(;a&&a.nodeType===1&&!(b=jQuery.data(a,"tmplItem"))&&(a=a.parentNode););return b||G},template:function(a,b){if(b){if(typeof b==="string")b=C(b);else if(b instanceof jQuery)b=b[0]||{};if(b.nodeType)b=jQuery.data(b,"tmpl")||
jQuery.data(b,"tmpl",C(b.innerHTML));return typeof a==="string"?(jQuery.template[a]=b):b}return a?typeof a!=="string"?jQuery.template(null,a):jQuery.template[a]||jQuery.template(null,E.test(a)?a:jQuery(a)):null},encode:function(a){return(""+a).split("<").join("&lt;").split(">").join("&gt;").split('"').join("&#34;").split("'").join("&#39;")}});jQuery.extend(jQuery.tmpl,{tag:{tmpl:{_default:{$2:"null"},open:"if($notnull_1){_=_.concat($item.nest($1,$2));}"},wrap:{_default:{$2:"null"},open:"$item.calls(_,$1,$2);_=[];",
close:"call=$item.calls();_=call._.concat($item.wrap(call,_));"},each:{_default:{$2:"$index, $value"},open:"if($notnull_1){$.each($1a,function($2){with(this){",close:"}});}"},"if":{open:"if(($notnull_1) && $1a){",close:"}"},"else":{_default:{$1:"true"},open:"}else if(($notnull_1) && $1a){"},html:{open:"if($notnull_1){_.push($1a);}"},"=":{_default:{$1:"$data"},open:"if($notnull_1){_.push($.encode($1a));}"},"!":{open:""}},complete:function(){l={}},afterManip:function(a,b,d){var c=b.nodeType===11?jQuery.makeArray(b.childNodes):
b.nodeType===1?[b]:[];d.call(a,b);B(c);n++}});$.View.register({suffix:"tmpl",renderer:function(a,b){var d=$.template(null,b);return function(c){return d.call($,$,{data:c}).join("")}},script:function(a,b){return"function(data){return ("+$.template(null,b)+").call(jQuery, jQuery, {data: data}).join(''); }"}});jQuery.View.ext=".tmpl"})(jQuery);
(function(e){e.toJSON=function(a,c,b,h){if(typeof JSON=="object"&&JSON.stringify)return JSON.stringify(a,c,b);if(!h&&e.isFunction(c))a=c("",a);if(typeof b=="number")b="          ".substring(0,b);b=typeof b=="string"?b.substring(0,10):"";var f=typeof a;if(a===null)return"null";if(!(f=="undefined"||f=="function")){if(f=="number"||f=="boolean")return a+"";if(f=="string")return e.quoteString(a);if(f=="object"){if(typeof a.toJSON=="function")return e.toJSON(a.toJSON(),c,b,true);if(a.constructor===Date){b=
a.getUTCMonth()+1;if(b<10)b="0"+b;h=a.getUTCDate();if(h<10)h="0"+h;var i=a.getUTCFullYear(),g=a.getUTCHours();if(g<10)g="0"+g;var d=a.getUTCMinutes();if(d<10)d="0"+d;var j=a.getUTCSeconds();if(j<10)j="0"+j;a=a.getUTCMilliseconds();if(a<100)a="0"+a;if(a<10)a="0"+a;return'"'+i+"-"+b+"-"+h+"T"+g+":"+d+":"+j+"."+a+'Z"'}h=e.isFunction(c)?function(k,l){return c(k,l)}:function(k,l){return l};i=b?"\n":"";j=b?" ":"";if(a.constructor===Array){g=[];for(d=0;d<a.length;d++)g.push((e.toJSON(h(d,a[d]),c,b,true)||
"null").replace(/^/gm,b));return"["+i+g.join(","+i)+i+"]"}var n=[];if(e.isArray(c))g=e.map(c,function(k){return typeof k=="string"||typeof k=="number"?k+"":null});for(d in a){var m;f=typeof d;if(!(g&&e.inArray(d+"",g)==-1)){if(f=="number")f='"'+d+'"';else if(f=="string")f=e.quoteString(d);else continue;m=e.toJSON(h(d,a[d]),c,b,true);typeof m!="undefined"&&n.push((f+":"+j+m).replace(/^/gm,b))}}return"{"+i+n.join(","+i)+i+"}"}}};e.evalJSON=function(a){if(typeof JSON=="object"&&JSON.parse)return JSON.parse(a);
return eval("("+a+")")};e.secureEvalJSON=function(a){if(typeof JSON=="object"&&JSON.parse)return JSON.parse(a);var c=a;c=c.replace(/\\["\\\/bfnrtu]/g,"@");c=c.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]");c=c.replace(/(?:^|:|,)(?:\s*\[)+/g,"");if(/^[\],:{}\s]*$/.test(c))return eval("("+a+")");else throw new SyntaxError("Error parsing JSON, source is not valid.");};e.quoteString=function(a){if(a.match(o))return'"'+a.replace(o,function(c){var b=p[c];if(typeof b==="string")return b;
b=c.charCodeAt();return"\\u00"+Math.floor(b/16).toString(16)+(b%16).toString(16)})+'"';return'"'+a+'"'};var o=/["\\\x00-\x1f\x7f-\x9f]/g,p={"\u0008":"\\b","\t":"\\t","\n":"\\n","\u000c":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"}})(jQuery);
(function(){jQuery.cookie=function(d,b,a){if(typeof b!="undefined"){a=a||{};if(b===null){b="";a.expires=-1}if(typeof b=="object"&&jQuery.toJSON)b=jQuery.toJSON(b);var c="";if(a.expires&&(typeof a.expires=="number"||a.expires.toUTCString)){if(typeof a.expires=="number"){c=new Date;c.setTime(c.getTime()+a.expires*24*60*60*1E3)}else c=a.expires;c="; expires="+c.toUTCString()}var e=a.path?"; path="+a.path:"",f=a.domain?"; domain="+a.domain:"";a=a.secure?"; secure":"";document.cookie=[d,"=",encodeURIComponent(b),
c,e,f,a].join("")}else{b=null;if(document.cookie&&document.cookie!=""){a=document.cookie.split(";");for(c=0;c<a.length;c++){e=jQuery.trim(a[c]);if(e.substring(0,d.length+1)==d+"="){b=decodeURIComponent(e.substring(d.length+1));break}}}if(jQuery.evalJSON&&b&&b.match(/^\s*\{/))try{b=jQuery.evalJSON(b)}catch(g){}return b}}})(jQuery);
(function(b){var m=/button|select/i,g={},i={width:["Left","Right"],height:["Top","Bottom"],oldOuterHeight:b.fn.outerHeight,oldOuterWidth:b.fn.outerWidth,oldInnerWidth:b.fn.innerWidth,oldInnerHeight:b.fn.innerHeight};b.each({width:"Width",height:"Height"},function(d,e){g[d]=function(c,a){var f=0;if(!m.test(c.nodeName)){var k=[];b.each(i[d],function(){var l=this;b.each(a,function(h,n){if(n)k.push(h+l+(h=="border"?"Width":""))})});b.each(b.curStyles(c,k),function(l,h){f+=parseFloat(h)||0})}return f};
b.fn["outer"+e]=function(c,a){var f=this[0];if(typeof c=="number"){f&&this[d](c-g[d](f,{padding:true,border:true,margin:a}));return this}else return f?i["oldOuter"+e].call(this,c):null};b.fn["inner"+e]=function(c){var a=this[0];if(typeof c=="number"){a&&this[d](c-g[d](a,{padding:true}));return this}else return a?i["oldInner"+e].call(this,c):null};var j=function(c){return function(a){if(a.state==0){a.start=b(a.elem)[d]();a.end-=g[d](a.elem,c)}a.elem.style[d]=a.pos*(a.end-a.start)+a.start+"px"}};b.fx.step["outer"+
e]=j({padding:true,border:true});b.fx.step["outer"+e+"Margin"]=j({padding:true,border:true,margin:true});b.fx.step["inner"+e]=j({padding:true})})})(jQuery);
(function(g){var l=g.isArray,n=function(b){var a=0;for(var c in b)a++;return a};g.Object={};var j=g.Object.same=function(b,a,c,e,h,d){var i=typeof b,m=l(b),k=typeof c;if(k=="string"||c===null){c=o[c];k="function"}if(k=="function")return c(b,a,e,h);c=c||{};if(d===-1)return i==="object"||b===a;if(i!==typeof a||m!==l(a))return false;if(b===a)return true;if(m){if(b.length!==a.length)return false;for(d=0;d<b.length;d++){e=c[d]===undefined?c["*"]:c[d];if(!j(b[d],a[d],b,a,e))return false}return true}else if(i===
"object"||i==="function"){h=g.extend({},a);for(var f in b){e=c[f]===undefined?c["*"]:c[f];if(!j(b[f],a[f],e,b,a,d===false?-1:undefined))return false;delete h[f]}for(f in h)if(c[f]===undefined||!j(undefined,a[f],c[f],b,a,d===false?-1:undefined))return false;return true}return false};g.Object.subsets=function(b,a,c){var e=a.length,h=[];n(b);for(var d=0;d<e;d++){var i=a[d];g.Object.subset(b,i,c)&&h.push(i)}return h};g.Object.subset=function(b,a,c){c=c||{};for(var e in a)if(!j(b[e],a[e],c[e],b,a))return false;
return true};var o={"null":function(){return true},i:function(b,a){return(""+b).toLowerCase()==(""+a).toLowerCase()}}})(jQuery);
(function(c){c.ajaxPrefilter(function(a,b){if(c.fixture.on){var d=x(a);if(a.fixture){if(typeof a.fixture==="string"&&c.fixture[a.fixture])a.fixture=c.fixture[a.fixture];if(typeof a.fixture=="string"){b=a.fixture;if(/^\/\//.test(b))b=steal.root.mapJoin(a.fixture.substr(2))+"";a.url=b;a.data=null;a.type="GET";if(!a.error)a.error=function(f,g,j){throw"fixtures.js Error "+g+" "+j;}}else{a.dataTypes.splice(0,0,"fixture");d&&c.extend(b.data,d)}}}});c.ajaxTransport("fixture",function(a,b){a.dataTypes.shift();
var d=a.dataTypes[0],f;return{send:function(g,j){f=setTimeout(function(){var i=a.fixture(b,a,g);if(!c.isArray(i)){var n=[{}];n[0][d]=i;i=n}typeof i[0]!="number"&&i.unshift(200,"success");if(!i[2]||!i[2][d]){n={};n[d]=i[2];i[2]=n}j.apply(null,i)},c.fixture.delay)},abort:function(){clearTimeout(f)}}});var o=[],w=function(a,b){for(var d=0;d<o.length;d++)if(u._similar(a,o[d],b))return d;return-1},x=function(a){var b=w(a);if(b>-1){a.fixture=o[b].fixture;return u._getData(o[b].url,a.url)}},p=function(a){var b=
a.data.id;if(b===undefined&&typeof a.data==="number")b=a.data;b===undefined&&a.url.replace(/\/(\d+)(\/|$|\.)/g,function(d,f){b=f});if(b===undefined)b=a.url.replace(/\/(\w+)(\/|$|\.)/g,function(d,f){if(f!="update")b=f});if(b===undefined)b=Math.round(Math.random()*1E3);return b},u=c.fixture=function(a,b){if(b!==undefined){if(typeof a=="string"){var d=a.match(/(GET|POST|PUT|DELETE) (.+)/i);a=d?{url:d[2],type:d[1]}:{url:a}}d=w(a,!!b);d>-1&&o.splice(d,1);if(b!=null){a.fixture=b;o.push(a)}}},y=c.String._regs.replacer;
c.extend(c.fixture,{_similar:function(a,b,d){return d?c.Object.same(a,b,{fixture:null}):c.Object.subset(a,b,c.fixture._compare)},_compare:{url:function(a,b){return!!u._getData(b,a)},fixture:null,type:"i"},_getData:function(a,b){var d=[];a=a.replace(".","\\.").replace("?","\\?");var f=(new RegExp(a.replace(y,function(j,i){d.push(i);return"([^/]+)"})+"$")).exec(b),g={};if(!f)return null;f.shift();c.each(d,function(j,i){g[i]=f.shift()});return g},"-restUpdate":function(a){return[200,"succes",{id:p(a)},
{location:a.url+"/"+p(a)}]},"-restDestroy":function(){return{}},"-restCreate":function(a,b,d,f){f=f||parseInt(Math.random()*1E5,10);return[200,"succes",{id:f},{location:a.url+"/"+f}]},make:function(a,b,d,f){if(typeof a==="string")a=[a+"s",a];for(var g=c.fixture["~"+a[0]]=[],j=function(e){for(var h=0;h<g.length;h++)if(e==g[h].id)return g[h]},i=0;i<b;i++){var n=d(i,g);if(!n.id)n.id=i;g.push(n)}c.fixture["-"+a[0]]=function(e){var h=g.slice(0);e.data=e.data||{};c.each((e.data.order||[]).slice(0).reverse(),
function(z,v){var l=v.split(" ");h=h.sort(function(q,r){return l[1].toUpperCase()!=="ASC"?q[l[0]]<r[l[0]]?1:q[l[0]]==r[l[0]]?0:-1:q[l[0]]<r[l[0]]?-1:q[l[0]]==r[l[0]]?0:1})});c.each((e.data.group||[]).slice(0).reverse(),function(z,v){var l=v.split(" ");h=h.sort(function(q,r){return q[l[0]]>r[l[0]]})});var k=parseInt(e.data.offset,10)||0,s=parseInt(e.data.limit,10)||g.length-k,m=0;for(var t in e.data){m=0;if(e.data[t]!==undefined&&(t.indexOf("Id")!=-1||t.indexOf("_id")!=-1))for(;m<h.length;)if(e.data[t]!=
h[m][t])h.splice(m,1);else m++}if(f)for(m=0;m<h.length;)if(f(h[m],e))m++;else h.splice(m,1);return[{count:h.length,limit:e.data.limit,offset:e.data.offset,data:h.slice(k,k+s)}]};c.fixture["-"+a[1]]=function(e){return(e=j(p(e)))?[e]:[]};c.fixture["-"+a[1]+"Update"]=function(e,h){var k=p(e);c.extend(j(k),e.data);return c.fixture["-restUpdate"](e,h)};c.fixture["-"+a[1]+"Destroy"]=function(e,h){for(var k=p(e),s=0;s<g.length;s++)if(g[s].id==k){g.splice(s,1);break}c.extend(j(k),e.data);return c.fixture["-restDestroy"](e,
h)};c.fixture["-"+a[1]+"Create"]=function(e,h){var k=d(g.length,g);c.extend(k,e.data);if(!k.id)k.id=g.length;g.push(k);return c.fixture["-restCreate"](e,h,undefined,k.id)};return{getId:p,findOne:j,find:function(e){return j(p(e))}}},rand:function(a,b,d){if(typeof a=="number")return typeof b=="number"?a+Math.floor(Math.random()*(b-a)):Math.floor(Math.random()*a);var f=arguments.callee;if(b===undefined)return f(a,f(a.length+1));var g=[];a=a.slice(0);d||(d=b);d=b+Math.round(f(d-b));for(var j=0;j<d;j++)g.push(a.splice(f(a.length),
1)[0]);return g},xhr:function(a){return c.extend({},{abort:c.noop,getAllResponseHeaders:function(){return""},getResponseHeader:function(){return""},open:c.noop,overrideMimeType:c.noop,readyState:4,responseText:"",responseXML:null,send:c.noop,setRequestHeader:c.noop,status:200,statusText:"OK"},a)},on:true});c.fixture.delay=200;c.fixture["-handleFunction"]=function(a){if(typeof a.fixture==="string"&&c.fixture[a.fixture])a.fixture=c.fixture[a.fixture];if(typeof a.fixture=="function"){setTimeout(function(){a.success&&
a.success.apply(null,a.fixture(a,"success"));a.complete&&a.complete.apply(null,a.fixture(a,"complete"))},c.fixture.delay);return true}return false};c.fixture.overwrites=o})(jQuery);
(function(g){var i=/radio|checkbox/i,j=/[^\[\]]+/g,k=/^[\-+]?[0-9]*\.?[0-9]+([eE][\-+]?[0-9]+)?$/,l=function(b){if(typeof b=="number")return true;if(typeof b!="string")return false;return b.match(k)};g.fn.extend({formParams:function(b,d){if(!!b===b){d=b;b=null}if(b)return this.setParams(b);else if(this[0].nodeName.toLowerCase()=="form"&&this[0].elements)return jQuery(jQuery.makeArray(this[0].elements)).getParams(d);return jQuery("input[name], textarea[name], select[name]",this[0]).getParams(d)},setParams:function(b){this.find("[name]").each(function(){var d=
b[g(this).attr("name")],a;if(d!==undefined){a=g(this);if(a.is(":radio"))a.val()==d&&a.attr("checked",true);else if(a.is(":checkbox")){d=g.isArray(d)?d:[d];g.inArray(a.val(),d)>-1&&a.attr("checked",true)}else a.val(d)}})},getParams:function(b){var d={},a;b=b===undefined?false:b;this.each(function(){var e=this;if(!((e.type&&e.type.toLowerCase())=="submit"||!e.name)){var c=e.name,f=g.data(e,"value")||g.fn.val.call([e]),h=i.test(e.type);c=c.match(j);e=!h||!!e.checked;if(b){if(l(f))f=parseFloat(f);else if(f===
"true")f=true;else if(f==="false")f=false;if(f==="")f=undefined}a=d;for(h=0;h<c.length-1;h++){a[c[h]]||(a[c[h]]={});a=a[c[h]]}c=c[c.length-1];if(a[c]){g.isArray(a[c])||(a[c]=a[c]===undefined?[]:[a[c]]);e&&a[c].push(f)}else if(e||!a[c])a[c]=e?f:undefined}});return d}})})(jQuery);
(function(){var k=$.isArray,h=function(a){return typeof a==="object"&&a!==null&&a},l=$.makeArray,o=$.each,q=function(a,c,b){if(a instanceof $.Observe)p([a],b._namespace);else a=k(a)?new $.Observe.List(a):new $.Observe(a);a.bind("change"+b._namespace,function(d){var e=$.makeArray(arguments);d=e.shift();e[0]=c==="*"?b.indexOf(a)+"."+e[0]:c+"."+e[0];$.event.trigger(d,e,b)});return a},p=function(a,c){for(var b,d=0;d<a.length;d++)(b=a[d])&&b.unbind&&b.unbind("change"+c)},s=0,j=null,t=function(){if(!j){j=
[];return true}},g=function(a,c,b){if(!a._init)if(j)j.push({t:a,ev:c,args:b});else return $.event.trigger(c,b,a,true)},u=0,v=function(){var a=j.length,c=j.slice(0),b;j=null;u++;for(var d=0;d<a;d++){b=c[d];$.event.trigger({type:b.ev,batchNum:u},b.args,b.t)}},m=function(a,c,b){a.each(function(d,e){b[d]=h(e)&&typeof e[c]=="function"?e[c]():e});return b};$.Class("jQuery.Observe",{init:function(a){this._data={};this._namespace=".observe"+ ++s;this._init=true;this.attrs(a);delete this._init},attr:function(a,
c){if(c===undefined)return this._get(a);else{this._set(a,c);return this}},each:function(){return o.apply(null,[this.__get()].concat(l(arguments)))},removeAttr:function(a){a=k(a)?a:a.split(".");var c=a.shift(),b=this._data[c];if(a.length)return b.removeAttr(a);else{delete this._data[c];g(this,"change",[c,"remove",undefined,b]);return b}},_get:function(a){a=k(a)?a:(""+a).split(".");var c=this.__get(a.shift());return a.length?c?c._get(a):undefined:c},__get:function(a){return a?this._data[a]:this._data},
_set:function(a,c){var b=k(a)?a:(""+a).split(".");a=b.shift();var d=this.__get(a);if(h(d)&&b.length)d._set(b,c);else if(b.length)throw"jQuery.Observe: set a property on an object that does not exist";else if(c!==d){b=this.__get().hasOwnProperty(a)?"set":"add";this.__set(a,h(c)?q(c,a,this):c);g(this,"change",[a,b,c,d]);d&&p([d],this._namespace)}},__set:function(a,c){this._data[a]=c;a in this.constructor.prototype||(this[a]=c)},bind:function(){$.fn.bind.apply($([this]),arguments);return this},unbind:function(){$.fn.unbind.apply($([this]),
arguments);return this},serialize:function(){return m(this,"serialize",{})},attrs:function(a,c){if(a===undefined)return m(this,"attrs",{});a=$.extend(true,{},a);var b,d=t();for(b in this._data){var e=this._data[b],f=a[b];if(f===undefined)c&&this.removeAttr(b);else{if(h(e)&&h(f))e.attrs(f,c);else e!=f&&this._set(b,f);delete a[b]}}for(b in a){f=a[b];this._set(b,f)}d&&v()}});var r=jQuery.Observe("jQuery.Observe.List",{init:function(a,c){this.length=0;this._namespace=".list"+ ++s;this._init=true;this.bind("change",
this.proxy("_changes"));this.push.apply(this,l(a||[]));$.extend(this,c);this.comparator&&this.sort();delete this._init},_changes:function(a,c,b,d,e){if(this.comparator&&/^\d+./.test(c)){var f=+/^\d+/.exec(c)[0],i=this[f],n=this.sortedIndex(i);if(n!==f){[].splice.call(this,f,1);[].splice.call(this,n,0,i);g(this,"move",[i,n,f]);a.stopImmediatePropagation();g(this,"change",[c.replace(/^\d+/,n),b,d,e]);return}}if(c.indexOf(".")===-1)if(b==="add")g(this,b,[d,+c]);else b==="remove"&&g(this,b,[e,+c])},sortedIndex:function(a){var c=
a.attr(this.comparator),b=0,d;for(d=0;d<this.length;d++)if(a===this[d])b=-1;else if(c<=this[d].attr(this.comparator))return d+b;return d+b},__get:function(a){return a?this[a]:this},__set:function(a,c){this[a]=c},serialize:function(){return m(this,"serialize",[])},splice:function(a,c){var b=l(arguments),d;for(d=2;d<b.length;d++){var e=b[d];if(h(e))b[d]=q(e,"*",this)}if(c===undefined)c=b[1]=this.length-a;d=[].splice.apply(this,b);if(c>0){g(this,"change",[""+a,"remove",undefined,d]);p(d,this._namespace)}b.length>
2&&g(this,"change",[""+a,"add",b.slice(2),d]);return d},attrs:function(a,c){if(a===undefined)return m(this,"attrs",[]);a=a.slice(0);for(var b=Math.min(a.length,this.length),d=t(),e=0;e<b;e++){var f=this[e],i=a[e];if(h(f)&&h(i))f.attrs(i,c);else f!=i&&this._set(e,i)}if(a.length>this.length)this.push(a.slice(this.length));else a.length<this.length&&c&&this.splice(a.length);d&&v()},sort:function(a,c){var b=this.comparator;[].sort.apply(this,b?[function(d,e){d=d[b];e=e[b];return d===e?0:d<e?-1:1}]:[]);
!c&&g(this,"reset")}}),w=function(a){return a[0]&&$.isArray(a[0])?a[0]:l(a)};o({push:"length",unshift:0},function(a,c){r.prototype[a]=function(){for(var b=w(arguments),d=c?this.length:0,e=0;e<b.length;e++){var f=b[e];if(h(f))b[e]=q(f,"*",this)}if(b.length==1&&this.comparator){this.splice(this.sortedIndex(b[0]),0,b[0]);return this.length}e=[][a].apply(this,b);if(this.comparator&&b.length>1){this.sort(null,true);g(this,"reset",[b])}else g(this,"change",[""+d,"add",b,undefined]);return e}});o({pop:"length",
shift:0},function(a,c){r.prototype[a]=function(){var b=w(arguments),d=c&&this.length?this.length-1:0;b=[][a].apply(this,b);g(this,"change",[""+d,"remove",undefined,[b]]);b&&b.unbind&&b.unbind("change"+this._namespace);return b}});r.prototype.indexOf=[].indexOf||function(a){return $.inArray(a,this)};$.O=function(a,c){return k(a)||a instanceof $.Observe.List?new $.Observe.List(a,c):new $.Observe(a,c)}})(jQuery);
(function(f){var k=/^\d+$/,l=/([^\[\]]+)|(\[\])/g,i=/\+/g,m=/([^?#]*)(#.*)?$/;f.String=f.extend(f.String||{},{deparam:function(d){if(!d||!m.test(d))return{};var j={};d=d.split("&");for(var c,g=0;g<d.length;g++){c=j;var a=d[g].split("=");if(a.length!=2)a=[a[0],a.slice(1).join("=")];var b=decodeURIComponent(a[0].replace(i," "));a=decodeURIComponent(a[1].replace(i," "));b=b.match(l);for(var e=0;e<b.length-1;e++){var h=b[e];c[h]||(c[h]=k.test(b[e+1])||b[e+1]=="[]"?[]:{});c=c[h]}lastPart=b[b.length-1];
if(lastPart=="[]")c.push(a);else c[lastPart]=a}return j}})})(jQuery);
(function(b){var o=/\:([\w\.]+)/g,p=/^(?:&[^=]+=[^&]*)+/,t=function(a){var c=[];j(a,function(d,e){if(d==="className")d="class";e&&c.push(q(d),'="',q(e),'" ')});return c.join("")},q=function(a){return a.replace(/"/g,"&#34;").replace(/'/g,"&#39;")},u=function(a,c){for(var d=0,e=0;e<a.names.length;e++){if(!c.hasOwnProperty(a.names[e]))return-1;d++}return d},r=true,k=window.location,v=encodeURIComponent,w=decodeURIComponent,j=b.each,l=b.extend;b.route=function(a,c){var d=[],e=a.replace(o,function(f,h){d.push(h);
return"([^\\/\\&]*)"});b.route.routes[a]={test:new RegExp("^"+e+"($|&)"),route:a,names:d,defaults:c||{},length:a.split("/").length};return b.route};l(b.route,{param:function(a){var c,d=0,e,f=a.route;delete a.route;f&&(c=b.route.routes[f])||j(b.route.routes,function(m,i){e=u(i,a);if(e>d){c=i;d=e}});if(c){var h=l({},a);f=c.route.replace(o,function(m,i){delete h[i];return a[i]===c.defaults[i]?"":v(a[i])});var g;j(c.defaults,function(m,i){h[m]===i&&delete h[m]});g=b.param(h);return f+(g?"&"+g:"")}return b.isEmptyObject(a)?
"":"&"+b.param(a)},deparam:function(a){var c={length:-1};j(b.route.routes,function(h,g){if(g.test.test(a)&&g.length>c.length)c=g});if(c.length>-1){var d=a.match(c.test),e=d.shift(),f=(e=a.substr(e.length-(d[d.length-1]==="&"?1:0)))&&p.test(e)?b.String.deparam(e.slice(1)):{};f=l(true,{},c.defaults,f);j(d,function(h,g){if(g&&g!=="&")f[c.names[h]]=w(g)});f.route=c.route;return f}if(a.charAt(0)!=="&")a="&"+a;return p.test(a)?b.String.deparam(a.slice(1)):{}},data:new b.Observe({}),routes:{},ready:function(a){if(a===
false)r=false;if(a===true||r===true)s();return b.route},url:function(a,c){return c?"#!"+b.route.param(l({},n,a)):"#!"+b.route.param(a)},link:function(a,c,d,e){return"<a "+t(l({href:b.route.url(c,e)},d))+">"+a+"</a>"},current:function(a){return k.hash=="#!"+b.route.param(a)}});b(function(){b.route.ready()});j(["bind","unbind","delegate","undelegate","attr","attrs","serialize","removeAttr"],function(a,c){b.route[c]=function(){return b.route.data[c].apply(b.route.data,arguments)}});var n,s=function(){var a=
k.hash.substr(1,1)==="!"?k.hash.slice(2):k.hash.slice(1);n=b.route.deparam(a);b.route.attrs(n,true)};b(window).bind("hashchange",s);b.route.bind("change",function(a){var c;return function(){var d=arguments,e=this;clearTimeout(c);c=setTimeout(function(){a.apply(e,d)},1)}}(function(){k.hash="#!"+b.route.param(b.route.serialize())}))})(jQuery);
(function(e){e.fn.range=function(){return e.Range(this[0])};var p=function(a){return a.replace(/([a-z])([a-z]+)/gi,function(b,d,c){return d+c.toLowerCase()}).replace(/_/g,"")},s=function(a){return a.replace(/^([a-z]+)_TO_([a-z]+)/i,function(b,d,c){return c+"_TO_"+d})},q=function(a){return a?a.ownerDocument.defaultView||a.ownerDocument.parentWindow:window},r={};e.Range=function(a){if(this.constructor!==e.Range)return new e.Range(a);if(a&&a.jquery)a=a[0];if(!a||a.nodeType){this.win=q(a);this.range=
this.win.document.createRange?this.win.document.createRange():this.win.document.body.createTextRange();a&&this.select(a)}else if(a.clientX!=null||a.pageX!=null||a.left!=null)this.moveToPoint(a);else if(a.originalEvent&&a.originalEvent.touches&&a.originalEvent.touches.length)this.moveToPoint(a.originalEvent.touches[0]);else if(a.originalEvent&&a.originalEvent.changedTouches&&a.originalEvent.changedTouches.length)this.moveToPoint(a.originalEvent.changedTouches[0]);else this.range=a};e.Range.current=
function(a){a=q(a);var b;if(a.getSelection){b=a.getSelection();return new e.Range(b.rangeCount?b.getRangeAt(0):a.document.createRange())}else return new e.Range(a.document.selection.createRange())};e.extend(e.Range.prototype,{moveToPoint:function(a){var b=a.clientX,d=a.clientY;if(!b){d=o();b=(a.pageX||a.left||0)-d.left;d=(a.pageY||a.top||0)-d.top}if(r.moveToPoint){this.range=e.Range().range;this.range.moveToPoint(b,d);return this}for(var c=document.elementFromPoint(b,d),f=0;f<c.childNodes.length;f++){var h=
c.childNodes[f];if(h.nodeType===3||h.nodeType===4){h=e.Range(h);for(var j=h.toString().length,g=1;g<j+1;g++){var i=h.end(g).rect();if(i.left<=b&&i.left+i.width>=b&&i.top<=d&&i.top+i.height>=d){h.start(g-1);this.range=h.range;return}}}}var k;l(c.childNodes,function(m){m=e.Range(m);if(m.rect().top>a.clientY)return false;else k=m});if(k){k.start(k.toString().length);this.range=k.range}else this.range=e.Range(c).range},window:function(){return this.win||window},overlaps:function(a){if(a.nodeType)a=e.Range(a).select(a);
var b=this.compare("START_TO_START",a),d=this.compare("END_TO_END",a);if(b<=0&&d>=0)return true;if(b>=0&&this.compare("START_TO_END",a)<=0)return true;if(this.compare("END_TO_START",a)>=0&&d<=0)return true;return false},collapse:function(a){this.range.collapse(a===undefined?true:a);return this},toString:function(){return typeof this.range.text=="string"?this.range.text:this.range.toString()},start:function(a){if(a===undefined)if(this.range.startContainer)return{container:this.range.startContainer,
offset:this.range.startOffset};else{a=this.clone().collapse().parent();var b=e.Range(a).select(a).collapse();b.move("END_TO_START",this);return{container:a,offset:b.toString().length}}else{if(this.range.setStart)if(typeof a=="number")this.range.setStart(this.range.startContainer,a);else typeof a=="string"?this.range.setStart(this.range.startContainer,this.range.startOffset+parseInt(a,10)):this.range.setStart(a.container,a.offset);else throw"todo";return this}},end:function(a){if(a===undefined)if(this.range.startContainer)return{container:this.range.endContainer,
offset:this.range.endOffset};else{a=this.clone().collapse(false).parent();var b=e.Range(a).select(a).collapse();b.move("END_TO_END",this);return{container:a,offset:b.toString().length}}else{if(this.range.setEnd)typeof a=="number"?this.range.setEnd(this.range.endContainer,a):this.range.setEnd(a.container,a.offset);else throw"todo";return this}},parent:function(){if(this.range.commonAncestorContainer)return this.range.commonAncestorContainer;else{var a=this.range.parentElement(),b=this.range;l(a.childNodes,
function(d){if(e.Range(d).range.inRange(b)){a=d;return false}});return a}},rect:function(a){var b=this.range.getBoundingClientRect();if(a==="page"){a=o();b=e.extend({},b);b.top+=a.top;b.left+=a.left}return b},rects:function(a){for(var b=e.makeArray(this.range.getClientRects()).sort(function(g,i){return i.width*i.height-g.width*g.height}),d=0,c;d<b.length;){var f=b[d],h=false;c=d+1;for(c=d+1;c<b.length;c++)if(t(f,b[c])){h=b[c];break}if(h)b.splice(d,1);else d++}if(a=="page"){var j=o();return e.map(b,
function(g){g=e.extend({},g);g.top+=j.top;g.left+=j.left;return g})}return b}});(function(){var a=e.Range.prototype,b=e.Range().range;a.compare=b.compareBoundaryPoints?function(c,f){return this.range.compareBoundaryPoints(this.window().Range[s(c)],f.range)}:function(c,f){return this.range.compareEndPoints(p(c),f.range)};a.move=b.setStart?function(c,f){f=f.range;switch(c){case "START_TO_END":this.range.setStart(f.endContainer,f.endOffset);break;case "START_TO_START":this.range.setStart(f.startContainer,
f.startOffset);break;case "END_TO_END":this.range.setEnd(f.endContainer,f.endOffset);break;case "END_TO_START":this.range.setEnd(f.startContainer,f.startOffset);break}return this}:function(c,f){this.range.setEndPoint(p(c),f.range);return this};var d=b.cloneRange?"cloneRange":"duplicate";a.clone=function(){return e.Range(this.range[d]())};a.select=b.selectNodeContents?function(c){c?this.range.selectNodeContents(c):this.window().getSelection().addRange(this.range);return this}:function(c){if(c)if(c.nodeType===
3){var f=c.parentNode,h=0,j;l(f.childNodes,function(g){if(g===c){j=h+g.nodeValue.length;return false}else h+=g.nodeValue.length});this.range.moveToElementText(f);this.range.moveEnd("character",j-this.range.text.length);this.range.moveStart("character",h)}else this.range.moveToElementText(c);else this.range.select();return this}})();var l=function(a,b){for(var d,c=0;a[c];c++){d=a[c];if(d.nodeType===3||d.nodeType===4){if(b(d)===false)return false}else if(d.nodeType!==8)if(l(d.childNodes,b)===false)return false}},
n=function(a,b){return a.left<=b.clientX&&a.left+a.width>=b.clientX&&a.top<=b.clientY&&a.top+a.height>=b.clientY},t=function(a,b){return n(a,{clientX:b.left,clientY:b.top})&&n(a,{clientX:b.left+b.width,clientY:b.top})&&n(a,{clientX:b.left,clientY:b.top+b.height})&&n(a,{clientX:b.left+b.width,clientY:b.top+b.height})},o=function(a){a=a||window;doc=a.document.documentElement;body=a.document.body;return{left:(doc&&doc.scrollLeft||body&&body.scrollLeft||0)+(doc.clientLeft||0),top:(doc&&doc.scrollTop||
body&&body.scrollTop||0)+(doc.clientTop||0)}};r.moveToPoint=!!e.Range().range.moveToPoint})(jQuery);


"use strict";jQuery.base64=(function($){var _PADCHAR="=",_ALPHA="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",_VERSION="1.0";function _getbyte64(s,i){var idx=_ALPHA.indexOf(s.charAt(i));if(idx===-1){throw"Cannot decode base64"}return idx}function _decode(s){var pads=0,i,b10,imax=s.length,x=[];s=String(s);if(imax===0){return s}if(imax%4!==0){throw"Cannot decode base64"}if(s.charAt(imax-1)===_PADCHAR){pads=1;if(s.charAt(imax-2)===_PADCHAR){pads=2}imax-=4}for(i=0;i<imax;i+=4){b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12)|(_getbyte64(s,i+2)<<6)|_getbyte64(s,i+3);x.push(String.fromCharCode(b10>>16,(b10>>8)&255,b10&255))}switch(pads){case 1:b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12)|(_getbyte64(s,i+2)<<6);x.push(String.fromCharCode(b10>>16,(b10>>8)&255));break;case 2:b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12);x.push(String.fromCharCode(b10>>16));break}return x.join("")}function _getbyte(s,i){var x=s.charCodeAt(i);if(x>255){throw"INVALID_CHARACTER_ERR: DOM Exception 5"}return x}function _encode(s){if(arguments.length!==1){throw"SyntaxError: exactly one argument required"}s=String(s);var i,b10,x=[],imax=s.length-s.length%3;if(s.length===0){return s}for(i=0;i<imax;i+=3){b10=(_getbyte(s,i)<<16)|(_getbyte(s,i+1)<<8)|_getbyte(s,i+2);x.push(_ALPHA.charAt(b10>>18));x.push(_ALPHA.charAt((b10>>12)&63));x.push(_ALPHA.charAt((b10>>6)&63));x.push(_ALPHA.charAt(b10&63))}switch(s.length-imax){case 1:b10=_getbyte(s,i)<<16;x.push(_ALPHA.charAt(b10>>18)+_ALPHA.charAt((b10>>12)&63)+_PADCHAR+_PADCHAR);break;case 2:b10=(_getbyte(s,i)<<16)|(_getbyte(s,i+1)<<8);x.push(_ALPHA.charAt(b10>>18)+_ALPHA.charAt((b10>>12)&63)+_ALPHA.charAt((b10>>6)&63)+_PADCHAR);break}return x.join("")}return{decode:_decode,encode:_encode,VERSION:_VERSION}}(jQuery));

(function(){
    

var rsplit = function(string, regex) {
	var result = regex.exec(string),retArr = new Array(), first_idx, last_idx, first_bit;
	while (result != null)
	{
		first_idx = result.index; last_idx = regex.lastIndex;
		if ((first_idx) != 0)
		{
			first_bit = string.substring(0,first_idx);
			retArr.push(string.substring(0,first_idx));
			string = string.slice(first_idx);
		}		
		retArr.push(result[0]);
		string = string.slice(result[0].length);
		result = regex.exec(string);	
	}
	if (! string == '')
	{
		retArr.push(string);
	}
	return retArr;
},
chop =  function(string){
    return string.substr(0, string.length - 1);
},
extend = function(d, s){
    for(var n in s){
        if(s.hasOwnProperty(n))  d[n] = s[n]
    }
}


EJS = function( options ){
	options = typeof options == "string" ? {view: options} : options
    this.set_options(options);
	if(options.precompiled){
		this.template = {};
		this.template.process = options.precompiled;
		EJS.update(this.name, this);
		return;
	}
    if(options.element)
	{
		if(typeof options.element == 'string'){
			var name = options.element
			options.element = document.getElementById(  options.element )
			if(options.element == null) throw name+'does not exist!'
		}
		if(options.element.value){
			this.text = options.element.value
		}else{
			this.text = options.element.innerHTML
		}
		this.name = options.element.id
		this.type = '['
	}else if(options.url){
        options.url = EJS.endExt(options.url, this.extMatch);
		this.name = this.name ? this.name : options.url;
        var url = options.url
        //options.view = options.absolute_url || options.view || options.;
		var template = EJS.get(this.name /*url*/, this.cache);
		if (template) return template;
	    if (template == EJS.INVALID_PATH) return null;
        try{
            this.text = EJS.request( url+(this.cache ? '' : '?'+Math.random() ));
        }catch(e){}

		if(this.text == null){
            throw( {type: 'EJS', message: 'There is no template at '+url}  );
		}
		//this.name = url;
	}
	var template = new EJS.Compiler(this.text, this.type);

	template.compile(options, this.name);

	
	EJS.update(this.name, this);
	this.template = template;
};
/* @Prototype*/
EJS.prototype = {
	/**
	 * Renders an object with extra view helpers attached to the view.
	 * @param {Object} object data to be rendered
	 * @param {Object} extra_helpers an object with additonal view helpers
	 * @return {String} returns the result of the string
	 */
    render : function(object, extra_helpers){
        object = object || {};
        this._extra_helpers = extra_helpers;
		var v = new EJS.Helpers(object, extra_helpers || {});
		return this.template.process.call(object, object,v);
	},
    update : function(element, options){
        if(typeof element == 'string'){
			element = document.getElementById(element)
		}
		if(options == null){
			_template = this;
			return function(object){
				EJS.prototype.update.call(_template, element, object)
			}
		}
		if(typeof options == 'string'){
			params = {}
			params.url = options
			_template = this;
			params.onComplete = function(request){
				var object = eval( request.responseText )
				EJS.prototype.update.call(_template, element, object)
			}
			EJS.ajax_request(params)
		}else
		{
			element.innerHTML = this.render(options)
		}
    },
	out : function(){
		return this.template.out;
	},
    /**
     * Sets options on this view to be rendered with.
     * @param {Object} options
     */
	set_options : function(options){
        this.type = options.type || EJS.type;
		this.cache = options.cache != null ? options.cache : EJS.cache;
		this.text = options.text || null;
		this.name =  options.name || null;
		this.ext = options.ext || EJS.ext;
		this.extMatch = new RegExp(this.ext.replace(/\./, '\.'));
	}
};
EJS.endExt = function(path, match){
	if(!path) return null;
	match.lastIndex = 0
	return path+ (match.test(path) ? '' : this.ext )
}




/* @Static*/
EJS.Scanner = function(source, left, right) {
	
    extend(this,
        {left_delimiter: 	left +'%',
         right_delimiter: 	'%'+right,
         double_left: 		left+'%%',
         double_right:  	'%%'+right,
         left_equal: 		left+'%=',
         left_comment: 	left+'%#'})

	this.SplitRegexp = left=='[' ? /(\[%%)|(%%\])|(\[%=)|(\[%#)|(\[%)|(%\]\n)|(%\])|(\n)/ : new RegExp('('+this.double_left+')|(%%'+this.double_right+')|('+this.left_equal+')|('+this.left_comment+')|('+this.left_delimiter+')|('+this.right_delimiter+'\n)|('+this.right_delimiter+')|(\n)') ;
	
	this.source = source;
	this.stag = null;
	this.lines = 0;
};

EJS.Scanner.to_text = function(input){
	if(input == null || input === undefined)
        return '';
    if(input instanceof Date)
		return input.toDateString();
	if(input.toString) 
        return input.toString();
	return '';
};

EJS.Scanner.prototype = {
  scan: function(block) {
     scanline = this.scanline;
	 regex = this.SplitRegexp;
	 if (! this.source == '')
	 {
	 	 var source_split = rsplit(this.source, /\n/);
	 	 for(var i=0; i<source_split.length; i++) {
		 	 var item = source_split[i];
			 this.scanline(item, regex, block);
		 }
	 }
  },
  scanline: function(line, regex, block) {
	 this.lines++;
	 var line_split = rsplit(line, regex);
 	 for(var i=0; i<line_split.length; i++) {
	   var token = line_split[i];
       if (token != null) {
		   	try{
	         	block(token, this);
		 	}catch(e){
				throw {type: 'EJS.Scanner', line: this.lines};
			}
       }
	 }
  }
};


EJS.Buffer = function(pre_cmd, post_cmd) {
	this.line = new Array();
	this.script = "";
	this.pre_cmd = pre_cmd;
	this.post_cmd = post_cmd;
	for (var i=0; i<this.pre_cmd.length; i++)
	{
		this.push(pre_cmd[i]);
	}
};
EJS.Buffer.prototype = {
	
  push: function(cmd) {
	this.line.push(cmd);
  },

  cr: function() {
	this.script = this.script + this.line.join('; ');
	this.line = new Array();
	this.script = this.script + "\n";
  },

  close: function() {
	if (this.line.length > 0)
	{
		for (var i=0; i<this.post_cmd.length; i++){
			this.push(pre_cmd[i]);
		}
		this.script = this.script + this.line.join('; ');
		line = null;
	}
  }
 	
};


EJS.Compiler = function(source, left) {
    this.pre_cmd = ['var ___ViewO = [];'];
	this.post_cmd = new Array();
	this.source = ' ';	
	if (source != null)
	{
		if (typeof source == 'string')
		{
		    source = source.replace(/\r\n/g, "\n");
            source = source.replace(/\r/g,   "\n");
			this.source = source;
		}else if (source.innerHTML){
			this.source = source.innerHTML;
		} 
		if (typeof this.source != 'string'){
			this.source = "";
		}
	}
	left = left || '<';
	var right = '>';
	switch(left) {
		case '[':
			right = ']';
			break;
		case '<':
			break;
		default:
			throw left+' is not a supported deliminator';
			break;
	}
	this.scanner = new EJS.Scanner(this.source, left, right);
	this.out = '';
};
EJS.Compiler.prototype = {
  compile: function(options, name) {
  	options = options || {};
	this.out = '';
	var put_cmd = "___ViewO.push(";
	var insert_cmd = put_cmd;
	var buff = new EJS.Buffer(this.pre_cmd, this.post_cmd);		
	var content = '';
	var clean = function(content)
	{
	    content = content.replace(/\\/g, '\\\\');
        content = content.replace(/\n/g, '\\n');
        content = content.replace(/"/g,  '\\"');
        return content;
	};
	this.scanner.scan(function(token, scanner) {
		if (scanner.stag == null)
		{
			switch(token) {
				case '\n':
					content = content + "\n";
					buff.push(put_cmd + '"' + clean(content) + '");');
					buff.cr();
					content = '';
					break;
				case scanner.left_delimiter:
				case scanner.left_equal:
				case scanner.left_comment:
					scanner.stag = token;
					if (content.length > 0)
					{
						buff.push(put_cmd + '"' + clean(content) + '")');
					}
					content = '';
					break;
				case scanner.double_left:
					content = content + scanner.left_delimiter;
					break;
				default:
					content = content + token;
					break;
			}
		}
		else {
			switch(token) {
				case scanner.right_delimiter:
					switch(scanner.stag) {
						case scanner.left_delimiter:
							if (content[content.length - 1] == '\n')
							{
								content = chop(content);
								buff.push(content);
								buff.cr();
							}
							else {
								buff.push(content);
							}
							break;
						case scanner.left_equal:
							buff.push(insert_cmd + "(EJS.Scanner.to_text(" + content + ")))");
							break;
					}
					scanner.stag = null;
					content = '';
					break;
				case scanner.double_right:
					content = content + scanner.right_delimiter;
					break;
				default:
					content = content + token;
					break;
			}
		}
	});
	if (content.length > 0)
	{
		// Chould be content.dump in Ruby
		buff.push(put_cmd + '"' + clean(content) + '")');
	}
	buff.close();
	this.out = buff.script + ";";
	var to_be_evaled = '/*'+name+'*/this.process = function(_CONTEXT,_VIEW) { try { with(_VIEW) { with (_CONTEXT) {'+this.out+" return ___ViewO.join('');}}}catch(e){e.lineNumber=null;throw e;}};";
	
	try{
		eval(to_be_evaled);
	}catch(e){
		if(typeof JSLINT != 'undefined'){
			JSLINT(this.out);
			for(var i = 0; i < JSLINT.errors.length; i++){
				var error = JSLINT.errors[i];
				if(error.reason != "Unnecessary semicolon."){
					error.line++;
					var e = new Error();
					e.lineNumber = error.line;
					e.message = error.reason;
					if(options.view)
						e.fileName = options.view;
					throw e;
				}
			}
		}else{
			throw e;
		}
	}
  }
};


//type, cache, folder
/**
 * Sets default options for all views
 * @param {Object} options Set view with the following options
 * <table class="options">
				<tbody><tr><th>Option</th><th>Default</th><th>Description</th></tr>
				<tr>
					<td>type</td>
					<td>'<'</td>
					<td>type of magic tags.  Options are '&lt;' or '['
					</td>
				</tr>
				<tr>
					<td>cache</td>
					<td>true in production mode, false in other modes</td>
					<td>true to cache template.
					</td>
				</tr>
	</tbody></table>
 * 
 */
EJS.config = function(options){
	EJS.cache = options.cache != null ? options.cache : EJS.cache;
	EJS.type = options.type != null ? options.type : EJS.type;
	EJS.ext = options.ext != null ? options.ext : EJS.ext;
	
	var templates_directory = EJS.templates_directory || {}; //nice and private container
	EJS.templates_directory = templates_directory;
	EJS.get = function(path, cache){
		if(cache == false) return null;
		if(templates_directory[path]) return templates_directory[path];
  		return null;
	};
	
	EJS.update = function(path, template) { 
		if(path == null) return;
		templates_directory[path] = template ;
	};
	
	EJS.INVALID_PATH =  -1;
};
EJS.config( {cache: true, type: '<', ext: '.ejs' } );



/**
 * @constructor
 * By adding functions to EJS.Helpers.prototype, those functions will be available in the 
 * views.
 * @init Creates a view helper.  This function is called internally.  You should never call it.
 * @param {Object} data The data passed to the view.  Helpers have access to it through this._data
 */
EJS.Helpers = function(data, extras){
	this._data = data;
    this._extras = extras;
    extend(this, extras );
};
/* @prototype*/
EJS.Helpers.prototype = {
    /**
     * Renders a new view.  If data is passed in, uses that to render the view.
     * @param {Object} options standard options passed to a new view.
     * @param {optional:Object} data
     * @return {String}
     */
	view: function(options, data, helpers){
        if(!helpers) helpers = this._extras
		if(!data) data = this._data;
		return new EJS(options).render(data, helpers);
	},
    /**
     * For a given value, tries to create a human representation.
     * @param {Object} input the value being converted.
     * @param {Object} null_text what text should be present if input == null or undefined, defaults to ''
     * @return {String} 
     */
	to_text: function(input, null_text) {
	    if(input == null || input === undefined) return null_text || '';
	    if(input instanceof Date) return input.toDateString();
		if(input.toString) return input.toString().replace(/\n/g, '<br />').replace(/''/g, "'");
		return '';
	}
};
    EJS.newRequest = function(){
	   var factories = [function() { return new ActiveXObject("Msxml2.XMLHTTP"); },function() { return new XMLHttpRequest(); },function() { return new ActiveXObject("Microsoft.XMLHTTP"); }];
	   for(var i = 0; i < factories.length; i++) {
	        try {
	            var request = factories[i]();
	            if (request != null)  return request;
	        }
	        catch(e) { continue;}
	   }
	}
	
	EJS.request = function(path){
	   var request = new EJS.newRequest()
	   request.open("GET", path, false);
	   
	   try{request.send(null);}
	   catch(e){return null;}
	   
	   if ( request.status == 404 || request.status == 2 ||(request.status == 0 && request.responseText == '') ) return null;
	   
	   return request.responseText
	}
	EJS.ajax_request = function(params){
		params.method = ( params.method ? params.method : 'GET')
		
		var request = new EJS.newRequest();
		request.onreadystatechange = function(){
			if(request.readyState == 4){
				if(request.status == 200){
					params.onComplete(request)
				}else
				{
					params.onComplete(request)
				}
			}
		}
		request.open(params.method, params.url)
		request.send(null)
	}


})();

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */
/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */
/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

var Sha256 = {};  // Sha256 namespace

/**
 * Generates SHA-256 hash of string
 *
 * @param {String} msg                String to be hashed
 * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash
 * @returns {String}                  Hash of msg as hex character string
 */
Sha256.hash = function(msg, utf8encode) {
    utf8encode =  (typeof utf8encode == 'undefined') ? true : utf8encode;
    
    // convert string to UTF-8, as SHA only deals with byte-streams
    if (utf8encode) msg = Utf8.encode(msg);
    
    // constants [§4.2.2]
    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
             0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
             0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
             0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
             0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
             0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
             0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
             0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
    // initial hash value [§5.3.1]
    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];

    // PREPROCESSING 
 
    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]

    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]
    var l = msg.length/4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length
    var N = Math.ceil(l/16);   // number of 16-integer-blocks required to hold 'l' ints
    var M = new Array(N);

    for (var i=0; i<N; i++) {
        M[i] = new Array(16);
        for (var j=0; j<16; j++) {  // encode 4 chars per integer, big-endian encoding
            M[i][j] = (msg.charCodeAt(i*64+j*4)<<24) | (msg.charCodeAt(i*64+j*4+1)<<16) | 
                      (msg.charCodeAt(i*64+j*4+2)<<8) | (msg.charCodeAt(i*64+j*4+3));
        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0
    }
    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]
    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts
    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators
    M[N-1][14] = ((msg.length-1)*8) / Math.pow(2, 32); M[N-1][14] = Math.floor(M[N-1][14])
    M[N-1][15] = ((msg.length-1)*8) & 0xffffffff;


    // HASH COMPUTATION [§6.1.2]

    var W = new Array(64); var a, b, c, d, e, f, g, h;
    for (var i=0; i<N; i++) {

        // 1 - prepare message schedule 'W'
        for (var t=0;  t<16; t++) W[t] = M[i][t];
        for (var t=16; t<64; t++) W[t] = (Sha256.sigma1(W[t-2]) + W[t-7] + Sha256.sigma0(W[t-15]) + W[t-16]) & 0xffffffff;

        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value
        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];

        // 3 - main loop (note 'addition modulo 2^32')
        for (var t=0; t<64; t++) {
            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];
            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);
            h = g;
            g = f;
            f = e;
            e = (d + T1) & 0xffffffff;
            d = c;
            c = b;
            b = a;
            a = (T1 + T2) & 0xffffffff;
        }
         // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')
        H[0] = (H[0]+a) & 0xffffffff;
        H[1] = (H[1]+b) & 0xffffffff; 
        H[2] = (H[2]+c) & 0xffffffff; 
        H[3] = (H[3]+d) & 0xffffffff; 
        H[4] = (H[4]+e) & 0xffffffff;
        H[5] = (H[5]+f) & 0xffffffff;
        H[6] = (H[6]+g) & 0xffffffff; 
        H[7] = (H[7]+h) & 0xffffffff; 
    }

    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + 
           Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);
}

Sha256.ROTR = function(n, x) { return (x >>> n) | (x << (32-n)); }
Sha256.Sigma0 = function(x) { return Sha256.ROTR(2,  x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }
Sha256.Sigma1 = function(x) { return Sha256.ROTR(6,  x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }
Sha256.sigma0 = function(x) { return Sha256.ROTR(7,  x) ^ Sha256.ROTR(18, x) ^ (x>>>3);  }
Sha256.sigma1 = function(x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x>>>10); }
Sha256.Ch = function(x, y, z)  { return (x & y) ^ (~x & z); }
Sha256.Maj = function(x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }

//
// hexadecimal representation of a number 
//   (note toString(16) is implementation-dependant, and  
//   in IE returns signed numbers when used on full words)
//
Sha256.toHexStr = function(n) {
  var s="", v;
  for (var i=7; i>=0; i--) { v = (n>>>(i*4)) & 0xf; s += v.toString(16); }
  return s;
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */
/*              single-byte character encoding (c) Chris Veness 2002-2010                         */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

var Utf8 = {};  // Utf8 namespace

/**
 * Encode multi-byte Unicode string into utf-8 multiple single-byte characters 
 * (BMP / basic multilingual plane only)
 *
 * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars
 *
 * @param {String} strUni Unicode string to be encoded as UTF-8
 * @returns {String} encoded string
 */
Utf8.encode = function(strUni) {
  // use regular expressions & String.replace callback function for better efficiency 
  // than procedural approaches
  var strUtf = strUni.replace(
      /[\u0080-\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz
      function(c) { 
        var cc = c.charCodeAt(0);
        return String.fromCharCode(0xc0 | cc>>6, 0x80 | cc&0x3f); }
    );
  strUtf = strUtf.replace(
      /[\u0800-\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz
      function(c) { 
        var cc = c.charCodeAt(0); 
        return String.fromCharCode(0xe0 | cc>>12, 0x80 | cc>>6&0x3F, 0x80 | cc&0x3f); }
    );
  return strUtf;
}

/**
 * Decode utf-8 encoded string back into multi-byte Unicode characters
 *
 * @param {String} strUtf UTF-8 string to be decoded back to Unicode
 * @returns {String} decoded string
 */
Utf8.decode = function(strUtf) {
  // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!
  var strUni = strUtf.replace(
      /[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g,  // 3-byte chars
      function(c) {  // (note parentheses for precence)
        var cc = ((c.charCodeAt(0)&0x0f)<<12) | ((c.charCodeAt(1)&0x3f)<<6) | ( c.charCodeAt(2)&0x3f); 
        return String.fromCharCode(cc); }
    );
  strUni = strUni.replace(
      /[\u00c0-\u00df][\u0080-\u00bf]/g,                 // 2-byte chars
      function(c) {  // (note parentheses for precence)
        var cc = (c.charCodeAt(0)&0x1f)<<6 | c.charCodeAt(1)&0x3f;
        return String.fromCharCode(cc); }
    );
  return strUni;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/**
 * jQuery.marquee - scrolling text like old marquee element
 * @author Aamir Afridi - aamirafridi(at)gmail(dot)com / http://aamirafridi.com/jquery/jquery-marquee-plugin
 */
;
(function ($) {
    $.fn.marquee = function (options) {
        return this.each(function () {
            // Extend the options if any provided
            var o = $.extend({}, $.fn.marquee.defaults, options),
                $this = $(this),
                $marqueeWrapper, containerWidth, animationCss, verticalDir, elWidth, loopCount = 3,
                playState = 'animation-play-state',
                css3AnimationIsSupported = false,

                //Private methods
                _prefixedEvent = function (element, type, callback) {
                    var pfx = ["webkit", "moz", "MS", "o", ""];
                    for (var p = 0; p < pfx.length; p++) {
                        if (!pfx[p]) type = type.toLowerCase();
                        element.addEventListener(pfx[p] + type, callback, false);
                    }
                },

                _objToString = function (obj) {
                    var tabjson = [];
                    for (var p in obj) {
                        if (obj.hasOwnProperty(p)) {
                            tabjson.push(p + ':' + obj[p]);
                        }
                    }
                    tabjson.push();
                    return '{' + tabjson.join(',') + '}';
                },

                _startAnimationWithDelay = function () {
                    $this.timer = setTimeout(animate, o.delayBeforeStart);
                },

                //Public methods
                methods = {
                    pause: function () {
                        if (css3AnimationIsSupported && o.allowCss3Support) {
                            $marqueeWrapper.css(playState, 'paused');
                        } else {
                            //pause using pause plugin
                            if ($.fn.pause) {
                                $marqueeWrapper.pause();
                            }
                        }
                        //save the status
                        $this.data('runningStatus', 'paused');
                        //fire event
                        $this.trigger('paused');
                    },

                    resume: function () {
                        //resume using css3
                        if (css3AnimationIsSupported && o.allowCss3Support) {
                            $marqueeWrapper.css(playState, 'running');
                        } else {
                            //resume using pause plugin
                            if ($.fn.resume) {
                                $marqueeWrapper.resume();
                            }
                        }
                        //save the status
                        $this.data('runningStatus', 'resumed');
                        //fire event
                        $this.trigger('resumed');
                    },

                    toggle: function () {
                        methods[$this.data('runningStatus') == 'resumed' ? 'pause' : 'resume']();
                    },

                    destroy: function () {
                        //Clear timer
                        clearTimeout($this.timer);
                        //Just unwrap the elements that has been added using this plugin
                        $this.css('visibility', 'hidden').html($this.find('.js-marquee:first'));
                        //This is to prevent the sudden blink
                        setTimeout(function () {
                            $this.css('visibility', 'visible');
                        }, 0);
                    }
                };

            //Check for methods
            if (typeof options === 'string') {
                if ($.isFunction(methods[options])) {
                    //Following two IF statements to support public methods
                    if (!$marqueeWrapper) {
                        $marqueeWrapper = $this.find('.js-marquee-wrapper');
                    }
                    if ($this.data('css3AnimationIsSupported') === true) {
                        css3AnimationIsSupported = true;
                    }
                    methods[options]();
                }
                return;
            }

/* Check if element has data attributes. They have top priority
               For details https://twitter.com/aamirafridi/status/403848044069679104 - Can't find a better solution :/
               jQuery 1.3.2 doesn't support $.data().KEY hence writting the following */
            var dataAttributes = {},
                attr;
            $.each(o, function (key, value) {
                //Check if element has this data attribute
                attr = $this.attr('data-' + key);
                if (typeof attr !== 'undefined') {
                    //Now check if value is boolean or not
                    switch (attr) {
                    case 'true':
                        attr = true;
                        break;
                    case 'false':
                        attr = false;
                        break;
                    }
                    o[key] = attr;
                }
            });

            //since speed option is changed to duration, to support speed for those who are already using it
            o.duration = o.speed || o.duration;

            //Shortcut to see if direction is upward or downward
            verticalDir = o.direction == 'up' || o.direction == 'down';

            //no gap if not duplicated
            o.gap = o.duplicated ? o.gap : 0;

            //wrap inner content into a div
            $this.wrapInner('<div class="js-marquee"></div>');

            //Make copy of the element
            var $el = $this.find('.js-marquee').css({
                'margin-right': o.gap,
                'float': 'left'
            });

            if (o.duplicated) {
                $el.clone(true).appendTo($this);
            }

            //wrap both inner elements into one div
            $this.wrapInner('<div style="width:100000px" class="js-marquee-wrapper"></div>');

            //Save the reference of the wrapper
            $marqueeWrapper = $this.find('.js-marquee-wrapper');

            //If direction is up or down, get the height of main element
            if (verticalDir) {
                var containerHeight = $this.height();
                $marqueeWrapper.removeAttr('style');
                $this.height(containerHeight);

                //Change the CSS for js-marquee element
                $this.find('.js-marquee').css({
                    'float': 'none',
                    'margin-bottom': o.gap,
                    'margin-right': 0
                });

                //Remove bottom margin from 2nd element if duplicated
                if (o.duplicated) $this.find('.js-marquee:last').css({
                    'margin-bottom': 0
                });

                var elHeight = $this.find('.js-marquee:first').height() + o.gap;

                // adjust the animation speed according to the text length
                // formula is to: (Height of the text node / Height of the main container) * speed;
                o.duration = ((parseInt(elHeight, 10) + parseInt(containerHeight, 10)) / parseInt(containerHeight, 10)) * o.duration;

            } else {
                //Save the width of the each element so we can use it in animation
                elWidth = $this.find('.js-marquee:first').width() + o.gap;

                //container width
                containerWidth = $this.width();

                // adjust the animation speed according to the text length
                // formula is to: (Width of the text node / Width of the main container) * speed;
                o.duration = ((parseInt(elWidth, 10) + parseInt(containerWidth, 10)) / parseInt(containerWidth, 10)) * o.duration;
            }

            //if duplicated than reduce the speed
            if (o.duplicated) {
                o.duration = o.duration / 2;
            }

            if (o.allowCss3Support) {
                var
                elm = document.body || document.createElement('div'),
                    animationName = 'marqueeAnimation-' + Math.floor(Math.random() * 10000000),
                    domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),
                    animationString = 'animation',
                    animationCss3Str = '',
                    keyframeString = '';

                //Check css3 support
                if (elm.style.animation) {
                    keyframeString = '@keyframes ' + animationName + ' ';
                    css3AnimationIsSupported = true;
                }

                if (css3AnimationIsSupported === false) {
                    for (var i = 0; i < domPrefixes.length; i++) {
                        if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
                            var prefix = '-' + domPrefixes[i].toLowerCase() + '-';
                            animationString = prefix + animationString;
                            playState = prefix + playState;
                            keyframeString = '@' + prefix + 'keyframes ' + animationName + ' ';
                            css3AnimationIsSupported = true;
                            break;
                        }
                    }
                }

                if (css3AnimationIsSupported) {
                    animationCss3Str = animationName + ' ' + o.duration / 1000 + 's ' + o.delayBeforeStart / 1000 + 's infinite ' + o.css3easing;
                    $this.data('css3AnimationIsSupported', true);
                }
            }

            var _rePositionVertically = function () {
                    $marqueeWrapper.css('margin-top', o.direction == 'up' ? containerHeight + 'px' : '-' + elHeight + 'px');
                },
                _rePositionHorizontally = function () {
                    $marqueeWrapper.css('margin-left', o.direction == 'left' ? containerWidth + 'px' : '-' + elWidth + 'px');
                };

            //if duplicated option is set to true than position the wrapper
            if (o.duplicated) {
                if (verticalDir) {
                    $marqueeWrapper.css('margin-top', o.direction == 'up' ? containerHeight : '-' + ((elHeight * 2) - o.gap) + 'px');
                } else {
                    $marqueeWrapper.css('margin-left', o.direction == 'left' ? containerWidth + 'px' : '-' + ((elWidth * 2) - o.gap) + 'px');
                }
                loopCount = 1;
            } else {
                if (verticalDir) {
                    _rePositionVertically();
                } else {
                    _rePositionHorizontally();
                }
            }

            //Animate recursive method
            var animate = function () {
                    if (o.duplicated) {
                        //When duplicated, the first loop will be scroll longer so double the duration
                        if (loopCount === 1) {
                            o._originalDuration = o.duration;
                            if (verticalDir) {
                                o.duration = o.direction == 'up' ? o.duration + (containerHeight / ((elHeight) / o.duration)) : o.duration * 2;
                            } else {
                                o.duration = o.direction == 'left' ? o.duration + (containerWidth / ((elWidth) / o.duration)) : o.duration * 2;
                            }
                            //Adjust the css3 animation as well
                            if (animationCss3Str) {
                                animationCss3Str = animationName + ' ' + o.duration / 1000 + 's ' + o.delayBeforeStart / 1000 + 's ' + o.css3easing;
                            }
                            loopCount++;
                        }
                        //On 2nd loop things back to normal, normal duration for the rest of animations
                        else if (loopCount === 2) {
                            o.duration = o._originalDuration;
                            //Adjust the css3 animation as well
                            if (animationCss3Str) {
                                animationName = animationName + '0';
                                keyframeString = $.trim(keyframeString) + '0 ';
                                animationCss3Str = animationName + ' ' + o.duration / 1000 + 's 0s infinite ' + o.css3easing;
                            }
                            loopCount++;
                        }
                    }

                    if (verticalDir) {
                        if (o.duplicated) {

                            //Adjust the starting point of animation only when first loops finishes
                            if (loopCount > 2) {
                                $marqueeWrapper.css('margin-top', o.direction == 'up' ? 0 : '-' + elHeight + 'px');
                            }

                            animationCss = {
                                'margin-top': o.direction == 'up' ? '-' + elHeight + 'px' : 0
                            };
                        } else {
                            _rePositionVertically();
                            animationCss = {
                                'margin-top': o.direction == 'up' ? '-' + ($marqueeWrapper.height()) + 'px' : containerHeight + 'px'
                            };
                        }
                    } else {
                        if (o.duplicated) {

                            //Adjust the starting point of animation only when first loops finishes
                            if (loopCount > 2) {
                                $marqueeWrapper.css('margin-left', o.direction == 'left' ? 0 : '-' + elWidth + 'px');
                            }

                            animationCss = {
                                'margin-left': o.direction == 'left' ? '-' + elWidth + 'px' : 0
                            };

                        } else {
                            _rePositionHorizontally();
                            animationCss = {
                                'margin-left': o.direction == 'left' ? '-' + elWidth + 'px' : containerWidth + 'px'
                            };
                        }
                    }

                    //fire event
                    $this.trigger('beforeStarting');

                    //If css3 support is available than do it with css3, otherwise use jQuery as fallback
                    if (css3AnimationIsSupported) {
                        //Add css3 animation to the element
                        $marqueeWrapper.css(animationString, animationCss3Str);
                        var keyframeCss = keyframeString + ' { 100%  ' + _objToString(animationCss) + '}',
                            $styles = $('style');

                        //Now add the keyframe animation to the head
                        if ($styles.length !== 0) {
                            //Bug fixed for jQuery 1.3.x - Instead of using .last(), use following
                            $styles.filter(":last").append(keyframeCss);
                        } else {
                            $('head').append('<style>' + keyframeCss + '</style>');
                        }

                        //Animation iteration event
                        _prefixedEvent($marqueeWrapper[0], "AnimationIteration", function () {
                            $this.trigger('finished');
                        });
                        //Animation stopped
                        _prefixedEvent($marqueeWrapper[0], "AnimationEnd", function () {
                            animate();
                            $this.trigger('finished');
                        });

                    } else {
                        //Start animating
                        $marqueeWrapper.animate(animationCss, o.duration, o.easing, function () {
                            //fire event
                            $this.trigger('finished');
                            //animate again
                            if (o.pauseOnCycle) {
                                _startAnimationWithDelay();
                            } else {
                                animate();
                            }
                        });
                    }
                    //save the status
                    $this.data('runningStatus', 'resumed');
                };

            //bind pause and resume events
            $this.bind('pause', methods.pause);
            $this.bind('resume', methods.resume);

            if (o.pauseOnHover) {
                $this.bind('mouseenter mouseleave', methods.toggle);
            }

            //If css3 animation is supported than call animate method at once
            if (css3AnimationIsSupported && o.allowCss3Support) {
                animate();
            } else {
                //Starts the recursive method
                _startAnimationWithDelay();
            }

        });
    }; //End of Plugin
    // Public: plugin defaults options
    $.fn.marquee.defaults = {
        //If you wish to always animate using jQuery
        allowCss3Support: true,
        //works when allowCss3Support is set to true - for full list see http://www.w3.org/TR/2013/WD-css3-transitions-20131119/#transition-timing-function
        css3easing: 'linear',
        //requires jQuery easing plugin. Default is 'linear'
        easing: 'linear',
        //pause time before the next animation turn in milliseconds
        delayBeforeStart: 1000,
        //'left', 'right', 'up' or 'down'
        direction: 'left',
        //true or false - should the marquee be duplicated to show an effect of continues flow
        duplicated: false,
        //speed in milliseconds of the marquee in milliseconds
        duration: 5000,
        //gap in pixels between the tickers
        gap: 20,
        //on cycle pause the marquee
        pauseOnCycle: false,
        //on hover pause the marquee - using jQuery plugin https://github.com/tobia/Pause
        pauseOnHover: false
    };
})(jQuery);






!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");

$(function(){
	var $mwo = $('.marquee-with-options');
	$('.marquee').marquee();
	$('.marquee-with-options').marquee({
		//speed in milliseconds of the marquee
		speed: 5000,
		//gap in pixels between the tickers
		gap: 50,
		//gap in pixels between the tickers
		delayBeforeStart: 0,
		//'left' or 'right'
		direction: 'left',
		//true or false - should the marquee be duplicated to show an effect of continues flow
		duplicated: true,
		//on hover pause the marquee - using jQuery plugin https://github.com/tobia/Pause
		pauseOnHover: true
	});
	
	//Direction upward
	$('.marquee-vert').marquee({
		direction: 'up',
		speed: 1500
	});

	//pause and resume links
	$('.pause').click(function(e){
		e.preventDefault();
		$mwo.trigger('pause');
	});
	$('.resume').click(function(e){
		e.preventDefault();
		$mwo.trigger('resume');
	});
	//toggle
	$('.toggle').hover(function(e){
		$mwo.trigger('pause');
	},function(){
		$mwo.trigger('resume');
	})
	.click(function(e){
		e.preventDefault();
	})
});


/**
 * jQuery.marquee - scrolling text like old marquee element
 * @author Aamir Afridi - aamirafridi(at)gmail(dot)com / http://aamirafridi.com/jquery/jquery-marquee-plugin
 */
;(function(d){d.fn.marquee=function(w){return this.each(function(){var a=d.extend({},d.fn.marquee.defaults,w),b=d(this),c,k,p,q,h,l=3,x="animation-play-state",e=!1,B=function(a,b,c){for(var d=["webkit","moz","MS","o",""],e=0;e<d.length;e++)d[e]||(b=b.toLowerCase()),a.addEventListener(d[e]+b,c,!1)},E=function(a){var b=[],c;for(c in a)a.hasOwnProperty(c)&&b.push(c+":"+a[c]);b.push();return"{"+b.join(",")+"}"},g={pause:function(){e&&a.allowCss3Support?c.css(x,"paused"):d.fn.pause&&c.pause();b.data("runningStatus",
"paused");b.trigger("paused")},resume:function(){e&&a.allowCss3Support?c.css(x,"running"):d.fn.resume&&c.resume();b.data("runningStatus","resumed");b.trigger("resumed")},toggle:function(){g["resumed"==b.data("runningStatus")?"pause":"resume"]()},destroy:function(){clearTimeout(b.timer);b.css("visibility","hidden").html(b.find(".js-marquee:first"));setTimeout(function(){b.css("visibility","visible")},0)}};if("string"===typeof w)d.isFunction(g[w])&&(c||(c=b.find(".js-marquee-wrapper")),!0===b.data("css3AnimationIsSupported")&&
(e=!0),g[w]());else{var r;d.each(a,function(c,d){r=b.attr("data-"+c);if("undefined"!==typeof r){switch(r){case "true":r=!0;break;case "false":r=!1}a[c]=r}});a.duration=a.speed||a.duration;q="up"==a.direction||"down"==a.direction;a.gap=a.duplicated?a.gap:0;b.wrapInner('<div class="js-marquee"></div>');var f=b.find(".js-marquee").css({"margin-right":a.gap,"float":"left"});a.duplicated&&f.clone(!0).appendTo(b);b.wrapInner('<div style="width:100000px" class="js-marquee-wrapper"></div>');c=b.find(".js-marquee-wrapper");
if(q){var m=b.height();c.removeAttr("style");b.height(m);b.find(".js-marquee").css({"float":"none","margin-bottom":a.gap,"margin-right":0});a.duplicated&&b.find(".js-marquee:last").css({"margin-bottom":0});var s=b.find(".js-marquee:first").height()+a.gap;a.duration*=(parseInt(s,10)+parseInt(m,10))/parseInt(m,10)}else h=b.find(".js-marquee:first").width()+a.gap,k=b.width(),a.duration*=(parseInt(h,10)+parseInt(k,10))/parseInt(k,10);a.duplicated&&(a.duration/=2);if(a.allowCss3Support){var f=document.body||
document.createElement("div"),n="marqueeAnimation-"+Math.floor(1E7*Math.random()),z=["Webkit","Moz","O","ms","Khtml"],A="animation",t="",u="";f.style.animation&&(u="@keyframes "+n+" ",e=!0);if(!1===e)for(var y=0;y<z.length;y++)if(void 0!==f.style[z[y]+"AnimationName"]){f="-"+z[y].toLowerCase()+"-";A=f+A;x=f+x;u="@"+f+"keyframes "+n+" ";e=!0;break}e&&(t=n+" "+a.duration/1E3+"s "+a.delayBeforeStart/1E3+"s infinite "+a.css3easing,b.data("css3AnimationIsSupported",!0))}var C=function(){c.css("margin-top",
"up"==a.direction?m+"px":"-"+s+"px")},D=function(){c.css("margin-left","left"==a.direction?k+"px":"-"+h+"px")};a.duplicated?(q?c.css("margin-top","up"==a.direction?m:"-"+(2*s-a.gap)+"px"):c.css("margin-left","left"==a.direction?k+"px":"-"+(2*h-a.gap)+"px"),l=1):q?C():D();var v=function(){a.duplicated&&(1===l?(a._originalDuration=a.duration,a.duration=q?"up"==a.direction?a.duration+m/(s/a.duration):2*a.duration:"left"==a.direction?a.duration+k/(h/a.duration):2*a.duration,t&&(t=n+" "+a.duration/1E3+
"s "+a.delayBeforeStart/1E3+"s "+a.css3easing),l++):2===l&&(a.duration=a._originalDuration,t&&(n+="0",u=d.trim(u)+"0 ",t=n+" "+a.duration/1E3+"s 0s infinite "+a.css3easing),l++));q?a.duplicated?(2<l&&c.css("margin-top","up"==a.direction?0:"-"+s+"px"),p={"margin-top":"up"==a.direction?"-"+s+"px":0}):(C(),p={"margin-top":"up"==a.direction?"-"+c.height()+"px":m+"px"}):a.duplicated?(2<l&&c.css("margin-left","left"==a.direction?0:"-"+h+"px"),p={"margin-left":"left"==a.direction?"-"+h+"px":0}):(D(),p={"margin-left":"left"==
a.direction?"-"+h+"px":k+"px"});b.trigger("beforeStarting");if(e){c.css(A,t);var f=u+" { 100%  "+E(p)+"}",g=d("style");0!==g.length?g.filter(":last").append(f):d("head").append("<style>"+f+"</style>");B(c[0],"AnimationIteration",function(){b.trigger("finished")});B(c[0],"AnimationEnd",function(){v();b.trigger("finished")})}else c.animate(p,a.duration,a.easing,function(){b.trigger("finished");a.pauseOnCycle?b.timer=setTimeout(v,a.delayBeforeStart):v()});b.data("runningStatus","resumed")};b.bind("pause",
g.pause);b.bind("resume",g.resume);a.pauseOnHover&&b.bind("mouseenter mouseleave",g.toggle);e&&a.allowCss3Support?v():b.timer=setTimeout(v,a.delayBeforeStart)}})};d.fn.marquee.defaults={allowCss3Support:!0,css3easing:"linear",easing:"linear",delayBeforeStart:1E3,direction:"left",duplicated:!1,duration:5E3,gap:20,pauseOnCycle:!1,pauseOnHover:!1}})(jQuery);


$.Class('at.asfinag.unterwegs.mobile.Touch', {}, {
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {Object} parameters
	 * @param {function} callback
	 * @param {Object} controller
	 * @param {Object} config
	 */
    init: function(id, parameters, callback, controller, config) {
        this.id = id;
        this.box;
        this.path = [];
        this.page;
        this.lockNavigation = false;
        
        this.controller = controller;
        
        this.loading = false;
        
        this.addActiveOnClick = false;
        this.sticky_interval = null;
        var me = this;
        
        var tempBox = new at.asfinag.unterwegs.mobile.Box(id, parameters, this, config);
        if(parameters && typeof(parameters) == 'object' && parameters['page']) {
            tempBox.loadPage(parameters['page'], parameters, callback);
            this.page = { type: 'HOME', parameters: parameters, callback: callback };
        }        
        
        this.box = tempBox;       
    },
    /**
     * loadPage
     * 
     * @param {String} path
     * @param {Object} parameters
     * @param {function} callback
     */
    loadPage: function(path, parameters, callback) {
    	var me = this;
    	var controller = this.controller.list[path];
    	var url = this.controller.list[path].view;
    	
    	if(controller.parameters != undefined) {
    		parameters.urlParameters = controller.parameters;
    	}
    	this.box.loadPage(url, parameters, function() {
    		if(callback != undefined && typeof(callback) == 'function') {
    			callback();
    		}
    	});
    },
    
    /**
     * refreshPage
     */
    refreshPage: function() {
    	this.box.scroll.refresh();

        // change iScroll's default scrollbar
        var scrollbar = $('div.content div.scroller').next().find('div'); 
        if(scrollbar.length > 0) {
            // hide scrollbar
            scrollbar.hide();
            
            // change scrollbar's color
            scrollbar.css({
                'background-color': '#cecece',
                'opacity': '0.5'
            });
        }
    },
    /**
     * openPage
     * 
     * @param {String} url
     * @param {Object} parameters
     * @param {function} callback
     */
    openPage: function(url, parameters, callback) {
    	var me = this;
    	if(this.lockNavigation == false) {
    		this.lockNavigation = true;
    		this.box.loadPage(url, parameters, function() {
    													if(callback != undefined && typeof(callback) == 'function') {
    														callback();
    													}
    													setTimeout(function() {
    														me.lockNavigation = false;
    													}, 750);
    										});
    		this.path.push(this.page);
    		this.page = { url: url, parameters: parameters, callback: callback };
    	} else {
    	}
    },
    
    /**
     * back
     */
    back: function() {
    	var page = this.path[this.path.length-1];
    	var newPath = this.path.splice(0, this.path.length-1);
    	
    	if(page != undefined) { 
    		if(page.type != undefined && page.type == 'HOME') {
	    		this.init(this.id, page.parameters, page.callback);
	    	} else {
	    		this.openPage(page.url, page.parameters);
	    	}
    	}
    	
    	this.path = newPath;
    }
});

$.Class('at.asfinag.unterwegs.mobile.Box', {}, {
	
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {Object} parameters
	 * @param {Object} mobileTouch
	 * @param {Object} config
	 */
    init: function(id, parameters, mobileTouch, config) {
        this.id = id;
        this.parameters = parameters;
        this.mobileTouch = mobileTouch;
        
        this.width = '100%';
        this.height = '100%';
        
        this.config = config;
        
        this.scroll = undefined;
    },
    /**
     * showHeader - shows Application Header
     * 
     * @param {Boolean} visible - true if header should be visible
     */
    showHeader: function(visible) {
    	var box = $('#' + this.id).find('.mobileTouchBox');
    	var header = box.find('div.header');
    	
    	if(header.length == 0) {
    		return;
    	}
    	
    	if(visible) {
    		header.css('height', '');
    	} else {
    		header.css('height', '0px');
    	}
    	
    	this.resize();
    },
    
    /**
     * showFooter - shows Application Footer
     * 
     * @param {Boolean} visible - true if footer should be visible
     */
    showFooter: function(visible) {
    	var box = $('#' + this.id).find('.mobileTouchBox');
    	var footer = box.find('div.footer');
    	
    	if(footer.length == 0) {
    		return;
    	}
    	
    	if(visible) {
    		footer.css('height', '');
    	} else {
    		footer.css('height', '0px');
    	}
    	
    	this.resize();
    },
    
    /**
     * loadPage
     * 
     * @param {String} url
     * @param {Object} parameters
     * @param {function} callback
     */
    loadPage: function(url, parameters, callback) {
        var me = this;   
        
        var data;
        if(parameters != undefined && parameters.data != undefined) {
        	data = parameters.data;
        }
        
        var html = new EJS({ url: url }).render( { data: data } || {});        
        
        var activeTab;
        var transition;
        if(parameters != undefined && parameters.urlParameters != undefined) {
        	activeTab = parameters.urlParameters.activeTab;
        	try { 
        		transition = me.config[parameters.urlParameters['page-transition']];
        	} catch(e) {
        		transition = undefined;
        	}
        }
        
        this.pageTransition(html, transition, function() {
        	//me.config[parameters.urlParameters['page-transition']] = undefined;
        	me.initSubPages(activeTab);
            me.initInput();
            me.initBackLink();
            me.initLink();
            me.initDropDown();
            me.initControlGroups();
            me.initToggleButton();
            me.initLabels();
            me.initFooterMenu();
            me.initActive();
            if(callback && typeof callback == 'function') {
            	callback();        	       
            }
            
            // change iScroll's default scrollbar
            var scrollbar = $('div.content div.scroller').next().find('div'); 
            if(scrollbar.length > 0) {
            	// hide scrollbar
            	scrollbar.hide();
            	
            	// change scrollbar's color
	            scrollbar.css({
	            	'background-color': '#cecece',
	            	'opacity': '0.5'
	            });
            }
        });
    },
    
    /**
     * changePage
     * 
     * @param {String} page
     */
    changePage: function(page) {
    	var me = this; 
    	this.act_page = page;
        $('.content .page').each(function() {
            if($(this).data('page') == page) {
                $(this).show();
            	//check if page should display sticky divider
            	if($(this).hasClass("show_sticky") && $('ul.listview.nolocationfound').css('display') != "block" && $('ul.listview.noentries').css('display') != "block"  && $('ul.listview.no_internet_connection').css('display') != "block"){
            		//$('div#sticky_wrapper').show(); --> should be shown when headline is added
            		setTimeout(function() {
            			me.checkStickyPosition();
	                }, 200);
            		
            	} else {
            		$('div#sticky_wrapper').hide();
            	}
            } else {
                $(this).hide();
            }            
        });
    },
    
    /**
     * pageTransition
     * 
     * @param {} html
     * @param {String} transition
     * @param {function} callback
     */
    pageTransition: function(html, transition, callback) {
        
        var box = $('#' + this.id).find('.mobileTouchBox');
        var tmpBox = $('#' + this.id).append('<div class="mobileTouchBox tempBox"></div>').find('.tempBox').append(html);
        //tmpBox.css({ height: $(window).height() });
        tmpBox.css({ height: '100%' });
        
        var width = box.width();
        var height = box.height();
        var me = this;
                
        function switchBoxes() {
        	if(box) {
        		box.remove();
        	}            
            me.resize();
            me.iScroll();
            
            callback();
            tmpBox.removeClass('tempBox');
        }
        if(!$.browser.webkit) {
        	transition = undefined;
        }
        
        switch(transition) {
        	case 'slide-left':
        		tmpBox.css({
        			'position': 'absolute',
                    '-webkit-transform': 'translate3d(' + width + 'px, 0, 0)',
                    'opacity': '1'
                });
        		
        		box.css({
	        		'position': 'absolute',
                    '-webkit-transform': 'translate3d(0, 0, 0)',
                    'opacity': '1'
                });
        
		        setTimeout(function() {
		        	box.css({
		        		'-webkit-transition': '.5s',
		        		'-webkit-transform': 'translate3d(-'+ width +'px, 0, 0)'
		        	});
		        	
		        	tmpBox.css({
		        		'-webkit-transition': '.5s',
		        		'-webkit-transform': 'translate3d(0, 0, 0)'
		        	});
		        	
		        	setTimeout(function() {
	                	switchBoxes();
	                }, 501);
				}, 1);
        		break;
        		
        	case 'slide-right':
        		tmpBox.css({
        		    'position': 'absolute',
                    '-webkit-transform': 'translate3d(-' + width + 'px, 0, 0)',
                    'opacity': '1'
                });
        		
        		box.css({
					'position': 'absolute',
                    '-webkit-transform': 'translate3d(0, 0, 0)',
                    'opacity': '1'
                });
        
		        setTimeout(function() {
		        	tmpBox.css({
		        		'-webkit-transition': '.5s',
		        		'-webkit-transform': 'translate3d(0px, 0, 0)'
		        	});
		        	
		        	box.css({
		        		'-webkit-transition': '.5s',
		        		'-webkit-transform': 'translate3d(' + width + 'px, 0, 0)'
		        	});
		        	
		        	setTimeout(function() {
	                	switchBoxes();
	                }, 501);
				}, 1);
        		break;
        
            default: // fade in/out
                if($.browser.webkit) {
                
                    // if box with content already exists
                    if(box) {
                        box.css({
                            '-webkit-transform': 'translate3d(0, 0, 0)',
                            'opacity': '1'
                        });
                    }
                        
                    tmpBox.css({
                        '-webkit-transform': 'translate3d(0, 0, 0)',
                        'opacity': '0'
                    });
                
                    setTimeout(function() {
                        if(box) {
                            box.css({
                                '-webkit-transition': 'opacity .25s',
                                'opacity': '0'
                            });                    
                        }
                            
                        tmpBox.css({
                            '-webkit-transition': '.25s',
                            'opacity': '1'
                        });
                    });
                    
                    setTimeout(function() {
                    	switchBoxes();
                    }, 250);
                } else {
                    tmpBox.css('display', 'none');
                    tmpBox.fadeIn(250, function() { 
                    	switchBoxes();
                    });
                }
                break;
        }
        

        var content = tmpBox.find('.content');
        content.html('<div class="scroller">' + content.html() + '</div>');
    },
    
    /**
     * resize
     */
    resize: function() {
        var width  = this.width;
		var height = this.height;
        var header = $('#' + this.id).find('.mobileTouchBox > .header');
        var content = $('.content');
        
        var footer = $('#' + this.id).find('.mobileTouchBox > .footer');
                
        if(header != undefined && header.length > 0) {
            header.css({ width: (width ? width : '100%') });
        }
        
        $('.mobileTouchBox').css({
        	height: $(window).height() + (footer.length > 0 ? 0 : footer.height()) // TODO: footer-Höhe einsetzen!
        	
        });
        
        //footer resizing
    	var footerList = $('div.footer > ul.tabs > li.navigation');
    	if(footerList.length > 0){
			var width = $(window).width();
			var firsttabs = Math.floor(width / footerList.length);
			var lasttab = width - firsttabs * (footerList.length - 1);
			footerList.css({ 'width': firsttabs + 'px', 'text-align': 'center' });
			var lastchild = $('div.footer > ul.tabs > li.navigation:last-child');
			lastchild.css({ 'width': lasttab + 'px', 'text-align': 'center' });
    	}
        if(!content.hasClass('overlay')) {
        	//-1 is necessary for border in the footer
        	content.css({
	        	height: $(window).height() - 1 - (header.length>0 ? header.height() : 0) - (footer.length>0 ? footer.height() : 0),
	            top: (header.length > 0 ? header.height() + 2 : 0),
	        	bottom: (footer.length > 0 ? (footer.height()+2) : 0)
	        });
        }
                
//        if(footer != undefined && footer.length > 0) {
//            footer.css({
//                top: content.offset().top + content.height(),
//                width: '100%'
//            });
//        }
    },
    
    /**
     * iScroll - scrolling functionality
     */
    iScroll: function() {
    	var link;  
    	var me = this;
    	this.scroll = new iScroll($('#' + this.id).find('.mobileTouchBox .content')[0], { scrollbarClass: 'customScrollbar', desktopCompatibility: true, zoom: false,
    		onBeforeScrollStart : function(e){
    			me.toggleStickyChecker(true);
    		},
    		onScrollMove: function (e) {
    			link = $('.mobileTouchBox a:active');
    			$('.mobileTouchBox a').addClass('dragging');
				function stopPreventClick() {
					$('.mobileTouchBox a.dragging').removeClass('dragging');    					
				}
				setTimeout(stopPreventClick, 250);
				
				var scrollbar = $('div.content div.scroller').next().find('div');
				if(scrollbar.length > 0) {
					scrollbar.fadeIn();
				}
    			
    		},
    		onScrollEnd: function () {
    			me.toggleStickyChecker(false);
    			me.checkStickyPosition();
    			//function canClickNow() {
    				$('.mobileTouchBox a').removeClass('dragging');
    				if(link != undefined) {
    					link.css('background-color', '');
    				}
    			//}
    			//setTimeout(canClickNow, 200);
    			var scrollbar = $('div.content div.scroller').next().find('div');
    			if(scrollbar.length > 0) {
    				scrollbar.fadeOut();
    			}
    		}
    	});
        $('.dragging').click(function (e) {
            e.preventDefault();
        });
        
        var iscroll = this.scroll;
        setTimeout(function() {
            iscroll.refresh();
        }, 1);
    },
    /**
     * toggleStickyChecker - starts/stops the interval for checking the actual Headline
     * 
     * @param {Boolean} start if interval should be started or stopped
     */
    toggleStickyChecker: function(start){
    	var me = this;
    	if($("div#sticky_wrapper").css('display') == "block"){
	    	if(start && this.sticky_interval == null){
	    		//start interval
	    		this.sticky_interval = setInterval(function(){me.checkStickyPosition()},400);
	    	} else {
	    		//stop interval
	    		clearInterval(this.sticky_interval);
	    		this.sticky_interval = null;
	    	}
    	}
    },
    /**
     * checkStickyPosition - sets the actual Headline to the sticky area
     * 
     */
    checkStickyPosition: function() {
    	var last_elem = act_elem = "";
    	//build 
    	if($('h2#sticky_headline').length > 0){
    		var selector = "div."+this.act_page + " li.header";
			$(selector).each(function(index, elem) {
				if($(elem).offset().top > 60){
					if(last_elem == ""){last_elem = elem;}
					return false;
				}
				last_elem = elem;
			});
			
			if(act_elem != last_elem){
				act_elem = last_elem;
				$("h2#sticky_headline").text($(last_elem).find('h2').text()).fadeIn();
			}
		}
    },
    /**
     * updateFirstStickyElement - updates th
     */
    updateFirstStickyElement: function(){
    	if($('h2#sticky_headline').length > 0){
    		var selector = "div."+this.act_page + " li.header";
    		$("h2#sticky_headline").text($(selector).first().find('h2').text()).fadeIn();
    	}
    },
    /**
     * initActive
     */
    initActive: function() {
    	if(this.mobileTouch.addActiveOnClick == true) {
    		$('.mobileTouchBox').find('*').each(function() {
    			$(this).unbind('mousedown');
    			$(this).unbind('touchstart');
    			$(this).unbind('mouseup');
    			$(this).unbind('touchend');
    			$(this).unbind('touchcancel');
    		});
    		
	    	$('.mobileTouchBox').find('*').each(function() {
	    		if(!$(this).hasClass('scroller')) {
	    			function start(el) {
	    				el.addClass('activeHack');
	    				
	    				setTimeout(function() {
	    					el.removeClass('activeHack');
	    				}, 1000);
	    			}
	    			
	    			function end(el) {
	    				el.removeClass('active');
	    				el.removeClass('activeHack');
	    			}
	    			
	    			$(this).on('mousedown', function() {
	    				start($(this));
	    			});
	    			
	    			$(this).on('touchstart', function() {
	    				start($(this));
	    			});
	    			
	    			$(this).on('mouseup', function() {
	    				end($(this));
	    			});
	    			
	    			$(this).on('touchend', function() {
	    				end($(this));
	    			});
	    			$(this).on('touchcancel', function() {
	    				end($(this));
	    			});
	    		}
	    	});
    	}
    },
    /**
     * initSubPages
     * 
     * @param {String} activeTab
     */
    initSubPages: function(activeTab) {
        var me = this;
        var first = true;
        
        if(activeTab != undefined) {
        	$('.tempBox .footer > ul.tabs > li.navigation').each(function() {
        		if($(this).data('page') == activeTab) {
        			first = false;
        		} 
        	});
        	if(first == true) {
        		activeTab = undefined;
        	}
        }
        
        $('.tempBox .content .page').each(function() {
            var page = $(this).data('page');

            $(this).css({
                display: (first ? '' : 'none')
            });
            
            $('.tempBox .footer > ul.tabs > li.navigation').each(function() {
                if($(this).data('page') == page) {
                    if(first || activeTab == page) {
                        $(this).addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                    
                    var html = $(this).text();
                    $(this).html('');
                    
                    $(this).append('<span class="' + $(this).data('page') + '"></span><div class="overlay"><span class="text">' + html + '</span></div>');
                }
            });
            if(first == true) {
            	me.changePage(page);            	
            	first = false;
            } else {
            	if(activeTab == page) {
            		me.changePage(page);
            	}
            }
        });

        var pageContent = {};
        $('.footer > ul.tabs > li.navigation').on('click', function() {
            $('.footer > ul.tabs > li.navigation').removeClass('active');
            $(this).addClass('active');
            
            me.changePage($(this).data('page'));
            
            /*if($(this).data('additional') == "additional_header"){
            	$('div.go.header h1 span.additional_header').show();
            } else {
            	$('div.go.header h1 span.additional_header').hide();
            }*/
            setTimeout(function() {
            	me.scroll.refresh();
            }, 500);
        });
    },
    
    /**
     * initBackLink
     */
    initBackLink: function() {
    	var me = this;
    	
    	$('div.header > a.button.back').each(function() {
    		$(this).prepend('<span class="s1"></span><span class="s2"></span>');
    	});
    	
    	$('div.header > a.button.back').on('click', function() {
    		me.mobileTouch.back();
    	});
    },
    
    /**
     * initLink
     */
    initLink: function() {
    	var that = this;
    	
    	$('li.link').unbind('click');
    	$('li.link').on('click', function() {
    		if($(this).data('link') != undefined) {
    			window.location = $(this).data('link');
    		}
    	});
    },
    
    /**
     * initInput
     */
    initInput: function() {
    	var me = this;
    	
    	$('input').focus(function() {
      	   	me.scroll.refresh();
      	   	me.scroll.scrollToElement('#first', "0s");
        });
        $(document).keypress(function(e) {
            if(e.which == 13) {
                $("input").blur();
            }
        });
    },
    
    /**
     * initDropDown
     */
    initDropDown: function() {
        $('select').each(function() {
        	if(!$(this).hasClass("noconversion")){
        		$(this).after('<div class="dropdown"></div>').next().append($(this)).append('<span class="arrowDown"></span><span class="separator"></span>');
        	}
        });
    },
    
    /**
     * initToggleButton
     */
    initToggleButton: function() {
    	var that = this;
    	that.toggleClicked = false;
    	$('span.toggler').on('click', function() {
    		if(that.toggleClicked == false) {
    			that.toggleClicked = true;
    			
    			$(this).toggleClass('activated');
    			
    			setTimeout(function() {
    				that.toggleClicked = false;
    			}, 500);
    		}
    	});
    },
    
    /**
     * initControlGroups
     */
    initControlGroups: function() {
        $('ul.controlgroup li a').on('click', function() {
            $(this).parent().parent().find('li a').each(function() {
                $(this).removeClass('active');
            });
            $(this).addClass('active').focus();
        });
    },
    /**
     * initLabels
     */
    initLabels: function() {
        $('label').each(function() {
            var label = $(this);
            var input = $('input#' + $(this).attr('for'));
            
            if(input.length > 0) {
                if(input.is(':text') || input.is(':password') || input.attr('type') == 'number' || input.attr('type') == 'tel' || input.attr('type') == 'email' || input.attr('type') == 'number') {
                    input.after('<div class="labeledInput"></div>').next().append($(this)).append(input);
            
                    function valueChanged() {
                        if(input.data('type') != undefined && input.data('type') == 'number') {
                            input.val(input.val().replace(/\D/g, ""));
                        }

                        if(input.attr('value').length == 0) {
                            label.removeClass('hidden');
                        } else {
                            label.addClass('hidden');
                        }
                    }
                        
                    input.on('change', function() {
                        valueChanged();
                    });
                        
                    input.on('keyup', function() {
                        valueChanged();                    
                    });
                        
                    input.on('focus', function() {
                        valueChanged();
                        $(this).parent().addClass('selected');
                    });
                    
                    input.on('focusout', function() {         
                    	$(this).parent().removeClass('selected');
                    });
                        
                    valueChanged();
                } else if(input.is(':checkbox')) {
                    label.addClass('checkbox');
                }
            }

        });
    },
    /**
     * initFooterMenu - calculates the size of the footer tabs
     */
    initFooterMenu: function() {
    	var footerList = $('div.footer > ul.tabs > li.navigation');
    	if(footerList.length > 0){
			var width = $(window).width();
			var firsttabs = Math.floor(width / footerList.length);
			var lasttab = width - firsttabs * (footerList.length - 1);
			footerList.css({ 'width': firsttabs + 'px', 'text-align': 'center' });
			var lastchild = $('div.footer > ul.tabs > li.navigation:last-child');
			lastchild.css({ 'width': lasttab + 'px', 'text-align': 'center' });
    	}
    }
}); 

/**
 *  Loading Screen
 */
$.Class('at.asfinag.unterwegs.mobile.Loading', {}, {
	init: function(id) {
        this.id = id;
	},
	/**
	 * setVisible - display/hide loading screen
	 * 
	 * @param {Boolean} visible
	 */
    setVisible: function(visible) {
        if(visible) {
            $('body').find('#mobileTouchOverlay_' + this.id).remove();
            //$('body').append('<div id="mobileTouchOverlay_' + this.id + '" style="z-index: 999999; background-image: url(css/images/loader.gif); background-size: 40px; background-position: center center; background-repeat: no-repeat;" class="mobileTouchOverlay"></div>');            
            $('body').append('<div id="mobileTouchOverlay_' + this.id + '" style="z-index: 999999; background-image: url(css/images/loader.gif); background-size: 40px; background-position: center center; background-repeat: no-repeat;background-color: transparent;" class="mobileTouchOverlay"></div>');            
        } else {
            $('body').find('#mobileTouchOverlay_' + this.id).remove();
        }
    },
	/**
	 * setVisibleWithMessage - display loading screen with loading message
	 * 
	 * @param {Boolean} visible
	 * @param {String} message
	 */
	setVisibleWithMessage: function (visible, message) {
		if(visible) {
            $('body').find('#mobileTouchOverlay_' + this.id).remove();
            /* message will be shown on the top
            $('body').append('<div id="mobileTouchOverlay_' + this.id + '" style="z-index: 999999; background-image: url(css/images/loader.gif); background-size: 40px; background-position: center center; background-repeat: no-repeat;" class="mobileTouchOverlay"><p class="mobileTouchLoadingMessage">'+message+'</p></div>');            
            */
            $('body').append('<div id="mobileTouchOverlay_' + this.id + '" style="z-index: 999999;display:table" class="mobileTouchOverlay"><div class="mobileTouchLoadingMessage"><img src="css/images/loader.gif" style="width:40px"><div>'+message+'</div></div></div>');
        }
	}
});


$.Class('at.asfinag.unterwegs.mobile.TouchOverlay', {}, {
	/**
	 * init
	 * 
	 * @param {String} id
	 * @param {String} view
	 * @param {Object} data
	 * @param {function} onLoad
	 * @param {function} onShow
	 * @param {function} onDestroy
	 */
    init: function(id, view, data, onLoad, onShow, onDestroy) {
    	this.id = id;
    	this.view = view;
    	this.data = data;
    	this.onLoad = onLoad;
    	this.onShow = onShow;
    	this.onDestroy = onDestroy;
    	this.iScroll = undefined;
    },
    /**
     * setVisible
     * 
     * @param {Boolean} visible
     */
    setVisible: function(visible) {
    	var that = this;

        that.refreshOverlay = function() {
            setTimeout(function() {
                that.iScroll.refresh();                

                // // change iScroll's default scrollbar
                // var scrollbar = $('div.content.overlay > div')[1];
                // if(scrollbar.length > 0) {
                //     // hide scrollbar
                //     scrollbar.hide();
                    
                //     // change scrollbar's color
                //     scrollbar.css({
                //         'background-color': '#cecece',
                //         'opacity': '0.5'
                //     });
                // }
            }, 250);
        }

    	if(visible) {
    		if(this.onLoad != undefined && typeof(this.onLoad) === 'function') {
    			this.onLoad();
    		}
    		$('body').append('<div id="mobileTouchOverlay_' + this.id + '" style="display: none;" class="mobileTouchOverlay"></div>');
    		$('body').append('<div id="mobileTouchOverlay_' + this.id + '_box" style="display: none;" class="mobileTouchOverlayBox"></div>');
    		
    		$('#mobileTouchOverlay_' + this.id + '_box').append(new EJS({ url: this.view }).render( { data: this.data } ));
    		
    		this.iScroll = new iScroll($('#mobileTouchOverlay_' + this.id + '_box').find('.content.overlay')[0], { desktopCompatibility: true, zoom: false });
    		
    		$('#mobileTouchOverlay_' + this.id).show();
    		$('#mobileTouchOverlay_' + this.id + '_box').show();
    		
    		this.initLabels();
    		this.initDropDown();
    		this.initControlGroups();

    		if(this.onShow != undefined && typeof(this.onShow) === 'function') {
    			this.onShow();
    		}
    		
    		$('.mobileTouchBox').addClass('iOS7_blur');

            that.refreshOverlay();
    	} else {
    		$('#mobileTouchOverlay_' + this.id).remove();
    		$('#mobileTouchOverlay_' + this.id + '_box').remove();
    		
    		if(this.onDestroy != undefined && typeof(this.onDestroy) === 'function') {
    			this.onDestroy();
    		}
    		
    		$('.mobileTouchBox').removeClass('iOS7_blur');
    		
    		this.iScroll.destroy();
    	}
    },
    /**
     * initLabels
     */
    initLabels: function() {
    	var that = this;
    	$('#mobileTouchOverlay_' + that.id + '_box label').each(function() {
            var label = $(this);
            var input = $('#mobileTouchOverlay_' + that.id + '_box input#' + $(this).attr('for'));
            
            if(input.length > 0) {
                if(input.is(':text') || input.is(':password') || input.attr('type') == 'number' || input.attr('type') == 'tel' || input.attr('type') == 'email' || input.attr('type') == 'number') {
                    input.after('<div class="labeledInput"><div class="left"></div><div class="right"></div></div>').next().append($(this)).append(input);
                    if(input.data('style') != undefined) {
                    	input.parent().attr('style', input.data('style'));
                    }
                    
                    function valueChanged() {
                        if(input.attr('value').length == 0) {
                            label.removeClass('hidden');
                        } else {
                            label.addClass('hidden');
                        }

                    }
                    
                    input.on('change', function() {
                        valueChanged();
                    });
                        
                    input.on('keyup', function() {
                    	if(input.data('type') != undefined && input.data('type') == 'number' && input.data('type') != 'tel' ) {
                    		input.val(input.val().replace(/\D/g, ""));
                    		input.val(input.val().replace(/[ ]/g, "")); // replace blanks
                        }
                        
                    	valueChanged();
                    });
                    
                    input.on('focus', function() {
                        valueChanged();
                        $(this).parent().addClass('selected');
                    });
                    
                    input.on('focusout', function() {
                    	
                    	$(this).parent().removeClass('selected');
                    	
                      if(input.data('type') != undefined && ( input.data('type') == 'number' || input.data('type') == 'tel' ) ) {
                    	  input.val(input.val().replace(/\D/g, ""));
                    	  input.val(input.val().replace(/[ ]/g, "")); // replace blanks
                      }
                      
                      valueChanged();
                    });
                        
                    valueChanged();
                    
                } else if(input.is(':checkbox')) {
                    label.addClass('checkbox');
                }
            }

        });
    },
    /**
     * initDropDown
     */
    initDropDown: function() {
    	var that = this;
    	$('#mobileTouchOverlay_' + that.id + '_box select').each(function() {
            $(this).after('<div class="dropdown"></div>').next().append($(this)).append('<span class="arrowDown"></span><span class="separator"></span>');
        });
    },
    /**
     * initControlGroups
     */
    initControlGroups: function() {
        $('ul.controlgroup li a').on('click', function() {
            $(this).parent().parent().find('li a').each(function() {
                $(this).removeClass('active');
            });
            $(this).addClass('active').focus();
        });
    },
});


$.Class('at.asfinag.unterwegs.mobile.Controller', {}, {
	/**
	 * init
	 */
	init: function() {
		this.list = {};
	},
	/**
	 * add
	 * 
	 * @param {String} path
	 * @param {String} view
	 * @param {function} handler
	 */
    add: function(path, view, handler) {
    	this.list[path] = {
    		view: view,
    		path: path,
    		onLoad: handler.onLoad,
    		onShow: handler.onShow,
    		onDestroy: handler.onDestroy,
            onResize: handler.onResize
    	}
    }
});


/*******************************************************************************
NAME                            NEW ZEALAND MAP GRID

PURPOSE:	Transforms input longitude and latitude to Easting and
		Northing for the New Zealand Map Grid projection.  The
		longitude and latitude must be in radians.  The Easting
		and Northing values will be returned in meters.


ALGORITHM REFERENCES

1.  Department of Land and Survey Technical Circular 1973/32
      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf

2.  OSG Technical Report 4.1
      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf


IMPLEMENTATION NOTES

The two references use different symbols for the calculated values. This
implementation uses the variable names similar to the symbols in reference [1].

The alogrithm uses different units for delta latitude and delta longitude.
The delta latitude is assumed to be in units of seconds of arc x 10^-5.
The delta longitude is the usual radians. Look out for these conversions.

The algorithm is described using complex arithmetic. There were three
options:
   * find and use a Javascript library for complex arithmetic
   * write my own complex library
   * expand the complex arithmetic by hand to simple arithmetic

This implementation has expanded the complex multiplication operations
into parallel simple arithmetic operations for the real and imaginary parts.
The imaginary part is way over to the right of the display; this probably
violates every coding standard in the world, but, to me, it makes it much
more obvious what is going on.

The following complex operations are used:
   - addition
   - multiplication
   - division
   - complex number raised to integer power
   - summation

A summary of complex arithmetic operations:
   (from http://en.wikipedia.org/wiki/Complex_arithmetic)
   addition:       (a + bi) + (c + di) = (a + c) + (b + d)i
   subtraction:    (a + bi) - (c + di) = (a - c) + (b - d)i
   multiplication: (a + bi) x (c + di) = (ac - bd) + (bc + ad)i
   division:       (a + bi) / (c + di) = [(ac + bd)/(cc + dd)] + [(bc - ad)/(cc + dd)]i

The algorithm needs to calculate summations of simple and complex numbers. This is
implemented using a for-loop, pre-loading the summed value to zero.

The algorithm needs to calculate theta^2, theta^3, etc while doing a summation.
There are three possible implementations:
   - use Math.pow in the summation loop - except for complex numbers
   - precalculate the values before running the loop
   - calculate theta^n = theta^(n-1) * theta during the loop
This implementation uses the third option for both real and complex arithmetic.

For example
   psi_n = 1;
   sum = 0;
   for (n = 1; n <=6; n++) {
      psi_n1 = psi_n * psi;       // calculate psi^(n+1)
      psi_n = psi_n1;
      sum = sum + A[n] * psi_n;
   }


TEST VECTORS

NZMG E, N:         2487100.638      6751049.719     metres
NZGD49 long, lat:      172.739194       -34.444066  degrees

NZMG E, N:         2486533.395      6077263.661     metres
NZGD49 long, lat:      172.723106       -40.512409  degrees

NZMG E, N:         2216746.425      5388508.765     metres
NZGD49 long, lat:      169.172062       -46.651295  degrees

Note that these test vectors convert from NZMG metres to lat/long referenced
to NZGD49, not the more usual WGS84. The difference is about 70m N/S and about
10m E/W.

These test vectors are provided in reference [1]. Many more test
vectors are available in
   http://www.linz.govt.nz/docs/topography/topographicdata/placenamesdatabase/nznamesmar08.zip
which is a catalog of names on the 260-series maps.


EPSG CODES

NZMG     EPSG:27200
NZGD49   EPSG:4272

http://spatialreference.org/ defines these as
  Proj4js.defs["EPSG:4272"] = "+proj=longlat +ellps=intl +datum=nzgd49 +no_defs ";
  Proj4js.defs["EPSG:27200"] = "+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150 +ellps=intl +datum=nzgd49 +units=m +no_defs ";


LICENSE
  Copyright: Stephen Irons 2008
  Released under terms of the LGPL as per: http://www.gnu.org/copyleft/lesser.html

*******************************************************************************/


/**
  Initialize New Zealand Map Grip projection
*/

Proj4js.Proj.nzmg = {

  /**
   * iterations: Number of iterations to refine inverse transform.
   *     0 -> km accuracy
   *     1 -> m accuracy -- suitable for most mapping applications
   *     2 -> mm accuracy
   */
  iterations: 1,

  init : function() {
    this.A = new Array();
    this.A[1]  = +0.6399175073;
    this.A[2]  = -0.1358797613;
    this.A[3]  = +0.063294409;
    this.A[4]  = -0.02526853;
    this.A[5]  = +0.0117879;
    this.A[6]  = -0.0055161;
    this.A[7]  = +0.0026906;
    this.A[8]  = -0.001333;
    this.A[9]  = +0.00067;
    this.A[10] = -0.00034;

    this.B_re = new Array();        this.B_im = new Array();
    this.B_re[1] = +0.7557853228;   this.B_im[1] =  0.0;
    this.B_re[2] = +0.249204646;    this.B_im[2] = +0.003371507;
    this.B_re[3] = -0.001541739;    this.B_im[3] = +0.041058560;
    this.B_re[4] = -0.10162907;     this.B_im[4] = +0.01727609;
    this.B_re[5] = -0.26623489;     this.B_im[5] = -0.36249218;
    this.B_re[6] = -0.6870983;      this.B_im[6] = -1.1651967;

    this.C_re = new Array();        this.C_im = new Array();
    this.C_re[1] = +1.3231270439;   this.C_im[1] =  0.0;
    this.C_re[2] = -0.577245789;    this.C_im[2] = -0.007809598;
    this.C_re[3] = +0.508307513;    this.C_im[3] = -0.112208952;
    this.C_re[4] = -0.15094762;     this.C_im[4] = +0.18200602;
    this.C_re[5] = +1.01418179;     this.C_im[5] = +1.64497696;
    this.C_re[6] = +1.9660549;      this.C_im[6] = +2.5127645;

    this.D = new Array();
    this.D[1] = +1.5627014243;
    this.D[2] = +0.5185406398;
    this.D[3] = -0.03333098;
    this.D[4] = -0.1052906;
    this.D[5] = -0.0368594;
    this.D[6] = +0.007317;
    this.D[7] = +0.01220;
    this.D[8] = +0.00394;
    this.D[9] = -0.0013;
  },

  /**
    New Zealand Map Grid Forward  - long/lat to x/y
    long/lat in radians
  */
  forward : function(p) {
    var lon = p.x;
    var lat = p.y;

    var delta_lat = lat - this.lat0;
    var delta_lon = lon - this.long0;

    // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
    // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.
    var d_phi = delta_lat / Proj4js.common.SEC_TO_RAD * 1E-5;       var d_lambda = delta_lon;
    var d_phi_n = 1;  // d_phi^0

    var d_psi = 0;
    for (var n = 1; n <= 10; n++) {
      d_phi_n = d_phi_n * d_phi;
      d_psi = d_psi + this.A[n] * d_phi_n;
    }

    // 2. Calculate theta
    var th_re = d_psi;                                              var th_im = d_lambda;

    // 3. Calculate z
    var th_n_re = 1;                                                var th_n_im = 0;  // theta^0
    var th_n_re1;                                                   var th_n_im1;

    var z_re = 0;                                                   var z_im = 0;
    for (var n = 1; n <= 6; n++) {
      th_n_re1 = th_n_re*th_re - th_n_im*th_im;                     th_n_im1 = th_n_im*th_re + th_n_re*th_im;
      th_n_re = th_n_re1;                                           th_n_im = th_n_im1;
      z_re = z_re + this.B_re[n]*th_n_re - this.B_im[n]*th_n_im;    z_im = z_im + this.B_im[n]*th_n_re + this.B_re[n]*th_n_im;
    }

    // 4. Calculate easting and northing
    p.x = (z_im * this.a) + this.x0; 
    p.y = (z_re * this.a) + this.y0;

    return p;
  },


  /**
    New Zealand Map Grid Inverse  -  x/y to long/lat
  */
  inverse : function(p) {

    var x = p.x;
    var y = p.y;

    var delta_x = x - this.x0;
    var delta_y = y - this.y0;

    // 1. Calculate z
    var z_re = delta_y / this.a;                                              var z_im = delta_x / this.a;

    // 2a. Calculate theta - first approximation gives km accuracy
    var z_n_re = 1;                                                           var z_n_im = 0;  // z^0
    var z_n_re1;                                                              var z_n_im1;

    var th_re = 0;                                                            var th_im = 0;
    for (var n = 1; n <= 6; n++) {
      z_n_re1 = z_n_re*z_re - z_n_im*z_im;                                    z_n_im1 = z_n_im*z_re + z_n_re*z_im;
      z_n_re = z_n_re1;                                                       z_n_im = z_n_im1;
      th_re = th_re + this.C_re[n]*z_n_re - this.C_im[n]*z_n_im;              th_im = th_im + this.C_im[n]*z_n_re + this.C_re[n]*z_n_im;
    }

    // 2b. Iterate to refine the accuracy of the calculation
    //        0 iterations gives km accuracy
    //        1 iteration gives m accuracy -- good enough for most mapping applications
    //        2 iterations bives mm accuracy
    for (var i = 0; i < this.iterations; i++) {
       var th_n_re = th_re;                                                      var th_n_im = th_im;
       var th_n_re1;                                                             var th_n_im1;

       var num_re = z_re;                                                        var num_im = z_im;
       for (var n = 2; n <= 6; n++) {
         th_n_re1 = th_n_re*th_re - th_n_im*th_im;                               th_n_im1 = th_n_im*th_re + th_n_re*th_im;
         th_n_re = th_n_re1;                                                     th_n_im = th_n_im1;
         num_re = num_re + (n-1)*(this.B_re[n]*th_n_re - this.B_im[n]*th_n_im);  num_im = num_im + (n-1)*(this.B_im[n]*th_n_re + this.B_re[n]*th_n_im);
       }

       th_n_re = 1;                                                              th_n_im = 0;
       var den_re = this.B_re[1];                                                var den_im = this.B_im[1];
       for (var n = 2; n <= 6; n++) {
         th_n_re1 = th_n_re*th_re - th_n_im*th_im;                               th_n_im1 = th_n_im*th_re + th_n_re*th_im;
         th_n_re = th_n_re1;                                                     th_n_im = th_n_im1;
         den_re = den_re + n * (this.B_re[n]*th_n_re - this.B_im[n]*th_n_im);    den_im = den_im + n * (this.B_im[n]*th_n_re + this.B_re[n]*th_n_im);
       }

       // Complex division
       var den2 = den_re*den_re + den_im*den_im;
       th_re = (num_re*den_re + num_im*den_im) / den2;                           th_im = (num_im*den_re - num_re*den_im) / den2;
    }

    // 3. Calculate d_phi              ...                                    // and d_lambda
    var d_psi = th_re;                                                        var d_lambda = th_im;
    var d_psi_n = 1;  // d_psi^0

    var d_phi = 0;
    for (var n = 1; n <= 9; n++) {
       d_psi_n = d_psi_n * d_psi;
       d_phi = d_phi + this.D[n] * d_psi_n;
    }

    // 4. Calculate latitude and longitude
    // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.
    var lat = this.lat0 + (d_phi * Proj4js.common.SEC_TO_RAD * 1E5);
    var lon = this.long0 +  d_lambda;

    p.x = lon;
    p.y = lat;

    return p;
  }
};


/*******************************************************************************
NAME                            LAMBERT CONFORMAL CONIC

PURPOSE:	Transforms input longitude and latitude to Easting and
		Northing for the Lambert Conformal Conic projection.  The
		longitude and latitude must be in radians.  The Easting
		and Northing values will be returned in meters.


ALGORITHM REFERENCES

1.  Snyder, John P., "Map Projections--A Working Manual", U.S. Geological
    Survey Professional Paper 1395 (Supersedes USGS Bulletin 1532), United
    State Government Printing Office, Washington D.C., 1987.

2.  Snyder, John P. and Voxland, Philip M., "An Album of Map Projections",
    U.S. Geological Survey Professional Paper 1453 , United State Government
*******************************************************************************/


//<2104> +proj=lcc +lat_1=10.16666666666667 +lat_0=10.16666666666667 +lon_0=-71.60561777777777 +k_0=1 +x0=-17044 +x0=-23139.97 +ellps=intl +units=m +no_defs  no_defs

// Initialize the Lambert Conformal conic projection
// -----------------------------------------------------------------

//Proj4js.Proj.lcc = Class.create();
Proj4js.Proj.lcc = {
  init : function() {

    // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north
    //double c_lat;                   /* center latitude                      */
    //double c_lon;                   /* center longitude                     */
    //double lat1;                    /* first standard parallel              */
    //double lat2;                    /* second standard parallel             */
    //double r_maj;                   /* major axis                           */
    //double r_min;                   /* minor axis                           */
    //double false_east;              /* x offset in meters                   */
    //double false_north;             /* y offset in meters                   */

      if (!this.lat2){this.lat2=this.lat0;}//if lat2 is not defined
      if (!this.k0) this.k0 = 1.0;

    // Standard Parallels cannot be equal and on opposite sides of the equator
      if (Math.abs(this.lat1+this.lat2) < Proj4js.common.EPSLN) {
        Proj4js.reportError("lcc:init: Equal Latitudes");
        return;
      }

      var temp = this.b / this.a;
      this.e = Math.sqrt(1.0 - temp*temp);

      var sin1 = Math.sin(this.lat1);
      var cos1 = Math.cos(this.lat1);
      var ms1 = Proj4js.common.msfnz(this.e, sin1, cos1);
      var ts1 = Proj4js.common.tsfnz(this.e, this.lat1, sin1);

      var sin2 = Math.sin(this.lat2);
      var cos2 = Math.cos(this.lat2);
      var ms2 = Proj4js.common.msfnz(this.e, sin2, cos2);
      var ts2 = Proj4js.common.tsfnz(this.e, this.lat2, sin2);

      var ts0 = Proj4js.common.tsfnz(this.e, this.lat0, Math.sin(this.lat0));

      if (Math.abs(this.lat1 - this.lat2) > Proj4js.common.EPSLN) {
        this.ns = Math.log(ms1/ms2)/Math.log(ts1/ts2);
      } else {
        this.ns = sin1;
      }
      this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
      this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
      if (!this.title) this.title = "Lambert Conformal Conic";
    },


    // Lambert Conformal conic forward equations--mapping lat,long to x,y
    // -----------------------------------------------------------------
    forward : function(p) {

      var lon = p.x;
      var lat = p.y;

    // convert to radians
      if ( lat <= 90.0 && lat >= -90.0 && lon <= 180.0 && lon >= -180.0) {
        //lon = lon * Proj4js.common.D2R;
        //lat = lat * Proj4js.common.D2R;
      } else {
        Proj4js.reportError("lcc:forward: llInputOutOfRange: "+ lon +" : " + lat);
        return null;
      }

      var con  = Math.abs( Math.abs(lat) - Proj4js.common.HALF_PI);
      var ts, rh1;
      if (con > Proj4js.common.EPSLN) {
        ts = Proj4js.common.tsfnz(this.e, lat, Math.sin(lat) );
        rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
      } else {
        con = lat * this.ns;
        if (con <= 0) {
          Proj4js.reportError("lcc:forward: No Projection");
          return null;
        }
        rh1 = 0;
      }
      var theta = this.ns * Proj4js.common.adjust_lon(lon - this.long0);
      p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
      p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;

      return p;
    },

  // Lambert Conformal Conic inverse equations--mapping x,y to lat/long
  // -----------------------------------------------------------------
  inverse : function(p) {

    var rh1, con, ts;
    var lat, lon;
    var x = (p.x - this.x0)/this.k0;
    var y = (this.rh - (p.y - this.y0)/this.k0);
    if (this.ns > 0) {
      rh1 = Math.sqrt (x * x + y * y);
      con = 1.0;
    } else {
      rh1 = -Math.sqrt (x * x + y * y);
      con = -1.0;
    }
    var theta = 0.0;
    if (rh1 != 0) {
      theta = Math.atan2((con * x),(con * y));
    }
    if ((rh1 != 0) || (this.ns > 0.0)) {
      con = 1.0/this.ns;
      ts = Math.pow((rh1/(this.a * this.f0)), con);
      lat = Proj4js.common.phi2z(this.e, ts);
      if (lat == -9999) return null;
    } else {
      lat = -Proj4js.common.HALF_PI;
    }
    lon = Proj4js.common.adjust_lon(theta/this.ns + this.long0);

    p.x = lon;
    p.y = lat;
    return p;
  }
};






/*******************************************************************************
NAME                            MERCATOR

PURPOSE:	Transforms input longitude and latitude to Easting and
		Northing for the Mercator projection.  The
		longitude and latitude must be in radians.  The Easting
		and Northing values will be returned in meters.

PROGRAMMER              DATE
----------              ----
D. Steinwand, EROS      Nov, 1991
T. Mittan		Mar, 1993

ALGORITHM REFERENCES

1.  Snyder, John P., "Map Projections--A Working Manual", U.S. Geological
    Survey Professional Paper 1395 (Supersedes USGS Bulletin 1532), United
    State Government Printing Office, Washington D.C., 1987.

2.  Snyder, John P. and Voxland, Philip M., "An Album of Map Projections",
    U.S. Geological Survey Professional Paper 1453 , United State Government
    Printing Office, Washington D.C., 1989.
*******************************************************************************/

//static double r_major = a;		   /* major axis 				*/
//static double r_minor = b;		   /* minor axis 				*/
//static double lon_center = long0;	   /* Center longitude (projection center) */
//static double lat_origin =  lat0;	   /* center latitude			*/
//static double e,es;		           /* eccentricity constants		*/
//static double m1;		               /* small value m			*/
//static double false_northing = y0;   /* y offset in meters			*/
//static double false_easting = x0;	   /* x offset in meters			*/
//scale_fact = k0 

Proj4js.Proj.merc = {
  init : function() {
	//?this.temp = this.r_minor / this.r_major;
	//this.temp = this.b / this.a;
	//this.es = 1.0 - Math.sqrt(this.temp);
	//this.e = Math.sqrt( this.es );
	//?this.m1 = Math.cos(this.lat_origin) / (Math.sqrt( 1.0 - this.es * Math.sin(this.lat_origin) * Math.sin(this.lat_origin)));
	//this.m1 = Math.cos(0.0) / (Math.sqrt( 1.0 - this.es * Math.sin(0.0) * Math.sin(0.0)));
    if (this.lat_ts) {
      if (this.sphere) {
        this.k0 = Math.cos(this.lat_ts);
      } else {
        this.k0 = Proj4js.common.msfnz(this.es, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
      }
    }
  },

/* Mercator forward equations--mapping lat,long to x,y
  --------------------------------------------------*/

  forward : function(p) {	
    //alert("ll2m coords : "+coords);
    var lon = p.x;
    var lat = p.y;
    // convert to radians
    if ( lat*Proj4js.common.R2D > 90.0 && 
          lat*Proj4js.common.R2D < -90.0 && 
          lon*Proj4js.common.R2D > 180.0 && 
          lon*Proj4js.common.R2D < -180.0) {
      Proj4js.reportError("merc:forward: llInputOutOfRange: "+ lon +" : " + lat);
      return null;
    }

    var x,y;
    if(Math.abs( Math.abs(lat) - Proj4js.common.HALF_PI)  <= Proj4js.common.EPSLN) {
      Proj4js.reportError("merc:forward: ll2mAtPoles");
      return null;
    } else {
      if (this.sphere) {
        x = this.x0 + this.a * this.k0 * Proj4js.common.adjust_lon(lon - this.long0);
        y = this.y0 + this.a * this.k0 * Math.log(Math.tan(Proj4js.common.FORTPI + 0.5*lat));
      } else {
        var sinphi = Math.sin(lat);
        var ts = Proj4js.common.tsfnz(this.e,lat,sinphi);
        x = this.x0 + this.a * this.k0 * Proj4js.common.adjust_lon(lon - this.long0);
        y = this.y0 - this.a * this.k0 * Math.log(ts);
      }
      p.x = x; 
      p.y = y;
      return p;
    }
  },


  /* Mercator inverse equations--mapping x,y to lat/long
  --------------------------------------------------*/
  inverse : function(p) {	

    var x = p.x - this.x0;
    var y = p.y - this.y0;
    var lon,lat;

    if (this.sphere) {
      lat = Proj4js.common.HALF_PI - 2.0 * Math.atan(Math.exp(-y / this.a * this.k0));
    } else {
      var ts = Math.exp(-y / (this.a * this.k0));
      lat = Proj4js.common.phi2z(this.e,ts);
      if(lat == -9999) {
        Proj4js.reportError("merc:inverse: lat = -9999");
        return null;
      }
    }
    lon = Proj4js.common.adjust_lon(this.long0+ x / (this.a * this.k0));

    p.x = lon;
    p.y = lat;
    return p;
  }
};



