
// Generated by CoffeeScript 1.3.1
var BaseScene, BonusStageScene, BonusStageText, Box, Button, Chara, ClassDown, ClassUp, ConnectError, CountDownScene, Counter, Diploma, ErrorDialog, EtcButton, EtcScene, FloorScene, FriendButton, FriendScene, GameoverScene, GradeButton, Graph, ImageCharacter, ImageStageScene, InputNicknameScene, Loading, LoadingKuma, LogButton, LogScene, MyCore, NetWorkErrorScene, PauseButton, PauseScene, PlayButton, PreGame1, PreGame2, PreGameScene, Problems, RankButton, RankFromGrade, RankSelfButton, RankTopButton, RankingScene, RateUp, RatingLogScene, Result, Score, StageScene, StageScore, StageScoreScene, Stamp, TextCharacter, TitleScene, TopButton, UpdateNotice, WhiteLabel, rating_jp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

enchant();

MyCore = (function(_super) {

  __extends(MyCore, _super);

  MyCore.name = 'MyCore';

  function MyCore() {
    var arg, data, loading, param, str, _i, _j, _len, _len1, _ref;
    MyCore.__super__.constructor.call(this, 320, 480);
    loading = new Label;
    loading.text = 'Now Loading...';
    loading.color = 'white';
    loading.font = '24px';
    loading.textAlign = 'center';
    loading.y = 120;
    this.loadingScene.addChild(loading);
    this.preload('character.png', 'buttons.png', 'images.png', 'help.png', 'effect.png', 'loading.png');
    this.text = {};
    _ref = ['point', 'second', 'bonus'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      str = _ref[_i];
      this.text[str] = $('#text_' + str).text();
    }
    $('#loading').css({
      top: 400 * this.scale,
      left: 240 * this.scale
    });
    $('#tweet img').css({
      width: 40 * this.scale,
      height: 40 * this.scale
    });
    $('#tweet').css({
      top: 300 * this.scale,
      left: 110 * this.scale
    });
    $('#line img').css({
      width: 40 * this.scale,
      height: 40 * this.scale
    });
    $('#line').css({
      top: 300 * this.scale,
      left: 170 * this.scale
    });
    $('#default_line img').css({
      width: 40 * this.scale,
      height: 40 * this.scale
    });
    $('#default_line').css({
      top: 350 * this.scale,
      left: 250 * this.scale
    }).show();
    $('#ranking').css({
      width: 320 * this.scale,
      height: 420 * this.scale,
      top: 60,
      left: 0
    });
    this.user_id = 'guest';
    this.device = 'web';
    this.version = 1;
    this.version_code = 'ver 1.0.0';
    this.nickname = 'guest';
    data = location.search.split('?');
    if (data.length > 1) {
      data = data[1].split('&');
    }
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      param = data[_j];
      arg = param.split('=');
      if (arg[0] === 'id') {
        this.user_id = arg[1];
      } else if (arg[0] === 'device') {
        this.device = arg[1];
      } else if (arg[0] === 'version') {
        this.version = arg[1];
      } else if (arg[0] === 'version_code') {
          this.version_code = 'ver ' + arg[1];
      }
    }
    this.first = 4;
    this.second = 5;
    this.third = 6;
    this.server = 'http://fe.igomovie.net';
    this.app_id = 'info.real_unreal.find_difference.kumamon_' + this.first + this.third;
    this.interval_flag = 0;
    this.score = 0;
    this.grade = '';
    this.rating = 0;
    this.rating_year = 1970;
    this.rating_month = 1;
    this.rating_day = 1;
    this.rootScene.backgroundColor = 'gray';
    this.fps = 20;
    this.ranking_available = 0;
    this.rateup_flag = 0;
    this.onload = function() {
      this.pushScene(new BaseScene);
      return this.pushScene(new TitleScene);
    };
    this.start();
  }

  return MyCore;

})(Core);

Array.prototype.shuffle = function() {
  var i, j, t;
  i = this.length;
  while (i) {
    j = Math.floor(Math.random() * i);
    t = this[--i];
    this[i] = this[j];
    this[j] = t;
  }
  return this;
};

window.onload = function() {
  return new MyCore();
};

Box = (function(_super) {

  __extends(Box, _super);

  Box.name = 'Box';

  function Box(w, h, color) {
    var c, s;
    Box.__super__.constructor.call(this, w, h);
    s = new Surface(w, h);
    c = s.context;
    c.fillStyle = color || 'white';
    c.fillRect(0, 0, w, h);
    this.image = s;
  }

  return Box;

})(Sprite);

WhiteLabel = (function(_super) {

  __extends(WhiteLabel, _super);

  WhiteLabel.name = 'WhiteLabel';

  function WhiteLabel() {
    WhiteLabel.__super__.constructor.apply(this, arguments);
    this.color = 'white';
    this.textAlign = 'center';
    this.x = 10;
  }

  return WhiteLabel;

})(Label);

Chara = (function(_super) {

  __extends(Chara, _super);

  Chara.name = 'Chara';

  function Chara(frame, w, h) {
    var core;
    frame = frame || 0;
    w = w || 120;
    h = h || 160;
    Chara.__super__.constructor.call(this, w, h);
    core = Core.instance;
    this.image = core.assets['character.png'];
    this.frame = frame;
  }

  return Chara;

})(Sprite);

Loading = (function(_super) {

  __extends(Loading, _super);

  Loading.name = 'Loading';

  function Loading() {
    var core;
    Loading.__super__.constructor.call(this, 50, 50);
    core = Core.instance;
    this.image = core.assets['loading.png'];
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.frame++;
      if (this.frame > 18) {
        return this.frame = 0;
      }
    });
  }

  return Loading;

})(Sprite);

Button = (function(_super) {

  __extends(Button, _super);

  Button.name = 'Button';

  function Button(w, h) {
    var core;
    Button.__super__.constructor.call(this, w, h);
    core = Core.instance;
    this.image = core.assets['buttons.png'];
    this.addEventListener(Event.TOUCH_END, function() {
      if (startClick) {
        return startClick();
      }
    });
  }

  return Button;

})(Sprite);

TopButton = (function(_super) {

  __extends(TopButton, _super);

  TopButton.name = 'TopButton';

  function TopButton() {
    TopButton.__super__.constructor.call(this, 50, 50);
    this.x = 15;
    this.y = 10;
    this.addEventListener(Event.TOUCH_END, function() {
      var core;
      $('#nickname_form').hide();
      $('#loading').hide();
      $('#tweet').hide();
      $('#line').hide();
      $('#default_line').show();
      core = Core.instance;
      return core.removeScene(core.currentScene);
    });
  }

  return TopButton;

})(Button);

LogButton = (function(_super) {

  __extends(LogButton, _super);

  LogButton.name = 'LogButton';

  function LogButton() {
    LogButton.__super__.constructor.call(this, 50, 50);
    this.frame = 1;
    this.x = 75;
    this.y = 10;
    this.addEventListener(Event.TOUCH_END, function() {
      var core;
      $('#nickname_form').hide();
      $('#loading').hide();
      $('#tweet').hide();
      $('#line').hide();
      $('#default_line').hide();
      core = Core.instance;
      core.removeScene(core.currentScene);
      return core.pushScene(new LogScene);
    });
  }

  return LogButton;

})(Button);

RankButton = (function(_super) {

  __extends(RankButton, _super);

  RankButton.name = 'RankButton';

  function RankButton() {
    var button, core, effect;
    RankButton.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    button = new Button(50, 50);
    button.frame = 2;
    button.x = 135;
    button.y = 10;
    this.addChild(button);
    if (core.ranking_available && core.rateup_flag) {
      effect = new Sprite(50, 25);
      effect.image = core.assets['buttons.png'];
      effect.frame = 5;
      effect.x = 145;
      effect.y = 40;
      this.addChild(effect);
    }
    this.addEventListener(Event.TOUCH_END, function() {
      $('#nickname_form').hide();
      $('#loading').hide();
      $('#tweet').hide();
      $('#line').hide();
      $('#default_line').hide();
      core.removeScene(core.currentScene);
      return core.pushScene(new RankingScene);
    });
  }

  return RankButton;

})(Group);

FriendButton = (function(_super) {

  __extends(FriendButton, _super);

  FriendButton.name = 'FriendButton';

  function FriendButton() {
    FriendButton.__super__.constructor.call(this, 50, 50);
    this.frame = 3;
    this.x = 195;
    this.y = 10;
    this.addEventListener(Event.TOUCH_END, function() {
      var core;
      $('#nickname_form').hide();
      $('#loading').hide();
      $('#tweet').hide();
      $('#line').hide();
      $('#default_line').show();
      core = Core.instance;
      core.removeScene(core.currentScene);
      return core.pushScene(new FriendScene);
    });
  }

  return FriendButton;

})(Button);

EtcButton = (function(_super) {

  __extends(EtcButton, _super);

  EtcButton.name = 'EtcButton';

  function EtcButton() {
    EtcButton.__super__.constructor.call(this, 50, 50);
    this.frame = 4;
    this.x = 255;
    this.y = 10;
    this.addEventListener(Event.TOUCH_END, function() {
      var core;
      $('#nickname_form').hide();
      $('#loading').hide();
      $('#tweet').hide();
      $('#line').hide();
      $('#default_line').hide();
      core = Core.instance;
      core.removeScene(core.currentScene);
      return core.pushScene(new EtcScene);
    });
  }

  return EtcButton;

})(Button);

PauseButton = (function(_super) {

  __extends(PauseButton, _super);

  PauseButton.name = 'PauseButton';

  function PauseButton(opt) {
    var counter;
    PauseButton.__super__.constructor.call(this, 50, 50);
    counter = opt.counter;
    this.addEventListener(Event.TOUCH_END, function() {
      var core;
      if (!counter) {
        return;
      }
      core = Core.instance;
      return core.pushScene(new PauseScene({
        counter: counter
      }));
    });
  }

  return PauseButton;

})(Button);

Stamp = (function(_super) {

  __extends(Stamp, _super);

  Stamp.name = 'Stamp';

  function Stamp() {
    var core;
    Stamp.__super__.constructor.call(this, 50, 50);
    core = Core.instance;
    this.image = core.assets['buttons.png'];
    this.frame = 58;
    this.scaleX = 0.5;
    this.scaleY = 0.5;
    this.rotation = -5;
  }

  Stamp.prototype.animate = function() {
    this.opacity = 0;
    this.scaleX = 1;
    this.scaleY = 1;
    this.rotation = 0;
    return this.tl.tween({
      opacity: 1,
      scaleX: 0.5,
      scaleY: 0.5,
      rotation: -5,
      time: 15
    });
  };

  return Stamp;

})(Sprite);

Diploma = (function(_super) {

  __extends(Diploma, _super);

  Diploma.name = 'Diploma';

  function Diploma() {
    var base, box, core, date, explain, name, name_honor, org, org_leader, org_leader_name, rating, stamp, title;
    Diploma.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    this.y = -480;
    box = new Box(320, 480, 'gray');
    this.addChild(box);
    base = new Sprite(320, 450);
    base.image = core.assets['effect.png'];
    base.frame = 1;
    base.y = 10;
    this.addChild(base);
    title = new Label;
    title.text = $('#text_diploma_title').text();
    title.x = 10;
    title.y = 95;
    title.font = 'bold 20px sans-serif';
    title.textAlign = 'center';
    this.addChild(title);
    name = new Label;
    name.text = core.nickname;
    name.x = -60;
    name.y = 180;
    name.font = 'bold 20px sans-serif';
    name.textAlign = 'right';
    this.addChild(name);
    name_honor = new Label;
    name_honor.text = $('#text_diploma_honor').text();
    name_honor.x = -30;
    name_honor.y = 180;
    name_honor.font = 'bold 20px sans-serif';
    name_honor.textAlign = 'right';
    this.addChild(name_honor);
    explain = new Label;
    explain.text = $('#text_diploma_explain').html();
    explain.x = 50;
    explain.y = 230;
    explain.textAlign = 'left';
    this.addChild(explain);
    org = new Label;
    org.text = $('#text_diploma_org').text();
    org.x = -30;
    org.y = 340;
    org.textAlign = 'right';
    this.addChild(org);
    org_leader = new Label;
    org_leader.text = $('#text_diploma_org_leader').text();
    org_leader.x = 120;
    org_leader.y = 370;
    org_leader.textAlign = 'left';
    this.addChild(org_leader);
    org_leader_name = new Label;
    org_leader_name.text = $('#text_diploma_org_leader_name').text();
    org_leader_name.x = -30;
    org_leader_name.y = 365;
    org_leader_name.font = 'bold 20px sans-serif';
    org_leader_name.textAlign = 'right';
    this.addChild(org_leader_name);
    stamp = new Stamp;
    stamp.x = 220;
    stamp.y = 355;
    this.addChild(stamp);
    this.stamp = stamp;
    rating = new Label;
    rating.text = '';
    rating.x = 10;
    rating.y = 135;
    rating.textAlign = 'center';
    rating.font = '30px sans-serif';
    this.addChild(rating);
    this.rating = rating;
    date = new Label;
    date.text = '';
    date.x = 50;
    date.y = 300;
    this.addChild(date);
    this.date = date;
  }

  Diploma.prototype.show = function(opt) {
    var callback, core, rating_day, rating_month, rating_value, rating_year, stamp_animation;
    this.y = 0;
    opt = opt || {};
    core = Core.instance;
    stamp_animation = opt.stamp_animation || 0;
    callback = opt.callback || 0;
    rating_value = opt.rating || core.rating;
    rating_year = opt.year || core.rating_year;
    rating_month = opt.month || core.rating_month;
    rating_day = opt.day || core.rating_day;
    if (stamp_animation) {
      this.stamp.animate();
    }
    this.rating.text = rating_jp[rating_value];
    this.date.text = $('#text_heisei').text() + (rating_year - 1988) + $('#text_year').text() + rating_month + $('#text_month').text() + rating_day + $('#text_day').text();
    return this.tl.delay(10).then(function() {
      return this.addEventListener(Event.TOUCH_END, function() {
        this.removeEventListener(Event.TOUCH_END, arguments.callee);
        this.y = -480;
        if (callback) {
          return callback();
        }
      });
    });
  };

  return Diploma;

})(Group);

RateUp = (function(_super) {

  __extends(RateUp, _super);

  RateUp.name = 'RateUp';

  function RateUp() {
    var black, core, logo, scene;
    RateUp.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = core.currentScene;
    this.y = -480;
    black = new Box(320, 480, 'black');
    this.addChild(black);
    logo = new Sprite(160, 80);
    logo.image = core.assets['effect.png'];
    logo.opacity = 0;
    logo.x = 80;
    logo.y = 180;
    this.addChild(logo);
    this.logo = logo;
  }

  RateUp.prototype.show = function(opt) {
    var core, dankyuu, effect, rating;
    opt = opt || {};
    core = Core.instance;
    effect = this;
    rating = core.rating || '20k';
    if (rating.indexOf('k') > 0) {
      dankyuu = 0;
    } else {
      dankyuu = 1;
    }
    this.logo.frame = dankyuu;
    this.y = 0;
    return this.logo.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return this.tl.tween({
        opacity: 1,
        scaleX: 1.5,
        scaleY: 1.5,
        time: 5
      }).delay(10).tween({
        opacity: 0,
        y: this.y - 100,
        time: 10
      }).then(function() {
        effect.y = -480;
        if (opt.callback) {
          return opt.callback();
        }
      });
    });
  };

  return RateUp;

})(Group);

ClassUp = (function(_super) {

  __extends(ClassUp, _super);

  ClassUp.name = 'ClassUp';

  function ClassUp() {
    var core, scene;
    ClassUp.__super__.constructor.call(this, 320, 80);
    core = Core.instance;
    scene = core.currentScene;
    this.image = core.assets['effect.png'];
    this.opacity = 0;
    this.y = 180;
    this.frame = 1;
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return this.tl.tween({
        opacity: 1,
        scaleX: 1.5,
        scaleY: 1.5,
        time: 5
      }).delay(10).tween({
        opacity: 0,
        y: this.y - 100,
        time: 10
      }).then(function() {
        return scene.removeChild(this);
      });
    });
  }

  return ClassUp;

})(Sprite);

ClassDown = (function(_super) {

  __extends(ClassDown, _super);

  ClassDown.name = 'ClassDown';

  function ClassDown() {
    var core, scene;
    ClassDown.__super__.constructor.call(this, 320, 80);
    core = Core.instance;
    scene = core.currentScene;
    this.image = core.assets['effect.png'];
    this.opacity = 0;
    this.y = 180;
    this.frame = 2;
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return this.tl.tween({
        opacity: 1,
        time: 5
      }).delay(10).tween({
        opacity: 0,
        y: this.y + 100,
        time: 10
      }).then(function() {
        return scene.removeChild(this);
      });
    });
  }

  return ClassDown;

})(Sprite);

UpdateNotice = (function(_super) {

  __extends(UpdateNotice, _super);

  UpdateNotice.name = 'UpdateNotice';

  function UpdateNotice(force) {
    var board, box, cancel, core, message, next, notice;
    UpdateNotice.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    force = force || 0;
    notice = this;
    box = new Box(320, 480, 'gray');
    box.opacity = 0.8;
    this.addChild(box);
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.frame = 1;
    board.x = 35;
    board.y = 100;
    this.addChild(board);
    message = new Label;
    message.text = $('#text_update_notice').html();
    message.font = '14px sans-serif';
    message.textAlign = 'center';
    message.x = 10;
    message.y = 170;
    this.addChild(message);
    next = new Button(100, 50);
    next.frame = 12;
    next.x = 110;
    next.y = 230;
    next.addEventListener(Event.TOUCH_END, function() {
      return location.href = 'market://details?id=' + core.app_id;
    });
    this.addChild(next);
    if (!force) {
      cancel = new Button(50, 50);
      cancel.frame = 11;
      cancel.x = 250;
      cancel.y = 85;
      this.addChild(cancel);
      cancel.addEventListener(Event.TOUCH_END, function() {
        var scene;
        scene = core.currentScene;
        return scene.removeChild(notice);
      });
    }
  }

  return UpdateNotice;

})(Group);

Graph = (function(_super) {

  __extends(Graph, _super);

  Graph.name = 'Graph';

  function Graph(w, h) {
    var base, graph, i, self, static_graph, _i;
    Graph.__super__.constructor.apply(this, arguments);
    self = this;
    self.w = w;
    self.h = h;
    base = new Box(w, h, '#fcf1d3');
    this.addChild(base);
    static_graph = new Sprite(w, h);
    this.addChild(static_graph);
    this.static_graph = static_graph;
    this.graph_list = new Array();
    for (i = _i = 0; _i <= 4; i = ++_i) {
      graph = new Sprite(w, h);
      this.graph_list.push(graph);
      this.addChild(graph);
    }
    this.count = 0;
    this.data_list = new Array();
    this.max = h;
    this.normalised = 0;
    this.static_data = new Array();
    this.addEventListener(Event.ENTER_FRAME, function() {
      var box, c, color, data, diffx, diffy, finish_flag, info, j, out, s, score, step, value, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _ref, _ref1, _ref2;
      if (this.data_list.length === 0) {
        return;
      }
      this.count++;
      this.count = this.data_list[0].data.length * 10;
      i = 0;
      finish_flag = 1;
      if (!this.normalised) {
        _ref = this.static_data;
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          data = _ref[_j];
          value = data.value;
          if (value) {
            value = ~~(h * value / this.max);
          }
          s = new Surface(w, h);
          c = s.context;
          this.static_graph.image = s;
          c.beginPath();
          c.strokeStyle = data.color || 'gray';
          c.moveTo(20, h - value);
          c.lineTo(w - 20, h - value);
          c.stroke();
        }
        _ref1 = this.data_list;
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          info = _ref1[_k];
          data = info.data;
          out = new Array;
          for (_l = 0, _len2 = data.length; _l < _len2; _l++) {
            score = data[_l];
            if (score) {
              score = ~~(h * score / this.max);
            }
            out.push(score);
          }
          info.data = out;
        }
        this.normalised = 1;
      }
      _ref2 = this.data_list;
      for (_m = 0, _len3 = _ref2.length; _m < _len3; _m++) {
        info = _ref2[_m];
        data = info.data;
        color = info.color || 'red';
        if (data.length === 0) {
          continue;
        }
        if (this.count < (data.length * 10)) {
          finish_flag = 0;
        }
        step = Math.floor(this.count / 10);
        s = new Surface(w, h);
        c = s.context;
        this.graph_list[i].image = s;
        c.beginPath();
        c.strokeStyle = color;
        c.moveTo(20, h - data[0]);
        box = new Box(4, 4, color);
        box.x = 18;
        box.y = h - data[0] - 2;
        self.addChild(box);
        for (j = _n = 0; 0 <= step ? _n <= step : _n >= step; j = 0 <= step ? ++_n : --_n) {
          if (typeof data[j + 1] === 'number') {
            if (j < step) {
              diffx = 20 + ((j + 1) * 20);
              diffy = h - data[j + 1];
              box = new Box(4, 4, color);
              box.x = diffx - 2;
              box.y = diffy - 2;
              self.addChild(box);
            } else {
              diffx = 20 + (this.count * 2);
              diffy = h - ((this.count - step * 10) * (data[j + 1] - data[j]) / 10) - data[j];
            }
            c.lineTo(diffx, diffy);
          }
        }
        c.stroke();
        i++;
      }
      if (finish_flag) {
        this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      }
    });
  }

  Graph.prototype.add_data = function(data_list) {
    var data, max, _i, _len;
    max = this.max;
    for (_i = 0, _len = data_list.length; _i < _len; _i++) {
      data = data_list[_i];
      if (data.max && data.max > max) {
        max = data.max;
      }
    }
    max = 10 * ~~((max + 10) / 10);
    this.max = max;
    return this.data_list = data_list;
  };

  Graph.prototype.set_static = function(data) {
    var max, value;
    value = data.value;
    max = this.max;
    if (max < value + 50) {
      max = value + 50;
    }
    this.max = max;
    return this.static_data.push(data);
  };

  return Graph;

})(Group);

Counter = (function(_super) {

  __extends(Counter, _super);

  Counter.name = 'Counter';

  function Counter(num) {
    Counter.__super__.constructor.call(this, '');
    this.num = num;
    this.text = '';
    this.color = 'black';
    this.font = '40px sans-serif';
    this.textAlign = 'right';
    this.start_time = ~(new Date);
    this.loss_time = 0;
    this.y = 340;
    this.count = 1;
    this.stop_flag = 1;
  }

  Counter.prototype.on_enter_frame = function() {
    var core, time_count;
    core = Core.instance;
    time_count = this.num - ~~((this.start_time - ~(new Date) + this.loss_time) / 1000);
    this.count = time_count;
    if (time_count <= 0) {
      this.text = '0' + core.text.second;
      this.stop();
      return;
    }
    return this.text = time_count + core.text.second;
  };

  Counter.prototype.reflesh = function() {
    var core, time_count;
    core = Core.instance;
    time_count = this.num - ~~(this.loss_time / 1000);
    return this.text = time_count + core.text.second;
  };

  Counter.prototype.start = function() {
    if (!this.stop_flag) {
      return;
    }
    this.stop_flag = 0;
    this.start_time = ~(new Date);
    return this.addEventListener(Event.ENTER_FRAME, this.on_enter_frame);
  };

  Counter.prototype.stop = function() {
    this.removeEventListener(Event.ENTER_FRAME, this.on_enter_frame);
    if (this.stop_flag) {
      return;
    }
    this.stop_flag = 1;
    return this.loss_time += this.start_time - ~(new Date);
  };

  Counter.prototype.add_time_now = function(time) {
    return this.num += time;
  };

  return Counter;

})(Label);

Score = (function(_super) {

  __extends(Score, _super);

  Score.name = 'Score';

  function Score(score) {
    var core;
    Score.__super__.constructor.call(this, '');
    core = Core.instance;
    this.text = (score || 0) + core.text.point;
    this.score = score;
    this.color = 'black';
    this.font = '40px sans-serif';
    this.textAlign = 'right';
    this.y = 380;
  }

  Score.prototype.score_reflesh = function(new_score) {
    var core;
    core = Core.instance;
    return this.addEventListener(Event.ENTER_FRAME, function() {
      var diff, old_score;
      if (this.score >= new_score) {
        this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
        return;
      }
      old_score = this.score;
      diff = new_score - old_score;
      if (diff > 100) {
        this.score = 100 + ~~old_score;
      } else if (diff > 20) {
        this.score = 20 + ~~old_score;
      } else if (diff > 10) {
        this.score = 10 + ~~old_score;
      } else {
        this.score = 1 + ~~old_score;
      }
      return this.text = this.score + core.text.point;
    });
  };

  return Score;

})(Label);

Problems = (function() {

  Problems.name = 'Problems';

  function Problems() {
    this.data = {
      grade_1: [['右', '石'], ['右', '左'], ['見', '貝'], ['木', '本'], ['目', '日'], ['大', '犬'], ['王', '玉'], ['林', '森']],
      grade_2: [['門', '間'], ['地', '池'], ['午', '牛'], ['用', '角'], ['走', '歩'], ['交', '父'], ['合', '谷'], ['毎', '海'], ['図', '国']],
      grade_3: [['登', '発'], ['注', '柱'], ['坂', '板'], ['血', '皿'], ['曲', '由'], ['持', '待'], ['軽', '転'], ['丁', '打']],
      grade_4: [['官', '管'], ['建', '健'], ['末', '未'], ['泣', '位'], ['浅', '残'], ['給', '結'], ['単', '巣'], ['得', '特']],
      grade_5: [['険', '検'], ['講', '構'], ['織', '職'], ['織', '識'], ['複', '復'], ['現', '限'], ['識', '謝'], ['賛', '質']],
      grade_6: [['縦', '縮'], ['貴', '賃'], ['蔵', '臓'], ['捨', '拾'], ['深', '探'], ['資', '賃'], ['異', '暴'], ['鋼', '銅']]
    };
  }

  Problems.prototype.get = function(grade) {
    var data, i, out, problem, _i;
    grade = this.data[grade];
    out = new Array();
    for (i = _i = 0; _i <= 10; i = ++_i) {
      problem = grade[~~(Math.random() * grade.length)];
      data = {};
      if (~~(Math.random() * 2)) {
        data.first = problem[0];
        data.second = problem[1];
      } else {
        data.first = problem[1];
        data.second = problem[0];
      }
      data.first_yomi = [];
      out.push(data);
    }
    console.log(out);
    return out;
  };

  return Problems;

})();

rating_jp = {
  '20k': '20級',
  '19k': '19級',
  '18k': '18級',
  '17k': '17級',
  '16k': '16級',
  '15k': '15級',
  '14k': '14級',
  '13k': '13級',
  '12k': '12級',
  '11k': '11級',
  '10k': '10級',
  '9k': '9級',
  '8k': '8級',
  '7k': '7級',
  '6k': '6級',
  '5k': '5級',
  '4k': '4級',
  '3k': '3級',
  '2k': '2級',
  '1k': '1級',
  '1d': '初段',
  '2d': '2段',
  '3d': '3段',
  '4d': '4段',
  '5d': '5段',
  '6d': '6段',
  '7d': '7段',
  '8d': '8段',
  '9d': '9段'
};

BaseScene = (function(_super) {

  __extends(BaseScene, _super);

  BaseScene.name = 'BaseScene';

  function BaseScene() {
    var box;
    BaseScene.__super__.constructor.apply(this, arguments);
    box = new Box(280, 440, 'white');
    box.x = box.y = 20;
    this.addChild(box);
    this.addEventListener(Event.ENTER_FRAME, function() {
      var core;
      core = Core.instance;
      return core.pushScene(new TitleScene);
    });
  }

  return BaseScene;

})(Scene);

BonusStageScene = (function(_super) {

  __extends(BonusStageScene, _super);

  BonusStageScene.name = 'BonusStageScene';

  function BonusStageScene(opt) {
    var board, chara, core, counter, text;
    BonusStageScene.__super__.constructor.apply(this, arguments);
    counter = opt.counter;
    core = Core.instance;
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.x = 35;
    board.y = 80;
    board.frame = 1;
    this.addChild(board);
    chara = new Chara(0, 120, 80);
    chara.y = 245;
    chara.x = 50;
    this.addChild(chara);
    text = new BonusStageText;
    this.addChild(text);
    this.addEventListener(Event.TOUCH_END, function() {
      this.removeEventListener(Event.TOUCH_END, arguments.callee);
      text.out();
      chara.tl.tween({
        opacity: 0,
        time: 10
      });
      return board.tl.tween({
        opacity: 0,
        time: 10
      }).then(function() {
        core.removeScene(core.currentScene);
        return counter.start();
      });
    });
  }

  return BonusStageScene;

})(Scene);

BonusStageText = (function(_super) {

  __extends(BonusStageText, _super);

  BonusStageText.name = 'BonusStageText';

  function BonusStageText() {
    var bonus, i, stage, _i;
    BonusStageText.__super__.constructor.apply(this, arguments);
    this.x = 320;
    for (i = _i = 0; _i <= 1; i = ++_i) {
      bonus = new Label;
      bonus.text = 'BONUS';
      bonus.font = '50px sans-serif';
      bonus.x = 60 - (i * 2);
      bonus.y = 120 - (i * 2);
      this.addChild(bonus);
      stage = new Label;
      stage.text = 'STAGE';
      stage.font = '50px sans-serif';
      stage.x = 100 - (i * 2);
      stage.y = 180 - (i * 2);
      this.addChild(stage);
      if (i) {
        bonus.color = 'black';
        stage.color = 'black';
      } else {
        bonus.color = 'gray';
        stage.color = 'gray';
      }
    }
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return this.tl.tween({
        x: 0,
        time: 5
      });
    });
  }

  BonusStageText.prototype.out = function() {
    return this.tl.tween({
      x: -320,
      time: 5
    });
  };

  return BonusStageText;

})(Group);

CountDownScene = (function(_super) {

  __extends(CountDownScene, _super);

  CountDownScene.name = 'CountDownScene';

  function CountDownScene() {
    var label;
    CountDownScene.__super__.constructor.apply(this, arguments);
    label = new Label;
    label.font = '60px sans-serig';
    label.textAlign = 'center';
    label.x = 10;
    label.y = 200;
    this.addChild(label);
    label.count = 3;
    label.start = ~~(new Date);
    label.addEventListener(Event.ENTER_FRAME, function() {
      var core, now;
      label.count = label.count || "START";
      label.text = '' + label.count;
      now = ~~(new Date);
      label.count = 3 - ~~((now - label.start) / 1000);
      if (label.count < 0) {
        core = Core.instance;
        return core.removeScene(core.currentScene);
      }
    });
  }

  return CountDownScene;

})(Scene);

NetWorkErrorScene = (function(_super) {

  __extends(NetWorkErrorScene, _super);

  NetWorkErrorScene.name = 'NetWorkErrorScene';

  function NetWorkErrorScene() {
    var board, button, core, description, etc, friend, log, ranking, title, top;
    NetWorkErrorScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.frame = 1;
    board.x = 35;
    board.y = 100;
    this.addChild(board);
    title = new Label;
    title.text = $('#text_error_title').text();
    title.font = '40px sans-serif';
    title.textAlign = 'center';
    title.x = 10;
    title.y = 120;
    this.addChild(title);
    description = new Label;
    description.text = $('#text_error_description').html();
    description.font = '12px sans-serif';
    description.textAlign = 'center';
    description.x = 10;
    description.y = 190;
    this.addChild(description);
    button = new Button(100, 50);
    button.frame = 13;
    button.x = 110;
    button.y = 280;
    button.addEventListener(Event.TOUCH_END, function() {
      button.removeEventListener(Event.TOUCH_END, arguments.callee);
      return core.removeScene(core.currentScene);
    });
    this.addChild(button);
  }

  return NetWorkErrorScene;

})(Scene);

EtcScene = (function(_super) {

  __extends(EtcScene, _super);

  EtcScene.name = 'EtcScene';

  function EtcScene() {
    var cancel, core, help, left, right, version;
    EtcScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    this.backgroundColor = 'gray';
    version = new Label;
    version.text = core.version_code;
    version.y = 465;
    version.textAlign = 'center';
    this.addChild(version);
    help = new Sprite(1120, 420);
    help.image = core.assets['help.png'];
    help.x = 20;
    help.y = 30;
    this.addChild(help);
    cancel = new Button(50, 50);
    cancel.frame = 11;
    cancel.x = 10;
    cancel.y = 10;
    cancel.addEventListener(Event.TOUCH_END, function() {
      cancel.removeEventListener(Event.TOUCH_END, arguments.callee);
      return core.removeScene(core.currentScene);
    });
    this.addChild(cancel);
    right = new Button(50, 50);
    right.frame = 10;
    right.x = 270;
    right.y = 215;
    this.addChild(right);
    left = new Button(50, 50);
    left.frame = 9;
    left.y = 215;
    left.opacity = 0;
    this.addChild(left);
    right.addEventListener(Event.TOUCH_END, function() {
      if (right.off) {
        return;
      }
      right.off = 1;
      left.opacity = 1;
      if (help.x > -820) {
        return help.tl.tween({
          x: help.x - 280,
          time: 10
        }).then(function() {
          if (~~help.x <= -820) {
            help.x = -820;
            right.opacity = 0;
          }
          return right.off = 0;
        });
      } else {
        return right.off = 0;
      }
    });
    left.addEventListener(Event.TOUCH_END, function() {
      if (left.off) {
        return;
      }
      left.off = 1;
      right.opacity = 1;
      if (help.x < 0) {
        return help.tl.tween({
          x: help.x + 280,
          time: 10
        }).then(function() {
          if (~~help.x >= 20) {
            help.x = 20;
            left.opacity = 0;
          }
          return left.off = 0;
        });
      } else {
        return left.off = 0;
      }
    });
  }

  return EtcScene;

})(Scene);

FloorScene = (function(_super) {

  __extends(FloorScene, _super);

  FloorScene.name = 'FloorScene';

  function FloorScene(grade) {
    var core, counter, edge, score, stage;
    FloorScene.__super__.constructor.apply(this, arguments);
    grade = grade || 1;
    grade = 'grade_' + grade;
    core = Core.instance;
    stage = 0;
    edge = 4;
    core.score = 0;
    core.heal_time = 10;
    core.grade = grade;
    counter = new Counter(30);
    score = new Score();
    this.problems = new Array;
    this.addEventListener(Event.ENTER_FRAME, function() {
      var data, decoy, i, problem, problems, result, scene, _i, _ref;
      scene = this;
      problems = this.problems;
      if (stage && stage % 10 === 0) {
        stage++;
        core.pushScene(new ImageStageScene({
          stage: stage,
          counter: counter,
          score: score
        }));
        counter.stop();
        return core.pushScene(new BonusStageScene({
          counter: counter
        }));
      } else {
        if (problems.length) {
          problem = problems.shift();
        } else {
          $('#loading').show();
          core.pushScene(new Scene);
          $.ajax({
            timeout: 10000,
            url: core.server + '/kanji/get_problems',
            data: {
              grade: grade,
              max: 100,
              time: ~~(new Date / 1000)
            },
            success: function(json) {
              $('#loading').hide();
              scene.problems = json.problems;
              core.removeScene(core.currentScene);
              if (stage === 0) {
                return core.pushScene(new CountDownScene);
              }
            },
            error: function(error) {
              $('#loading').hide();
              if (core.guest_play) {
                problems = new Problems;
                scene.problems = problems.get(grade);
                core.removeScene(core.currentScene);
                if (stage === 0) {
                  return core.pushScene(new CountDownScene);
                }
              } else {
                core.removeScene(core.currentScene);
                return core.pushScene(new NetWorkErrorScene);
              }
            }
          });
          return;
        }
        decoy = problem.second;
        result = problem.first;
        data = new Array;
        if (stage > 10) {
          edge = 5;
        }
        for (i = _i = 0, _ref = (edge * edge) - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          data.push(decoy);
        }
        data.push(result);
        stage++;
        return core.pushScene(new StageScene({
          stage: stage,
          data: data.shuffle(),
          result: result,
          edge: edge,
          counter: counter,
          score: score,
          pronounce_text: problem.first_yomi.join('   ')
        }));
      }
    });
  }

  return FloorScene;

})(Scene);

FriendScene = (function(_super) {

  __extends(FriendScene, _super);

  FriendScene.name = 'FriendScene';

  function FriendScene() {
    var button, chara, core, description, description2, description3, etc, friend, log, ranking, top;
    FriendScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    description = new Label;
    description.text = $('#text_friend_1').html();
    description.x = 30;
    description.y = 90;
    this.addChild(description);
    description2 = new Label;
    description2.text = $('#text_friend_2').html();
    description2.x = 30;
    description2.y = 130;
    this.addChild(description2);
    button = new Button(150, 50);
    button.frame = 7;
    button.x = 85;
    button.y = 200;
    button.addEventListener(Event.TOUCH_END, function() {
      return location.href = 'mailto:?subject=' + $('#text_title').text() + '&body=' + [$('#text_title').text(), $('#text_url').text()].join(' ');
    });
    this.addChild(button);
    description3 = new Label;
    description3.text = $('#text_friend_3').text();
    description3.y = 260;
    description3.textAlign = 'center';
    this.addChild(description3);
    chara = new Chara(2);
    chara.x = 50;
    chara.y = 280;
    this.addChild(chara);
  }

  return FriendScene;

})(Scene);

GameoverScene = (function(_super) {

  __extends(GameoverScene, _super);

  GameoverScene.name = 'GameoverScene';

  function GameoverScene(opt) {
    var box, core, diploma, error_dialog, gameover, rateup_effect, result, scene, score, top, tweet_explain, white;
    GameoverScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = this;
    box = new Box(320, 480, 'white');
    box.opacity = 0.9;
    this.addChild(box);
    gameover = new Label;
    gameover.text = $('#text_gameover').text();
    gameover.font = '40px sans-serif';
    gameover.textAlign = 'center';
    gameover.y = 60;
    gameover.x = 10;
    this.addChild(gameover);
    score = new Label;
    score.text = core.score + core.text.point;
    score.font = '30px sans-serif';
    score.textAlign = 'center';
    score.y = 140;
    score.x = 10;
    this.addChild(score);
    top = new TopButton;
    top.x = 40;
    top.y = 370;
    top.clearEventListener(Event.TOUCH_END);
    top.addEventListener(Event.TOUCH_END, function() {
      if (startClick) {
        startClick();
      }
      core.removeScene(core.currentScene);
      core.removeScene(core.currentScene);
      core.removeScene(core.currentScene);
      $('#tweet').hide();
      return $('#line').hide();
    });
    this.addChild(top);
    tweet_explain = new Label;
    tweet_explain.text = $('#tweet_explain').text();
    tweet_explain.font = '20px sans-serif';
    tweet_explain.x = 10;
    tweet_explain.y = 345;
    tweet_explain.textAlign = 'center';
    this.addChild(tweet_explain);
    white = new Box(320, 480, 'white');
    white.opacity = 0.6;
    white.y = -480;
    this.addChild(white);
    this.white = white;
    result = new Result('---', '---', 0);
    result.y = 180;
    this.addChild(result);
    this.result = result;
    rateup_effect = new RateUp;
    this.addChild(rateup_effect);
    this.rateup_effect = rateup_effect;
    diploma = new Diploma;
    this.addChild(diploma);
    this.diploma = diploma;
    error_dialog = new ErrorDialog;
    error_dialog.y = -480;
    this.addChild(error_dialog);
    this.error_dialog = error_dialog;
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      if (stopBGM) {
        stopBGM();
      }
      if (core.user_id !== 'guest') {
        scene.white.y = 0;
        return scene.send_score();
      } else {
        return scene.show_tweet_button();
      }
    });
  }

  GameoverScene.prototype.show_tweet_button = function(opt) {
    var core, info, line, tweets;
    core = Core.instance;
    opt = opt || {};
    info = '';
    if (opt.deviation) {
      info = rating_jp[core.rating] + ' ' + $('#text_deviation').text() + opt.deviation + ' ';
    }
    core = Core.instance;
    tweets = $('#tweet_templ').text().replace('__SCORE__', core.score).replace('__INFO__', info);
    $('#tweet').find('a').attr({
      href: 'https://twitter.com/intent/tweet?' + tweets
    });
    $('#tweet').show();
    line = $('#line_templ').text().replace('__SCORE__', core.score).replace('__INFO__', info);
    $('#line').find('a').attr({
      href: 'http://line.naver.jp/R/msg/text/?' + line
    });
    return $('#line').show();
  };

  GameoverScene.prototype.send_score = function() {
    var core, scene, user_id;
    core = Core.instance;
    scene = this;
    $('#loading').show();
    user_id = core.user_id;
    if (core.guest_play) {
      user_id = 'guest';
    }
    return $.ajax({
      timeout: 10000,
      url: core.server + '/kanji/record_score',
      data: {
        user_id: user_id,
        score: core.score,
        grade: core.grade,
        time: ~~(new Date / 1000)
      },
      success: function(json) {
        var deviation, mean;
        if (json.result) {
          $('#loading').hide();
          scene.white.y = -480;
          deviation = ~~(json.deviation_value * 100) / 100;
          mean = ~~(json.mean * 100) / 100;
          if (!core.guest_play) {
            if (json.rating) {
              core.rating = json.rating;
              core.rating_year = json.latest_rating.year || 1970;
              core.rating_month = json.latest_rating.month || 1;
              core.rating_day = json.latest_rating.day || 1;
            }
            if (json.promote) {
              core.rateup_flag = 1;
            }
          }
          scene.show_tweet_button({
            deviation: deviation
          });
          return scene.result.update_data(mean, deviation, core.rateup_flag);
        } else {
          $('#loading').hide();
          scene.white.y = -480;
          return scene.show_tweet_button();
        }
      },
      error: function(error) {
        if (core.guest_play) {
          $('#loading').hide();
          scene.white.y = -480;
          return scene.show_tweet_button();
        } else {
          return scene.error_dialog.y = 0;
        }
      }
    });
  };

  return GameoverScene;

})(Scene);

ErrorDialog = (function(_super) {

  __extends(ErrorDialog, _super);

  ErrorDialog.name = 'ErrorDialog';

  function ErrorDialog() {
    var board, button_cancel, button_retry, core, description, description_title, description_warnings, dialog;
    ErrorDialog.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    dialog = this;
    $('#loading').hide();
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.frame = 1;
    board.x = 35;
    board.y = 100;
    this.addChild(board);
    button_retry = new Button(100, 50);
    button_retry.frame = 13;
    button_retry.x = 50;
    button_retry.y = 270;
    button_retry.addEventListener(Event.TOUCH_END, function() {
      var scene;
      button_retry.removeEventListener(Event.TOUCH_END, arguments.callee);
      dialog.y = -480;
      scene = core.currentScene;
      return scene.send_score();
    });
    this.addChild(button_retry);
    button_cancel = new Button(100, 50);
    button_cancel.frame = 14;
    button_cancel.x = 170;
    button_cancel.y = 270;
    button_cancel.addEventListener(Event.TOUCH_END, function() {
      var scene;
      button_cancel.removeEventListener(Event.TOUCH_END, arguments.callee);
      $('#loading').hide();
      scene = core.currentScene;
      scene.show_tweet_button();
      scene.white.y = -480;
      return dialog.y = -480;
    });
    this.addChild(button_cancel);
    description_title = new Label;
    description_title.text = $('#text_score_connect_error_title').html();
    description_title.font = '20px sans-serif';
    description_title.x = 10;
    description_title.y = 120;
    description_title.textAlign = 'center';
    this.addChild(description_title);
    description = new Label;
    description.text = $('#text_score_connect_error').html();
    description.x = 10;
    description.y = 150;
    description.textAlign = 'center';
    this.addChild(description);
    description_warnings = new Label;
    description_warnings.text = $('#text_score_connect_error_warnings').html();
    description_warnings.x = 10;
    description_warnings.y = 200;
    description_warnings.textAlign = 'center';
    this.addChild(description_warnings);
  }

  return ErrorDialog;

})(Group);

Result = (function(_super) {

  __extends(Result, _super);

  Result.name = 'Result';

  function Result(mean, deviation, is_uprating) {
    var core, deviation_text, mean_text, result;
    Result.__super__.constructor.apply(this, arguments);
    result = this;
    core = Core.instance;
    mean = mean || '0';
    deviation = deviation || '0';
    is_uprating = is_uprating || 0;
    mean_text = new Label;
    mean_text.x = 10;
    mean_text.textAlign = 'center';
    mean_text.font = '20px sans-serif';
    mean_text.text = $('#text_mean').text() + mean;
    this.addChild(mean_text);
    this.mean_text = mean_text;
    deviation_text = new Label;
    deviation_text.x = 10;
    deviation_text.y = 20;
    deviation_text.textAlign = 'center';
    deviation_text.font = '20px sans-serif';
    deviation_text.text = $('#text_deviation').text() + deviation;
    this.addChild(deviation_text);
    this.deviation_text = deviation_text;
  }

  Result.prototype.update_data = function(mean, deviation, is_uprating) {
    var core, rating_text;
    core = Core.instance;
    mean = mean || '0';
    deviation = deviation || '0';
    is_uprating = is_uprating || 0;
    this.mean_text.text = $('#text_mean').text() + mean;
    this.deviation_text.text = $('#text_deviation').text() + deviation;
    if (!core.guest_play && core.rating) {
      rating_text = new Label;
      rating_text.textAlign = 'center';
      rating_text.font = '30px sans-serif';
      rating_text.x = 10;
      rating_text.y = 50;
      rating_text.text = "" + rating_jp[core.rating];
      rating_text.addEventListener(Event.ENTER_FRAME, function() {
        var scene;
        this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
        scene = core.currentScene;
        if (is_uprating) {
          $('#line').hide();
          $('#tweet').hide();
          scene.rateup_effect.show({
            callback: function() {
              return scene.diploma.show({
                stamp_animation: 1,
                callback: function() {
                  $('#line').show();
                  return $('#tweet').show();
                }
              });
            }
          });
        }
        return this.addEventListener(Event.TOUCH_END, function() {
          if (core.rating && core.rating !== '20k') {
            $('#line').hide();
            $('#tweet').hide();
            return scene.diploma.show({
              callback: function() {
                $('#line').show();
                return $('#tweet').show();
              }
            });
          }
        });
      });
      return this.addChild(rating_text);
    }
  };

  return Result;

})(Group);

ImageStageScene = (function(_super) {

  __extends(ImageStageScene, _super);

  ImageStageScene.name = 'ImageStageScene';

  function ImageStageScene(opt) {
    var char, core, count, counter, data, edge, i, image, margin, pause, result, score, stage, stage_num, width, _i, _j, _len;
    opt = opt || {};
    ImageStageScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    edge = 4;
    data = new Array;
    for (i = _i = 0; _i <= 14; i = ++_i) {
      data.push(9);
    }
    data.push(8);
    data = data.shuffle();
    result = 8;
    stage = opt.stage || 1;
    this.start = ~(new Date);
    stage_num = new Label;
    stage_num.text = 'stage: ' + stage;
    this.addChild(stage_num);
    counter = opt.counter;
    counter.start();
    this.addChild(counter);
    score = opt.score;
    if (score) {
      this.addChild(score);
    }
    width = 70;
    margin = 20;
    count = 0;
    for (_j = 0, _len = data.length; _j < _len; _j++) {
      char = data[_j];
      image = new ImageCharacter(char);
      image.x = width * Math.floor(count % edge) + margin;
      image.y = width * Math.floor(count / edge) + 60;
      this.addChild(image);
      count++;
      image.addEventListener(Event.TOUCH_END, function() {
        var end, heal_time, scene, time_used;
        if (this.frame === result) {
          this.removeEventListener(Event.TOUCH_END, arguments.callee);
          counter.stop();
          this.removeEventListener(Event.ENTER_FRAME, this.show_and_hide);
          this.tl.clear();
          this.opacity = 1;
          if (stopBGM) {
            stopBGM();
          }
          if (startCorrect) {
            startCorrect();
          }
          result = this;
          scene = core.currentScene;
          end = ~(new Date);
          time_used = ~~((scene.start - end) / 1000);
          heal_time = 12 - time_used;
          if (heal_time < 2) {
            heal_time = 2;
          }
          counter.add_time_now(heal_time);
          setTimeout(function() {
            return counter.reflesh();
          }, 1000);
          return this.tl.tween({
            x: (320 - width) / 2,
            y: 110,
            time: 5
          }).delay(2).then(function() {
            var stagescore_scene;
            stagescore_scene = new StageScoreScene({
              add_score: 0,
              heal_time: heal_time,
              time_used: time_used,
              result: result
            });
            core.removeScene(core.currentScene);
            return core.pushScene(stagescore_scene);
          });
        }
      });
    }
    pause = new PauseButton({
      counter: counter
    });
    pause.y = 420;
    this.addChild(pause);
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      if (startBGM) {
        return startBGM();
      }
    });
    this.addEventListener(Event.ENTER_FRAME, function() {
      if (counter.count <= 0) {
        this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
        return core.pushScene(new GameoverScene({
          counter: counter
        }));
      }
    });
  }

  return ImageStageScene;

})(Scene);

InputNicknameScene = (function(_super) {

  __extends(InputNicknameScene, _super);

  InputNicknameScene.name = 'InputNicknameScene';

  function InputNicknameScene() {
    var back, core, cover1, cover2, etc, friend, log, nickname, nickname_description, nickname_form, nickname_limit, ranking, save_button, scene, top, white;
    InputNicknameScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = this;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    back = new Button(50, 50);
    back.x = 240;
    back.y = 70;
    back.frame = 10;
    back.addEventListener(Event.TOUCH_END, function() {
      core.removeScene(core.currentScene);
      return core.pushScene(new PreGameScene);
    });
    this.addChild(back);
    this.back = back;
    nickname_form = new InputTextBox;
    nickname_form.x = 50;
    nickname_form.y = 140;
    nickname_form.width = 220;
    nickname_form.height = 50;
    this.addChild(nickname_form);
    this.nickname_form = nickname_form;
    nickname_form._input.addEventListener("keydown", function(e) {
      var key;
      key = e.which || e.keyCode;
      if (key === 13) {
        return scene.send_nickname();
      }
    });
    nickname = new Label;
    nickname.text = $('#nickname').text();
    nickname.y = 100;
    nickname.textAlign = 'center';
    this.addChild(nickname);
    nickname_limit = new Label;
    nickname_limit.text = $('#nickname_limit').text();
    nickname_limit.y = 120;
    nickname_limit.textAlign = 'center';
    this.addChild(nickname_limit);
    nickname_description = new Label;
    nickname_description.text = $('#nickname_description').text();
    nickname_description.y = 200;
    nickname_description.textAlign = 'center';
    this.addChild(nickname_description);
    white = new Box(280, 400, 'white');
    white.x = 20;
    white.y = 60;
    this.addChild(white);
    white.addEventListener(Event.ENTER_FRAME, function() {
      white.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return white.tl.tween({
        opacity: 0,
        time: 10
      }).then(core.currentScene.removeChild(this));
    });
    save_button = new Button(150, 50);
    save_button.x = 85;
    save_button.y = 230;
    save_button.frame = 6;
    save_button.addEventListener(Event.TOUCH_END, this.send_nickname);
    this.addChild(save_button);
    this.save_button = save_button;
    cover1 = new Box(150, 50, 'white');
    cover1.x = save_button.x;
    cover1.y = save_button.y + 480;
    cover1.opacity = 0;
    this.addChild(cover1);
    this.cover1 = cover1;
    cover2 = new Box(50, 50, 'white');
    cover2.x = back.x;
    cover2.y = back.y + 480;
    cover2.opacity = 0;
    this.addChild(cover2);
    this.cover2 = cover2;
  }

  InputNicknameScene.prototype.send_nickname = function() {
    var core, nickname, scene;
    core = Core.instance;
    scene = core.currentScene;
    nickname = scene.nickname_form.value;
    if (!nickname || nickname.length > 8) {
      return;
    }
    scene.cover1.y -= 480;
    scene.cover2.y -= 480;
    scene.cover1.opacity = 0.5;
    scene.cover2.opacity = 0.5;
    return $.ajax({
      timeout: 10000,
      url: core.server + '/kanji/input_nickname',
      data: {
        user_id: core.user_id,
        version: core.version,
        device: core.device,
        time: ~~(new Date / 1000),
        nickname: nickname
      },
      success: function(json) {
        if (json.result) {
          core.nickname = nickname;
          scene = core.currentScene;
          core.removeScene(core.currentScene);
          return core.pushScene(new PreGameScene);
        } else {
          scene.cover1.opacity = 0;
          return scene.cover2.opacity = 0;
        }
      },
      error: function(error) {
        scene.cover1.opacity = 0;
        return scene.cover2.opacity = 0;
      }
    });
  };

  return InputNicknameScene;

})(Scene);

LogScene = (function(_super) {

  __extends(LogScene, _super);

  LogScene.name = 'LogScene';

  function LogScene(num) {
    var average_score, button, core, error_message, etc, friend, grade, i, log, ranking, rating_button, top, _i, _len, _ref;
    LogScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    this.error = 0;
    this.loading = 0;
    this.listview = 0;
    num = num || 0;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    average_score = new Label;
    average_score.x = 10;
    average_score.y = 260;
    average_score.font = '12px sans-serif';
    average_score.textAlign = 'center';
    this.addChild(average_score);
    this.average_score = average_score;
    this.gradebutton = new Array;
    i = 0;
    _ref = [core.first, core.second, core.third];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      grade = _ref[_i];
      button = new GradeButton(grade, i++);
      if (grade > 3) {
        grade -= 3;
      }
      button.x = -40 + (80 * grade);
      button.y = 100;
      this.addChild(button);
      this.gradebutton.push(button);
    }
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      if (this.gradebutton[num]) {
        return this.gradebutton[num]["default"]();
      }
    });
    rating_button = new Button(50, 50);
    rating_button.frame = 10;
    rating_button.x = 255;
    rating_button.y = 70;
    rating_button.addEventListener(Event.TOUCH_END, function() {
      this.removeEventListener(Event.TOUCH_END, arguments.callee);
      core.removeScene(core.currentScene);
      return core.pushScene(new RatingLogScene);
    });
    this.addChild(rating_button);
    error_message = new Label;
    error_message.text = $('#text_error_description').html();
    error_message.x = 10;
    error_message.y = -480;
    error_message.textAlign = 'center';
    this.addChild(error_message);
    this.error_message = error_message;
  }

  LogScene.prototype.load_graph = function(grade) {
    var core, graph, scene, url;
    graph = new Graph(240, 100);
    graph.x = 40;
    graph.y = 150;
    this.addChild(graph);
    this.graph = graph;
    if (this.error) {
      this.removeChild(this.error);
      this.error = 0;
    }
    core = Core.instance;
    scene = core.currentScene;
    grade = 'grade_' + grade;
    $('#loading').show();
    url = core.server + '/kanji/get_score_history';
    return $.ajax({
      timeout: 10000,
      url: url,
      data: {
        user_id: core.user_id,
        grade: grade,
        time: ~~(new Date / 1000)
      },
      success: function(json) {
        var average, data, history, item, list, listview, max, score, time, _i, _len;
        $('#loading').hide();
        scene.loading = 0;
        list = new Array();
        history = json.score_history;
        if (!history) {
          return;
        }
        history = history.reverse();
        average = json.average_score || 0;
        max = 0;
        listview = scene.listview;
        if (listview) {
          scene.removeChild(listview);
        }
        listview = new ListView(260, 170, true);
        listview.x = 30;
        listview.y = 280;
        for (_i = 0, _len = history.length; _i < _len; _i++) {
          data = history[_i];
          score = ~~data.score;
          if (max < score) {
            max = score;
          }
          list.unshift(score);
          time = data.create_at;
          item = new ListItem(280, 30);
          item.content = time + ' ' + score + $('#text_point').text();
          listview.addChild(item);
        }
        scene.addChild(listview);
        scene.listview = listview;
        if (average) {
          scene.graph.set_static({
            color: 'blue',
            value: average
          });
          scene.average_score.text = $('#text_mean').text() + average + $('#text_point').text();
        } else {
          scene.average_score.text = $('#text_mean').text() + $('#text_calculating').text();
        }
        scene.graph.add_data([
          {
            color: 'green',
            data: list,
            max: max
          }
        ]);
        return scene.loading = 0;
      },
      error: function(error) {
        $('#loading').hide();
        scene.error_message.y = 150;
        return scene.loading = 0;
      }
    });
  };

  return LogScene;

})(Scene);

GradeButton = (function(_super) {

  __extends(GradeButton, _super);

  GradeButton.name = 'GradeButton';

  function GradeButton(grade, num) {
    var bg, core, gr;
    GradeButton.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    this.grade = grade || 1;
    this.num = num || 0;
    this.state = 0;
    bg = new Sprite(80, 50);
    bg.image = core.assets['buttons.png'];
    bg.frame = 27;
    this.addChild(bg);
    this.bg = bg;
    gr = new Sprite(80, 50);
    gr.image = core.assets['buttons.png'];
    gr.frame = 29 + grade;
    this.addChild(gr);
    this.gr = gr;
    this.addEventListener(Event.TOUCH_END, function() {
      if (startClick) {
        startClick();
      }
      return this.on();
    });
  }

  GradeButton.prototype["default"] = function() {
    var button, core, scene, _i, _len, _ref;
    if (!this.state) {
      core = Core.instance;
      scene = core.currentScene;
      if (scene.loading) {
        return;
      }
      scene.loading = 1;
      _ref = scene.gradebutton;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        button.off();
      }
      this.bg.frame = 28;
      this.gr.y = -8;
      this.state = 1;
      return scene.load_graph(this.grade);
    }
  };

  GradeButton.prototype.on = function() {
    var core;
    if (!this.state) {
      core = Core.instance;
      core.removeScene(core.currentScene);
      return core.pushScene(new LogScene(this.num));
    }
  };

  GradeButton.prototype.off = function() {
    this.bg.frame = 27;
    this.gr.y = 0;
    return this.state = 0;
  };

  return GradeButton;

})(Group);

PauseScene = (function(_super) {

  __extends(PauseScene, _super);

  PauseScene.name = 'PauseScene';

  function PauseScene(opt) {
    var board, box, core, counter, description, return_game, top;
    PauseScene.__super__.constructor.apply(this, arguments);
    counter = opt.counter;
    counter.stop();
    core = Core.instance;
    box = new Box(320, 480, 'white');
    box.opacity = 0.9;
    this.addChild(box);
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.frame = 1;
    board.x = 35;
    board.y = 80;
    this.addChild(board);
    return_game = new Button(150, 50);
    return_game.frame = 16;
    return_game.x = 85;
    return_game.y = 180;
    return_game.addEventListener(Event.TOUCH_END, function() {
      return_game.removeEventListener(Event.TOUCH_END, arguments.callee);
      core.removeScene(core.currentScene);
      if (core.interval_flag === 0) {
        return counter.start();
      }
    });
    this.addChild(return_game);
    top = new Button(150, 50);
    top.frame = 17;
    top.x = 85;
    top.y = 255;
    top.addEventListener(Event.TOUCH_END, function() {
      if (stopBGM) {
        stopBGM();
      }
      top.removeEventListener(Event.TOUCH_END, arguments.callee);
      core.removeScene(core.currentScene);
      core.removeScene(core.currentScene);
      return core.removeScene(core.currentScene);
    });
    this.addChild(top);
    description = new Label;
    description.text = $('#text_pause').html();
    description.textAlign = 'center';
    description.x = 10;
    description.y = 120;
    this.addChild(description);
  }

  return PauseScene;

})(Scene);

PreGameScene = (function(_super) {

  __extends(PreGameScene, _super);

  PreGameScene.name = 'PreGameScene';

  function PreGameScene() {
    var diploma, etc, friend, log, menu1, menu2, ranking, scene, top, white;
    PreGameScene.__super__.constructor.apply(this, arguments);
    scene = this;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    menu1 = new PreGame1(scene);
    this.addChild(menu1);
    this.menu1 = menu1;
    menu2 = new PreGame2;
    this.addChild(menu2);
    this.menu2 = menu2;
    white = new Box(280, 400, 'white');
    white.x = 20;
    white.y = 500;
    white.opacity = 0;
    this.addChild(white);
    this.white = white;
    diploma = new Diploma;
    this.addChild(diploma);
    this.diploma = diploma;
  }

  PreGameScene.prototype.pre2 = function() {
    return this.menu1.pre2();
  };

  return PreGameScene;

})(Scene);

PreGame1 = (function(_super) {

  __extends(PreGame1, _super);

  PreGame1.name = 'PreGame1';

  function PreGame1(scene) {
    var button, chara, core, guest_play, menu;
    PreGame1.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    menu = this;
    if (scene) {
      this.scene = scene;
    }
    chara = new Chara(1);
    chara.x = 40;
    chara.y = 290;
    this.addChild(chara);
    button = new PlayButton(menu);
    button.y = 80;
    this.addChild(button);
    this.button = button;
    guest_play = new Button(150, 50);
    guest_play.x = 85;
    guest_play.y = 250;
    guest_play.frame = 5;
    guest_play.addEventListener(Event.TOUCH_END, function() {
      core.guest_play = 1;
      scene = core.currentScene;
      scene.pre2();
      return $('#default_line').hide();
    });
    this.addChild(guest_play);
  }

  PreGame1.prototype.pre2 = function() {
    var core, scene;
    core = Core.instance;
    scene = core.currentScene;
    scene.menu1.tl.tween({
      x: -320,
      time: 10
    });
    return scene.menu2.tl.tween({
      x: 0,
      time: 10
    });
  };

  return PreGame1;

})(Group);

PreGame2 = (function(_super) {

  __extends(PreGame2, _super);

  PreGame2.name = 'PreGame2';

  function PreGame2() {
    var chara, core, grade1, grade2, grade3, grade_select_text, menu;
    PreGame2.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    menu = this;
    this.x = 320;
    chara = new Chara(2);
    chara.x = 40;
    chara.y = 290;
    this.addChild(chara);
    grade_select_text = new Label;
    grade_select_text.text = $('#grade_select_text').text();
    grade_select_text.y = 120;
    grade_select_text.textAlign = 'center';
    this.addChild(grade_select_text);
    grade1 = new Button(150, 50);
    grade1.x = 85;
    grade1.y = 140;
    grade1.frame = 9 + core.first;
    grade1.addEventListener(Event.TOUCH_END, function() {
      core.removeScene(core.currentScene);
      return core.pushScene(new FloorScene(core.first));
    });
    this.addChild(grade1);
    menu.grade1 = grade1;
    grade2 = new Button(150, 50);
    grade2.x = 85;
    grade2.y = 200;
    grade2.frame = 9 + core.second;
    grade2.addEventListener(Event.TOUCH_END, function() {
      core.removeScene(core.currentScene);
      return core.pushScene(new FloorScene(core.second));
    });
    this.addChild(grade2);
    menu.grade2 = grade2;
    grade3 = new Button(150, 50);
    grade3.x = 85;
    grade3.y = 260;
    grade3.frame = 9 + core.third;
    grade3.addEventListener(Event.TOUCH_END, function() {
      core.removeScene(core.currentScene);
      return core.pushScene(new FloorScene(core.third));
    });
    this.addChild(grade3);
    menu.grade3 = grade3;
  }

  return PreGame2;

})(Group);

PlayButton = (function(_super) {

  __extends(PlayButton, _super);

  PlayButton.name = 'PlayButton';

  function PlayButton(menu) {
    var button, class_description, class_text, core, network_unavailable_text, new_play, new_play_text, play, play_text, rating_text, white;
    PlayButton.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    button = this;
    new_play = new Button(150, 50);
    new_play.x = 85;
    new_play.y = -200;
    new_play.frame = 4;
    new_play.addEventListener(Event.TOUCH_END, function() {
      var scene;
      scene = core.currentScene;
      scene.white.y = 60;
      return scene.white.tl.tween({
        opacity: 1,
        time: 10
      }).then(function() {
        core.removeScene(core.currentScene);
        return core.pushScene(new InputNicknameScene);
      });
    });
    this.addChild(new_play);
    this.new_play = new_play;
    play = new Button(150, 50);
    play.x = 85;
    play.y = 30;
    play.frame = 2;
    play.addEventListener(Event.TOUCH_END, menu.pre2);
    this.addChild(play);
    this.play = play;
    white = new Box(150, 50, 'white');
    white.x = 85;
    white.y = 30;
    white.opacity = 0.5;
    this.addChild(white);
    this.white = white;
    network_unavailable_text = new Label;
    network_unavailable_text.text = $('#network_unavailable_text').html();
    network_unavailable_text.textAlign = 'center';
    network_unavailable_text.y = 85;
    network_unavailable_text.opacity = 0;
    this.addChild(network_unavailable_text);
    this.network_unavailable_text = network_unavailable_text;
    new_play_text = new Label;
    new_play_text.text = $('#new_play_text').html();
    new_play_text.textAlign = 'center';
    new_play_text.x = 10;
    new_play_text.y = 85;
    new_play_text.opacity = 0;
    this.addChild(new_play_text);
    this.new_play_text = new_play_text;
    play_text = new Label;
    play_text.text = $('#start_text').text();
    play_text.textAlign = 'center';
    play_text.x = 10;
    play_text.y = 85;
    play_text.opacity = 0;
    this.addChild(play_text);
    this.play_text = play_text;
    rating_text = new Label;
    rating_text.textAlign = 'center';
    rating_text.font = '30px sans-serif';
    rating_text.x = 10;
    rating_text.y = 100;
    this.addChild(rating_text);
    this.rating_text = rating_text;
    if (core.rating) {
      rating_text.text = rating_jp[core.rating];
    }
    rating_text.addEventListener(Event.TOUCH_END, function() {
      var scene;
      if (core.rating && core.rating !== '20k') {
        scene = core.currentScene;
        return scene.diploma.show();
      }
    });
    class_text = new Label;
    class_text.textAlign = 'center';
    class_text.font = '30px sans-serif';
    class_text.x = 10;
    class_text.y = 140;
    this.addChild(class_text);
    this.class_text = class_text;
    class_description = new Label;
    class_description.textAlign = 'center';
    class_description.font = '12px sans-serif';
    class_description.x = 10;
    class_description.y = 180;
    this.addChild(class_description);
    this.class_description = class_text;
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      if (core.nickname === 'guest') {
        $('#loading').show();
        return $.ajax({
          timeout: 10000,
          url: core.server + '/kanji/get_user',
          data: {
            user_id: core.user_id,
            version: core.version,
            device: core.device,
            time: ~~(new Date / 1000)
          },
          success: function(json) {
            var scene, user;
            $('#loading').hide();
            user = json.user;
            if (user && user.nickname) {
              button.play.y = 30;
              button.new_play.y = -200;
              core.nickname = user.nickname;
              play_text.text = core.nickname + play_text.text;
              new_play_text.opacity = 0;
              play_text.opacity = 1;
              white.y = -200;
              if (json["class"]) {
                class_text.text = $('#text_class').text() + json["class"];
                class_description.text = $('#text_class_description').text();
              }
              if (json.classup) {
                scene = core.currentScene;
                scene.addChild(new ClassUp);
              } else if (json.classdown) {
                scene = core.currentScene;
                scene.addChild(new ClassDown);
              }
              core.rating = user.rating;
              if (json.latest_rating) {
                core.rating_year = json.latest_rating.year;
                core.rating_month = json.latest_rating.month;
                core.rating_day = json.latest_rating.day;
              }
              rating_text.text = rating_jp[core.rating];
              if (json.ranking_available) {
                return core.ranking_available = 1;
              }
            } else {
              button.play.y = -200;
              play_text.opacity = 0;
              button.new_play.y = 30;
              new_play_text.opacity = 1;
              return white.y = -200;
            }
          },
          error: function(error) {
            $('#loading').hide();
            button.new_play.y = 30;
            button.white.y = 30;
            return network_unavailable_text.opacity = 1;
          }
        });
      } else {
        button.play.y = 30;
        button.new_play.y = -200;
        play_text.text = core.nickname + play_text.text;
        new_play_text.opacity = 0;
        play_text.opacity = 1;
        return white.y = -200;
      }
    });
  }

  return PlayButton;

})(Group);

RankingScene = (function(_super) {

  __extends(RankingScene, _super);

  RankingScene.name = 'RankingScene';

  function RankingScene(opt) {
    var connect_error, core, etc, friend, loading, log, ranking, scene, top;
    RankingScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    opt = opt || {};
    scene = this;
    scene.rank_num = opt.rank_num || 0;
    scene.target_num = opt.target_num || 0;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    connect_error = new ConnectError;
    connect_error.y = -480;
    this.addChild(connect_error);
    this.connect_error = connect_error;
    loading = new LoadingKuma;
    loading.y = -480;
    this.addChild(loading);
    this.loading = loading;
    if (opt.data) {
      this.set_buttons();
      this.make_graph(opt.data);
    } else {
      loading.y = 0;
      if (core.ranking_available) {
        scene.get_ranking_data();
      } else {
        $.ajax({
          timeout: 10000,
          url: core.server + '/kanji/top',
          data: {
            user_id: core.user_id,
            version: core.version,
            device: core.device,
            time: ~~(new Date / 1000)
          },
          success: function(json) {
            if (json.ranking_available) {
              core.ranking_available = 1;
            }
            if (core.ranking_available && json.rateup_flag) {
              core.rateup_flag = 1;
              return scene.get_ranking_data();
            } else {
              return scene.show_connect_error();
            }
          },
          error: function() {
            return scene.show_connect_error();
          }
        });
      }
    }
  }

  RankingScene.prototype.make_graph = function(json) {
    var button, core, cp, cr, item, listview, nickname, point, rank, rank_value, scene, user, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    core = Core.instance;
    scene = this;
    _ref = scene.rank_button;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      button = _ref[_i];
      this.addChild(button);
    }
    listview = new ListView(260, 260, true);
    listview.x = 30;
    listview.y = 190;
    scene.addChild(listview);
    if (listview && json.ranking) {
      _ref1 = json.ranking;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        user = _ref1[_j];
        if (!user) {
          continue;
        }
        rank_value = user.rank || 0;
        rank = new Surface(50, 50);
        cr = rank.context;
        cr.font = '20px sans-serif';
        cr.fillStyle = 'rgb(0, 0, 0)';
        if (rank_value === 0) {
          cr.fillText('---', 5, 30);
        } else if (rank_value < 100) {
          cr.fillText(user.rank + $('#text_rank').text(), 5, 30);
        } else {
          cr.fillText(user.rank, 5, 30);
        }
        point = new Surface(50, 50);
        cp = point.context;
        cp.font = '14px sans-serif';
        cp.fillStyle = 'rgb(0, 0, 0)';
        cp.fillText(user.point, 5, 30);
        nickname = user.nickname || '';
        if (user.is_self) {
          nickname = '*' + nickname;
        }
        item = new ListItem(260, 50, nickname, rank, point);
        listview.addChild(item);
      }
    }
    _ref2 = scene.rank_button;
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      button = _ref2[_k];
      _results.push(button.addEventListener(Event.TOUCH_END, button.get_data));
    }
    return _results;
  };

  RankingScene.prototype.show_connect_error = function() {
    this.connect_error.y = 0;
    return this.loading.y = -480;
  };

  RankingScene.prototype.get_ranking_data = function() {
    var core, from, scene, section, target;
    core = Core.instance;
    scene = this;
    this.set_buttons();
    scene.loading.y = 0;
    from = scene.from || 'grade_' + core.first;
    target = scene.target || 'top';
    section = [target, from].join('from');
    return $.ajax({
      timeout: 10000,
      url: core.server + '/kanji/get_ranking',
      data: {
        user_id: core.user_id,
        version: core.version,
        device: core.device,
        section: section,
        time: ~~(new Date / 1000)
      },
      success: function(json) {
        if (core.currentScene === scene) {
          core.removeScene(scene);
          return core.pushScene(new RankingScene({
            rank_num: scene.rank_num,
            target_num: scene.target_num,
            data: json
          }));
        }
      },
      error: function(error) {
        var button, _i, _len, _ref;
        scene.loading.y = -480;
        _ref = scene.rank_button;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          button = _ref[_i];
          button.addEventListener(Event.TOUCH_END, button.get_data);
        }
        if (scene.listview) {
          return scene.message.y = 220;
        }
      }
    });
  };

  RankingScene.prototype.set_buttons = function() {
    var button, button_self, button_top, core, grade, i, rank_button, scene, _i, _len, _ref;
    core = Core.instance;
    scene = this;
    rank_button = new Array;
    i = 0;
    _ref = [core.first, core.second, core.third];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      grade = _ref[_i];
      button = new RankFromGrade(grade, i);
      button.x = 30 + (i * 90);
      rank_button.push(button);
      if (scene.rank_num === i) {
        button.on();
        scene.from = 'grade_' + grade;
      } else {
        button.off();
      }
      i++;
    }
    button_top = new RankTopButton;
    rank_button.push(button_top);
    button_self = new RankSelfButton;
    rank_button.push(button_self);
    if (scene.target_num === 0) {
      button_top.on();
      button_self.off();
      scene.target = 'top';
    } else {
      button_top.off();
      button_self.on();
      scene.target = 'self';
    }
    return scene.rank_button = rank_button;
  };

  RankingScene.prototype.load_graph = function() {
    var button, listview, _i, _len, _ref;
    _ref = scene.rank_button;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      button = _ref[_i];
      button.clearEventListener(Event.TOUCH_END);
    }
    if (scene.message) {
      scene.message.y = -1220;
    }
    listview = new ListView(260, 260, true);
    listview.x = 30;
    listview.y = 190;
    scene.listview = listview;
    scene.addChild(listview);
    return $('#loading').show();
  };

  return RankingScene;

})(Scene);

RankFromGrade = (function(_super) {

  __extends(RankFromGrade, _super);

  RankFromGrade.name = 'RankFromGrade';

  function RankFromGrade(grade, num) {
    RankFromGrade.__super__.constructor.call(this, 80, 40);
    this.grade = grade || 1;
    this.num = num || 0;
    this.frame = this.frame_init = 44 + grade;
    this.y = 75;
  }

  RankFromGrade.prototype.get_data = function() {
    var core, scene;
    if (this.frame !== this.frame_init) {
      return;
    }
    core = Core.instance;
    scene = core.currentScene;
    scene.rank_num = this.num;
    core.removeScene(scene);
    return core.pushScene(new RankingScene({
      rank_num: scene.rank_num,
      target_num: scene.target_num
    }));
  };

  RankFromGrade.prototype.off = function() {
    this.addEventListener(Event.TOUCH_END, this.get_data);
    return this.frame = this.frame_init;
  };

  RankFromGrade.prototype.on = function() {
    var core, scene;
    this.clearEventListener(Event.TOUCH_END);
    this.frame = this.frame_init + 6;
    core = Core.instance;
    scene = core.currentScene;
    return scene.from = 'grade_' + this.grade;
  };

  return RankFromGrade;

})(Button);

RankTopButton = (function(_super) {

  __extends(RankTopButton, _super);

  RankTopButton.name = 'RankTopButton';

  function RankTopButton() {
    RankTopButton.__super__.constructor.call(this, 100, 40);
    this.frame = this.frame_init = 57;
    this.num = 0;
    this.x = 50;
    this.y = 130;
  }

  RankTopButton.prototype.get_data = function() {
    var core, scene;
    if (this.frame !== this.frame_init) {
      return;
    }
    core = Core.instance;
    scene = core.currentScene;
    scene.target_num = this.num;
    core.removeScene(scene);
    return core.pushScene(new RankingScene({
      rank_num: scene.rank_num,
      target_num: scene.target_num
    }));
  };

  RankTopButton.prototype.off = function() {
    this.addEventListener(Event.TOUCH_END, this.get_data);
    return this.frame = this.frame_init;
  };

  RankTopButton.prototype.on = function() {
    var core, scene;
    this.clearEventListener(Event.TOUCH_END);
    this.frame = this.frame_init + 3;
    core = Core.instance;
    scene = core.currentScene;
    return scene.target = 'top';
  };

  return RankTopButton;

})(Button);

RankSelfButton = (function(_super) {

  __extends(RankSelfButton, _super);

  RankSelfButton.name = 'RankSelfButton';

  function RankSelfButton() {
    RankSelfButton.__super__.constructor.call(this, 100, 40);
    this.frame = this.frame_init = 58;
    this.num = 1;
    this.x = 170;
    this.y = 130;
  }

  RankSelfButton.prototype.get_data = function() {
    var core, scene;
    if (this.frame !== this.frame_init) {
      return;
    }
    core = Core.instance;
    scene = core.currentScene;
    scene.target_num = this.num;
    core.removeScene(scene);
    return core.pushScene(new RankingScene({
      rank_num: scene.rank_num,
      target_num: scene.target_num
    }));
  };

  RankSelfButton.prototype.off = function() {
    this.addEventListener(Event.TOUCH_END, this.get_data);
    return this.frame = this.frame_init;
  };

  RankSelfButton.prototype.on = function() {
    var core, scene;
    this.clearEventListener(Event.TOUCH_END);
    this.frame = this.frame_init + 3;
    core = Core.instance;
    scene = core.currentScene;
    return scene.target = 'self';
  };

  return RankSelfButton;

})(Button);

ConnectError = (function(_super) {

  __extends(ConnectError, _super);

  ConnectError.name = 'ConnectError';

  function ConnectError() {
    var chara, core, signboard;
    ConnectError.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    signboard = new Sprite(240, 160);
    signboard.image = core.assets['character.png'];
    signboard.x = 40;
    signboard.y = 100;
    signboard.frame = 2;
    this.addChild(signboard);
    chara = new Chara;
    chara.frame = 4;
    chara.x = 100;
    chara.y = 240;
    this.addChild(chara);
  }

  return ConnectError;

})(Group);

LoadingKuma = (function(_super) {

  __extends(LoadingKuma, _super);

  LoadingKuma.name = 'LoadingKuma';

  function LoadingKuma() {
    var kuma, loading;
    LoadingKuma.__super__.constructor.apply(this, arguments);
    loading = new Loading;
    loading.x = 240;
    loading.y = 400;
    this.addChild(loading);
    kuma = new Chara(4);
    kuma.x = 100;
    kuma.y = 240;
    this.addChild(kuma);
  }

  return LoadingKuma;

})(Group);

RatingLogScene = (function(_super) {

  __extends(RatingLogScene, _super);

  RatingLogScene.name = 'RatingLogScene';

  function RatingLogScene() {
    var core, etc, friend, log, ranking, scene, top;
    RatingLogScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = this;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      return this.load_graph({
        callback: function() {
          var diploma;
          diploma = new Diploma;
          scene.addChild(diploma);
          return scene.diploma = diploma;
        }
      });
    });
  }

  RatingLogScene.prototype.load_graph = function(opt) {
    var core, graph, scene, title, url;
    core = Core.instance;
    scene = core.currentScene;
    opt = opt || {};
    graph = new Graph(240, 160);
    graph.x = 40;
    graph.y = 80;
    this.addChild(graph);
    title = new Label;
    title.text = $('#text_rating_log').text();
    title.x = 40;
    title.y = 80;
    this.addChild(title);
    $('#loading').show();
    url = core.server + '/kanji/all_rating_history';
    return $.ajax({
      timeout: 10000,
      url: url,
      data: {
        user_id: core.user_id,
        grade: 'grade_1',
        time: ~~(new Date / 1000)
      },
      success: function(json) {
        var data, diploma, history, item, list, listview, max, padding, score, _i, _len;
        $('#loading').hide();
        scene = core.currentScene;
        list = new Array();
        history = json.rating_history;
        if (!history) {
          return;
        }
        history = history.reverse();
        padding = 20;
        max = 10 * padding;
        if (json.nickname) {
          core.nickname = json.nickname;
        }
        listview = new ListView(260, 180, true);
        listview.x = 30;
        listview.y = 260;
        scene.addChild(listview);
        for (_i = 0, _len = history.length; _i < _len; _i++) {
          data = history[_i];
          score = ~~data.rating_order * padding;
          if (score > 8 * padding) {
            max = 20 * padding;
          } else if (score > 18 * padding) {
            max = 30 * padding;
          } else if (score > 28 * padding) {
            max = 35 * padding;
          }
          list.unshift(score);
          item = new ListItem(260, 50);
          item.content = data.year + $('#text_year').text() + data.month + $('#text_month').text() + data.day + $('#text_day').text() + rating_jp[data.rating];
          item.rating = data.rating;
          item.year = data.year;
          item.month = data.month;
          item.day = data.day;
          item.ontap = function() {
            var info;
            info = this;
            scene = core.currentScene;
            return scene.diploma.show({
              rating: info.rating,
              year: info.year,
              month: info.month,
              day: info.day
            });
          };
          if (!data.is_re) {
            diploma = new Sprite(50, 50);
            diploma.image = core.assets['buttons.png'];
            diploma.frame = 59;
            item.rightIcon = diploma;
          }
          listview.addChild(item);
        }
        list.unshift(padding);
        if (list.length > 10) {
          list = list.slice(list.length - 10);
        }
        graph.add_data([
          {
            color: 'green',
            data: list,
            max: max
          }
        ]);
        if (opt.callback) {
          return opt.callback();
        }
      },
      error: function(error) {
        var error_message;
        $('#loading').hide();
        error_message = new Label;
        error_message.text = $('#text_error_description').html();
        error_message.x = 10;
        error_message.y = 150;
        error_message.textAlign = 'center';
        scene.addChild(error_message);
        scene.error = error_message;
        return scene.loading = 0;
      }
    });
  };

  return RatingLogScene;

})(Scene);

StageScene = (function(_super) {

  __extends(StageScene, _super);

  StageScene.name = 'StageScene';

  function StageScene(opt) {
    var char, core, count, counter, data, edge, margin, pause, pronounce_text, result, score, stage, stage_num, text, width, _i, _len;
    opt = opt || {};
    StageScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    data = opt.data;
    result = opt.result;
    edge = opt.edge || 5;
    stage = opt.stage || 1;
    pronounce_text = opt.pronounce_text;
    this.start = ~(new Date);
    core.interval_flag = 0;
    stage_num = new Label;
    stage_num.text = 'stage: ' + stage;
    this.addChild(stage_num);
    counter = opt.counter;
    counter.start();
    this.addChild(counter);
    score = opt.score;
    if (score) {
      this.addChild(score);
    }
    if (edge === 4) {
      width = 70;
      margin = 20;
    } else if (edge === 5) {
      width = 50;
      margin = 35;
    } else if (edge === 6) {
      width = 40;
      margin = 40;
    } else if (edge === 8) {
      width = 30;
      margin = 40;
    }
    count = 0;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      char = data[_i];
      text = new TextCharacter;
      text.text = char;
      text.x = width * Math.floor(count % edge) + margin;
      text.y = width * Math.floor(count / edge) + 60;
      text.font = width - 5 + 'px sans-serif';
      this.addChild(text);
      count++;
      text.addEventListener(Event.TOUCH_END, function() {
        var add_score, end, heal_time, scene, time_used;
        if (this.text === result) {
          this.removeEventListener(Event.TOUCH_END, arguments.callee);
          counter.stop();
          this.removeEventListener(Event.ENTER_FRAME, this.show_and_hide);
          this.tl.clear();
          this.opacity = 1;
          core.interval_flag = 1;
          if (stopBGM) {
            stopBGM();
          }
          if (startCorrect) {
            startCorrect();
          }
          result = this;
          scene = core.currentScene;
          end = ~(new Date);
          add_score = ~~((20000 + end - scene.start) / 100);
          if (add_score < 0) {
            add_score = 10;
          }
          add_score = ~~(add_score * (stage + 10) / 10);
          core.score = core.score + add_score;
          score.score_reflesh(core.score);
          heal_time = core.heal_time;
          counter.add_time_now(heal_time);
          setTimeout(function() {
            return counter.reflesh();
          }, 1000);
          core.heal_time--;
          if (core.heal_time < 2) {
            core.heal_time = 2;
          }
          time_used = ~~((scene.start - end) / 100) / 10;
          return this.tl.tween({
            x: (320 - width) / 2,
            y: 90,
            time: 5
          }).delay(2).then(function() {
            var stagescore_scene;
            stagescore_scene = new StageScoreScene({
              add_score: add_score,
              heal_time: heal_time,
              time_used: time_used,
              pronounce_text: pronounce_text,
              result: result
            });
            core.removeScene(core.currentScene);
            return core.pushScene(stagescore_scene);
          });
        }
      });
    }
    pause = new PauseButton({
      counter: counter
    });
    pause.x = 40;
    pause.y = 370;
    this.addChild(pause);
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      if (startBGM) {
        return startBGM();
      }
    });
    this.addEventListener(Event.ENTER_FRAME, function() {
      if (counter.count <= 0) {
        this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
        return core.pushScene(new GameoverScene({
          counter: counter
        }));
      }
    });
  }

  return StageScene;

})(Scene);

StageScoreScene = (function(_super) {

  __extends(StageScoreScene, _super);

  StageScoreScene.name = 'StageScoreScene';

  function StageScoreScene(opt) {
    var stage_score;
    StageScoreScene.__super__.constructor.apply(this, arguments);
    stage_score = new StageScore({
      add_score: opt.add_score,
      heal_time: opt.heal_time,
      time_used: opt.time_used,
      pronounce_text: opt.pronounce_text
    });
    stage_score.x = 35;
    stage_score.y = 80;
    this.addChild(stage_score);
    this.addChild(opt.result);
  }

  return StageScoreScene;

})(Scene);

TitleScene = (function(_super) {

  __extends(TitleScene, _super);

  TitleScene.name = 'TitleScene';

  function TitleScene() {
    var chara, core, etc, friend, grade, log, num, ranking, scene, start, title, top, version;
    TitleScene.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = this;
    top = new TopButton;
    this.addChild(top);
    log = new LogButton;
    this.addChild(log);
    ranking = new RankButton;
    this.addChild(ranking);
    friend = new FriendButton;
    this.addChild(friend);
    etc = new EtcButton;
    this.addChild(etc);
    chara = new Chara;
    chara.x = 100;
    chara.y = 185;
    this.addChild(chara);
    num = new Label;
    num.text = $('#text_kuma').text();
    num.y = 430;
    num.textAlign = 'center';
    this.addChild(num);
    title = new Sprite(280, 140);
    title.image = core.assets['images.png'];
    title.x = 20;
    title.y = 70;
    this.addChild(title);
    grade = new Label;
    grade.text = $('#text_title_grade').text();
    grade.x = 100;
    grade.y = 410;
    this.addChild(grade);
    start = new Button(150, 50);
    start.frame = 2;
    start.x = 85;
    start.y = 350;
    start.addEventListener(Event.TOUCH_END, function() {
      core.guest_play = 0;
      core.removeScene(core.currentScene);
      core.pushScene(new PreGameScene);
      return $('#default_line').hide();
    });
    this.addChild(start);
    this.addEventListener(Event.ENTER_FRAME, function() {
      this.removeEventListener(Event.ENTER_FRAME, arguments.callee);
      $('#default_line').show();
      return $.ajax({
        timeout: 10000,
        url: core.server + '/kanji/top',
        data: {
          user_id: core.user_id,
          version: core.version,
          device: core.device,
          time: ~~(new Date / 1000)
        },
        success: function(json) {
          var force_update;
          if (json.ranking_available) {
            core.ranking_available = 1;
          }
          if (core.ranking_available && json.rateup_flag) {
            core.rateup_flag = 1;
          }
          if (json.update) {
            force_update = json.force_update || 0;
            return scene.addChild(new UpdateNotice(force_update));
          }
        }
      });
    });
    version = new Label;
    version.text = core.version_code;
    version.textAlign = 'center';
    version.y = 462;
    this.addChild(version);
  }

  return TitleScene;

})(Scene);

StageScore = (function(_super) {

  __extends(StageScore, _super);

  StageScore.name = 'StageScore';

  function StageScore(opt) {
    var add_score, board, bonus, chara, core, heal, heal_time, next, pronounce, pronounce_text, scene, score, time, time_used;
    StageScore.__super__.constructor.apply(this, arguments);
    core = Core.instance;
    scene = core.currentScene;
    add_score = opt.add_score;
    heal_time = opt.heal_time;
    time_used = opt.time_used;
    pronounce_text = opt.pronounce_text;
    this.children = new Array;
    board = new Sprite(250, 250);
    board.image = core.assets['images.png'];
    board.frame = 1;
    this.addChild(board);
    this.children.push(board);
    chara = new Chara(2, 120, 60);
    chara.y = 185;
    this.addChild(chara);
    this.children.push(chara);
    time = new Label;
    time.text = time_used + core.text.second;
    time.x = 10;
    time.y = 10;
    time.font = '20px sans-serif';
    this.addChild(time);
    this.children.push(time);
    if (pronounce_text) {
      pronounce = new Label;
      pronounce.text = pronounce_text;
      pronounce.x = -25;
      pronounce.y = 80;
      pronounce.font = '14px sans-serif';
      pronounce.textAlign = 'center';
      this.addChild(pronounce);
      this.children.push(pronounce);
    }
    if (add_score) {
      score = new Label;
      score.text = '+' + add_score + core.text.point;
      score.x = -20;
      score.y = 110;
      score.font = '20px sans-serif';
      score.textAlign = 'center';
      this.addChild(score);
      this.children.push(score);
    }
    if (heal_time) {
      heal = new Label;
      heal.text = '+' + heal_time + core.text.second;
      heal.x = -20;
      heal.y = 135;
      heal.font = '20px sans-serif';
      heal.textAlign = 'center';
      this.addChild(heal);
      this.children.push(heal);
    }
    bonus = new Label;
    bonus.text = core.text.bonus;
    bonus.x = -20;
    bonus.y = 160;
    bonus.font = '30px sans-serif';
    bonus.textAlign = 'center';
    this.addChild(bonus);
    this.children.push(bonus);
    next = new Button(100, 50);
    next.x = 130;
    next.y = 220;
    next.frame = 12;
    next.addEventListener(Event.TOUCH_END, function() {
      core.interval_flag = 0;
      return core.removeScene(core.currentScene);
    });
    this.addChild(next);
    this.children.push(next);
  }

  StageScore.prototype.show = function() {
    var child, _i, _len, _ref, _results;
    _ref = this.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(child.opacity = 1);
    }
    return _results;
  };

  return StageScore;

})(Group);

TextCharacter = (function(_super) {

  __extends(TextCharacter, _super);

  TextCharacter.name = 'TextCharacter';

  function TextCharacter() {
    var rand;
    TextCharacter.__super__.constructor.apply(this, arguments);
    this.lag = 80;
    rand = Math.floor(Math.random() * 5);
    if (rand === 3) {
      this.color = '#C35B9D';
    } else if (rand === 4) {
      this.color = '#5EC84E';
    } else {
      this.color = '#6A8CC7';
    }
    this.count = Math.floor(Math.random() * this.lag);
    this.opacity = 0;
    this.addEventListener(Event.ENTER_FRAME, this.show_and_hide);
  }

  TextCharacter.prototype.show_and_hide = function() {
    if (this.end) {
      this.opacity = 1;
      return;
    }
    if (this.count++ < this.lag) {
      return;
    }
    this.count = 0;
    return this.tl.tween({
      opacity: 1,
      time: 25
    }).delay(30).tween({
      opacity: 0,
      time: 5
    });
  };

  return TextCharacter;

})(Label);

ImageCharacter = (function(_super) {

  __extends(ImageCharacter, _super);

  ImageCharacter.name = 'ImageCharacter';

  function ImageCharacter(frame) {
    var core;
    ImageCharacter.__super__.constructor.call(this, 70, 70);
    core = Core.instance;
    this.lag = 80;
    this.image = core.assets['images.png'];
    this.frame = frame || 0;
    this.count = Math.floor(Math.random() * this.lag);
    this.opacity = 0;
    this.addEventListener(Event.ENTER_FRAME, this.show_and_hide);
  }

  ImageCharacter.prototype.show_and_hide = function() {
    if (this.end) {
      this.opacity = 1;
      return;
    }
    if (this.count++ < this.lag) {
      return;
    }
    this.count = 0;
    return this.tl.tween({
      opacity: 1,
      time: 25
    }).delay(30).tween({
      opacity: 0,
      time: 5
    });
  };

  return ImageCharacter;

})(Sprite);


/**
 * @fileOverview
 * widget.enchant.js
 * @version 0.2.0
 * @require enchant.js v0.6.0+
 * @author Ubiquitous Entertainment Inc.
 *
 * @description
 * Library for making mobile webpage-style UIs in enchant.js.
 */

(function() {

    /**
     * @type {Object}
     */
    enchant.widget = {
        assets: [
            'listItemBg.png',
            'iconMenuBg.png',
            'button.png',
            'buttonPushed.png',
            'dialog.png',
            'navigationBar.png'
        ],
        _env: {
            // default font
            font: '12px helvetica',
            buttonFont: '23px helvetica',
            navigationBarFont: '16px helvetica',
            textareaFont: '8px monospace',
            listItemMargin: 4,
            dialogMargin: 24,
            itemHeight: 48,
            buttonWidth: 64,
            buttonHeight: 36,
            dialogWidth: 300,
            dialogHeight: 225,
            inputMinHeight: 160,
            inputMaxHeight: 240,
            acceptName: 'OK',
            cancelName: 'NO',
            HOLDTIME: 300,
            DBLLIMIT: 300,
            FLINGVEL: 3
        },

        /**
         * Return objects that cannot be displayed as units in string or enchant.Surface in displayable form.
         * @param {*} content Data you wish to display.
         * @return {*} enchant Entity object.
         */
        parseContent: function(content, font, color) {
            var en;
            if (typeof content === 'undefined') {
                content = '';
            }
            if (typeof content === 'number') {
                content = arguments.callee('' + content, font);
            } else if (content instanceof enchant.Entity) {
            } else if (content instanceof enchant.Surface) {
                en = new enchant.Sprite(content.width, content.height);
                en.image = content;
                content = en;
            } else if (typeof content == 'string') {
                calced = getElementMetrics(content, font);
                en = new enchant.Label(content);
                en.width = calced.width;
                en.height = calced.height;
                if (font) {
                    en.font = font;
                } else {
                    en.font = enchant.widget._env.font;
                }
                if (color) {
                    en.color = color;
                }
                content = en;
            }
            return content;
        }
    };

    /**
     * Events occurring during Scene beginning.
     * Issued when ended {@link enchant.Core#transitionPush} animation.
     * @type {String}
     */
    enchant.Event.TRANSITIONENTER = 'transitionenter';

    /**
     * Events occurring during Scene end.
     * Issued when ended {@link enchant.Core#transitionPop} animation.
     * @type {String}
     */
    enchant.Event.TRANSITIONEXIT = 'transitionexit';

    /**
     * Event issued when positive button in enchant.widget.Confirm is pushed.
     * @type {String}
     */
    enchant.Event.ACCEPT = 'accept';

    /**
     * Event issued when negative button in enchant.widget.Confirm is pushed.
     * @type {String}
     */
    enchant.Event.CANCEL = 'cancel';

    /**
     * Event issued when form object content is changed.
     * @type {String}
     */
    enchant.Event.CHANGE = 'change';

    /**
     * Event issued when tap is detected.
     * Detected when touch ends without movement, and when double touch has ended.
     * @type {String}
     */
    enchant.Event.TAP = 'tap';

    /**
     * Event issued when double tap is detected.
     * Detected when two taps are detected within a set time and distance.
     * @type {String}
     */
    enchant.Event.DOUBLETAP = 'doubletap';

    /**
     * Event issued when hold is detected.
     * Detected when touch continues for a set time without movement.
     * @type {String}
     */
    enchant.Event.HOLD = 'hold';

    /**
     * Event issued when drag is detected.
     * Detected when touch position changes during hold.
     * @type {String}
     */
    enchant.Event.DRAG = 'drag';

    /**
     * Event issued when release is detected.
     * Detected when touch ends during hold.
     * @type {String}
     */
    enchant.Event.RELEASE = 'release';

    /**
     * Event issued when slip is detected.
     * Detected when touch position changes without holding.
     * @type {String}
     */
    enchant.Event.SLIP = 'slip';

    /**
     * Event issued when fling is detected.
     * Detected when touch ends and position moves faster than set speed.
     * @type {String}
     */
    enchant.Event.FLING = 'fling';

    var NOTOUCH = 0;
    var WAITDBL = 1;
    var NOMOVE = 2;
    var NOMOVEDBL = 3;
    var MOVED = 4;
    var HOLD = 5;

    var getElementMetrics = function(string, font) {
        var e = document.createElement('div');
        var cvs = document.createElement('canvas');
        var ctx = cvs.getContext('2d');
        var arr, str, w;
        var width = 0;
        var height = 0;
        if (!font) {
            font = enchant.widget._env.font;
        }
        ctx.font = font;
        e.style.font = font;
        string = string || '';
        string = string.replace(/<(br|BR) ?\/?>/g, '<br>');
        arr = string.split('<br>');
        for (var i = 0, l = arr.length; i < l; i++) {
            str = arr[i];
            w = ctx.measureText(str).width;
            if (width < w) {
                width = w;
            }
        }

        e.innerHTML = string;

        if (document.body) {
            document.body.appendChild(e);
            height = parseInt(getComputedStyle(e).height, 10);
            e.style.position = 'absolute';
            width = parseInt(getComputedStyle(e).width, 10);
            document.body.removeChild(e);
        } else {
            height = 14 * arr.length;
        }

        return {
            width: width + 1,
            height: height + 1
        };
    };

    var calcLeastPosition = function(margin) {
        margin |= 0;
        return margin;
    };

    var calcMostPosition = function(child, parent, margin) {
        margin |= 0;
        return parent - margin - child;
    };

    var calcCenteredPosition = function(child, parent) {
        return ~~(parent / 2) - ~~(child / 2);
    };

    var getScaleOffest = function(length, scale) {
        var half = ~~(length / 2);
        scale = scale || 1;
        return half - ~~(half * scale);
    };

    var distribute = function(value, div) {
        if (typeof div == 'array') {
            var ratio = div;
            var ret = new Array(ratio.length);
            var retSum = 0;
            var maxi = 0;
            var max = 0;
            var sum = 0;
            var quo;

            ratio.forEach(function(n) {
                sum += n;
            });
            quo = value / sum;

            for (var i = 0, l = ret.length; i < l; i++) {
                ret[i] = Math.round(quo * ratio[i]);
                if (ratio[i] < max) {
                    maxi = i;
                    max = ratio[i];
                }
            }

            ret.forEach(function(n) {
                retSum += n;
            });

            ret[maxi] += value - retSum;
        } else if (typeof div == 'number') {
            var ret = new Array(div);
            var quo = ~~(value / div);
            var rem = ~~(value % div);
            for (var i = 0, l = div; i < l; i++) {
                ret[i] = quo;
            }
            for (var i = 0, l = rem; i < l; i++) {
                ret[i % div] += 1;
            }
        }
        return ret;
    };

    var Adjust = {
        fitToX: function(parent, margin) {
            var l = parent.width;
            var s = Math.min(
                (l - margin * 2) / this.width,
                (l - margin * 2) / this.height
            );
            if (this instanceof enchant.Sprite) {
                this.scaleX = s;
                this.scaleY = s;
            } else {
                this.width = ~~(this.width * s);
                this.height = ~~(this.height * s);
            }
        },
        fitToY: function(parent, margin) {
            var l = parent.height;
            var s = Math.min(
                (l - margin * 2) / this.width,
                (l - margin * 2) / this.height
            );
            if (this instanceof enchant.Sprite) {
                this.scaleX = s;
                this.scaleY = s;
            } else {
                this.width = ~~(this.width * s);
                this.height = ~~(this.height * s);
            }
        },
        fillX: function(parent, margin) {
            var s = (parent.width - margin * 2) / this.width;
            if (this instanceof enchant.Sprite) {
                this.scaleX = s;
                this.scaleY = s;
            } else {
                this.width = ~~(this.width * s);
                this.height = ~~(this.height * s);
            }
        },
        fillY: function(parent, margin) {
            var s = (parent.height - margin * 2) / this.height;
            if (this instanceof enchant.Sprite) {
                this.scaleX = s;
                this.scaleY = s;
            } else {
                this.width = ~~(this.width * s);
                this.height = ~~(this.height * s);
            }
        }
    };

    var Effect = {
        transitForwardIn: function(time) {
            var core = enchant.Core.instance;
            var child;
            this.x = core.width;
            var e = new enchant.Event(enchant.Event.RENDER);
            for (var i = 0, l = this.childNodes.length; i < l; i++) {
                child = this.childNodes[i];
                child.dispatchEvent(e);
            }
            this.tl
                .moveTo(0, 0, time, enchant.Easing.QUAD_EASEINOUT);
        },
        transitForwardOut: function(time) {
            var core = enchant.Core.instance;
            this.x = 0;
            this.tl
                .moveTo(-core.width, 0, time, enchant.Easing.QUAD_EASEINOUT);
        },
        transitBackIn: function(time) {
            var core = enchant.Core.instance;
            this.x = -core.width;
            this.tl
                .moveTo(0, 0, time, enchant.Easing.QUAD_EASEINOUT);
        },
        transitBackOut: function(time) {
            var core = enchant.Core.instance;
            this.x = 0;
            this.tl
                .moveTo(core.width, 0, time, enchant.Easing.QUAD_EASEINOUT);
        },
        popup: function() {
            this.scaleX = 0.1;
            this.scaleY = 0.1;
            this.opacity = 0.1;
            this.tl
                .fadeTo(0.8, 3, enchant.Easing.QUAD_EASEOUT)
                .and()
                .scaleTo(1, 3, enchant.Easing.BOUNCE_EASEOUT);
        },
        popdown: function() {
            this.tl
                .fadeTo(0.1, 3, enchant.Easing.QUAD_EASEOUT)
                .and()
                .scaleTo(0.1, 3, enchant.Easing.BOUNCE_EASEOUT);
        },
        resizeTo: function(width, height, time, easing) {
            return this.tl.tween({
                width: width,
                height: height,
                time: time,
                easing: easing
            });
        }
    };

    var Align = {

        /**
         * @scope enchant.Entity
         */

        /**
         * Moves to left side of specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignLeftOf: function(another, margin) {
            margin |= 0;
            var anotherScaleOffset = getScaleOffest(another.width, another.scaleX);
            var scaleOffset = getScaleOffest(this.width, this.scaleX);
            this.x = another.x + anotherScaleOffset - scaleOffset - this.width - margin;
            return this;
        },
        /**
         * Moves to right side of specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignRightOf: function(another, margin) {
            margin |= 0;
            var anotherScaleOffset = getScaleOffest(another.width, another.scaleX);
            var scaleOffset = getScaleOffest(this.width, this.scaleX);
            this.x = another.x + another.width - anotherScaleOffset - scaleOffset + margin;
            return this;
        },
        /**
         * Moves to upper side of specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignTopOf: function(another, margin) {
            margin |= 0;
            var anotherScaleOffset = getScaleOffest(another.height, another.scaleY);
            var scaleOffset = getScaleOffest(this.height, this.scaleY);
            this.x = another.y + anotherScaleOffset - scaleOffset - this.height - margin;
            return this;
        },
        /**
         * Moves to lower side of specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignBottomOf: function(another, margin) {
            margin |= 0;
            var anotherScaleOffset = getScaleOffest(another.height, another.scaleY);
            var scaleOffset = getScaleOffest(this.height, this.scaleY);
            this.y = another.y + another.height - anotherScaleOffset - scaleOffset + margin;
            return this;
        },
        /**
         * Performs leftwards movement within specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignLeftIn: function(another, margin) {
            var scaleOffset = getScaleOffest(this.width, this.scaleX);
            this.x = calcLeastPosition(margin) - scaleOffset;
            return this;
        },
        /**
         * Performs rightwards movement within specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignRightIn: function(another, margin) {
            var scaleOffset = getScaleOffest(this.width, this.scaleX);
            this.x = calcMostPosition(this.width, another.width, margin) + scaleOffset;
            return this;
        },
        /**
         * Performs upwards movement within specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignTopIn: function(another, margin) {
            var scaleOffset = getScaleOffest(this.height, this.scaleY);
            this.y = calcLeastPosition(margin) - scaleOffset;
            return this;
        },
        /**
         * Performs downwards movement within specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignBottomIn: function(another, margin) {
            var scaleOffset = getScaleOffest(this.height, this.scaleY);
            this.y = calcMostPosition(this.height, another.height, margin) + scaleOffset;
            return this;
        },
        /**
         * Performs central movement along x axis within specified object.
         * @param {*} another Object that becomes standard.
         * @param {Number} margin Number of pixels shifted.
         * @requires widget.enchant.js
         */
        alignHorizontalCenterIn: function(another) {
            this.x = calcCenteredPosition(this.width, another.width);
            return this;
        },
        /**
         * Performs central movement along y axis within specified object.
         * @param {*} another object that becomes standard.
         * @param {Number} margin Number of pictures shifted.
         * @requires widget.enchant.js
         */
        alignVerticalCenterIn: function(another) {
            this.y = calcCenteredPosition(this.height, another.height);
            return this;
        }
    };

    for (var prop in Align) {
        enchant.Entity.prototype[prop] = Align[prop];
    }

    var _transitionLock = false;

    /**
     * @scope enchant.Core
     */

    /**
     * Perform pushScene with transition animation.
     * @param {enchant.Scene} inScene New scene transitioned to.
     * @return {enchant.Scene} New scene
     * @requires widget.enchant.js
     */
    enchant.Core.prototype.transitionPush = function(inScene) {
        if (_transitionLock) return null;
        _transitionLock = true;
        var time = 15;
        var c = 0;
        var outScene = this.currentScene;
        Effect.transitForwardIn.call(inScene, time);
        Effect.transitForwardOut.call(outScene, time);
        this.addEventListener(enchant.Event.ENTER_FRAME, function(e) {
            outScene.dispatchEvent(e);
            if (c > time) {
                _transitionLock = false;
                this.removeEventListener(enchant.Event.ENTER_FRAME, arguments.callee);
                inScene.dispatchEvent(new enchant.Event(enchant.Event.TRANSITIONENTER));
                outScene.dispatchEvent(new enchant.Event(enchant.Event.TRANSITIONEXIT));
            }
            c++;
        });
        return this.pushScene(inScene);
    };

    /**
     * Perform popScene with transition animation.
     * @return {enchant.Scene} Finished scene.
     * @requires widget.enchant.js
     */
    enchant.Core.prototype.transitionPop = function() {
        if (_transitionLock) return null;
        if (this.currentScene == this.rootScene) return null;
        _transitionLock = true;
        var time = 15;
        var c = 0;
        var outScene = this.currentScene;
        var inScene = this._scenes[this._scenes.length - 2];
        this.addEventListener(enchant.Event.ENTER_FRAME, function(e) {
            inScene.dispatchEvent(e);
            if (c > time) {
                _transitionLock = false;
                this.removeEventListener(enchant.Event.ENTER_FRAME, arguments.callee);
                this.popScene();
                outScene.dispatchEvent(new enchant.Event(enchant.Event.TRANSITIONEXIT));
                inScene.dispatchEvent(new enchant.Event(enchant.Event.TRANSITIONENTER));
            }
            c++;
        });
        Effect.transitBackIn.call(inScene, time);
        Effect.transitBackOut.call(outScene, time);
        return this._scenes[this._scenes.length - 1];
    };

    /**
     * @scope enchant.widget.GestureDetector
     */
    enchant.widget.GestureDetector = enchant.Class.create(enchant.EventTarget, {
        /**
         * Issue event after detecting several gestures.
         * Can detect tap, double tap, hold, drag, flick, and more.
         * @param {enchant.Entity} target Object for which you wish to detect input.
         * @constructs
         * @extends enchant.EventTarget
         */
        initialize: function(target) {
            var core = enchant.Core.instance;
            enchant.EventTarget.call(this);
            this._target;
            this._startX = 0;
            this._startY = 0;
            this._lastX = 0;
            this._lastY = 0;
            this._touchElapsed = 0;
            this._releaseElapsed = 0;
            this._state = NOTOUCH;
            this._velobase = (core.width > core.height) ? core.height : core.width;

            var detector = this;
            this._handler = function(e) {
                detector.dispatchEvent(e);
            };

            this._types = [
                enchant.Event.TOUCH_START,
                enchant.Event.TOUCH_MOVE,
                enchant.Event.TOUCH_END,
                enchant.Event.ENTER_FRAME
            ];

            if (target) {
                this.attach(target);
            }
        },
        attach: function(target) {
            this._target = target;
            this._types.forEach(function(event) {
                this._target.addEventListener(event, this._handler);
            }, this);
        },
        detach: function() {
            this._types.forEach(function(event) {
                this._target.removeEventListener(event, this._handler);
            }, this);
            this._target = null;
        },
        ontouchstart: function(e) {
            var core = enchant.Core.instance;
            this._startFrame = core.frame;
            this._startX = this._lastX = e.x;
            this._startY = this._lastY = e.y;
            if (this._state == WAITDBL) {
                this._state = NOMOVEDBL;
            } else if (this._state == NOTOUCH) {
                this._state = NOMOVE;
            }
        },
        ontouchmove: function(e) {
            var dx = e.x - this._lastX;
            var dy = e.y - this._lastY;
            this._lastX = e.x;
            this._lastY = e.y;
            switch (this._state) {
                case NOMOVE:
                case NOMOVEDBL:
                    this._state = MOVED;
                case MOVED:
                    var evt = new enchant.Event(enchant.Event.SLIP);
                    evt.x = this._lastX;
                    evt.y = this._lastY;
                    evt.dx = dx;
                    evt.dy = dy;
                    this._target.dispatchEvent(evt);
                    break;
                case HOLD:
                    var evt = new enchant.Event(enchant.Event.DRAG);
                    evt.x = this._lastX;
                    evt.y = this._lastY;
                    evt.dx = dx;
                    evt.dy = dy;
                    this._target.dispatchEvent(evt);
                    break;
                default:
                    break;
            }
        },
        ontouchend: function(e) {
            var core = enchant.Core.instance;
            switch (this._state) {
                case MOVED:
                    velocityX = (this._lastX - this._startX) / this._velobase / this._touchElapsed * 1000;
                    velocityY = (this._lastY - this._startY) / this._velobase / this._touchElapsed * 1000;
                    if (velocityX > enchant.widget._env.FLINGVEL || velocityY > enchant.widget._env.FLINGVEL) {
                        var evt = new enchant.Event(enchant.Event.FLING);
                        evt.x = this._startX;
                        evt.y = this._startY;
                        evt.ex = this._lastX;
                        evt.ey = this._lastY;
                        evt.velocityX = velocityX;
                        evt.velocityY = velocityY;
                        this._target.dispatchEvent(evt);
                    }
                    this._state = NOTOUCH;
                    break;
                case HOLD:
                    var evt = new enchant.Event(enchant.Event.RELEASE);
                    evt.x = this._lastX;
                    evt.y = this._lastY;
                    this._target.dispatchEvent(evt);
                    this._state = NOTOUCH;
                    break;
                case NOMOVEDBL:
                    var evt = new enchant.Event(enchant.Event.DOUBLETAP);
                    evt.x = this._lastX;
                    evt.y = this._lastY;
                    this._target.dispatchEvent(evt);
                    this._state = NOTOUCH;
                    this._releaseElapsed = 0;
                    break;
                case NOMOVE:
                    this._state = WAITDBL;
                    break;
                default:
                    this._state = NOTOUCH;
                    break;
            }
            this._touchElapsed = 0;
            this._startX = 0;
            this._startY = 0;
        },
        onenterframe: function(e) {
            var elapsed = e.elapsed;
            switch (this._state) {
                case WAITDBL:
                    this._releaseElapsed += elapsed;
                    if (this._releaseElapsed >= enchant.widget._env.DBLLIMIT) {
                        var evt = new enchant.Event(enchant.Event.TAP);
                        evt.x = this._lastX;
                        evt.y = this._lastY;
                        this._lastX = 0;
                        this._lastY = 0;
                        this._target.dispatchEvent(evt);
                        this._state = NOTOUCH;
                        this._releaseElapsed = 0;
                    }
                    break;
                case NOMOVEDBL:
                    this._releaseElapsed += elapsed;
                    if (this._releaseElapsed >= enchant.widget._env.DBLLIMIT) {
                        this._state = NOMOVE;
                        this._releaseElapsed = 0;
                    }
                case NOMOVE:
                    this._touchElapsed += elapsed;
                    if (this._touchElapsed >= enchant.widget._env.HOLDTIME) {
                        var evt = new enchant.Event(enchant.Event.HOLD);
                        evt.x = this._lastX;
                        evt.y = this._lastY;
                        this._target.dispatchEvent(evt);
                        this._state = HOLD;
                        this._touchElapsed = 0;
                    }
                    break;
                case MOVED:
                    this._touchElapsed += elapsed;
                    break;
                case NOTOUCH:
                case HOLD:
                default:
                    break;
            }
        }
    });
    enchant.widget.GestureDetector.gestureEvents = [
        enchant.Event.ACCEPT,
        enchant.Event.CANCEL,
        enchant.Event.TAP,
        enchant.Event.DOUBLETAP,
        enchant.Event.HOLD,
        enchant.Event.DRAG,
        enchant.Event.RELEASE,
        enchant.Event.SLIP,
        enchant.Event.FLING
    ];

    /**
     * @scope enchant.widget.Ninepatch
     */
    enchant.widget.Ninepatch = enchant.Class.create(enchant.Surface, {
        /**
         * Surface corresponding to 9patch.
         * Does not respond to settings in content area.
         * @param {Number} width Surface width.
         * @param {Number} height Surface height.
         * @constructs
         * @extends enchant.Surface
         */
        initialize: function(width, height) {
            enchant.Surface.call(this, width, height);

            this._horScStore = [];
            this._horNoScStore = [];
            this._verScStore = [];
            this._verNoScStore = [];
            this._src;
        },
        /**
         * 9patch source.
         * @type {enchant.Surface}
         */
        src: {
            get: function() {
                return this._src;
            },
            set: function(surface) {
                if (surface == this._src || !(surface instanceof enchant.Surface)) {
                    return;
                }
                this._slicedraw(surface);
                this._src = surface;
            }
        },
        _detect: function(img) {
            this._horScStore = [];
            this._horNoScStore = [];
            this._verScStore = [];
            this._verNoScStore = [];
            var elem = img._element;
            var cvs = document.createElement('canvas');
            var width = cvs.width = img.width;
            var height = cvs.height = img.height;
            var ctx = cvs.getContext('2d');
            ctx.drawImage(elem, 0, 0, width, height);
            var pixels = ctx.getImageData(0, 0, width, height);

            var isBlack = function(i) {
                return pixels.data[i] == 0 && pixels.data[i + 1] == 0 && pixels.data[i + 2] == 0 && pixels.data[i + 3] == 255;
            };

            var last = false;
            var tmp = [];
            var scalable = [];
            var noscalable = [];

            for (var i = 1, l = width - 1; i < l; i++) {
                last = isBlack(i * 4);
                if (last) {
                    if (scalable.length == 0) {
                        scalable.push(i);
                    }
                    if (noscalable.length == 1) {
                        noscalable.push(i - 1);
                        this._horNoScStore.push(noscalable);
                        noscalable = [];
                    }
                } else {
                    if (noscalable.length == 0) {
                        noscalable.push(i);
                    }
                    if (scalable.length == 1) {
                        scalable.push(i - 1);
                        this._horScStore.push(scalable);
                        scalable = [];
                    }
                }
            }
            if (scalable.length == 1) {
                scalable.push(i - 1);
                this._horScStore.push(scalable);
            }
            if (noscalable.length == 1) {
                noscalable.push(i - 1);
                this._horNoScStore.push(noscalable);
            }
            scalable = [];
            noscalable = [];

            for (var i = 1, l = height - 1; i < l; i++) {
                last = isBlack(i * width * 4);
                if (last) {
                    if (scalable.length == 0) {
                        scalable.push(i);
                    }
                    if (noscalable.length == 1) {
                        noscalable.push(i - 1);
                        this._verNoScStore.push(noscalable);
                        noscalable = [];
                    }
                } else {
                    if (noscalable.length == 0) {
                        noscalable.push(i);
                    }
                    if (scalable.length == 1) {
                        scalable.push(i - 1);
                        this._verScStore.push(scalable);
                        scalable = [];
                    }
                }
            }
            if (scalable.length == 1) {
                scalable.push(i - 1);
                this._verScStore.push(scalable);
            }
            if (noscalable.length == 1) {
                noscalable.push(i - 1);
                this._verNoScStore.push(noscalable);
            }
        },
        _slicedraw: function(img) {
            this._detect(img);
            var elem = img._element;
            var w = img.width;
            var h = img.height;
            var width = this.width;
            var height = this.height;
            var ctx = this.context;

            var getSum = function(store) {
                var s;
                var sum = 0;
                for (var i = 0, l = store.length; i < l; i++) {
                    s = store[i];
                    sum += s[1] - s[0] + 1;
                }
                return sum;
            };
            var getRatio = function(array) {
                var a, ret = [];
                for (var i = 0, l = array.length; i < l; i++) {
                    a = array[i];
                    ret.push(a[1] - a[0] + 1);
                }
                return ret;
            };
            var fix = function(array, fix) {
                var a;
                for (var i = 0, l = array.length; i < l; i++) {
                    a = array[i];
                    a.fix = fix[i];
                }
            };
            var distribute = function(value, ratio) {
                var ret = new Array(ratio.length);
                var retSum = 0;
                var maxi = 0;
                var max = 0;
                var sum = 0;
                var quo;

                ratio.forEach(function(n) {
                    sum += n;
                });
                quo = value / sum;

                for (var i = 0, l = ret.length; i < l; i++) {
                    ret[i] = Math.round(quo * ratio[i]);
                    if (ratio[i] < max) {
                        maxi = i;
                        max = ratio[i];
                    }
                }

                ret.forEach(function(n) {
                    retSum += n;
                });

                ret[maxi] += value - retSum;

                return ret;
            };

            var ratioH = getRatio(this._horScStore);
            var valueH = width - getSum(this._horNoScStore);
            var scaledW = distribute(valueH, ratioH);

            var ratioV = getRatio(this._verScStore);
            var valueV = height - getSum(this._verNoScStore);
            var scaledH = distribute(valueV, ratioV);

            fix(this._horScStore, scaledW);
            fix(this._verScStore, scaledH);

            var verQueue = this._verScStore.concat(this._verNoScStore).sort(function(a, b) {
                return a[0] - b[0];
            });
            var horQueue = this._horScStore.concat(this._horNoScStore).sort(function(a, b) {
                return a[0] - b[0];
            });

            var verQ;
            var horQ;
            var sx, sy, sw, sh, dw, dh;
            var dx = 0;
            var dy = 0;

            ctx.clearRect(0, 0, this.width, this.height);
            for (var i = 0, l = horQueue.length; i < l; i++) {
                horQ = horQueue[i];
                sx = horQ[0];
                sw = horQ[1] - horQ[0] + 1;
                dw = (typeof horQ.fix == 'number') ? horQ.fix : sw;
                dy = 0;
                for (var j = 0, ll = verQueue.length; j < ll; j++) {
                    verQ = verQueue[j];
                    sy = verQ[0];
                    sh = verQ[1] - verQ[0] + 1;
                    dh = (typeof verQ.fix == 'number') ? verQ.fix : sh;
                    ctx.drawImage(elem, sx, sy, sw, sh, dx, dy, dw, dh);
                    dy += dh;
                }
                dx += dw;
            }
        },
        /**
         * @type {Number}
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._width = width;
                if (this._element) {
                    this._element.width = width;
                }
                if (this._src instanceof enchant.Surface) {
                    this._slicedraw(this._src);
                }
            }
        },
        /**
         * @type {Number}
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._height = height;
                if (this._element) {
                    this._element.height = height;
                }
                if (this._src instanceof enchant.Surface) {
                    this._slicedraw(this._src);
                }
            }
        },
        /**
         * Recreate set size.
         * @param {Number} width New width.
         * @param {Number} height New height.
         */
        resize: function(width, height) {
            this._width = width;
            this._height = height;
            this._element.width = width;
            this._element.height = height;
            if (this._src instanceof enchant.Surface) {
                this._slicedraw(this._src);
            }
        }
    });

    /**
     * @scope enchant.widget.EntityGroup
     */
    enchant.widget.EntityGroup = enchant.Class.create(enchant.Entity, {
        /**
         * Entity that can have children.
         * @param {Number} width Entity width.
         * @param {Number} height Entity height.
         * @constructs
         * @extends enchant.Entity
         */
        initialize: function(width, height) {
            enchant.Entity.call(this);
            this._background;
            this.width = width;
            this.height = height;
            this.childNodes = [];
            this.parentNode;
            this._renderFrag = true;

            [ enchant.Event.ADDED_TO_SCENE, enchant.Event.REMOVED_FROM_SCENE ]
                .forEach(function(event) {
                    this.addEventListener(event, function(e) {
                        this.childNodes.forEach(function(child) {
                            child.scene = this.scene;
                            child.dispatchEvent(e);
                        }, this);
                    });
                }, this);
        },
        /**
         * @type {Number}
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._style.width = (this._width = width) + 'px';
                if (this.background instanceof enchant.widget.Ninepatch) {
                    this.background.width = this.width;
                }
            }
        },
        /**
         * @type {Number}
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._style.height = (this._height = height) + 'px';
                if (this.background instanceof enchant.widget.Ninepatch) {
                    this.background.height = this.height;
                }
            }
        },
        /**
         * Surface used as background.
         * @type {enchant.Surface}
         */
        background: {
            get: function() {
                return this._background;
            },
            set: function(surface) {
                if (surface instanceof enchant.Surface) {
                    this._background = surface;
                    this._style['background-image'] = surface._css;
                }
            }
        },
        /**
         * Add Node to EntityGroup.
         * @param {enchant.Node} child Node to be added.
         */
        addChild: enchant.Group.prototype.addChild,
        /**
         * Insert Node to EntityGroup.
         * @param {enchant.Node} child Node to be inserted.
         * @param {enchant.Node} reference Node before insertion postion.
         */
        insertBefore: enchant.Group.prototype.insertBefore,
        /**
         * Delete Node from EntityGroup.
         * @param {enchant.Node} child Node to delete.
         */
        removeChild: enchant.Group.prototype.removeChild,
        /**
         * First child Node.
         * @type {enchant.Node}
         */
        firstChild: Object.getOwnPropertyDescriptor(enchant.Group.prototype, 'firstChild'),
        /**
         * Last child Node.
         * @type {enchant.Node}
         */
        lastChild: Object.getOwnPropertyDescriptor(enchant.Group.prototype, 'lastChild'),
        _dirty: Object.getOwnPropertyDescriptor(enchant.Group.prototype, '_dirty'),
        cvsRender: function(ctx) {
            if (this.background &&
                this.background._element.width > 0 &&
                this.background._element.height > 0) {
                ctx.drawImage(this.background._element, 0, 0, this.width, this.height);
            }
            ctx.beginPath();
            ctx.rect(0, 0, this.width, this.height);
        }
    });

    /**
     * @scope enchant.widget.Modal
     */
    enchant.widget.Modal = enchant.Class.create(enchant.Scene, {
        /**
         * Model scene.
         * @constructs
         * @extends enchant.Scene
         */
        initialize: function() {
            enchant.Scene.call(this);
            var core = enchant.Core.instance;
            var shade = new enchant.Sprite(core.width, core.height);
            var sf = new enchant.Surface(1, 1);
            sf.context.fillRect(0, 0, 1, 1);
            shade.image = sf;
            shade.opacity = 0.1;
            this.addChild(shade);
            this.addEventListener(enchant.Event.ENTER, function() {
                shade.tl.fadeTo(0.7, 5, enchant.Easing.QUAD_EASEOUT);
            });
        }
    });

    /**
     * @scope enchant.widget.Button.prototype
     */
    enchant.widget.Button = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Button.
         * Set normal background and background when pushed down.
         * @param {*} Button content.
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(content) {
            var core = enchant.Core.instance;
            content = content || '';
            var minwidth = enchant.widget._env.buttonWidth;
            var minheight = enchant.widget._env.buttonHeight;
            enchant.widget.EntityGroup.call(this, minwidth, minheight);
            this._image;
            this._pushedimage;
            this._content;
            this._rawContent;
            var bg1 = new enchant.widget.Ninepatch(minwidth, minheight);
            bg1.src = core.assets['button.png'];
            this.image = bg1;

            var bg2 = new enchant.widget.Ninepatch(minwidth, minheight);
            bg2.src = core.assets['buttonPushed.png'];
            this.pushedimage = bg2;

            this.content = content;
            this.width = Math.max(this._content.width, minwidth);
            this.height = Math.max(this._content.height, minheight);
            this.addEventListener(enchant.Event.TOUCH_START, function() {
                if (!this._pushedimage) {
                    return;
                }
                this.background = this._pushedimage;
            });
            this.addEventListener(enchant.Event.TOUCH_END, function() {
                if (!this._pushedimage) {
                    return;
                }
                this.background = this._image;
            });
        },
        refresh: function() {
            if (this._content) {
                this._content.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);
            }
        },
        /**
         * width of button
         * @type number
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._style.width = (this._width = width) + 'px';
                if (this._image instanceof enchant.widget.Ninepatch) {
                    this._image.width = width;
                }
                if (this._pushedimage instanceof enchant.widget.Ninepatch) {
                    this._pushedimage.width = width;
                }
                this.refresh();
            }
        },
        /**
         * height of button
         * @type number
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._style.height = (this._height = height) + 'px';
                if (this._image instanceof enchant.widget.Ninepatch) {
                    this._image.height = height;
                }
                if (this._pushedimage instanceof enchant.widget.Ninepatch) {
                    this._pushedimage.height = height;
                }
                this.refresh();
            }
        },
        /**
         * Button background.
         * @type {enchant.Surface}
         */
        image: {
            get: function() {
                return this._image;
            },
            set: function(image) {
                if (image == this._image) {
                    return;
                }
                if (image._css) {
                    this.background = image;
                    this._image = image;
                }
            }
        },
        /**
         * Background when button is pushed.
         * @type {enchant.Surface}
         */
        pushedimage: {
            get: function() {
                return this._pushedimage;
            },
            set: function(image) {
                if (image == this._pushedimage) {
                    return;
                }
                if (image._css) {
                    this._pushedimage = image;
                }
            }
        },
        /**
         * Button content
         * @type {String}
         */
        content: {
            get: function() {
                return this._rawContent;
            },
            set: function(content) {
                this._rawContent = content;
                var font = enchant.widget._env.buttonFont;
                content = enchant.widget.parseContent(content, font);
                if (this._content) {
                    this.removeChild(this._content);
                }
                this.addChild(content);
                this._content = content;
                this.refresh();
            }
        }
    });

    /**
     * @scope enchant.widget.Alert
     */
    enchant.widget.Alert = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Alert dialog.
         * Use from normal {@link enchant.widget.AlertScene}.
         * @param {*} content Content to display.
         * @param {String} ac Label for acceptance button.
         * @see enchant.widget.AlertScene
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(content, ac) {
            var core = enchant.Core.instance;
            var dialogwidth = enchant.widget._env.dialogWidth;
            var dialogheight = enchant.widget._env.dialogHeight;
            enchant.widget.EntityGroup.call(this, dialogwidth, dialogheight);
            var margin = enchant.widget._env.dialogMargin;

            content = enchant.widget.parseContent(content);
            content.alignHorizontalCenterIn(this).alignTopIn(this, margin);

            var accept = new enchant.widget.Button(ac);
            accept.alignHorizontalCenterIn(this).alignBottomIn(this, margin);

            var that = this;
            accept.addEventListener(enchant.Event.TOUCH_END, function() {
                that.dispatchEvent(new enchant.Event(enchant.Event.ACCEPT));
            });

            var np = new enchant.widget.Ninepatch(this.width, this.height);
            np.src = core.assets['dialog.png'];
            this.background = np;

            this._content = content;
            this._accept = accept;

            this.addChild(content);
            this.addChild(accept);
        },
        /**
         * Function executed when agreement button is pushed.
         * @type {Function}
         */
        onaccept: function() {
        }
    });

    /**
     * @scope enchant.widget.Confirm
     */
    enchant.widget.Confirm = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Confirm dialog.
         * Use from normal {@link enchant.widget.ConfirmScene}.
         * @param {*} content Content to display.
         * @param {String} ac Label for agreement button.
         * @param {String} ig Label for cancel button.
         * @see enchant.widget.ConfirmScene
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(content, ac, ig) {
            var core = enchant.Core.instance;
            var dialogwidth = enchant.widget._env.dialogWidth;
            var dialogheight = enchant.widget._env.dialogHeight;
            enchant.widget.EntityGroup.call(this, dialogwidth, dialogheight);
            var margin = enchant.widget._env.dialogMargin;

            var content = enchant.widget.parseContent(content);
            content.alignHorizontalCenterIn(this).alignTopIn(this, margin);

            var cancel = new enchant.widget.Button(ig);
            cancel.alignLeftIn(this, margin).alignBottomIn(this, margin);

            var accept = new enchant.widget.Button(ac);
            accept.alignRightIn(this, margin).alignBottomIn(this, margin);

            var that = this;
            cancel.addEventListener(enchant.Event.TOUCH_END, function() {
                that.dispatchEvent(new enchant.Event(enchant.Event.CANCEL));
            });
            accept.addEventListener(enchant.Event.TOUCH_END, function() {
                that.dispatchEvent(new enchant.Event(enchant.Event.ACCEPT));
            });

            var np = new enchant.widget.Ninepatch(this.width, this.height);
            np.src = core.assets['dialog.png'];
            this.background = np;

            this._content = content;
            this._cancel = cancel;
            this._accept = accept;

            this.addChild(content);
            this.addChild(cancel);
            this.addChild(accept);
        },
        /**
         * Function executed when cancel button is pushed.
         * @type {Function}
         */
        oncancel: function() {
        },
        /**
         * Function executed when agreement button is pushed.
         */
        onaccept: function() {
        }
    });

    /**
     * @scope enchant.widget.Prompt
     */
    enchant.widget.Prompt = enchant.Class.create(enchant.widget.Confirm, {
        /**
         * Prompt dialog.
         * Use from normal {@link enchant.widget.PromptScene}.
         * @param {*} content Content to display.
         * @param {String} ac Label for agreement label.
         * @param {String} ig Label for cancel button.
         * @see enchant.widget.PromptScene
         * @constructs
         * @extends enchant.widget.Confirm
         */
        initialize: function(content, ac, ig, placeholder) {
            enchant.widget.Confirm.call(this, content, ac, ig);
            var margin = enchant.widget._env.dialogMargin;
            var input = this._input = new enchant.widget.InputTextBox();
            input.width = this.width / 4 * 3;
            input.placeholder = placeholder;
            input.alignHorizontalCenterIn(this).alignBottomOf(this._content, margin);
            this.addChild(input);
        },
        /**
         * content of prompt.
         */
        value: {
            get: function() {
                return this._input.value;
            },
            set: function(value) {
                this._input.value = value;
            }
        }
    });

    /**
     * @scope enchant.widget.Input
     */
    enchant.widget.Input = enchant.Class.create(enchant.Entity, {
        /**
         * Entity containing <input>.
         * @param {String} type <input>のtype.
         * @constructs
         * @extends enchant.Entity
         */
        initialize: function(type) {
            enchant.Entity.call(this);
            if (!type) {
                type = 'input';
            }
            var that = this;
            this._input = document.createElement(type);

            this._input.addEventListener('change', function(e) {
                that.dispatchEvent(new enchant.Event(enchant.Event.CHANGE));
            });

            this._element = document.createElement('div');
            this._element.appendChild(this._input);
        },
        /**
         * Determine whether or not to allow input.
         * @type {Boolean}
         */
        disabled: {
            get: function() {
                return this._input.disbaled;
            },
            set: function(value) {
                this._input.disabled = !!value;
            }
        }
    });

    /**
     * @scope enchant.widget.InputTextBox
     */
    enchant.widget.InputTextBox = enchant.Class.create(enchant.widget.Input, {
        /**
         * Text box.
         * @constructs
         * @extends enchant.widget.Input
         */
        initialize: function() {
            enchant.widget.Input.call(this);
            this._input.type = 'text';

            var metrics = getElementMetrics(this._element.innerHTML);
            this.width = metrics.width;
            this.height = metrics.height;

            var that = this;
            this._focused = false;

            this._input.addEventListener('focus', function() {
                that._focused = true;
            });

            this._input.addEventListener('blur', function() {
                that._focused = false;
            });
        },
        /**
         * @type {Number}
         */
        selectionStart: {
            get: function() {
                return this._input.selectionStart;
            },
            set: function(n) {
                this._input.selectionStart = n;
            }
        },
        /**
         * @type {Number}
         */
        selectionEnd: {
            get: function() {
                return this._input.selectionEnd;
            },
            set: function(n) {
                this._input.selectionEnd = n;
            }
        },
        /**
         * @type {Boolean}
         */
        focused: {
            get: function() {
                return this._focused;
            },
            set: function(bool) {
                this._focused = bool;
                if (bool) {
                    this._input.focus();
                } else {
                    this._input.blur();
                }
            }
        },
        /**
         * Place holder.
         * @type {String}
         */
        placeholder: {
            get: function() {
                return this._input.placeholder;
            },
            set: function(value) {
                this._input.placeholder = value;
            }
        },
        /**
         * Level input into text box.
         * @type {String}
         */
        value: {
            get: function() {
                return this._input.value;
            },
            set: function(value) {
                this._input.value = value;
            }
        },
        /**
         * Text box width.
         * @type {Number}
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._width = width;
                this._style.width = width + 'px';
                this._input.style.width = width + 'px';
            }
        },
        /**
         * Text box height.
         * @type {Number}
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._height = height;
                this._style.height = height + 'px';
                this._input.style.height = height + 'px';
            }
        }
    });

    /**
     * @scope enchant.widget.InputSelectBox
     */
    enchant.widget.InputSelectBox = enchant.Class.create(enchant.widget.Input, {
        /**
         * Select box.
         * @param {*} option Levels set in options.
         * @example
         *   var option = {
         *       male: 'Man',
         *       female: 'Woman'
         *   };
         *   var selectbox = new InputSelectBox(option);
         *
         * @constructs
         * @extends enchant.widget.Input
         */
        initialize: function(table) {
            enchant.widget.Input.call(this, 'select');
            var content;
            for (var prop in table) {
                content = table[prop];
                opt = document.createElement('option');
                opt.value = prop;
                opt.textContent = content;
                this._input.appendChild(opt);
            }

            this._input.addEventListener('mousedown', function(e) {
                e.stopPropagation();
            });

            var metrics = getElementMetrics(this._element.innerHTML);
            this.width = metrics.width;
            this.height = metrics.height;
        },
        /**
         * Level selected.
         * @type {String}
         */
        selected: {
            get: function() {
                return this._input.options[this._input.selectedIndex].value;
            },
            set: function(value) {
                var opt;
                for (var i = 0, l = this._input.options.length; i < l; i++) {
                    opt = this._input.options[i];
                    if (opt.getAttribute('value') == value) {
                        opt.selected = true;
                    } else {
                        opt.selected = false;
                    }
                }
                return value;
            }
        }
    });

    /**
     * @scope enchant.widget.InputCheckBox
     */
    enchant.widget.InputCheckBox = enchant.Class.create(enchant.widget.Input, {
        /**
         * Checkbox.
         * @param {String} value Level.
         * @param {String} text Label text.
         * @param {Boolean} checked Whether or not it is checked.
         * @constructs
         * @extends enchant.widget.Input
         */
        initialize: function(value, text, checked) {
            enchant.widget.Input.call(this);
            this._input.type = 'checkbox';
            var label = document.createDocumentFragment();
            label.textContent = text;
            this._element.appendChild(label);
            this.checked = checked;
            var metrics = getElementMetrics(this._element.innerHTML);
            this.width = metrics.width;
            this.height = metrics.height;
        },
        /**
         * Whether or not it is checked.
         * @type {Boolean}
         */
        checked: {
            get: function() {
                return this._input.checked;
            },
            set: function(value) {
                this._input.checked = !!value;
            }
        }
    });

    /**
     * @scope enchant.widget.InputTextArea
     */
    enchant.widget.InputTextArea = enchant.Class.create(enchant.Entity, {
        /**
         * Text area.
         * @constructs
         * @extends enchant.Entity
         */
        initialize: function() {
            enchant.Entity.call(this);
            var textarea = this._textarea = document.createElement('textarea');
            textarea.style.resize = 'none';
            textarea.style.font = enchant.widget._env.textareaFont;
            this._element = document.createElement('div');
            this._element.appendChild(textarea);
            var that = this;
            this._focused = false;
            this._next = null;
            this._prev = null;

            var that = this;
            this.addEventListener(enchant.Event.TOUCH_END, function() {
                this._updateVerticalDist();
            });
            this._textarea.addEventListener('input', function() {
                that._updateVerticalDist();
            });
            this._textarea.addEventListener('focus', function() {
                that._focused = true;
            });
            this._textarea.addEventListener('blur', function() {
                that._focused = false;
            });
            this._textarea.addEventListener('change', function(e) {
                that.dispatchEvent(new enchant.Event(enchant.Event.CHANGE));
            });
        },
        _updateVerticalDist: function() {
            var w = this.value.split('\n');
            var n = this.selectionStart;
            var s = 0;
            for (var i = 0, l = w.length; i < l; i++) {
                n -= w[i].length + 1;
                if (n < 0) {
                    break;
                }
                s += w[i].length + 1;
            }
            var ind = this.selectionStart - s;
            if (0 < i) {
                this._prev = -Math.max(w[i - 1].length, ind) - 1;
            } else {
                this._prev = -ind;
            }
            if (i < l - 1) {
                this._next = w[i].length - ind + Math.min(ind, w[i + 1].length) + 1;
            } else {
                this._next = w[i].length - ind;
            }
        },
        /**
         * @type {Number}
         */
        selectionStart: {
            get: function() {
                return this._textarea.selectionStart;
            },
            set: function(n) {
                this._textarea.selectionStart = n;
            }
        },
        /**
         * @type {Number}
         */
        selectionEnd: {
            get: function() {
                return this._textarea.selectionEnd;
            },
            set: function(n) {
                this._textarea.selectionEnd = n;
            }
        },
        /**
         * @type {Boolean}
         */
        focused: {
            get: function() {
                return this._focused;
            },
            set: function(bool) {
                this._focused = bool;
                if (bool) {
                    this._textarea.focus();
                } else {
                    this._textarea.blur();
                }
            }
        },
        /**
         [lang]ja]
         * プレースホルダ.
         [/lang]
         * Placeholder.
         * @type {String}
         */
        placeholder: {
            get: function() {
                return this._textarea.placeholder;
            },
            set: function(value) {
                this._textarea.placeholder = value;
            }
        },
        /**
         * Level input into text area.
         * @type {String}
         */
        value: {
            get: function() {
                return this._textarea.value;
            },
            set: function(value) {
                this._textarea.value = value;
            }
        },
        /**
         * Text area width.
         * @type {Number}
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._width = width;
                this._style.width = width + 'px';
                this._textarea.style.width = width + 'px';
            }
        },
        /**
         * Text area height.
         * @type {Number}
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._height = height;
                this._style.height = height + 'px';
                this._textarea.style.height = height + 'px';
            }
        }
    });

    /**
     * @scope enchant.widget.AlertScene
     */
    enchant.widget.AlertScene = enchant.Class.create(enchant.widget.Modal, {
        /**
         * Alert scene.
         * Interrupt other input, display alert.
         * @param {*} content Content to display.
         * @param {String} acceptName Label for acceptance button.
         * @example
         *     var alert = new ConfirmScene('Not possible', 'OK');
         *     alert.callback = function() {
         *     };
         *     alert.onaccept = function() {
         *     };
         * @constructs
         * @extends enchant.widget.Modal
         */
        initialize: function(content, acceptName) {
            var core = enchant.Core.instance;
            enchant.widget.Modal.call(this);
            this._onaccept = function() {
            };
            this.callback = function() {
            };
            acceptName = acceptName || enchant.widget._env.acceptName;

            var alert = new enchant.widget.Alert(content, acceptName);
            this.addChild(alert);
            alert.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);

            var scene = this;

            alert.onaccept = function() {
                core.popScene();
                scene._onaccept.apply(this, arguments);
            };
            alert.addEventListener(enchant.Event.ACCEPT, function() {
                scene.callback();
            });
            this.addEventListener(enchant.Event.ENTER, function() {
                Effect.popup.call(alert);
            });
        },
        /**
         * @type {Function}
         */
        onaccept: {
            get: function() {
                return this._onaccept;
            },
            set: function(func) {
                this._onaccept = func;
            }
        }
    });

    /**
     * @scope enchant.widget.ConfirmScene
     */
    enchant.widget.ConfirmScene = enchant.Class.create(enchant.widget.Modal, {
        /**
         * Confirm scene.
         * Interrupt other input, display selection screen.
         * @param {*} content Content to display.
         * @param {String} acceptName Label for agreement button.
         * @param {String} cancelName Label for cancel button.
         * @example
         *     var confirm = new ConfirmScene('Okay?', 'OK', 'NO');
         *     confirm.callback = function(bool) {
         *        // true will return for accept, false will return for cancel.
         *     };
         *     // Processing for cancel and accept can be set separately.
         *     confirm.oncancel = function() {
         *     };
         *     confirm.onaccept = function() {
         *     };
         * @constructs
         * @extends enchant.widget.Modal
         */
        initialize: function(content, acceptName, cancelName) {
            var core = enchant.Core.instance;
            enchant.widget.Modal.call(this);
            this._oncancel = function() {
            };
            this._onaccept = function() {
            };
            this.callback = function() {
            };
            cancelName = cancelName || enchant.widget._env.cancelName;
            acceptName = acceptName || enchant.widget._env.acceptName;

            var confirm = new enchant.widget.Confirm(content, acceptName, cancelName);
            this.addChild(confirm);
            confirm.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);
            var scene = this;

            confirm.oncancel = function() {
                core.popScene();
                scene._oncancel.apply(this, arguments);
            };
            confirm.onaccept = function() {
                core.popScene();
                scene._onaccept.apply(this, arguments);
            };
            confirm.addEventListener(enchant.Event.CANCEL, function() {
                scene.callback(false);
            });
            confirm.addEventListener(enchant.Event.ACCEPT, function() {
                scene.callback(true);
            });
            this.addEventListener(enchant.Event.ENTER, function() {
                Effect.popup.call(confirm);
            });
        },
        /**
         * @type {Function}
         */
        oncancel: {
            get: function() {
                return this._oncancel;
            },
            set: function(func) {
                this._oncancel = func;
            }
        },
        /**
         * @type {Function}
         */
        onaccept: {
            get: function() {
                return this._onaccept;
            },
            set: function(func) {
                this._onaccept = func;
            }
        }
    });

    /**
     * @scope enchant.widget.PromptScene
     */
    enchant.widget.PromptScene = enchant.Class.create(enchant.widget.Modal, {
        /**
         * Confirm scene.
         * Interrupt other input and display input screen.
         * When you wish to allow input to multiple lines, use {@link enchant.widget.InputScene}.
         * @param {*} content Content to display.
         * @param {String} acceptName Label for agreement button.
         * @param {String} cancelName Label for cancel button.
         * @param {String} placeholder Placeholder.
         * @example
         *     var confirm = new PromptScene('Input name', 'OK', 'cancel');
         *     confirm.placeholder = 'Name';
         *     confirm.callback = function(text) {
         *         // Input array will be returned for accept, whereas null will be returned for cancel.
         *     };
         *     // Processing for cancel and accept can be set separately.
         *     confirm.oncancel = function() {
         *     };
         *     confirm.onaccept = function(text) {
         *     };
         * @see enchant.widget.InputScene
         * @constructs
         * @extends enchant.widget.Modal
         */
        initialize: function(content, acceptName, cancelName, placeholder) {
            var core = enchant.Core.instance;
            var margin = enchant.widget._env.dialogMargin;
            enchant.widget.Modal.call(this);
            cancelName = cancelName || enchant.widget._env.cancelName;
            acceptName = acceptName || enchant.widget._env.acceptName;
            this.callback = function() {
            };
            this._oncancel = function() {
            };
            this._onaccept = function() {
            };
            placeholder = placeholder || '';

            var prompt = this._prompt = new enchant.widget.Prompt(content, acceptName, cancelName, placeholder);
            prompt.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);
            this.addChild(prompt);
            var scene = this;

            prompt.oncancel = function() {
                core.popScene();
                scene._oncancel.apply(this, arguments);
            };
            prompt.onaccept = function() {
                core.popScene();
                scene._onaccept.apply(this, arguments);
            };
            prompt.addEventListener(enchant.Event.CANCEL, function() {
                scene.callback(null);
            });
            prompt.addEventListener(enchant.Event.ACCEPT, function() {
                scene.callback(prompt.value);
            });
            this.addEventListener(enchant.Event.ENTER, function() {
                Effect.popup.call(prompt);
            });
            this.addEventListener(enchant.Event.UP_BUTTON_DOWN, function() {
                if (prompt._input.focused) {
                    prompt._input.selectionStart = 0;
                    prompt._input.selectionEnd = 0;
                }
            });
            this.addEventListener(enchant.Event.DOWN_BUTTON_DOWN, function() {
                if (prompt._input.focused) {
                    prompt._input.selectionStart = prompt._input.value.length;
                    prompt._input.selectionEnd = prompt._input.value.length;
                }
            });
            this.addEventListener(enchant.Event.LEFT_BUTTON_DOWN, function() {
                if (prompt._input.focused) {
                    prompt._input.selectionStart -= 1;
                    prompt._input.selectionEnd -= 1;
                }
            });
            this.addEventListener(enchant.Event.RIGHT_BUTTON_DOWN, function() {
                if (prompt._input.focused) {
                    prompt._input.selectionStart += 1;
                }
            });
        },
        /**
         * content of prompt
         * @type {String}
         */
        value: {
            get: function() {
                return this._prompt.value;

            },
            set: function(value) {
                this._prompt.value = value;
            }
        },
        /**
         * @type {Function}
         */
        oncancel: {
            get: function() {
                return this._oncancel;
            },
            set: function(func) {
                this._oncancel = func;
            }
        },
        /**
         * @type {Function}
         */
        onaccept: {
            get: function() {
                return this._onaccept;
            },
            set: function(func) {
                this._onaccept = func;
            }
        }
    });

    /**
     * @scope enchant.widget.InputScene
     */
    enchant.widget.InputScene = enchant.Class.create(enchant.widget.Modal, {
        /**
         * Information.
         * Interrupts other input and displays input screen.
         * Unlike {@link enchant.widget.PromptScene}, you can input to multiple lines.
         * @param {*} content Content to display.
         * @param {String} acceptName Label for agreement button.
         * @param {String} cancelName Label for cancel button.
         * @param {String} placeholder Placeholder.
         * @example
         *     var input = new InputScene('New Tweet', 'Tweet', 'Stop', '@twitter ');
         *     input.callback = function(text) {
         *         // Input array will be returned for accept, and null for cancel.
         *     };
         *     // Processing for cancel and accept can be set separately.
         *     input.oncancel = function() {
         *     };
         *     input.onaccept = function(text) {
         *     };
         * @constructs
         * @extends enchant.widget.Modal
         */
        initialize: function(text, acceptName, cancelName, placeholder) {
            var core = enchant.Core.instance;
            var minheight = enchant.widget._env.inputMinHeight;
            var maxheight = enchant.widget._env.inputMaxHeight;
            var dh = maxheight - minheight;
            this.callback = function() {
            };
            this._oncancel = function() {
            };
            this._onaccept = function() {
            };
            this._menu = null;
            cancelName = cancelName || enchant.widget._env.cancelName;
            acceptName = acceptName || enchant.widget._env.acceptName;
            placeholder = placeholder || '';

            enchant.widget.Modal.call(this);
            var scene = this;

            var cancel = new enchant.widget.Button(cancelName);
            var accept = new enchant.widget.Button(acceptName);
            var bar = new enchant.widget.NavigationBar(text, cancel, accept);
            this.addChild(bar);
            var textarea = this._textarea = new enchant.widget.InputTextArea();
            textarea.y += bar.height;
            textarea.width = core.width;
            textarea.height = maxheight;
            textarea.placeholder = placeholder;
            textarea.oncancel = function() {
                core.popScene();
                scene._oncancel.apply(this, arguments);
            };
            textarea.onaccept = function() {
                core.popScene();
                scene._onaccept.apply(this, arguments);
            };
            this.addChild(textarea);

            var _area = textarea._textarea;
            _area.onfocus = function() {
                Effect.resizeTo.call(textarea, core.width, minheight, 5, enchant.Easing.QUAD_EASEOUT);
                if (scene._menu != null) {
                    scene._menu.tl.moveBy(0, -dh, 5, enchant.Easing.QUAD_EASEOUT);
                }
            };
            _area.onblur = function() {
                Effect.resizeTo.call(textarea, core.width, maxheight, 5, enchant.Easing.QUAD_EASEOUT);
                if (scene._menu != null) {
                    scene._menu.tl.moveBy(0, dh, 5, enchant.Easing.QUAD_EASEOUT);
                }
            };
            cancel.addEventListener(enchant.Event.TOUCH_END, function() {
                textarea.dispatchEvent(new enchant.Event(enchant.Event.CANCEL));
                scene.callback(null);
            });
            accept.addEventListener(enchant.Event.TOUCH_END, function() {
                textarea.dispatchEvent(new enchant.Event(enchant.Event.ACCEPT));
                scene.callback(textarea.value);
            });
            this.addEventListener(enchant.Event.UP_BUTTON_DOWN, function() {
                if (textarea.focused) {
                    textarea.selectionStart += textarea._prev;
                    textarea.selectionEnd += textarea._prev;
                    textarea._updateVerticalDist();
                }
            });
            this.addEventListener(enchant.Event.DOWN_BUTTON_DOWN, function() {
                if (textarea.focused) {
                    textarea.selectionStart += textarea._next;
                    textarea._updateVerticalDist();
                }
            });
            this.addEventListener(enchant.Event.LEFT_BUTTON_DOWN, function() {
                if (textarea.focused) {
                    textarea.selectionStart -= 1;
                    textarea.selectionEnd -= 1;
                    textarea._updateVerticalDist();
                }
            });
            this.addEventListener(enchant.Event.RIGHT_BUTTON_DOWN, function() {
                if (textarea.focused) {
                    textarea.selectionStart += 1;
                    textarea._updateVerticalDist();
                }
            });
        },
        /**
         * @type {*}
         */
        menu: {
            get: function() {
                return this._menu;
            },
            set: function(menu) {
                if (this._menu) {
                    this.removeChild(this._menu);
                }
                this.x = 0;
                this.y = enchant.widget._env.itemHeight + enchant.widget._env.inputMaxHeight;
                this.addChild(menu);
                this._menu = menu;
            }
        },
        /**
         * Level input into text area.
         * @type {String}
         */
        value: {
            get: function() {
                return this._textarea.value;
            },
            set: function(value) {
                this._textarea.value = value;
            }
        },
        /**
         * @type {String}
         */
        placeholder: {
            get: function() {
                return this._textarea.placeholder;
            },
            set: function(str) {
                this._textarea.placeholder = str;
            }
        },
        /**
         * @type {Function}
         */
        oncancel: {
            get: function() {
                return this._oncancel;
            },
            set: function(func) {
                this._oncancel = func;
            }
        },
        /**
         * @type {Function}
         */
        onaccept: {
            get: function() {
                return this._onaccept;
            },
            set: function(func) {
                this._onaccept = func;
            }
        }
    });

    /**
     * @scope enchant.widget.ListElement
     */
    enchant.widget.ListElement = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * List items.
         * Normally {@link enchant.widget.ListItem} or {@link enchant.widget.ListItemVertical} are used.
         * @param {Number} width Element width.
         * @param {Number} height Element height.
         * @see enchant.widget.ListItem
         * @see enchant.widget.ListItemVertical
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(width, height) {
            enchant.widget.EntityGroup.call(this, width, height);
            this._content;
            this._rawContent;
        },
        /**
         * Renew change.
         */
        refresh: function() {
            var content = this._content;
            var margin = enchant.widget._env.listItemMargin;
            if (content) {
                content.alignLeftIn(this, margin).alignVerticalCenterIn(this);
            }
            this.background = this._background;
        },
        /**
         * ListElement content.
         * @type {enchant.Entity[]}
         */
        content: {
            get: function() {
                return this._rawContent;
            },
            set: function(content) {
                this._rawContent = content;
                content = enchant.widget.parseContent(content);
                if (this._content) {
                    this.removeChild(this._content);
                }
                this.addChild(content);
                this._content = content;
                this.refresh();
            }
        },
        /**
         * @type {Number}
         */
        width: {
            get: function() {
                return this._width;
            },
            set: function(width) {
                this._style.width = (this._width = width) + 'px';
                if (this.background instanceof enchant.widget.Ninepatch) {
                    this.background.width = this.width;
                }
                if (this._content) {
                    this.refresh();
                }
            }
        },
        /**
         * @type {Number}
         */
        height: {
            get: function() {
                return this._height;
            },
            set: function(height) {
                this._style.height = (this._height = height) + 'px';
                if (this.background instanceof enchant.widget.Ninepatch) {
                    this.background.height = this.height;
                }
                if (this._content) {
                    this.refresh();
                }
            }
        }
    });

    /**
     * @scope enchant.widget.ListItem
     */
    enchant.widget.ListItem = enchant.Class.create(enchant.widget.ListElement, {
        /**
         * List elements.
         * Icons and leftmost buttons can be set.
         * Use {@link enchant.widget.ListItemVertical} to set items lined up vertically.
         * @param {Number} width Element width.
         * @param {Number} height Element height.
         * @param {*} [content] ListItem content.
         * @param {enchant.Sprite|enchant.Surface} [icon] ListItem icon.
         * @param {enchant.Sprite|enchant.Surface} [icon] ListItem right side icon.
         * @see enchant.widget.ListItemVertical
         * @constructs
         * @extends enchant.widget.ListElement
         */
        initialize: function(width, height, content, icon, rightIcon) {
            var core = enchant.Core.instance;
            width = width || core.width;
            height = height || enchant.widget._env.itemHeight;
            content = content || '';
            enchant.widget.ListElement.call(this, width, height);
            this._icon;
            this._rawIcon;
            this._rightIcon;
            this._rawRightIcon;
            this.content = content;
            if (icon) {
                this.icon = icon;
            }
            if (rightIcon) {
                this.rightIcon = rightIcon;
            }
            var np = new enchant.widget.Ninepatch(this.width, this.height);
            np.src = core.assets['listItemBg.png'];
            this.background = np;
        },
        /**
         * Renew changes.
         */
        refresh: function() {
            var icon = this._icon;
            var content = this._content;
            var right = this._rightIcon;
            var margin = enchant.widget._env.listItemMargin;
            if (icon) {
                Adjust.fitToY.call(icon, this, margin, margin);
                icon.alignLeftIn(this, margin).alignVerticalCenterIn(this);
                if (content) {
                    content.alignRightOf(icon, margin).alignVerticalCenterIn(this);
                }
            } else if (content) {
                content.alignLeftIn(this, margin).alignVerticalCenterIn(this);
            }
            if (right) {
                right.alignRightIn(this, margin).alignVerticalCenterIn(this);
            }
        },
        /**
         * Icon.
         * It appear on the left.
         * @type {enchant.Sprite|enchant.Surface}
         */
        icon: {
            get: function() {
                return this._rawIcon;
            },
            set: function(icon) {
                this._rawIcon = icon;
                icon = enchant.widget.parseContent(icon);
                if (this._icon) {
                    this.removeChild(this._icon);
                }
                this.addChild(icon);
                this._icon = icon;
                this.refresh();
            }
        },
        /**
         * Icon on the right.
         * It appear on the right.
         * @type {enchant.Sprite|enchant.Surface}
         */
        rightIcon: {
            get: function() {
                return this._rawRightIcon;
            },
            set: function(right) {
                this._rawRightIcon = right;
                right = enchant.widget.parseContent(right);
                if (this._rightIcon) {
                    this.removeChild(this._rightIcon);
                }
                this.addChild(right);
                this._rightIcon = right;
                this.refresh();
            }
        }
    });

    /**
     * @scope enchant.widget.ListItemVertical
     */
    enchant.widget.ListItemVertical = enchant.Class.create(enchant.widget.ListElement, {
        /**
         * List items.
         * Header and footer can be set.
         * @param {Number} width Element width.
         * @param {Number} height Element height.
         * @param {*} [content] ListItemVertical content.
         * @param {*} [header] ListItemVertical header.
         * @param {*} [footer] ListItemVertical footer.
         * @constructs
         * @extends enchant.widget.ListElement
         */
        initialize: function(width, height, content, header, footer) {
            var core = enchant.Core.instance;
            enchant.widget.ListElement.call(this, width, height);
            this._header;
            this._rawHeader;
            this._footer;
            this._rawFooter;
            if (content) {
                this.content = content;
            }
            if (header) {
                this.header = header;
            }
            if (footer) {
                this.footer = footer;
            }
            this.refresh();
            var np = new enchant.widget.Ninepatch(this.width, this.height);
            np.src = core.assets['listItemBg.png'];
            this.background = np;
        },
        /**
         * Renew change.
         */
        refresh: function() {
            var header = this._header;
            var footer = this._footer;
            var content = this._content;
            var margin = enchant.widget._env.listItemMargin;
            if (header) {
                header.alignLeftIn(this, margin).alignTopIn(this, margin);

                Adjust.fillX.call(content, this, margin);
                if (content) {
                    content.alignLeftIn(this, margin).alignBottomOf(header, margin);
                }
            } else {
                Adjust.fillX.call(content, this, margin);
                if (content) {
                    content.alignLeftIn(this, margin).alignTopIn(this, margin);
                }
            }
            if (footer) {
                footer.alignLeftIn(this, margin).alignBottomOf(content, margin);
            }
            var height = 0;
            var p;
            var scale;
            var contents = [ header, content, footer ];
            for (prop in contents) {
                p = contents[prop];
                if (p) {
                    scale = p.scaleY || 1;
                    height += ~~(p.height * scale);
                    height += margin * 2;
                }
            }
            this._style.height = (this._height = height) + 'px';
            if (this.background instanceof enchant.widget.Ninepatch) {
                this.background.height = this.height;
            }
        },
        /**
         * Header.
         * It appear above the content.
         * @type {*}
         */
        header: {
            get: function() {
                return this._rawHeader;
            },
            set: function(header) {
                this._rawHeader = header;
                header = enchant.widget.parseContent(header);
                if (this._header) {
                    this.removeChild(this._header);
                }
                this.addChild(header);
                this._header = header;
                this.refresh();
            }
        },
        /**
         * Footer.
         * It appear below the content.
         * @type {*}
         */
        footer: {
            get: function() {
                return this._rawFooter;
            },
            set: function(footer) {
                this._rawFooter = footer;
                footer = enchant.widget.parseContent(footer);
                if (this._footer) {
                    this.removeChild(this._footer);
                }
                this.addChild(footer);
                this._footer = footer;
                this.refresh();
            }
        }
    });

    /**
     * @scope enchant.widget.ScrollView
     */
    enchant.widget.ScrollView = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Scroll view.
         * Scroll is possible for content set.
         * @param {Number} width View width.
         * @param {Number} height View height.
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(width, height) {
            enchant.widget.EntityGroup.call(this, width, height);
            this._style.overflow = 'hidden';
            this._content;
        },
        /**
         * ScrollView content.
         * @type {enchant.Entity}
         */
        content: {
            oet: function() {
                return this._content;
            },
            set: function(content) {
                if (this._content) {
                    this.removeChild(this._content);
                }
                this.addChild(content);
                this._content = content;
            }
        },
        /**
         * Scroll content.
         * Correct level will become upwards scroll.
         * @param {Number} dy Scroll level.
         */
        scroll: function(dy) {
            if (!this._content) {
                return;
            }
            if (this.height >= this._content.height) {
                this._content.y = 0;
                return;
            }
            var max = 0
            var min = this.height - this._content.height

            var sy = this._content.y + dy;
            if (sy > max) {
                dy = max - this._content.y;
            } else if (sy < min) {
                dy = min - this._content.y;
            }
            this._content.y += dy;
        }
    });

    /**
     * @scope enchant.widget.ListView
     */
    enchant.widget.ListView = enchant.Class.create(enchant.widget.ScrollView, {
        /**
         * @param {Number} width View width.
         * @param {Number} height View height.
         * @param {Boolean} draggable Sets whether or not item can be dragged.
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(width, height, draggable) {
            enchant.widget.ScrollView.call(this, width, height);
            var detector = new enchant.widget.GestureDetector(this);
            this.draggable = !!draggable;
            this.content = [];
            var dragging = null;
            var dy = 0;
            var prev = null;
            var next = null;
            var pthreshold = 0;
            var nthreshold = 0;
            this._clipping = true;

            enchant.widget.GestureDetector.gestureEvents.forEach(function(type) {
                this.addEventListener(type, function(e) {
                    var item = this.getSelectedItem(e);
                    if (item != null) {
                        item.dispatchEvent(e);
                    }
                });
            }, this);

            var removeChild = enchant.widget.EntityGroup.prototype.removeChild;
            var insertBefore = enchant.widget.EntityGroup.prototype.insertBefore;

            var that = this;
            var checkChangePos = function(direction) {
                var y = dragging.y;
                var my = dragging.height;
                var nextSibling;
                if (prev && y <= pthreshold && direction < 0) {
                    prev.y += my;
                    removeChild.call(that._content, dragging);
                    insertBefore.call(that._content, dragging, prev);
                    updateHoldStat(dragging);
                } else if (next && nthreshold <= y && direction > 0) {
                    next.y -= my;
                    removeChild.call(that._content, dragging);
                    var nextSibling = that._content.childNodes[that._content.childNodes.indexOf(next) + 1];
                    insertBefore.call(that._content, dragging, nextSibling);
                    updateHoldStat(dragging);
                }
            };

            var updateHoldStat = function(element) {
                var i = that._content.childNodes.indexOf(element);
                if (i > 0) {
                    prev = that._content.childNodes[i - 1];
                    pthreshold = prev.y + prev.height - element.height / 2;
                } else {
                    prev = null;
                }
                if (i < that._content.childNodes.length - 1) {
                    next = that._content.childNodes[i + 1];
                    nthreshold = next.y - element.height / 2;
                } else {
                    next = null;
                }
            };
            this.addEventListener(enchant.Event.ENTER_FRAME, function() {
                if (dy != 0) {
                    var old = this._content.y;
                    this.scroll(dy);
                    checkChangePos(-dy);
                    dragging.y -= this._content.y - old;
                }
            });
            this.addEventListener(enchant.Event.HOLD, function(e) {
                if (!this.draggable) {
                    return;
                }
                dragging = this.getSelectedItem(e);
                if (dragging == null) {
                    return;
                }
                dragging.opacity = 0.8;
                dragging._style.zIndex = 2;
                updateHoldStat(dragging);
            });
            this.addEventListener(enchant.Event.RELEASE, function() {
                if (!this.draggable || dragging == null) {
                    return;
                }
                dy = 0;
                if (prev) {
                    dragging.y = prev.y + prev.height;
                } else {
                    dragging.y = 0;
                }
                dragging.opacity = 1.0;
                dragging._style.zIndex = 0;
                dragging = null;
                prev = null;
                next = null;
            });
            var spd = 40;
            this.addEventListener(enchant.Event.DRAG, function(e) {
                if (!this.draggable || dragging == null) {
                    return;
                }
                checkChangePos(e.dy);
                dragging.y += e.dy;
                if (e.localY < spd) {
                    dy = spd - e.localY;
                } else if (this.height - spd < e.localY) {
                    dy = this.height - spd - e.localY;
                } else {
                    dy = 0;
                }
            });
            this.addEventListener(enchant.Event.SLIP, function(e) {
                this.scroll(e.dy);
            });
        },
        /**
         * ListView content.
         * @type {enchant.widget.ListElement[]}
         */
        content: {
            get: function() {
                return this._content.childNodes;
            },
            set: function(content) {
                var addChild = enchant.widget.EntityGroup.prototype.addChild;
                var removeChild = enchant.widget.EntityGroup.prototype.removeChild;
                if (this._content) {
                    removeChild.call(this, this._content);
                }
                var list = new List(content);
                list.width = this.width;
                addChild.call(this, list);
                this._content = list;
            }
        },
        /**
         * Acquires event target.
         * @param {enchant.Event} event
         * @return {enchant.widget.ListElement}
         */
        getSelectedItem: function(e) {
            var y = e.localY - this._content.y;
            var list = this._content;
            var child;
            var h = 0;
            for (var i = 0, l = list.childNodes.length; i < l; i++) {
                child = list.childNodes[i];
                h += child.height;
                if (h > y) {
                    return child;
                }
            }
            return null;
        },
        addChild: function(child) {
            this._content.addChild(child);
        },
        removeChild: function(child) {
            this._content.removeChild(child);
        },
        insertBefore: function(child, reference) {
            this._content.insertBefore(child, reference);
        }
    });

    var List = enchant.Class.create(enchant.widget.EntityGroup, {
        initialize: function(array) {
            var core = enchant.Core.instance;
            enchant.widget.EntityGroup.call(this);
            this.width = core.width;
            this.height = core.height;
            this._itemHeight = 0;
            var element;
            for (var i = 0, l = array.length; i < l; i++) {
                element = array[i];
                this.addChild(element);
            }

            this._dragging = null;
            this._pthreshold = 0;
            this._nthreshold = 0;
            this._index = 0;
        },
        addChild: function(child) {
            var i = this.childNodes.length;
            enchant.widget.EntityGroup.prototype.addChild.call(this, child);
            this.refresh(i - 1);
        },
        insertBefore: function(child, reference) {
            enchant.widget.EntityGroup.prototype.insertBefore.call(this, child, reference);
            var i = this.childNodes.indexOf(child);
            this.refresh(i - 1);
        },
        removeChild: function(child) {
            var i = this.childNodes.indexOf(child);
            if (i != -1) {
                enchant.widget.EntityGroup.prototype.removeChild.call(this, child);
                this.refresh(i - 1);
            }
        },
        refresh: function(i) {
            var i, l, h, start, child;
            if (i > 0) {
                start = this.childNodes[i - 1];
                h = start.y + start.height;
            } else {
                i = 0;
                h = 0;
            }
            for (l = this.childNodes.length; i < l; i++) {
                child = this.childNodes[i];
                child.y = h;
                h += child.height;
            }
            this.height = this._itemHeight = h;
        },
        _getElementByLocalPosition: function(localX, localY) {
            var child;
            var h = 0;
            for (var i = 0, l = this.childNodes.length; i < l; i++) {
                child = this.childNodes[i];
                h += child.height;
                if (h > localY) {
                    break;
                }
            }
            return child;
        }
    });

    /**
     * @scope enchant.widget.NavigationBar
     */
    enchant.widget.NavigationBar = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Navigation bar.
         * Items are set for sent, right, and left.
         * @param {*} center Object you wish to display in center.
         * @param {*} left Item you wish to display to left.
         * @param {*} right Item you wish to display to right.
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(center, left, right) {
            var core = enchant.Core.instance;
            enchant.widget.EntityGroup.call(this, core.width, enchant.widget._env.itemHeight);
            this._center;
            this._rawCenter;
            this._left;
            this._rawLeft;
            this._right;
            this._rawRight;
            this.center = center;
            if (left) {
                this.left = left;
            }
            if (right) {
                this.right = right;
            }
            this.refresh();

            var np = new enchant.widget.Ninepatch(this.width, this.height);
            np.src = core.assets['navigationBar.png'];
            this.background = np;
        },
        /**
         * Renew change.
         */
        refresh: function() {
            var center = this._center;
            var left = this._left;
            var right = this._right;
            var margin = enchant.widget._env.listItemMargin;
            if (center) {
                center.alignHorizontalCenterIn(this).alignVerticalCenterIn(this);
            }
            if (left) {
                left.alignLeftIn(this, margin).alignVerticalCenterIn(this);
            }
            if (right) {
                right.alignRightIn(this, margin).alignVerticalCenterIn(this);
            }
        },
        /**
         * Central content.
         * @type {*}
         */
        center: {
            get: function() {
                return this._rawCenter;
            },
            set: function(center) {
                this._rawCenter = center;
                center = enchant.widget.parseContent(center, enchant.widget._env.navigationBarFont);
                if (this._center) {
                    this.removeChild(this._center);
                }
                this.addChild(center);
                this._center = center;
                this.refresh();
            }
        },
        /**
         * Left content.
         * It appear in left aligned position.
         * @type {*}
         */
        left: {
            get: function() {
                return this._rawLeft;
            },
            set: function(left) {
                this._rawLeft = left;
                left = enchant.widget.parseContent(left);
                if (this._left) {
                    this.removeChild(this._left);
                }
                this.addChild(left);
                this._left = left;
                this.refresh();
            }
        },
        /**
         * Right content.
         * It appear in right aligned position.
         * @type {*}
         */
        right: {
            get: function() {
                return this._rawRight;
            },
            set: function(right) {
                this._rawRight = right;
                right = enchant.widget.parseContent(right);
                if (this._right) {
                    this.removeChild(this._right);
                }
                this.addChild(right);
                this._right = right;
                this.refresh();
            }
        }
    });

    enchant.widget.Icon = enchant.Class.create(enchant.widget.EntityGroup, {
        initialize: function(icon, text) {
            enchant.widget.EntityGroup.call(this, 44, 44);
            icon = enchant.widget.parseContent(icon);
            text = enchant.widget.parseContent(text, enchant.widget._env.font);
            var sx = 32 / icon.width;
            var sy = 32 / icon.height;
            icon.scaleX = icon.scaleY = Math.min(sx, sy);
            icon.alignHorizontalCenterIn(this).alignTopIn(this);
            text.alignHorizontalCenterIn(this).alignBottomOf(icon, -7);
            this.addChild(icon);
            this.addChild(text);
        }
    });

    /**
     * @scope enchant.widget.IconMenu
     */
    enchant.widget.IconMenu = enchant.Class.create(enchant.widget.EntityGroup, {
        /**
         * Menu with items lined up horizontally.
         * @param {enchant.Entity[]} Array of button.
         * @constructs
         * @extends enchant.widget.EntityGroup
         */
        initialize: function(buttons) {
            var core = enchant.Core.instance;
            if (!(buttons instanceof Array)) {
                buttons = Array.prototype.slice.call(arguments);
            }
            enchant.widget.EntityGroup.call(this, core.width, enchant.widget._env.itemHeight);
            this._bgs = [];
            this._icons = [];
            this.content = buttons;
            this.refresh();
            this._bgs.forEach(function(bg) {
                var width = bg.width;
                var height = bg.height;
                var np = new enchant.widget.Ninepatch(width, height);
                np.src = core.assets['iconMenuBg.png'];
                bg.image = np;
            });
        },
        /**
         * Renew change.
         */
        getSelectedItem: function(e) {
            var x = e.localX;
            var list = this._bgs;
            var child;
            var w = 0;
            for (var i = 0, l = list.childNodes.length; i < l; i++) {
                child = list.childNodes[i];
                w += child.width;
                if (w > x) {
                    return this._icons[i];
                }
            }
            return null;
        },
        refresh: function() {
            var icon, bg, bgwidth;
            var margin = enchant.widget._env.listItemMargin;
            var arr = distribute(this.width, this._icons.length);
            var _width = 0;
            var menu = this;

            for (var i = 0, l = this._icons.length; i < l; i++) {
                bgwidth = arr[i];
                icon = this._icons[i];
                bg = this._bgs[i];
                bg.width = bgwidth;
                bg.height = this.height;
                bg.image.resize(bg.width, bg.height);
                bg.x = _width;

                icon.addEventListener(enchant.Event.TOUCH_END, (function(bg) {
                    return function(e) {
                        bg.dispatchEvent(e);
                    };
                })(bg));
                bg.addEventListener(enchant.Event.TOUCH_END, (function(i, elem) {
                    return function(e) {
                        var evt = new enchant.Event(enchant.Event.TAP);
                        evt.x = e.x;
                        evt.y = e.y;
                        evt.index = i;
                        evt.element = elem;
                        menu.dispatchEvent(evt);
                    };
                })(i, icon));

                icon.alignHorizontalCenterIn(bg).alignVerticalCenterIn(bg);
                icon.x += _width;

                _width += bg.width;
            }
        },
        addChild: function(child) {
            var core = enchant.Core.instance;
            var addChild = enchant.widget.EntityGroup.prototype.addChild;
            var size = enchant.widget._env.itemHeight;
            var sp = new enchant.Sprite(size, size);
            addChild.call(this, sp);
            this._bgs.push(sp);
            addChild.call(this, child);
            this._icons.push(child);
            var np = new enchant.widget.Ninepatch(sp.width, sp.height);
            np.src = core.assets['iconMenuBg.png'];
            sp.image = np;
            this.refresh();
        },
        insertBefore: function(child, target) {
            var core = enchant.Core.instance;
            var insertBefore = enchant.widget.EntityGroup.prototype.insertBefore;
            var i = this._icons.indexOf(target);
            var size = enchant.widget._env.itemHeight;
            var sp, np;
            if (i != -1) {
                target = this._bgs[i];
                sp = new enchant.Sprite(size, size);
                insertBefore.call(this, sp, target);
                this._bgs.splice(i, 0, sp);
                insertBefore.call(this, child, target);
                this._icons.splice(i, 0, child);
                np = new enchant.widget.Ninepatch(sp.width, sp.height);
                np.src = core.assets['iconMenuBg.png'];
                sp.image = np;
                this.refresh();
            }
        },
        removeChild: function(child) {
            var removeChild = enchant.widget.EntityGroup.prototype.removeChild;
            var i = this._icons.indexOf(child);
            if (i != -1) {
                var bg = this._bgs[this._bgs.length - 1];
                removeChild.call(this, bg);
                this._bgs.pop();
                removeChild.call(this, child);
                this._icons.splice(i, 1);
                this.refresh();
            }
        },
        /**
         * Set icon.
         * @param {enchant.Entity[]} content Array for object you wish to display.
         */
        content: {
            get: function() {
                return this._icons;
            },
            set: function(content) {
                var removeChild = enchant.widget.EntityGroup.prototype.removeChild;
                var menu = this;
                if (this.childNodes) {
                    this.childNodes.forEach(function(child) {
                        removeChild.call(menu, child);
                    });
                }
                content.forEach(function(child) {
                    menu.addChild(child);
                });
            }
        }
    });

})();


// Generated by CoffeeScript 1.3.1
var RMusic, SeClick, SeCorrect, bgm, se_click, se_correct, startBGM, stopBGM;

bgm = se_click = se_correct = null;

RMusic = (function() {

  RMusic.name = 'RMusic';

  function RMusic(src) {
    var media;
    media = new Media(src, this.onSuccess, this.onError, this.onChange);
    this.media = media;
    this.src = src;
    this.timer = null;
    this.playable = 1;
  }

  RMusic.prototype.onSuccess = function() {};

  RMusic.prototype.onError = function(error) {};

  RMusic.prototype.onChange = function() {};

  RMusic.prototype.play = function() {
    var music;
    if (!this.playable) {
      return;
    }
    this.playable = 0;
    if (this.timer === null) {
      music = this;
      music.media.play();
      music.start = setInterval(function() {
        var media;
        media = music.media;
        return media.getCurrentPosition(function(position) {
          if (position > 0) {
            clearInterval(music.start);
            music.start = null;
            return music.timer = setInterval(function() {
              return media.getCurrentPosition(function(position) {
                var src;
                if (position < 0) {
                  music.stop();
                  src = music.src;
                  bgm = new RMusic(src);
                  return bgm.play();
                }
              });
            }, 1000);
          }
        });
      }, 5000);
    }
    return this;
  };

  RMusic.prototype.stop = function() {
    var music;
    music = this;
    clearInterval(music.start);
    music.start = null;
    clearInterval(music.timer);
    music.timer = null;
    music.media.stop();
    this.playable = 1;
    return this;
  };

  return RMusic;

})();

document.addEventListener('pause', function() {
  if (bgm) {
    bgm.stop();
  }
  return bgm = null;
}, false);

startBGM = function() {
  if (bgm) {
    bgm.stop();
  } else {
    bgm = new RMusic('file:///android_asset/www/bgm.mp3');
  }
  return bgm.play();
};

stopBGM = function() {
  if (bgm) {
    bgm.stop();
  }
  return bgm = null;
};

startCorrect = function() {
  if (se_correct) {
    se_correct.stop;
  } else {
    se_correct = new Media('file:///android_asset/www/correct.mp3');
  }
  return se_correct.play();
};

startClick = function() {
  if (se_click) {
    se_click.stop;
  } else {
    se_click = new Media('file:///android_asset/www/click.mp3');
  }
  return se_click.play();
};









//function startBGM() {}
//function stopBGM() {}
//function startCorrect() {}
//function startClick() {}
//



var bgm_orig = bgm = se_correct = se_click = null;

bgm_orig = enchant.Sound.load(
    'bgm.mp3',
    '',
    function() {}
);
se_correct = enchant.Sound.load(
    'correct.mp3',
    '',
    function() {}
);

se_click = enchant.Sound.load(
    'click.mp3',
    '',
    function() {}
);

function startBGM() {
    if (bgm) {
        bgm.stop();
    } else {
        bgm = bgm_orig;
    }
    bgm_loop = new Sprite;
    bgm_loop.addEventListener(Event.ENTER_FRAME, function() {
            bgm_loop.removeEventListener(Event.ENTER_FRAME, arguments.callee);
            if(bgm) {
                bgm.play();
            }
    });
    game = Game.instance;
    game.currentScene.addChild(bgm_loop);
}

function stopBGM() {
    if (bgm) {
        bgm.stop();
    }
    bgm = null;
}

function startCorrect() {
    if (se_correct) {
        se_correct.stop();
        se_correct.play();
    }
}
function startClick() {
    if (se_click) {
        se_click.stop();
        se_click.play();
    }
}

